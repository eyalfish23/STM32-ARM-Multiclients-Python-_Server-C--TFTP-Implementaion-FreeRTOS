
ServerTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e0c  08019974  08019974  00029974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d780  0801d780  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801d780  0801d780  0002d780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d788  0801d788  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d788  0801d788  0002d788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d78c  0801d78c  0002d78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801d790  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dafc  20000084  0801d814  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000db80  0801d814  0003db80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f936  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009215  00000000  00000000  0007f9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027e8  00000000  00000000  00088c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002698  00000000  00000000  0008b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039b4b  00000000  00000000  0008da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e593  00000000  00000000  000c75cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a0be  00000000  00000000  00105b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021fc1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aff4  00000000  00000000  0021fc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801995c 	.word	0x0801995c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	0801995c 	.word	0x0801995c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	200000a0 	.word	0x200000a0
 8000608:	20000154 	.word	0x20000154

0800060c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061a:	2201      	movs	r2, #1
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <__io_putchar+0x20>)
 800061e:	f004 fe37 	bl	8005290 <HAL_UART_Transmit>
	return ch;
 8000622:	687b      	ldr	r3, [r7, #4]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20004498 	.word	0x20004498

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f001 faa2 	bl	8001b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f845 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f909 	bl	8000854 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000642:	f000 f8a9 	bl	8000798 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000646:	f000 f8d7 	bl	80007f8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //Read files from flash memory
  if(read_data_from_flash_memory(&file_index)<0)
 800064a:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0x84>)
 800064c:	f000 feb4 	bl	80013b8 <read_data_from_flash_memory>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	da01      	bge.n	800065a <main+0x2a>
  {
 	 Error_Handler();
 8000656:	f001 f805 	bl	8001664 <Error_Handler>
  }

  //Print stored files (If any)
  print_stored_files(&file_index);
 800065a:	4816      	ldr	r0, [pc, #88]	; (80006b4 <main+0x84>)
 800065c:	f000 ff4c 	bl	80014f8 <print_stored_files>
  printf("TFTP Server start working\r\n");
 8000660:	4815      	ldr	r0, [pc, #84]	; (80006b8 <main+0x88>)
 8000662:	f018 f907 	bl	8018874 <puts>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  vSemaphoreCreateBinary(flash_mem_semph);
 8000666:	2203      	movs	r2, #3
 8000668:	2100      	movs	r1, #0
 800066a:	2001      	movs	r0, #1
 800066c:	f006 ff3e 	bl	80074ec <xQueueGenericCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <main+0x8c>)
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <main+0x8c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <main+0x5c>
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0x8c>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	f006 ffde 	bl	8007648 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <main+0x90>)
 800068e:	1d3c      	adds	r4, r7, #4
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 fab5 	bl	8006c12 <osThreadCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <main+0x94>)
 80006ac:	6013      	str	r3, [r2, #0]
  //Dynamic task allocation

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f006 fa99 	bl	8006be4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x82>
 80006b4:	20000554 	.word	0x20000554
 80006b8:	08019994 	.word	0x08019994
 80006bc:	20000558 	.word	0x20000558
 80006c0:	080199b0 	.word	0x080199b0
 80006c4:	20004494 	.word	0x20004494

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f017 ff94 	bl	8018604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ec:	f003 f9ca 	bl	8003a84 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemClock_Config+0xc8>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xcc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <SystemClock_Config+0xcc>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000728:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800073c:	2348      	movs	r3, #72	; 0x48
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f003 f9a9 	bl	8003aa4 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 ff84 	bl	8001664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fc37 	bl	8003fec <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000784:	f000 ff6e 	bl	8001664 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART3_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART3_UART_Init+0x58>)
 80007dc:	f004 fd0a 	bl	80051f4 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 ff3d 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20004498 	.word	0x20004498
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000802:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2206      	movs	r2, #6
 8000808:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2201      	movs	r2, #1
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	f002 ffd9 	bl	80037f2 <HAL_PCD_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 ff0d 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000451c 	.word	0x2000451c

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <MX_GPIO_Init+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a45      	ldr	r2, [pc, #276]	; (8000984 <MX_GPIO_Init+0x130>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_GPIO_Init+0x130>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <MX_GPIO_Init+0x130>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3f      	ldr	r2, [pc, #252]	; (8000984 <MX_GPIO_Init+0x130>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <MX_GPIO_Init+0x130>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_GPIO_Init+0x130>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a39      	ldr	r2, [pc, #228]	; (8000984 <MX_GPIO_Init+0x130>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <MX_GPIO_Init+0x130>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <MX_GPIO_Init+0x130>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a33      	ldr	r2, [pc, #204]	; (8000984 <MX_GPIO_Init+0x130>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <MX_GPIO_Init+0x130>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <MX_GPIO_Init+0x130>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <MX_GPIO_Init+0x130>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <MX_GPIO_Init+0x130>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_GPIO_Init+0x130>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_GPIO_Init+0x130>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_GPIO_Init+0x130>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x134>)
 8000902:	f002 ff5d 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2140      	movs	r1, #64	; 0x40
 800090a:	4820      	ldr	r0, [pc, #128]	; (800098c <MX_GPIO_Init+0x138>)
 800090c:	f002 ff58 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_GPIO_Init+0x13c>)
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <MX_GPIO_Init+0x140>)
 8000926:	f002 fd9f 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092a:	f244 0381 	movw	r3, #16513	; 0x4081
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_GPIO_Init+0x134>)
 8000944:	f002 fd90 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <MX_GPIO_Init+0x138>)
 8000960:	f002 fd82 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_GPIO_Init+0x138>)
 8000978:	f002 fd76 	bl	8003468 <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3730      	adds	r7, #48	; 0x30
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021800 	.word	0x40021800
 8000990:	10110000 	.word	0x10110000
 8000994:	40020800 	.word	0x40020800

08000998 <udp_server_recv>:

/* USER CODE BEGIN 4 */
static void udp_server_recv(void *arg, struct udp_pcb *upcb, struct pbuf *p,const ip_addr_t *addr, u16_t port)
{
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
	//Waiting for clients
	struct Session *session=NULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t num_bytes_filename,num_bytes_mode;

	session=(struct Session*)malloc(sizeof(struct Session));
 80009aa:	2040      	movs	r0, #64	; 0x40
 80009ac:	f017 fde4 	bl	8018578 <malloc>
 80009b0:	4603      	mov	r3, r0
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
	session->client_port=port;
 80009b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80009ba:	801a      	strh	r2, [r3, #0]
	session->host_addr=*addr;
 80009bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	605a      	str	r2, [r3, #4]
	memcpy(&session->session_opcode,p->payload,2);//get opcode (2B)
 80009c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c6:	3308      	adds	r3, #8
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	6852      	ldr	r2, [r2, #4]
 80009cc:	8812      	ldrh	r2, [r2, #0]
 80009ce:	b292      	uxth	r2, r2
 80009d0:	801a      	strh	r2, [r3, #0]
	num_bytes_filename=sprintf((char*)session->filename,"%s",(char*)p->payload+2); //n bytes filename
 80009d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d4:	f103 000a 	add.w	r0, r3, #10
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	3302      	adds	r3, #2
 80009de:	461a      	mov	r2, r3
 80009e0:	491e      	ldr	r1, [pc, #120]	; (8000a5c <udp_server_recv+0xc4>)
 80009e2:	f018 f809 	bl	80189f8 <siprintf>
 80009e6:	4603      	mov	r3, r0
 80009e8:	867b      	strh	r3, [r7, #50]	; 0x32
	memcpy(&session->unused1,p->payload+2+num_bytes_filename+1,1); //1 byte unused
 80009ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ec:	3328      	adds	r3, #40	; 0x28
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	6851      	ldr	r1, [r2, #4]
 80009f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80009f4:	3203      	adds	r2, #3
 80009f6:	440a      	add	r2, r1
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	701a      	strb	r2, [r3, #0]
	num_bytes_mode=sprintf((char*)session->mode,"%s",(char*)p->payload+2+num_bytes_filename+2); //n bytes mode
 80009fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009fe:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000a08:	3304      	adds	r3, #4
 8000a0a:	4413      	add	r3, r2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4913      	ldr	r1, [pc, #76]	; (8000a5c <udp_server_recv+0xc4>)
 8000a10:	f017 fff2 	bl	80189f8 <siprintf>
 8000a14:	4603      	mov	r3, r0
 8000a16:	863b      	strh	r3, [r7, #48]	; 0x30
	memcpy(&session->unused2, p->payload+2+num_bytes_filename+2+num_bytes_mode+1,1); //1 byte unused
 8000a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1a:	3329      	adds	r3, #41	; 0x29
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	6851      	ldr	r1, [r2, #4]
 8000a20:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8000a22:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000a24:	4402      	add	r2, r0
 8000a26:	3205      	adds	r2, #5
 8000a28:	440a      	add	r2, r1
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	701a      	strb	r2, [r3, #0]

	pbuf_free(p);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f00d ff1c 	bl	800e86c <pbuf_free>

	//Create Session for this client
	osThreadDef(defaultSessionTask, vSessionTask, osPriorityNormal, 0, 256);
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <udp_server_recv+0xc8>)
 8000a36:	f107 0414 	add.w	r4, r7, #20
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(defaultSessionTask), session);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f006 f8df 	bl	8006c12 <osThreadCreate>

}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	; 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5c:	080199cc 	.word	0x080199cc
 8000a60:	080199d0 	.word	0x080199d0

08000a64 <vSessionTask>:

void vSessionTask(void const *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	f5ad 6dd1 	sub.w	sp, sp, #1672	; 0x688
 8000a6a:	af02      	add	r7, sp, #8
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	6018      	str	r0, [r3, #0]
	struct Session *session=NULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	uint8_t *send_packet=NULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
	uint16_t client_port,opcode,blocknum,get_blocknum,received_opcode,num_bytes_data;
	uint8_t i,file_ref=-1,show_none_size=9;
 8000a7c:	23ff      	movs	r3, #255	; 0xff
 8000a7e:	f887 367a 	strb.w	r3, [r7, #1658]	; 0x67a
 8000a82:	2309      	movs	r3, #9
 8000a84:	f887 3653 	strb.w	r3, [r7, #1619]	; 0x653
	int sockfd,block_len,get_files_buffer_size=0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
	socklen_t len,res;
	struct sockaddr_in servaddr,client_addr;
	uint8_t buffer[RECEIVED_PACKET_MAX_LEN];
	uint8_t flash_mem_buffer[DATA_MAX_SIZE];
	ip_addr_t host_addr;
	char *get_files_buffer=NULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670


	session=(struct Session*)argument;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674

	client_port=session->client_port;
 8000a9c:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	f8a7 366e 	strh.w	r3, [r7, #1646]	; 0x66e
	host_addr=session->host_addr;
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	f8d7 2674 	ldr.w	r2, [r7, #1652]	; 0x674
 8000aae:	6852      	ldr	r2, [r2, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
	opcode=session->session_opcode;
 8000ab2:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8000ab6:	891b      	ldrh	r3, [r3, #8]
 8000ab8:	f8a7 365a 	strh.w	r3, [r7, #1626]	; 0x65a


	memset(&client_addr,0,sizeof(client_addr));
 8000abc:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f017 fd9d 	bl	8018604 <memset>
	memset(&servaddr,0,sizeof(servaddr));
 8000aca:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000ace:	2210      	movs	r2, #16
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f017 fd96 	bl	8018604 <memset>

	bzero(&client_addr, sizeof(client_addr));
 8000ad8:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000adc:	461a      	mov	r2, r3
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	6053      	str	r3, [r2, #4]
 8000ae4:	6093      	str	r3, [r2, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
	client_addr.sin_family=AF_INET; // IPv4
 8000ae8:	2302      	movs	r3, #2
 8000aea:	f887 3629 	strb.w	r3, [r7, #1577]	; 0x629
	client_addr.sin_addr.s_addr=host_addr.addr;
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
	client_addr.sin_port = htons(client_port);
 8000af8:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00c fad7 	bl	800d0b0 <lwip_htons>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f8a7 362a 	strh.w	r3, [r7, #1578]	; 0x62a
	len=sizeof(client_addr);
 8000b08:	2310      	movs	r3, #16
 8000b0a:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0))<0)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	2002      	movs	r0, #2
 8000b14:	f00b ff30 	bl	800c978 <lwip_socket>
 8000b18:	f8c7 0668 	str.w	r0, [r7, #1640]	; 0x668
 8000b1c:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	da0d      	bge.n	8000b40 <vSessionTask+0xdc>
	{
	        printf("Socket creation failed\r\n");
 8000b24:	48c4      	ldr	r0, [pc, #784]	; (8000e38 <vSessionTask+0x3d4>)
 8000b26:	f017 fea5 	bl	8018874 <puts>
	        free(session);
 8000b2a:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8000b2e:	f017 fd2b 	bl	8018588 <free>
	        session=NULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	        vTaskDelete(NULL);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f007 fdab 	bl	8008694 <vTaskDelete>
	        return;
 8000b3e:	e3b2      	b.n	80012a6 <vSessionTask+0x842>
	}

	bzero(&servaddr, sizeof(servaddr));
 8000b40:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000b44:	461a      	mov	r2, r3
 8000b46:	2300      	movs	r3, #0
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	6053      	str	r3, [r2, #4]
 8000b4c:	6093      	str	r3, [r2, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
	servaddr.sin_family=AF_INET; // IPv4
 8000b50:	2302      	movs	r3, #2
 8000b52:	f887 3639 	strb.w	r3, [r7, #1593]	; 0x639
	servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f00c fabf 	bl	800d0da <lwip_htonl>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
	servaddr.sin_port=htons(client_port);
 8000b62:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00c faa2 	bl	800d0b0 <lwip_htons>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f8a7 363a 	strh.w	r3, [r7, #1594]	; 0x63a

	//Bind client_port to socket
	if (bind(sockfd,(const struct sockaddr*)&servaddr,sizeof(servaddr))<0)
 8000b72:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000b76:	2210      	movs	r2, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000b7e:	f00b fa67 	bl	800c050 <lwip_bind>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da0d      	bge.n	8000ba4 <vSessionTask+0x140>
	{
		printf("Bind failed\r\n");
 8000b88:	48ac      	ldr	r0, [pc, #688]	; (8000e3c <vSessionTask+0x3d8>)
 8000b8a:	f017 fe73 	bl	8018874 <puts>
		free(session);
 8000b8e:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8000b92:	f017 fcf9 	bl	8018588 <free>
		session=NULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
		vTaskDelete(NULL);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f007 fd79 	bl	8008694 <vTaskDelete>
	    return;
 8000ba2:	e380      	b.n	80012a6 <vSessionTask+0x842>
	}

	printf("Client successfully created and binded to port: %d\r\n",client_port);
 8000ba4:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 8000ba8:	4619      	mov	r1, r3
 8000baa:	48a5      	ldr	r0, [pc, #660]	; (8000e40 <vSessionTask+0x3dc>)
 8000bac:	f017 fddc 	bl	8018768 <iprintf>
	len=sizeof(client_addr);
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648


		if(opcode==show_files)
 8000bb6:	f8b7 365a 	ldrh.w	r3, [r7, #1626]	; 0x65a
 8000bba:	2209      	movs	r2, #9
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d175      	bne.n	8000cac <vSessionTask+0x248>
		{
			printf("here\r\n");
 8000bc0:	48a0      	ldr	r0, [pc, #640]	; (8000e44 <vSessionTask+0x3e0>)
 8000bc2:	f017 fe57 	bl	8018874 <puts>
			//Show files
			get_files_buffer=malloc(70*sizeof(*get_files_buffer));
 8000bc6:	2046      	movs	r0, #70	; 0x46
 8000bc8:	f017 fcd6 	bl	8018578 <malloc>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
			get_all_files(get_files_buffer,&get_files_buffer_size,&file_index);
 8000bd2:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8000bd6:	4a9c      	ldr	r2, [pc, #624]	; (8000e48 <vSessionTask+0x3e4>)
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f8d7 0670 	ldr.w	r0, [r7, #1648]	; 0x670
 8000bde:	f000 fcbf 	bl	8001560 <get_all_files>

			printf("%d\r\n",get_files_buffer_size);
 8000be2:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4898      	ldr	r0, [pc, #608]	; (8000e4c <vSessionTask+0x3e8>)
 8000bea:	f017 fdbd 	bl	8018768 <iprintf>
			if(get_files_buffer_size==0)
 8000bee:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d11e      	bne.n	8000c34 <vSessionTask+0x1d0>
			{
				printf("is 0\r\n");
 8000bf6:	4896      	ldr	r0, [pc, #600]	; (8000e50 <vSessionTask+0x3ec>)
 8000bf8:	f017 fe3c 	bl	8018874 <puts>
				//No files to show
				//Send back to client
				send_packet=(uint8_t*)malloc(1*sizeof(uint8_t));
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f017 fcbb 	bl	8018578 <malloc>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000c08:	f897 2653 	ldrb.w	r2, [r7, #1619]	; 0x653
				memcpy(send_packet,&show_none_size,1);
 8000c0c:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000c10:	701a      	strb	r2, [r3, #0]
				//Send packet containing file's content back to client
				sendto(sockfd,send_packet,1,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8000c12:	2310      	movs	r3, #16
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8000c24:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000c28:	f00b fdf4 	bl	800c814 <lwip_sendto>
				printf("sent\r\n");
 8000c2c:	4889      	ldr	r0, [pc, #548]	; (8000e54 <vSessionTask+0x3f0>)
 8000c2e:	f017 fe21 	bl	8018874 <puts>
 8000c32:	e01f      	b.n	8000c74 <vSessionTask+0x210>
			}
			else
			{
				//Send back to client
				send_packet=(uint8_t*)malloc(get_files_buffer_size*sizeof(uint8_t));
 8000c34:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f017 fc9d 	bl	8018578 <malloc>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
				memcpy(send_packet,get_files_buffer,get_files_buffer_size);
 8000c44:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8000c4e:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8000c52:	f017 fcaf 	bl	80185b4 <memcpy>
				//Send packet containing file's content back to client
				sendto(sockfd,send_packet,get_files_buffer_size,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8000c56:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8000c6c:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000c70:	f00b fdd0 	bl	800c814 <lwip_sendto>
			}

			printf("sent\r\n");
 8000c74:	4877      	ldr	r0, [pc, #476]	; (8000e54 <vSessionTask+0x3f0>)
 8000c76:	f017 fdfd 	bl	8018874 <puts>
			free(send_packet);
 8000c7a:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8000c7e:	f017 fc83 	bl	8018588 <free>
			send_packet=NULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
			free(get_files_buffer);
 8000c88:	f8d7 0670 	ldr.w	r0, [r7, #1648]	; 0x670
 8000c8c:	f017 fc7c 	bl	8018588 <free>
			get_files_buffer=NULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
			//Close Session
			free(session);
 8000c96:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8000c9a:	f017 fc75 	bl	8018588 <free>
			session=NULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
			vTaskDelete(NULL);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f007 fcf5 	bl	8008694 <vTaskDelete>
			return;
 8000caa:	e2fc      	b.n	80012a6 <vSessionTask+0x842>
		}else if(opcode==read_opcode)
 8000cac:	f8b7 365a 	ldrh.w	r3, [r7, #1626]	; 0x65a
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f040 80b6 	bne.w	8000e24 <vSessionTask+0x3c0>
		{
				//Read request
				//Search for file in the memory
				for(i=0;i<file_index;i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 367b 	strb.w	r3, [r7, #1659]	; 0x67b
 8000cbe:	e01b      	b.n	8000cf8 <vSessionTask+0x294>
				{
					if(strcmp((char*)session->filename,(char*)files[i].filename)==0)
 8000cc0:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8000cc4:	f103 020a 	add.w	r2, r3, #10
 8000cc8:	f897 367b 	ldrb.w	r3, [r7, #1659]	; 0x67b
 8000ccc:	f240 411e 	movw	r1, #1054	; 0x41e
 8000cd0:	fb01 f303 	mul.w	r3, r1, r3
 8000cd4:	4960      	ldr	r1, [pc, #384]	; (8000e58 <vSessionTask+0x3f4>)
 8000cd6:	440b      	add	r3, r1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4610      	mov	r0, r2
 8000cdc:	f7ff fa98 	bl	8000210 <strcmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <vSessionTask+0x28a>
					{
						file_ref=i;
 8000ce6:	f897 367b 	ldrb.w	r3, [r7, #1659]	; 0x67b
 8000cea:	f887 367a 	strb.w	r3, [r7, #1658]	; 0x67a
				for(i=0;i<file_index;i++)
 8000cee:	f897 367b 	ldrb.w	r3, [r7, #1659]	; 0x67b
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f887 367b 	strb.w	r3, [r7, #1659]	; 0x67b
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <vSessionTask+0x3e4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	f897 267b 	ldrb.w	r2, [r7, #1659]	; 0x67b
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d3dd      	bcc.n	8000cc0 <vSessionTask+0x25c>

				//Send data back(opcode=1)
				//2B (opcode=3) | 2B (block number) | 0-512B (Block data)
				if(file_ref>=0) //file has been found
				{
					blocknum=1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f8a7 3658 	strh.w	r3, [r7, #1624]	; 0x658
					block_len=strlen((char*)files[file_ref].data_content);
 8000d0a:	f897 367a 	ldrb.w	r3, [r7, #1658]	; 0x67a
 8000d0e:	f240 421e 	movw	r2, #1054	; 0x41e
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	3318      	adds	r3, #24
 8000d18:	4a4f      	ldr	r2, [pc, #316]	; (8000e58 <vSessionTask+0x3f4>)
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3306      	adds	r3, #6
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa80 	bl	8000224 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
					if(block_len<BLOCK_SIZE)
 8000d2a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8000d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d32:	da39      	bge.n	8000da8 <vSessionTask+0x344>
					{
						//Send block len
						send_packet=(uint8_t*)malloc(4+block_len);
 8000d34:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8000d38:	3304      	adds	r3, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f017 fc1c 	bl	8018578 <malloc>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000d46:	2203      	movs	r2, #3
						memcpy(send_packet,&data_opcode,2);
 8000d48:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000d4c:	801a      	strh	r2, [r3, #0]
						memcpy(send_packet+2,&blocknum,2);
 8000d4e:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000d52:	3302      	adds	r3, #2
 8000d54:	f8b7 2658 	ldrh.w	r2, [r7, #1624]	; 0x658
 8000d58:	801a      	strh	r2, [r3, #0]
						memcpy(send_packet+4,files[file_ref].data_content+(blocknum-1),block_len);
 8000d5a:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000d5e:	1d18      	adds	r0, r3, #4
 8000d60:	f897 367a 	ldrb.w	r3, [r7, #1658]	; 0x67a
 8000d64:	f240 421e 	movw	r2, #1054	; 0x41e
 8000d68:	fb02 f303 	mul.w	r3, r2, r3
 8000d6c:	3318      	adds	r3, #24
 8000d6e:	4a3a      	ldr	r2, [pc, #232]	; (8000e58 <vSessionTask+0x3f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	1d9a      	adds	r2, r3, #6
 8000d74:	f8b7 3658 	ldrh.w	r3, [r7, #1624]	; 0x658
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8000d80:	4619      	mov	r1, r3
 8000d82:	f017 fc17 	bl	80185b4 <memcpy>
						//Send packet containing file's content back to client
						sendto(sockfd,send_packet,4+block_len,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8000d86:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	2310      	movs	r3, #16
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8000d9e:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000da2:	f00b fd37 	bl	800c814 <lwip_sendto>
 8000da6:	e035      	b.n	8000e14 <vSessionTask+0x3b0>
					}
					else
					{
						//Send max block num - 512 Bytes
						send_packet=(uint8_t*)malloc(4+BLOCK_SIZE);
 8000da8:	f44f 7001 	mov.w	r0, #516	; 0x204
 8000dac:	f017 fbe4 	bl	8018578 <malloc>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000db6:	f8b7 265a 	ldrh.w	r2, [r7, #1626]	; 0x65a
						memcpy(send_packet,&opcode,2);
 8000dba:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000dbe:	801a      	strh	r2, [r3, #0]
						memcpy(send_packet+2,&blocknum,2);
 8000dc0:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	f8b7 2658 	ldrh.w	r2, [r7, #1624]	; 0x658
 8000dca:	801a      	strh	r2, [r3, #0]
						memcpy(send_packet+4,files[file_ref].data_content+(blocknum-1),BLOCK_SIZE);
 8000dcc:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000dd0:	1d18      	adds	r0, r3, #4
 8000dd2:	f897 367a 	ldrb.w	r3, [r7, #1658]	; 0x67a
 8000dd6:	f240 421e 	movw	r2, #1054	; 0x41e
 8000dda:	fb02 f303 	mul.w	r3, r2, r3
 8000dde:	3318      	adds	r3, #24
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <vSessionTask+0x3f4>)
 8000de2:	4413      	add	r3, r2
 8000de4:	1d9a      	adds	r2, r3, #6
 8000de6:	f8b7 3658 	ldrh.w	r3, [r7, #1624]	; 0x658
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	4619      	mov	r1, r3
 8000df4:	f017 fbde 	bl	80185b4 <memcpy>
						//Send packet containing file's content back to client
						sendto(sockfd,send_packet,4+BLOCK_SIZE,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8000df8:	2310      	movs	r3, #16
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000e08:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8000e0c:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000e10:	f00b fd00 	bl	800c814 <lwip_sendto>
					}

					free(send_packet);
 8000e14:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8000e18:	f017 fbb6 	bl	8018588 <free>
					send_packet=NULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000e22:	e0ac      	b.n	8000f7e <vSessionTask+0x51a>
					vTaskDelete(NULL);
					return;
				}


			}else if(opcode==write_opcode) //Write request from client
 8000e24:	f8b7 365a 	ldrh.w	r3, [r7, #1626]	; 0x65a
 8000e28:	2202      	movs	r2, #2
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	f040 8099 	bne.w	8000f62 <vSessionTask+0x4fe>
			{
				//Write request (OPCODE = 2)

				//Check if filename already exists
				for(i=0;i<file_index;i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 367b 	strb.w	r3, [r7, #1659]	; 0x67b
 8000e36:	e060      	b.n	8000efa <vSessionTask+0x496>
 8000e38:	080199ec 	.word	0x080199ec
 8000e3c:	08019a04 	.word	0x08019a04
 8000e40:	08019a14 	.word	0x08019a14
 8000e44:	08019a4c 	.word	0x08019a4c
 8000e48:	20000554 	.word	0x20000554
 8000e4c:	08019a54 	.word	0x08019a54
 8000e50:	08019a5c 	.word	0x08019a5c
 8000e54:	08019a64 	.word	0x08019a64
 8000e58:	20004924 	.word	0x20004924
				{
					if(strcmp((char*)session->filename,(char*)files[i].filename)==0)
 8000e5c:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8000e60:	f103 020a 	add.w	r2, r3, #10
 8000e64:	f897 367b 	ldrb.w	r3, [r7, #1659]	; 0x67b
 8000e68:	f240 411e 	movw	r1, #1054	; 0x41e
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	49d8      	ldr	r1, [pc, #864]	; (80011d4 <vSessionTask+0x770>)
 8000e72:	440b      	add	r3, r1
 8000e74:	4619      	mov	r1, r3
 8000e76:	4610      	mov	r0, r2
 8000e78:	f7ff f9ca 	bl	8000210 <strcmp>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d136      	bne.n	8000ef0 <vSessionTask+0x48c>
					{
						//File already exists
						printf("File already exists\r\n");
 8000e82:	48d5      	ldr	r0, [pc, #852]	; (80011d8 <vSessionTask+0x774>)
 8000e84:	f017 fcf6 	bl	8018874 <puts>
						//Send error packet(opcode=5) NACK
						//2B (opcode=5) | 2B (error code)
						block_len=4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
						send_packet=(uint8_t*)malloc(block_len);
 8000e8e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8000e92:	4618      	mov	r0, r3
 8000e94:	f017 fb70 	bl	8018578 <malloc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000e9e:	2205      	movs	r2, #5
						memcpy(send_packet,&err_opcode,2); //error opcode (2bytes)
 8000ea0:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000ea4:	801a      	strh	r2, [r3, #0]
						memcpy(send_packet+2,&file_already_exists_error_code,2); //err code (2bytes)
 8000ea6:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000eaa:	3302      	adds	r3, #2
 8000eac:	2206      	movs	r2, #6
 8000eae:	801a      	strh	r2, [r3, #0]
						sendto(sockfd,send_packet,block_len,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8000eb0:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8000ec4:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000ec8:	f00b fca4 	bl	800c814 <lwip_sendto>

						free(send_packet);
 8000ecc:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8000ed0:	f017 fb5a 	bl	8018588 <free>
						send_packet=NULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c

						//Close Session
						free(session);
 8000eda:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8000ede:	f017 fb53 	bl	8018588 <free>
						session=NULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
						vTaskDelete(NULL);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f007 fbd3 	bl	8008694 <vTaskDelete>
						return;
 8000eee:	e1da      	b.n	80012a6 <vSessionTask+0x842>
				for(i=0;i<file_index;i++)
 8000ef0:	f897 367b 	ldrb.w	r3, [r7, #1659]	; 0x67b
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 367b 	strb.w	r3, [r7, #1659]	; 0x67b
 8000efa:	4bb8      	ldr	r3, [pc, #736]	; (80011dc <vSessionTask+0x778>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f897 267b 	ldrb.w	r2, [r7, #1659]	; 0x67b
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3aa      	bcc.n	8000e5c <vSessionTask+0x3f8>
					}
				}
				//Send ACK back to client(OPCODE = 4)
				blocknum=0; //Starting from first block to send
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8a7 3658 	strh.w	r3, [r7, #1624]	; 0x658
				block_len=4;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
				send_packet=(uint8_t*)malloc(block_len);
 8000f12:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8000f16:	4618      	mov	r0, r3
 8000f18:	f017 fb2e 	bl	8018578 <malloc>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000f22:	2204      	movs	r2, #4
				memcpy(send_packet,&ack_opcode,2); //ack opcode (2bytes)
 8000f24:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000f28:	801a      	strh	r2, [r3, #0]
				memcpy(send_packet+2,&blocknum,2); //block number (2bytes)
 8000f2a:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f8b7 2658 	ldrh.w	r2, [r7, #1624]	; 0x658
 8000f34:	801a      	strh	r2, [r3, #0]

				sendto(sockfd,send_packet,block_len,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8000f36:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8000f4a:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000f4e:	f00b fc61 	bl	800c814 <lwip_sendto>

				free(send_packet);
 8000f52:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8000f56:	f017 fb17 	bl	8018588 <free>
				send_packet=NULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8000f60:	e00d      	b.n	8000f7e <vSessionTask+0x51a>
			}else
			{
				//Invalid opcode
				printf("Invalid opcode\r\n");
 8000f62:	489f      	ldr	r0, [pc, #636]	; (80011e0 <vSessionTask+0x77c>)
 8000f64:	f017 fc86 	bl	8018874 <puts>
				//Close Session
				free(session);
 8000f68:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8000f6c:	f017 fb0c 	bl	8018588 <free>
				session=NULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
				vTaskDelete(NULL);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f007 fb8c 	bl	8008694 <vTaskDelete>
				return;
 8000f7c:	e193      	b.n	80012a6 <vSessionTask+0x842>
			}

	for(;;)
	{
		recvfrom(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&client_addr,&len);
 8000f7e:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8000f82:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000f94:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8000f98:	f00b fb4c 	bl	800c634 <lwip_recvfrom>
 8000f9c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000fa0:	881b      	ldrh	r3, [r3, #0]
		//Extract packet's data
		memcpy(&received_opcode,buffer,2); //Get opcode
 8000fa2:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654

		if(received_opcode==data_opcode) //Data to write to memory
 8000fa6:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 8000faa:	2203      	movs	r2, #3
 8000fac:	4293      	cmp	r3, r2
 8000fae:	f040 80b9 	bne.w	8001124 <vSessionTask+0x6c0>
		{
			//Data to write (OPCODE = 3)
			memcpy(&get_blocknum,buffer+2,2); //Get blocknum
 8000fb2:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
			num_bytes_data=sprintf((char*)flash_mem_buffer+(get_blocknum*BLOCK_SIZE),"%s",buffer+4); //n bytes data
 8000fc0:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	1898      	adds	r0, r3, r2
 8000fce:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4983      	ldr	r1, [pc, #524]	; (80011e4 <vSessionTask+0x780>)
 8000fd8:	f017 fd0e 	bl	80189f8 <siprintf>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f8a7 3662 	strh.w	r3, [r7, #1634]	; 0x662

			if(num_bytes_data<=BLOCK_SIZE) //Last block
 8000fe2:	f8b7 3662 	ldrh.w	r3, [r7, #1634]	; 0x662
 8000fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fea:	d862      	bhi.n	80010b2 <vSessionTask+0x64e>
			{
				//Copy to flash memory
				xSemaphoreTake(flash_mem_semph,osWaitForever);
 8000fec:	4b7e      	ldr	r3, [pc, #504]	; (80011e8 <vSessionTask+0x784>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f006 fe49 	bl	8007c8c <xQueueSemaphoreTake>
				res=write_data_to_flash_memory(session->filename,flash_mem_buffer);
 8000ffa:	f8d7 3674 	ldr.w	r3, [r7, #1652]	; 0x674
 8000ffe:	330a      	adds	r3, #10
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f956 	bl	80012b8 <write_data_to_flash_memory>
 800100c:	4603      	mov	r3, r0
 800100e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
				osSemaphoreRelease(flash_mem_semph);
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <vSessionTask+0x784>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f005 ff78 	bl	8006f0c <osSemaphoreRelease>
					free(send_packet);
					send_packet=NULL;
					break;
				}
				//Recalc files from flash
				flash_addr=BLOCK_7_FLASH_MEM_FIRST_ADDRESS; //ATIM, Sector 7 (first address)
 800101c:	4b73      	ldr	r3, [pc, #460]	; (80011ec <vSessionTask+0x788>)
 800101e:	4a74      	ldr	r2, [pc, #464]	; (80011f0 <vSessionTask+0x78c>)
 8001020:	601a      	str	r2, [r3, #0]
				file_index=0;
 8001022:	4b6e      	ldr	r3, [pc, #440]	; (80011dc <vSessionTask+0x778>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
				if(read_data_from_flash_memory(&file_index)<0)
 8001028:	486c      	ldr	r0, [pc, #432]	; (80011dc <vSessionTask+0x778>)
 800102a:	f000 f9c5 	bl	80013b8 <read_data_from_flash_memory>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	da0a      	bge.n	800104a <vSessionTask+0x5e6>
				{
					//fault
					printf("Error in reading from flash memory\r\n");
 8001034:	486f      	ldr	r0, [pc, #444]	; (80011f4 <vSessionTask+0x790>)
 8001036:	f017 fc1d 	bl	8018874 <puts>
					free(send_packet);
 800103a:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 800103e:	f017 faa3 	bl	8018588 <free>
					send_packet=NULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
					break;
 8001048:	e115      	b.n	8001276 <vSessionTask+0x812>
				}
				print_stored_files(&file_index);
 800104a:	4864      	ldr	r0, [pc, #400]	; (80011dc <vSessionTask+0x778>)
 800104c:	f000 fa54 	bl	80014f8 <print_stored_files>

				//Send ACK back to client(OPCODE = 4)
				get_blocknum++; //ACK this block
 8001050:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 8001054:	3301      	adds	r3, #1
 8001056:	b29b      	uxth	r3, r3
 8001058:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
				//2B (opcode=4) | 2B (block number)
				block_len=4;
 800105c:	2304      	movs	r3, #4
 800105e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
				send_packet=(uint8_t*)malloc(block_len);
 8001062:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8001066:	4618      	mov	r0, r3
 8001068:	f017 fa86 	bl	8018578 <malloc>
 800106c:	4603      	mov	r3, r0
 800106e:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8001072:	2204      	movs	r2, #4
				memcpy(send_packet,&ack_opcode,2); //error opcode (2bytes)
 8001074:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8001078:	801a      	strh	r2, [r3, #0]
				memcpy(send_packet+2,&get_blocknum,2); //err code (2bytes)
 800107a:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 800107e:	3302      	adds	r3, #2
 8001080:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 8001084:	801a      	strh	r2, [r3, #0]
				sendto(sockfd,send_packet,block_len,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 8001086:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 800108a:	2310      	movs	r3, #16
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 800109a:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 800109e:	f00b fbb9 	bl	800c814 <lwip_sendto>

				//Since its last block we can end this session
				free(send_packet);
 80010a2:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 80010a6:	f017 fa6f 	bl	8018588 <free>
				send_packet=NULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
				break;
 80010b0:	e0e1      	b.n	8001276 <vSessionTask+0x812>

			}
			//Send ACK back to client(OPCODE = 4)
			get_blocknum++; //ACK this block
 80010b2:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 80010b6:	3301      	adds	r3, #1
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
			//2B (opcode=4) | 2B (block number)
			block_len=4;
 80010be:	2304      	movs	r3, #4
 80010c0:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
			send_packet=(uint8_t*)malloc(block_len);
 80010c4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80010c8:	4618      	mov	r0, r3
 80010ca:	f017 fa55 	bl	8018578 <malloc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 80010d4:	2204      	movs	r2, #4
			memcpy(send_packet,&ack_opcode,2); //error opcode (2bytes)
 80010d6:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80010da:	801a      	strh	r2, [r3, #0]
			memcpy(send_packet+2,&get_blocknum,2); //err code (2bytes)
 80010dc:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80010e0:	3302      	adds	r3, #2
 80010e2:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 80010e6:	801a      	strh	r2, [r3, #0]
			sendto(sockfd,send_packet,block_len,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 80010e8:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 80010ec:	2310      	movs	r3, #16
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 80010fc:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8001100:	f00b fb88 	bl	800c814 <lwip_sendto>

			memset(buffer,0,sizeof(buffer));
 8001104:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001108:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f017 fa78 	bl	8018604 <memset>

			free(send_packet);
 8001114:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 8001118:	f017 fa36 	bl	8018588 <free>
			send_packet=NULL;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8001122:	e72c      	b.n	8000f7e <vSessionTask+0x51a>

		}
		else if(received_opcode==ack_opcode) //Received ACK from client (on read request)
 8001124:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 8001128:	2204      	movs	r2, #4
 800112a:	4293      	cmp	r3, r2
 800112c:	f47f af27 	bne.w	8000f7e <vSessionTask+0x51a>
		{
			//Data ACK (OPCODE = 4)
			memcpy(&get_blocknum, buffer+2,2); //Get blocknum
 8001130:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001134:	3302      	adds	r3, #2
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656

			get_blocknum++;//2
 800113e:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 8001142:	3301      	adds	r3, #1
 8001144:	b29b      	uxth	r3, r3
 8001146:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656

			block_len=strlen((char*)files[file_ref].data_content+((get_blocknum-1)*BLOCK_SIZE));
 800114a:	f897 367a 	ldrb.w	r3, [r7, #1658]	; 0x67a
 800114e:	f240 421e 	movw	r2, #1054	; 0x41e
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	3318      	adds	r3, #24
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <vSessionTask+0x770>)
 800115a:	4413      	add	r3, r2
 800115c:	3306      	adds	r3, #6
 800115e:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 8001162:	3a01      	subs	r2, #1
 8001164:	0252      	lsls	r2, r2, #9
 8001166:	4413      	add	r3, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f85b 	bl	8000224 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664

			if(block_len<BLOCK_SIZE)
 8001174:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8001178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117c:	da3e      	bge.n	80011fc <vSessionTask+0x798>
			{
				//Send empty message indicating end of block
				send_packet=(uint8_t*)malloc(5);
 800117e:	2005      	movs	r0, #5
 8001180:	f017 f9fa 	bl	8018578 <malloc>
 8001184:	4603      	mov	r3, r0
 8001186:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800118a:	2203      	movs	r2, #3
				memcpy(send_packet,&data_opcode,2);
 800118c:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8001190:	801a      	strh	r2, [r3, #0]
				memcpy(send_packet+2,&get_blocknum,2);
 8001192:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8001196:	3302      	adds	r3, #2
 8001198:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800119c:	801a      	strh	r2, [r3, #0]
				memcpy(send_packet+4,&empty_message,1);
 800119e:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 80011a2:	3304      	adds	r3, #4
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <vSessionTask+0x794>)
 80011a6:	7812      	ldrb	r2, [r2, #0]
 80011a8:	701a      	strb	r2, [r3, #0]
				//Send packet containing file's content back to client
				sendto(sockfd,send_packet,5,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 80011aa:	2310      	movs	r3, #16
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	2205      	movs	r2, #5
 80011b8:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 80011bc:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 80011c0:	f00b fb28 	bl	800c814 <lwip_sendto>
				free(send_packet);
 80011c4:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 80011c8:	f017 f9de 	bl	8018588 <free>
				send_packet=NULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
				//Exit Session
				break;
 80011d2:	e050      	b.n	8001276 <vSessionTask+0x812>
 80011d4:	20004924 	.word	0x20004924
 80011d8:	08019a6c 	.word	0x08019a6c
 80011dc:	20000554 	.word	0x20000554
 80011e0:	08019a84 	.word	0x08019a84
 80011e4:	080199cc 	.word	0x080199cc
 80011e8:	20000558 	.word	0x20000558
 80011ec:	20000000 	.word	0x20000000
 80011f0:	080c0000 	.word	0x080c0000
 80011f4:	08019a94 	.word	0x08019a94
 80011f8:	20000555 	.word	0x20000555
			}
			else
			{
				//Send max block num - 512 Bytes
				send_packet=(uint8_t*)malloc(4+BLOCK_SIZE);
 80011fc:	f44f 7001 	mov.w	r0, #516	; 0x204
 8001200:	f017 f9ba 	bl	8018578 <malloc>
 8001204:	4603      	mov	r3, r0
 8001206:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800120a:	2203      	movs	r2, #3
				memcpy(send_packet,&data_opcode,2);
 800120c:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8001210:	801a      	strh	r2, [r3, #0]
				memcpy(send_packet+2,&get_blocknum,2);
 8001212:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8001216:	3302      	adds	r3, #2
 8001218:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800121c:	801a      	strh	r2, [r3, #0]
				memcpy(send_packet+4,files[file_ref].data_content+(get_blocknum-1),BLOCK_SIZE);
 800121e:	f8d7 367c 	ldr.w	r3, [r7, #1660]	; 0x67c
 8001222:	1d18      	adds	r0, r3, #4
 8001224:	f897 367a 	ldrb.w	r3, [r7, #1658]	; 0x67a
 8001228:	f240 421e 	movw	r2, #1054	; 0x41e
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	3318      	adds	r3, #24
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <vSessionTask+0x84c>)
 8001234:	4413      	add	r3, r2
 8001236:	1d9a      	adds	r2, r3, #6
 8001238:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800123c:	3b01      	subs	r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001244:	4619      	mov	r1, r3
 8001246:	f017 f9b5 	bl	80185b4 <memcpy>
				//Send packet containing file's content back to client
				sendto(sockfd,send_packet,4+BLOCK_SIZE,0,(struct sockaddr*)&client_addr, sizeof(client_addr));
 800124a:	2310      	movs	r3, #16
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	f44f 7201 	mov.w	r2, #516	; 0x204
 800125a:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 800125e:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 8001262:	f00b fad7 	bl	800c814 <lwip_sendto>
				free(send_packet);
 8001266:	f8d7 067c 	ldr.w	r0, [r7, #1660]	; 0x67c
 800126a:	f017 f98d 	bl	8018588 <free>
				send_packet=NULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
		recvfrom(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&client_addr,&len);
 8001274:	e683      	b.n	8000f7e <vSessionTask+0x51a>



	}//for loop

	printf("End client session, port: %d\r\n",client_port);
 8001276:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 800127a:	4619      	mov	r1, r3
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <vSessionTask+0x850>)
 800127e:	f017 fa73 	bl	8018768 <iprintf>
	//Release task's resources
	memset(buffer,0,sizeof(buffer));
 8001282:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001286:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f017 f9b9 	bl	8018604 <memset>
	free(session);
 8001292:	f8d7 0674 	ldr.w	r0, [r7, #1652]	; 0x674
 8001296:	f017 f977 	bl	8018588 <free>
	session=NULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
	vTaskDelete(NULL);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f007 f9f7 	bl	8008694 <vTaskDelete>

}
 80012a6:	f507 67d0 	add.w	r7, r7, #1664	; 0x680
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20004924 	.word	0x20004924
 80012b4:	08019ab8 	.word	0x08019ab8

080012b8 <write_data_to_flash_memory>:

int write_data_to_flash_memory(uint8_t* filename,uint8_t* flash_mem_buffer)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]

	uint32_t i;
	const char filename_seperator='^';
 80012c2:	235e      	movs	r3, #94	; 0x5e
 80012c4:	72fb      	strb	r3, [r7, #11]
	const char data_seperator=';';
 80012c6:	233b      	movs	r3, #59	; 0x3b
 80012c8:	72bb      	strb	r3, [r7, #10]

	if(HAL_FLASH_Unlock()!=HAL_OK)
 80012ca:	f001 ff6b 	bl	80031a4 <HAL_FLASH_Unlock>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <write_data_to_flash_memory+0x28>
	{
		printf("Error unlocking flash memory\r\n");
 80012d4:	4835      	ldr	r0, [pc, #212]	; (80013ac <write_data_to_flash_memory+0xf4>)
 80012d6:	f017 facd 	bl	8018874 <puts>
		return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e061      	b.n	80013a4 <write_data_to_flash_memory+0xec>
	}

	//Write filename
	for(i=0;i<strlen((char*)filename);i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e013      	b.n	800130e <write_data_to_flash_memory+0x56>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_addr, filename[i]);
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 80012e8:	6819      	ldr	r1, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 fef7 	bl	80030ec <HAL_FLASH_Program>
		flash_addr++;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 8001306:	6013      	str	r3, [r2, #0]
	for(i=0;i<strlen((char*)filename);i++)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7fe ff88 	bl	8000224 <strlen>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4293      	cmp	r3, r2
 800131a:	d3e4      	bcc.n	80012e6 <write_data_to_flash_memory+0x2e>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_addr, filename_seperator);
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	7afa      	ldrb	r2, [r7, #11]
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f001 fee0 	bl	80030ec <HAL_FLASH_Program>
	flash_addr++;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 8001334:	6013      	str	r3, [r2, #0]
	//Write data
	for(i=0;i<strlen((char*)flash_mem_buffer);i++)
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	e013      	b.n	8001364 <write_data_to_flash_memory+0xac>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_addr, flash_mem_buffer[i]);
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 800133e:	6819      	ldr	r1, [r3, #0]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f001 fecc 	bl	80030ec <HAL_FLASH_Program>
		flash_addr++;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 800135c:	6013      	str	r3, [r2, #0]
	for(i=0;i<strlen((char*)flash_mem_buffer);i++)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3301      	adds	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7fe ff5d 	bl	8000224 <strlen>
 800136a:	4602      	mov	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4293      	cmp	r3, r2
 8001370:	d3e4      	bcc.n	800133c <write_data_to_flash_memory+0x84>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_addr, data_seperator);
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	7aba      	ldrb	r2, [r7, #10]
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	2000      	movs	r0, #0
 800137e:	f001 feb5 	bl	80030ec <HAL_FLASH_Program>
	flash_addr++;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <write_data_to_flash_memory+0xf8>)
 800138a:	6013      	str	r3, [r2, #0]

	if(HAL_FLASH_Lock()!=HAL_OK)
 800138c:	f001 ff2c 	bl	80031e8 <HAL_FLASH_Lock>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <write_data_to_flash_memory+0xea>
	{
		printf("Error locking flash memory\r\n");
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <write_data_to_flash_memory+0xfc>)
 8001398:	f017 fa6c 	bl	8018874 <puts>
		return -1;
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	e000      	b.n	80013a4 <write_data_to_flash_memory+0xec>
	}

	return 0;
 80013a2:	2300      	movs	r3, #0

}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	08019ad8 	.word	0x08019ad8
 80013b0:	20000000 	.word	0x20000000
 80013b4:	08019af8 	.word	0x08019af8

080013b8 <read_data_from_flash_memory>:

int read_data_from_flash_memory(uint8_t *file_index)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	uint8_t j,k;
	uint8_t data_direction;
	const char filename_seperator='^';
 80013c0:	235e      	movs	r3, #94	; 0x5e
 80013c2:	733b      	strb	r3, [r7, #12]
	const char data_seperator=';';
 80013c4:	233b      	movs	r3, #59	; 0x3b
 80013c6:	72fb      	strb	r3, [r7, #11]

	j=0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
	k=0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73bb      	strb	r3, [r7, #14]
	data_direction=0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	737b      	strb	r3, [r7, #13]

	if(HAL_FLASH_Unlock()!=HAL_OK)
 80013d4:	f001 fee6 	bl	80031a4 <HAL_FLASH_Unlock>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <read_data_from_flash_memory+0x32>
	{
		printf("Error unlocking flash memory\r\n");
 80013de:	4842      	ldr	r0, [pc, #264]	; (80014e8 <read_data_from_flash_memory+0x130>)
 80013e0:	f017 fa48 	bl	8018874 <puts>
		return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	e079      	b.n	80014de <read_data_from_flash_memory+0x126>
	}

	for(;;)
	{
		if((*(__IO uint8_t*)flash_addr)==255 || (*(__IO uint8_t*)flash_addr)==0xFF)
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <read_data_from_flash_memory+0x134>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d067      	beq.n	80014c6 <read_data_from_flash_memory+0x10e>
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <read_data_from_flash_memory+0x134>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d061      	beq.n	80014c6 <read_data_from_flash_memory+0x10e>
		{
			break;
		}

		if(!data_direction)//filename
 8001402:	7b7b      	ldrb	r3, [r7, #13]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d129      	bne.n	800145c <read_data_from_flash_memory+0xa4>
		{
			if(*(__IO uint8_t*)flash_addr!=filename_seperator)
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <read_data_from_flash_memory+0x134>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	7b3a      	ldrb	r2, [r7, #12]
 8001412:	429a      	cmp	r2, r3
 8001414:	d01a      	beq.n	800144c <read_data_from_flash_memory+0x94>
			{
				files[*file_index].filename[j++]=*(__IO uint8_t*)flash_addr;
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <read_data_from_flash_memory+0x134>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461c      	mov	r4, r3
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	1c59      	adds	r1, r3, #1
 8001426:	73f9      	strb	r1, [r7, #15]
 8001428:	4618      	mov	r0, r3
 800142a:	7813      	ldrb	r3, [r2, #0]
 800142c:	b2d9      	uxtb	r1, r3
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <read_data_from_flash_memory+0x138>)
 8001430:	f240 431e 	movw	r3, #1054	; 0x41e
 8001434:	fb03 f304 	mul.w	r3, r3, r4
 8001438:	4413      	add	r3, r2
 800143a:	4403      	add	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	701a      	strb	r2, [r3, #0]
				flash_addr++;
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <read_data_from_flash_memory+0x134>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a29      	ldr	r2, [pc, #164]	; (80014ec <read_data_from_flash_memory+0x134>)
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e7ce      	b.n	80013ea <read_data_from_flash_memory+0x32>
			}
			else
			{
				data_direction=1;
 800144c:	2301      	movs	r3, #1
 800144e:	737b      	strb	r3, [r7, #13]
				flash_addr++;
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <read_data_from_flash_memory+0x134>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	4a25      	ldr	r2, [pc, #148]	; (80014ec <read_data_from_flash_memory+0x134>)
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e7c6      	b.n	80013ea <read_data_from_flash_memory+0x32>
			}
		}
		else
		{
			if(*(__IO uint8_t*)flash_addr!=data_seperator)
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <read_data_from_flash_memory+0x134>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	7afa      	ldrb	r2, [r7, #11]
 8001466:	429a      	cmp	r2, r3
 8001468:	d01b      	beq.n	80014a2 <read_data_from_flash_memory+0xea>
			{
				files[*file_index].data_content[k++]=*(__IO uint8_t*)flash_addr;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <read_data_from_flash_memory+0x134>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461c      	mov	r4, r3
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	1c59      	adds	r1, r3, #1
 800147a:	73b9      	strb	r1, [r7, #14]
 800147c:	4618      	mov	r0, r3
 800147e:	7813      	ldrb	r3, [r2, #0]
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <read_data_from_flash_memory+0x138>)
 8001484:	f240 431e 	movw	r3, #1054	; 0x41e
 8001488:	fb03 f304 	mul.w	r3, r3, r4
 800148c:	4413      	add	r3, r2
 800148e:	4403      	add	r3, r0
 8001490:	331e      	adds	r3, #30
 8001492:	460a      	mov	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
				flash_addr++;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <read_data_from_flash_memory+0x134>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <read_data_from_flash_memory+0x134>)
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e7a3      	b.n	80013ea <read_data_from_flash_memory+0x32>
			}
			else
			{
				j=0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
				k=0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73bb      	strb	r3, [r7, #14]
				data_direction=0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	737b      	strb	r3, [r7, #13]
				(*file_index)++;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	701a      	strb	r2, [r3, #0]
				flash_addr++;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <read_data_from_flash_memory+0x134>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <read_data_from_flash_memory+0x134>)
 80014c2:	6013      	str	r3, [r2, #0]
		if((*(__IO uint8_t*)flash_addr)==255 || (*(__IO uint8_t*)flash_addr)==0xFF)
 80014c4:	e791      	b.n	80013ea <read_data_from_flash_memory+0x32>
			}
		}

	}

	if(HAL_FLASH_Lock()!=HAL_OK)
 80014c6:	f001 fe8f 	bl	80031e8 <HAL_FLASH_Lock>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <read_data_from_flash_memory+0x124>
	{
		printf("Error locking flash memory\r\n");
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <read_data_from_flash_memory+0x13c>)
 80014d2:	f017 f9cf 	bl	8018874 <puts>
		return -1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e000      	b.n	80014de <read_data_from_flash_memory+0x126>
	}

	return 0;
 80014dc:	2300      	movs	r3, #0

}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08019ad8 	.word	0x08019ad8
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20004924 	.word	0x20004924
 80014f4:	08019af8 	.word	0x08019af8

080014f8 <print_stored_files>:

void print_stored_files(uint8_t *file_index)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint8_t i;

	printf("Stored Files:\r\n");
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <print_stored_files+0x58>)
 8001502:	f017 f9b7 	bl	8018874 <puts>
	if(*file_index==0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <print_stored_files+0x1e>
	{
		printf("There are currently no stored files\r\n");
 800150e:	4811      	ldr	r0, [pc, #68]	; (8001554 <print_stored_files+0x5c>)
 8001510:	f017 f9b0 	bl	8018874 <puts>
		{
		  	printf("%d) %s\r\n",(i+1),files[i].filename);
		}
	}

}
 8001514:	e017      	b.n	8001546 <print_stored_files+0x4e>
		for(i=0;i<*file_index;i++)
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e00f      	b.n	800153c <print_stored_files+0x44>
		  	printf("%d) %s\r\n",(i+1),files[i].filename);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	1c59      	adds	r1, r3, #1
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f240 421e 	movw	r2, #1054	; 0x41e
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <print_stored_files+0x60>)
 800152c:	4413      	add	r3, r2
 800152e:	461a      	mov	r2, r3
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <print_stored_files+0x64>)
 8001532:	f017 f919 	bl	8018768 <iprintf>
		for(i=0;i<*file_index;i++)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3ea      	bcc.n	800151c <print_stored_files+0x24>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	08019b14 	.word	0x08019b14
 8001554:	08019b24 	.word	0x08019b24
 8001558:	20004924 	.word	0x20004924
 800155c:	08019b4c 	.word	0x08019b4c

08001560 <get_all_files>:

void get_all_files(char* buffer,int* buffer_size,uint8_t *file_index)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	uint8_t i;
	int bytes=0,total_bytes=0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]

	if(*file_index==0)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <get_all_files+0x2a>
	{
		//No files
		printf("no files\r\n");
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <get_all_files+0x8c>)
 800157e:	f017 f979 	bl	8018874 <puts>
		*buffer_size=0;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
		return;
 8001588:	e02c      	b.n	80015e4 <get_all_files+0x84>
	}
	else
	{
		//Get files
		bytes=sprintf(buffer,"%s",files[0].filename);
 800158a:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <get_all_files+0x90>)
 800158c:	4919      	ldr	r1, [pc, #100]	; (80015f4 <get_all_files+0x94>)
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f017 fa32 	bl	80189f8 <siprintf>
 8001594:	6178      	str	r0, [r7, #20]
		total_bytes=bytes;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	61bb      	str	r3, [r7, #24]
		for(i=1;i<*file_index;i++)
 800159a:	2301      	movs	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	e015      	b.n	80015cc <get_all_files+0x6c>
		{
			bytes=sprintf(buffer+total_bytes,"%s",files[i].filename);
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	18d0      	adds	r0, r2, r3
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	f240 421e 	movw	r2, #1054	; 0x41e
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <get_all_files+0x90>)
 80015b2:	4413      	add	r3, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	490f      	ldr	r1, [pc, #60]	; (80015f4 <get_all_files+0x94>)
 80015b8:	f017 fa1e 	bl	80189f8 <siprintf>
 80015bc:	6178      	str	r0, [r7, #20]
			total_bytes+=bytes;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	4413      	add	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
		for(i=1;i<*file_index;i++)
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	3301      	adds	r3, #1
 80015ca:	77fb      	strb	r3, [r7, #31]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	7ffa      	ldrb	r2, [r7, #31]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3e4      	bcc.n	80015a0 <get_all_files+0x40>
		}
		*buffer_size=strlen(buffer);
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7fe fe24 	bl	8000224 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	601a      	str	r2, [r3, #0]
	}


}
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	08019b58 	.word	0x08019b58
 80015f0:	20004924 	.word	0x20004924
 80015f4:	080199cc 	.word	0x080199cc

080015f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001600:	f004 fd46 	bl	8006090 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  conn=udp_new();
 8001604:	f014 f9a4 	bl	8015950 <udp_new>
 8001608:	4603      	mov	r3, r0
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <StartDefaultTask+0x3c>)
 800160c:	6013      	str	r3, [r2, #0]
  udp_bind(conn, IP_ANY_TYPE, PORT_NUM);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <StartDefaultTask+0x3c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2245      	movs	r2, #69	; 0x45
 8001614:	4908      	ldr	r1, [pc, #32]	; (8001638 <StartDefaultTask+0x40>)
 8001616:	4618      	mov	r0, r3
 8001618:	f014 f8b0 	bl	801577c <udp_bind>
  udp_recv(conn, udp_server_recv, NULL);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <StartDefaultTask+0x3c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2200      	movs	r2, #0
 8001622:	4906      	ldr	r1, [pc, #24]	; (800163c <StartDefaultTask+0x44>)
 8001624:	4618      	mov	r0, r3
 8001626:	f014 f931 	bl	801588c <udp_recv>


  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800162a:	2064      	movs	r0, #100	; 0x64
 800162c:	f005 fb3d 	bl	8006caa <osDelay>
 8001630:	e7fb      	b.n	800162a <StartDefaultTask+0x32>
 8001632:	bf00      	nop
 8001634:	20004490 	.word	0x20004490
 8001638:	0801d618 	.word	0x0801d618
 800163c:	08000999 	.word	0x08000999

08001640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001652:	f000 faa1 	bl	8001b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010000 	.word	0x40010000

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210f      	movs	r1, #15
 80016aa:	f06f 0001 	mvn.w	r0, #1
 80016ae:	f000 fb6f 	bl	8001d90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0aa      	sub	sp, #168	; 0xa8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	2284      	movs	r2, #132	; 0x84
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f016 ff8f 	bl	8018604 <memset>
  if(huart->Instance==USART3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_UART_MspInit+0xb4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d13c      	bne.n	800176a <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fea8 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800170a:	f7ff ffab 	bl	8001664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_UART_MspInit+0xb8>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_UART_MspInit+0xb8>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_UART_MspInit+0xb8>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_UART_MspInit+0xb8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_UART_MspInit+0xb8>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_UART_MspInit+0xb8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800173e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001758:	2307      	movs	r3, #7
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_UART_MspInit+0xbc>)
 8001766:	f001 fe7f 	bl	8003468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	37a8      	adds	r7, #168	; 0xa8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40004800 	.word	0x40004800
 8001778:	40023800 	.word	0x40023800
 800177c:	40020c00 	.word	0x40020c00

08001780 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ac      	sub	sp, #176	; 0xb0
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	2284      	movs	r2, #132	; 0x84
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f016 ff2f 	bl	8018604 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ae:	d159      	bne.n	8001864 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fe47 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80017cc:	f7ff ff4a 	bl	8001664 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_PCD_MspInit+0xec>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_PCD_MspInit+0xec>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6313      	str	r3, [r2, #48]	; 0x30
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_PCD_MspInit+0xec>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001802:	230a      	movs	r3, #10
 8001804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800180c:	4619      	mov	r1, r3
 800180e:	4818      	ldr	r0, [pc, #96]	; (8001870 <HAL_PCD_MspInit+0xf0>)
 8001810:	f001 fe2a 	bl	8003468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182c:	4619      	mov	r1, r3
 800182e:	4810      	ldr	r0, [pc, #64]	; (8001870 <HAL_PCD_MspInit+0xf0>)
 8001830:	f001 fe1a 	bl	8003468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_PCD_MspInit+0xec>)
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_PCD_MspInit+0xec>)
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	6353      	str	r3, [r2, #52]	; 0x34
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_PCD_MspInit+0xec>)
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_PCD_MspInit+0xec>)
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_PCD_MspInit+0xec>)
 8001852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001856:	6453      	str	r3, [r2, #68]	; 0x44
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_PCD_MspInit+0xec>)
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	37b0      	adds	r7, #176	; 0xb0
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	2019      	movs	r0, #25
 800188a:	f000 fa81 	bl	8001d90 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800188e:	2019      	movs	r0, #25
 8001890:	f000 fa9a 	bl	8001dc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_InitTick+0x9c>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_InitTick+0x9c>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6453      	str	r3, [r2, #68]	; 0x44
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_InitTick+0x9c>)
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ac:	f107 0210 	add.w	r2, r7, #16
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fd9a 	bl	80043f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018bc:	f002 fd84 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80018c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_InitTick+0xa0>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	3b01      	subs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_InitTick+0xa4>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_InitTick+0xa8>)
 80018d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_InitTick+0xa4>)
 80018d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_InitTick+0xa4>)
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_InitTick+0xa4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_InitTick+0xa4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_InitTick+0xa4>)
 80018f2:	f003 f99f 	bl	8004c34 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <HAL_InitTick+0xa4>)
 80018fe:	f003 f9fb 	bl	8004cf8 <HAL_TIM_Base_Start_IT>
 8001902:	4603      	mov	r3, r0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	431bde83 	.word	0x431bde83
 8001918:	20007250 	.word	0x20007250
 800191c:	40010000 	.word	0x40010000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001952:	f003 fa49 	bl	8004de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20007250 	.word	0x20007250

08001960 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <ETH_IRQHandler+0x10>)
 8001966:	f000 fe1f 	bl	80025a8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20008be0 	.word	0x20008be0

08001974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_kill>:

int _kill(int pid, int sig)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <_kill+0x20>)
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
	return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	2000db6c 	.word	0x2000db6c

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe5 	bl	8001984 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0x12>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
	}

return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fdfb 	bl	800060c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf1      	blt.n	8001a08 <_write+0x12>
	}
	return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a56:	605a      	str	r2, [r3, #4]
	return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_isatty>:

int _isatty(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
	return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d205      	bcs.n	8001ad4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <_sbrk+0x6c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a06      	ldr	r2, [pc, #24]	; (8001afc <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20050000 	.word	0x20050000
 8001af8:	00000800 	.word	0x00000800
 8001afc:	2000055c 	.word	0x2000055c
 8001b00:	2000db80 	.word	0x2000db80
 8001b04:	2000db6c 	.word	0x2000db6c

08001b08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b32:	490e      	ldr	r1, [pc, #56]	; (8001b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b48:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b56:	f7ff ffd7 	bl	8001b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f016 fce5 	bl	8018528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5e:	f7fe fd67 	bl	8000630 <main>
  bx  lr    
 8001b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001b70:	0801d790 	.word	0x0801d790
  ldr r2, =_sbss
 8001b74:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001b78:	2000db80 	.word	0x2000db80

08001b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC_IRQHandler>

08001b7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f000 f8f9 	bl	8001d7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b88:	200f      	movs	r0, #15
 8001b8a:	f7ff fe73 	bl	8001874 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b8e:	f7ff fd6f 	bl	8001670 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	2000729c 	.word	0x2000729c

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000729c 	.word	0x2000729c

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <__NVIC_SetPriorityGrouping+0x40>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x40>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	05fa0000 	.word	0x05fa0000

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff4c 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da2:	f7ff ff61 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001da6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	6978      	ldr	r0, [r7, #20]
 8001dae:	f7ff ffb1 	bl	8001d14 <NVIC_EncodePriority>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff80 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff54 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001df4:	4ba9      	ldr	r3, [pc, #676]	; (800209c <HAL_ETH_Init+0x2b8>)
 8001df6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e181      	b.n	800210e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f004 fa94 	bl	800634c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e24:	4b9e      	ldr	r3, [pc, #632]	; (80020a0 <HAL_ETH_Init+0x2bc>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	4a9d      	ldr	r2, [pc, #628]	; (80020a0 <HAL_ETH_Init+0x2bc>)
 8001e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e30:	4b9b      	ldr	r3, [pc, #620]	; (80020a0 <HAL_ETH_Init+0x2bc>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e3c:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <HAL_ETH_Init+0x2c0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <HAL_ETH_Init+0x2c0>)
 8001e42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e46:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e48:	4b96      	ldr	r3, [pc, #600]	; (80020a4 <HAL_ETH_Init+0x2c0>)
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4994      	ldr	r1, [pc, #592]	; (80020a4 <HAL_ETH_Init+0x2c0>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6e:	f7ff fea7 	bl	8001bc0 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e74:	e011      	b.n	8001e9a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001e76:	f7ff fea3 	bl	8001bc0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e84:	d909      	bls.n	8001e9a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e139      	b.n	800210e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e4      	bne.n	8001e76 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f023 031c 	bic.w	r3, r3, #28
 8001eba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ebc:	f002 fa64 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 8001ec0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4a78      	ldr	r2, [pc, #480]	; (80020a8 <HAL_ETH_Init+0x2c4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d908      	bls.n	8001edc <HAL_ETH_Init+0xf8>
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4a77      	ldr	r2, [pc, #476]	; (80020ac <HAL_ETH_Init+0x2c8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d804      	bhi.n	8001edc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e027      	b.n	8001f2c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	4a73      	ldr	r2, [pc, #460]	; (80020ac <HAL_ETH_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d908      	bls.n	8001ef6 <HAL_ETH_Init+0x112>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	4a6d      	ldr	r2, [pc, #436]	; (800209c <HAL_ETH_Init+0x2b8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d204      	bcs.n	8001ef6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f043 030c 	orr.w	r3, r3, #12
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	e01a      	b.n	8001f2c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4a68      	ldr	r2, [pc, #416]	; (800209c <HAL_ETH_Init+0x2b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d303      	bcc.n	8001f06 <HAL_ETH_Init+0x122>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4a6b      	ldr	r2, [pc, #428]	; (80020b0 <HAL_ETH_Init+0x2cc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d911      	bls.n	8001f2a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4a69      	ldr	r2, [pc, #420]	; (80020b0 <HAL_ETH_Init+0x2cc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d908      	bls.n	8001f20 <HAL_ETH_Init+0x13c>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <HAL_ETH_Init+0x2d0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d804      	bhi.n	8001f20 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e005      	b.n	8001f2c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e000      	b.n	8001f2c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f2a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f38:	2100      	movs	r1, #0
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fc17 	bl	800276e <HAL_ETH_WritePHYRegister>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001f4a:	6939      	ldr	r1, [r7, #16]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fdcd 	bl	8002aec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0d7      	b.n	800210e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001f5e:	20ff      	movs	r0, #255	; 0xff
 8001f60:	f7ff fe3a 	bl	8001bd8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a5 	beq.w	80020b8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f6e:	f7ff fe27 	bl	8001bc0 <HAL_GetTick>
 8001f72:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fb8e 	bl	800269e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001f82:	f7ff fe1d 	bl	8001bc0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d90f      	bls.n	8001fb4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fda6 	bl	8002aec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0ac      	b.n	800210e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0da      	beq.n	8001f74 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fbd2 	bl	800276e <HAL_ETH_WritePHYRegister>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fd4:	6939      	ldr	r1, [r7, #16]
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fd88 	bl	8002aec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e092      	b.n	800210e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7ff fdea 	bl	8001bc0 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fb51 	bl	800269e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ffc:	f7ff fde0 	bl	8001bc0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d90f      	bls.n	800202e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fd69 	bl	8002aec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e06f      	b.n	800210e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0da      	beq.n	8001fee <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	461a      	mov	r2, r3
 800203e:	2110      	movs	r1, #16
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fb2c 	bl	800269e <HAL_ETH_ReadPHYRegister>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002050:	6939      	ldr	r1, [r7, #16]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fd4a 	bl	8002aec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002060:	2301      	movs	r3, #1
 8002062:	e054      	b.n	800210e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	e002      	b.n	800207e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	e035      	b.n	80020fc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e030      	b.n	80020fc <HAL_ETH_Init+0x318>
 800209a:	bf00      	nop
 800209c:	03938700 	.word	0x03938700
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	01312cff 	.word	0x01312cff
 80020ac:	02160ebf 	.word	0x02160ebf
 80020b0:	05f5e0ff 	.word	0x05f5e0ff
 80020b4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb4c 	bl	800276e <HAL_ETH_WritePHYRegister>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fd02 	bl	8002aec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e00c      	b.n	800210e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80020f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80020f8:	f7ff fd6e 	bl	8001bd8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fcf4 	bl	8002aec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop

08002118 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_ETH_DMATxDescListInit+0x20>
 8002134:	2302      	movs	r3, #2
 8002136:	e052      	b.n	80021de <HAL_ETH_DMATxDescListInit+0xc6>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e030      	b.n	80021b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	4413      	add	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002164:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	461a      	mov	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3b01      	subs	r3, #1
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	d208      	bcs.n	80021aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	e002      	b.n	80021b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d3ca      	bcc.n	8002154 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f241 0310 	movw	r3, #4112	; 0x1010
 80021c8:	440b      	add	r3, r1
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_ETH_DMARxDescListInit+0x20>
 8002206:	2302      	movs	r3, #2
 8002208:	e056      	b.n	80022b8 <HAL_ETH_DMARxDescListInit+0xce>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e034      	b.n	8002290 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4413      	add	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002236:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800223e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	461a      	mov	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	429a      	cmp	r2, r3
 8002270:	d208      	bcs.n	8002284 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	015b      	lsls	r3, r3, #5
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	e002      	b.n	800228a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d3c6      	bcc.n	8002226 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	f241 030c 	movw	r3, #4108	; 0x100c
 80022a2:	440b      	add	r3, r1
 80022a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_ETH_TransmitFrame+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0cd      	b.n	8002484 <HAL_ETH_TransmitFrame+0x1c0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800230e:	2301      	movs	r3, #1
 8002310:	e0b8      	b.n	8002484 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	da09      	bge.n	8002330 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2212      	movs	r2, #18
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0a9      	b.n	8002484 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002336:	4293      	cmp	r3, r2
 8002338:	d915      	bls.n	8002366 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4a54      	ldr	r2, [pc, #336]	; (8002490 <HAL_ETH_TransmitFrame+0x1cc>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_ETH_TransmitFrame+0x1cc>)
 800234a:	fba3 1302 	umull	r1, r3, r3, r2
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e001      	b.n	800236a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002366:	2301      	movs	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11c      	bne.n	80023aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800237e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800238a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800239a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80023a8:	e04b      	b.n	8002442 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e044      	b.n	800243a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023be:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d116      	bne.n	8002418 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	4a25      	ldr	r2, [pc, #148]	; (8002494 <HAL_ETH_TransmitFrame+0x1d0>)
 80023fe:	fb02 f203 	mul.w	r2, r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	4413      	add	r3, r2
 8002406:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800240a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002416:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002426:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	3301      	adds	r3, #1
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3b6      	bcc.n	80023b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f241 0314 	movw	r3, #4116	; 0x1014
 800244a:	4413      	add	r3, r2
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f241 0314 	movw	r3, #4116	; 0x1014
 800245e:	4413      	add	r3, r2
 8002460:	2204      	movs	r2, #4
 8002462:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f241 0304 	movw	r3, #4100	; 0x1004
 800246c:	4413      	add	r3, r2
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	ac02b00b 	.word	0xac02b00b
 8002494:	fffffa0c 	.word	0xfffffa0c

08002498 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e074      	b.n	800259c <HAL_ETH_GetReceivedFrame_IT+0x104>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80024c2:	e05a      	b.n	800257a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d8:	d10d      	bne.n	80024f6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
 80024f4:	e041      	b.n	800257a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
 800251a:	e02e      	b.n	800257a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	2b01      	cmp	r3, #1
 8002534:	d103      	bne.n	800253e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800254a:	1f1a      	subs	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	461a      	mov	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e010      	b.n	800259c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db02      	blt.n	800258a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d99c      	bls.n	80024c4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f241 0314 	movw	r3, #4116	; 0x1014
 80025b8:	4413      	add	r3, r2
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d112      	bne.n	80025ea <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f003 ff81 	bl	80064cc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80025d2:	4413      	add	r3, r2
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e8:	e01b      	b.n	8002622 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80025f2:	4413      	add	r3, r2
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d111      	bne.n	8002622 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f839 	bl	8002676 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f241 0314 	movw	r3, #4116	; 0x1014
 800260c:	4413      	add	r3, r2
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f241 0314 	movw	r3, #4116	; 0x1014
 800262a:	4413      	add	r3, r2
 800262c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002630:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f241 0314 	movw	r3, #4116	; 0x1014
 800263a:	4413      	add	r3, r2
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002646:	d112      	bne.n	800266e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f81e 	bl	800268a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f241 0314 	movw	r3, #4116	; 0x1014
 8002656:	4413      	add	r3, r2
 8002658:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800265c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	460b      	mov	r3, r1
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b82      	cmp	r3, #130	; 0x82
 80026be:	d101      	bne.n	80026c4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
 80026c2:	e050      	b.n	8002766 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2282      	movs	r2, #130	; 0x82
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 031c 	and.w	r3, r3, #28
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8a1b      	ldrh	r3, [r3, #16]
 80026e0:	02db      	lsls	r3, r3, #11
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0302 	bic.w	r3, r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002710:	f7ff fa56 	bl	8001bc0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002716:	e015      	b.n	8002744 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002718:	f7ff fa52 	bl	8001bc0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d309      	bcc.n	800273c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e014      	b.n	8002766 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e4      	bne.n	8002718 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	460b      	mov	r3, r1
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b42      	cmp	r3, #66	; 0x42
 800278e:	d101      	bne.n	8002794 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	e04e      	b.n	8002832 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2242      	movs	r2, #66	; 0x42
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 031c 	and.w	r3, r3, #28
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8a1b      	ldrh	r3, [r3, #16]
 80027b0:	02db      	lsls	r3, r3, #11
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027ea:	f7ff f9e9 	bl	8001bc0 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027f0:	e015      	b.n	800281e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80027f2:	f7ff f9e5 	bl	8001bc0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d309      	bcc.n	8002816 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00d      	b.n	8002832 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e4      	bne.n	80027f2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_ETH_Start+0x16>
 800284c:	2302      	movs	r3, #2
 800284e:	e01f      	b.n	8002890 <HAL_ETH_Start+0x56>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fb45 	bl	8002ef0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fb7c 	bl	8002f64 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fc13 	bl	8003098 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fbb0 	bl	8002fd8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fbdd 	bl	8003038 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ETH_Stop+0x16>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e01f      	b.n	80028ee <HAL_ETH_Stop+0x56>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fba2 	bl	8003008 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fbcf 	bl	8003068 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fb67 	bl	8002f9e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fbe1 	bl	8003098 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fb27 	bl	8002f2a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_ETH_ConfigMAC+0x1c>
 8002910:	2302      	movs	r3, #2
 8002912:	e0e4      	b.n	8002ade <HAL_ETH_ConfigMAC+0x1e6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80b1 	beq.w	8002a8e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002944:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800294a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002950:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002956:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800295c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002962:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002968:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800296e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002974:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800297a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002980:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002986:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800299e:	2001      	movs	r0, #1
 80029a0:	f7ff f91a 	bl	8001bd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029b4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80029ba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80029c0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80029c6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80029cc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80029d2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80029de:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80029e0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff f8f4 	bl	8001bd8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a00:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a0a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a28:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002a2e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002a34:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002a3a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002a40:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7ff f8bd 	bl	8001bd8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7ff f8aa 	bl	8001bd8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	61da      	str	r2, [r3, #28]
 8002a8c:	e01e      	b.n	8002acc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a9c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7ff f88a 	bl	8001bd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	ff20810f 	.word	0xff20810f

08002aec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0b0      	sub	sp, #192	; 0xc0
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b08:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b36:	663b      	str	r3, [r7, #96]	; 0x60
 8002b38:	e001      	b.n	8002b3e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b42:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc4:	4bab      	ldr	r3, [pc, #684]	; (8002e74 <ETH_MACDMAConfig+0x388>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002bd0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002bd4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002bd8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002bde:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002be2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002be6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002bec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002bf0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002bf4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bf8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bfc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002c00:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c14:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7fe ffd9 	bl	8001bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c2e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c34:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002c38:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002c3e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002c44:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c4a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c5c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c5e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7fe ffb4 	bl	8001bd8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c78:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c82:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c8c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002c98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c9c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002caa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002cb0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002cb6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002cbc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002cc2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002cc8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002cca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cdc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7fe ff75 	bl	8001bd8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cf6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cf8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002cfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7fe ff60 	bl	8001bd8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d20:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d34:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002d46:	2304      	movs	r3, #4
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f241 0318 	movw	r3, #4120	; 0x1018
 8002d76:	4413      	add	r3, r2
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <ETH_MACDMAConfig+0x38c>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d8a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d8e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d90:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d92:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d94:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d96:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d98:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d9a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d9c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d9e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002da0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002da2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002da6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002daa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002dac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dc4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7fe fefe 	bl	8001bd8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002de4:	4413      	add	r3, r2
 8002de6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002df0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002df4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002df8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002dfc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e00:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002e02:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e06:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e14:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fe fed7 	bl	8001bd8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e36:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10d      	bne.n	8002e5c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6811      	ldr	r1, [r2, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <ETH_MACDMAConfig+0x390>)
 8002e52:	431a      	orrs	r2, r3
 8002e54:	f241 031c 	movw	r3, #4124	; 0x101c
 8002e58:	440b      	add	r3, r1
 8002e5a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	461a      	mov	r2, r3
 8002e62:	2100      	movs	r1, #0
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f80b 	bl	8002e80 <ETH_MACAddressConfig>
}
 8002e6a:	bf00      	nop
 8002e6c:	37c0      	adds	r7, #192	; 0xc0
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	ff20810f 	.word	0xff20810f
 8002e78:	f8de3f23 	.word	0xf8de3f23
 8002e7c:	00010040 	.word	0x00010040

08002e80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3305      	adds	r3, #5
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	3204      	adds	r2, #4
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <ETH_MACAddressConfig+0x68>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3303      	adds	r3, #3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	061a      	lsls	r2, r3, #24
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <ETH_MACAddressConfig+0x6c>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6013      	str	r3, [r2, #0]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40028040 	.word	0x40028040
 8002eec:	40028044 	.word	0x40028044

08002ef0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7fe fe5f 	bl	8001bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0208 	bic.w	r2, r2, #8
 8002f44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fe fe42 	bl	8001bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0204 	orr.w	r2, r2, #4
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7fe fe25 	bl	8001bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe fe08 	bl	8001bd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fe8:	4413      	add	r3, r2
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6811      	ldr	r1, [r2, #0]
 8002ff0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ff4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ff8:	440b      	add	r3, r1
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f241 0318 	movw	r3, #4120	; 0x1018
 8003018:	4413      	add	r3, r2
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6811      	ldr	r1, [r2, #0]
 8003020:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003024:	f241 0318 	movw	r3, #4120	; 0x1018
 8003028:	440b      	add	r3, r1
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	f241 0318 	movw	r3, #4120	; 0x1018
 8003048:	4413      	add	r3, r2
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6811      	ldr	r1, [r2, #0]
 8003050:	f043 0202 	orr.w	r2, r3, #2
 8003054:	f241 0318 	movw	r3, #4120	; 0x1018
 8003058:	440b      	add	r3, r1
 800305a:	601a      	str	r2, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f241 0318 	movw	r3, #4120	; 0x1018
 8003078:	4413      	add	r3, r2
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6811      	ldr	r1, [r2, #0]
 8003080:	f023 0202 	bic.w	r2, r3, #2
 8003084:	f241 0318 	movw	r3, #4120	; 0x1018
 8003088:	440b      	add	r3, r1
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80030ac:	4413      	add	r3, r2
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80030bc:	440b      	add	r3, r1
 80030be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f7fe fd82 	bl	8001bd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	f241 0318 	movw	r3, #4120	; 0x1018
 80030de:	440b      	add	r3, r1
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_FLASH_Program+0xb0>)
 8003100:	7d1b      	ldrb	r3, [r3, #20]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_FLASH_Program+0x1e>
 8003106:	2302      	movs	r3, #2
 8003108:	e043      	b.n	8003192 <HAL_FLASH_Program+0xa6>
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_FLASH_Program+0xb0>)
 800310c:	2201      	movs	r2, #1
 800310e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003110:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003114:	f000 f878 	bl	8003208 <FLASH_WaitForLastOperation>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d133      	bne.n	800318a <HAL_FLASH_Program+0x9e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d823      	bhi.n	8003170 <HAL_FLASH_Program+0x84>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_FLASH_Program+0x44>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003141 	.word	0x08003141
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003159 	.word	0x08003159
 800313c:	08003165 	.word	0x08003165
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003140:	783b      	ldrb	r3, [r7, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f000 f921 	bl	800338c <FLASH_Program_Byte>
        break;
 800314a:	e012      	b.n	8003172 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800314c:	883b      	ldrh	r3, [r7, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	68b8      	ldr	r0, [r7, #8]
 8003152:	f000 f8f5 	bl	8003340 <FLASH_Program_HalfWord>
        break;
 8003156:	e00c      	b.n	8003172 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	68b8      	ldr	r0, [r7, #8]
 800315e:	f000 f8c9 	bl	80032f4 <FLASH_Program_Word>
        break;
 8003162:	e006      	b.n	8003172 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8003164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003168:	68b8      	ldr	r0, [r7, #8]
 800316a:	f000 f88d 	bl	8003288 <FLASH_Program_DoubleWord>
        break;
 800316e:	e000      	b.n	8003172 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8003170:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003172:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003176:	f000 f847 	bl	8003208 <FLASH_WaitForLastOperation>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_FLASH_Program+0xb4>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_FLASH_Program+0xb4>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <HAL_FLASH_Program+0xb0>)
 800318c:	2200      	movs	r2, #0
 800318e:	751a      	strb	r2, [r3, #20]

  return status;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200072a0 	.word	0x200072a0
 80031a0:	40023c00 	.word	0x40023c00

080031a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_FLASH_Unlock+0x38>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da0b      	bge.n	80031ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_FLASH_Unlock+0x38>)
 80031b8:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_FLASH_Unlock+0x3c>)
 80031ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_FLASH_Unlock+0x38>)
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_FLASH_Unlock+0x40>)
 80031c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_FLASH_Unlock+0x38>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da01      	bge.n	80031ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80031ce:	79fb      	ldrb	r3, [r7, #7]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40023c00 	.word	0x40023c00
 80031e0:	45670123 	.word	0x45670123
 80031e4:	cdef89ab 	.word	0xcdef89ab

080031e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_FLASH_Lock+0x1c>)
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_FLASH_Lock+0x1c>)
 80031f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40023c00 	.word	0x40023c00

08003208 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <FLASH_WaitForLastOperation+0x78>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800321a:	f7fe fcd1 	bl	8001bc0 <HAL_GetTick>
 800321e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003220:	e010      	b.n	8003244 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d00c      	beq.n	8003244 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <FLASH_WaitForLastOperation+0x38>
 8003230:	f7fe fcc6 	bl	8001bc0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d201      	bcs.n	8003244 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e019      	b.n	8003278 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <FLASH_WaitForLastOperation+0x7c>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e8      	bne.n	8003222 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <FLASH_WaitForLastOperation+0x7c>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800325c:	f000 f8ba 	bl	80033d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e009      	b.n	8003278 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <FLASH_WaitForLastOperation+0x7c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <FLASH_WaitForLastOperation+0x7c>)
 8003272:	2201      	movs	r2, #1
 8003274:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
  
}  
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200072a0 	.word	0x200072a0
 8003284:	40023c00 	.word	0x40023c00

08003288 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <FLASH_Program_DoubleWord+0x68>)
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <FLASH_Program_DoubleWord+0x68>)
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <FLASH_Program_DoubleWord+0x68>)
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <FLASH_Program_DoubleWord+0x68>)
 80032a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <FLASH_Program_DoubleWord+0x68>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <FLASH_Program_DoubleWord+0x68>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80032be:	f3bf 8f6f 	isb	sy
}
 80032c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80032c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	000a      	movs	r2, r1
 80032d2:	2300      	movs	r3, #0
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	3104      	adds	r1, #4
 80032d8:	4613      	mov	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032dc:	f3bf 8f4f 	dsb	sy
}
 80032e0:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00

080032f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <FLASH_Program_Word+0x48>)
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <FLASH_Program_Word+0x48>)
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <FLASH_Program_Word+0x48>)
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <FLASH_Program_Word+0x48>)
 8003310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003314:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <FLASH_Program_Word+0x48>)
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	4a08      	ldr	r2, [pc, #32]	; (800333c <FLASH_Program_Word+0x48>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003328:	f3bf 8f4f 	dsb	sy
}
 800332c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023c00 	.word	0x40023c00

08003340 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <FLASH_Program_HalfWord+0x48>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <FLASH_Program_HalfWord+0x48>)
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003356:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <FLASH_Program_HalfWord+0x48>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <FLASH_Program_HalfWord+0x48>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <FLASH_Program_HalfWord+0x48>)
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <FLASH_Program_HalfWord+0x48>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003376:	f3bf 8f4f 	dsb	sy
}
 800337a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40023c00 	.word	0x40023c00

0800338c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <FLASH_Program_Byte+0x44>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <FLASH_Program_Byte+0x44>)
 800339e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <FLASH_Program_Byte+0x44>)
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <FLASH_Program_Byte+0x44>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <FLASH_Program_Byte+0x44>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <FLASH_Program_Byte+0x44>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80033be:	f3bf 8f4f 	dsb	sy
}
 80033c2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40023c00 	.word	0x40023c00

080033d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <FLASH_SetErrorCode+0x8c>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <FLASH_SetErrorCode+0x90>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f043 0320 	orr.w	r3, r3, #32
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <FLASH_SetErrorCode+0x90>)
 80033ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <FLASH_SetErrorCode+0x8c>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <FLASH_SetErrorCode+0x90>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f043 0310 	orr.w	r3, r3, #16
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <FLASH_SetErrorCode+0x90>)
 8003406:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <FLASH_SetErrorCode+0x8c>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <FLASH_SetErrorCode+0x90>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <FLASH_SetErrorCode+0x90>)
 800341e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <FLASH_SetErrorCode+0x8c>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800342c:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <FLASH_SetErrorCode+0x90>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <FLASH_SetErrorCode+0x90>)
 8003436:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <FLASH_SetErrorCode+0x8c>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <FLASH_SetErrorCode+0x90>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	4a05      	ldr	r2, [pc, #20]	; (8003464 <FLASH_SetErrorCode+0x90>)
 800344e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <FLASH_SetErrorCode+0x8c>)
 8003452:	22f2      	movs	r2, #242	; 0xf2
 8003454:	60da      	str	r2, [r3, #12]
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40023c00 	.word	0x40023c00
 8003464:	200072a0 	.word	0x200072a0

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e175      	b.n	8003774 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f040 8164 	bne.w	800376e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d00b      	beq.n	80034c6 <HAL_GPIO_Init+0x5e>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d007      	beq.n	80034c6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034ba:	2b11      	cmp	r3, #17
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b12      	cmp	r3, #18
 80034c4:	d130      	bne.n	8003528 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034fc:	2201      	movs	r2, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0201 	and.w	r2, r3, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x100>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b12      	cmp	r3, #18
 8003566:	d123      	bne.n	80035b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80be 	beq.w	800376e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	4b66      	ldr	r3, [pc, #408]	; (800378c <HAL_GPIO_Init+0x324>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4a65      	ldr	r2, [pc, #404]	; (800378c <HAL_GPIO_Init+0x324>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6453      	str	r3, [r2, #68]	; 0x44
 80035fe:	4b63      	ldr	r3, [pc, #396]	; (800378c <HAL_GPIO_Init+0x324>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800360a:	4a61      	ldr	r2, [pc, #388]	; (8003790 <HAL_GPIO_Init+0x328>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_GPIO_Init+0x32c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d037      	beq.n	80036a6 <HAL_GPIO_Init+0x23e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a57      	ldr	r2, [pc, #348]	; (8003798 <HAL_GPIO_Init+0x330>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d031      	beq.n	80036a2 <HAL_GPIO_Init+0x23a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a56      	ldr	r2, [pc, #344]	; (800379c <HAL_GPIO_Init+0x334>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02b      	beq.n	800369e <HAL_GPIO_Init+0x236>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a55      	ldr	r2, [pc, #340]	; (80037a0 <HAL_GPIO_Init+0x338>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d025      	beq.n	800369a <HAL_GPIO_Init+0x232>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a54      	ldr	r2, [pc, #336]	; (80037a4 <HAL_GPIO_Init+0x33c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01f      	beq.n	8003696 <HAL_GPIO_Init+0x22e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <HAL_GPIO_Init+0x340>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d019      	beq.n	8003692 <HAL_GPIO_Init+0x22a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_GPIO_Init+0x344>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_GPIO_Init+0x226>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a51      	ldr	r2, [pc, #324]	; (80037b0 <HAL_GPIO_Init+0x348>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <HAL_GPIO_Init+0x222>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_GPIO_Init+0x34c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x21e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4f      	ldr	r2, [pc, #316]	; (80037b8 <HAL_GPIO_Init+0x350>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x21a>
 800367e:	2309      	movs	r3, #9
 8003680:	e012      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 8003682:	230a      	movs	r3, #10
 8003684:	e010      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 8003686:	2308      	movs	r3, #8
 8003688:	e00e      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 800368a:	2307      	movs	r3, #7
 800368c:	e00c      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 800368e:	2306      	movs	r3, #6
 8003690:	e00a      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 8003692:	2305      	movs	r3, #5
 8003694:	e008      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 8003696:	2304      	movs	r3, #4
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 800369a:	2303      	movs	r3, #3
 800369c:	e004      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 800369e:	2302      	movs	r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_GPIO_Init+0x240>
 80036a6:	2300      	movs	r3, #0
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f002 0203 	and.w	r2, r2, #3
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	4093      	lsls	r3, r2
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036b8:	4935      	ldr	r1, [pc, #212]	; (8003790 <HAL_GPIO_Init+0x328>)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_GPIO_Init+0x354>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ea:	4a34      	ldr	r2, [pc, #208]	; (80037bc <HAL_GPIO_Init+0x354>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_GPIO_Init+0x354>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003714:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_GPIO_Init+0x354>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371a:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_GPIO_Init+0x354>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_GPIO_Init+0x354>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_GPIO_Init+0x354>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <HAL_GPIO_Init+0x354>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3301      	adds	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	f67f ae86 	bls.w	8003488 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	40013800 	.word	0x40013800
 8003794:	40020000 	.word	0x40020000
 8003798:	40020400 	.word	0x40020400
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40021400 	.word	0x40021400
 80037ac:	40021800 	.word	0x40021800
 80037b0:	40021c00 	.word	0x40021c00
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022400 	.word	0x40022400
 80037bc:	40013c00 	.word	0x40013c00

080037c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
 80037cc:	4613      	mov	r3, r2
 80037ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d0:	787b      	ldrb	r3, [r7, #1]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037dc:	e003      	b.n	80037e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	041a      	lsls	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	619a      	str	r2, [r3, #24]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f4:	b08f      	sub	sp, #60	; 0x3c
 80037f6:	af0a      	add	r7, sp, #40	; 0x28
 80037f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e116      	b.n	8003a32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd ffae 	bl	8001780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2203      	movs	r2, #3
 8003828:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f002 f9c4 	bl	8005bd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	687e      	ldr	r6, [r7, #4]
 8003850:	466d      	mov	r5, sp
 8003852:	f106 0410 	add.w	r4, r6, #16
 8003856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003862:	e885 0003 	stmia.w	r5, {r0, r1}
 8003866:	1d33      	adds	r3, r6, #4
 8003868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386a:	6838      	ldr	r0, [r7, #0]
 800386c:	f002 f958 	bl	8005b20 <USB_CoreInit>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0d7      	b.n	8003a32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f002 f9b2 	bl	8005bf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e04a      	b.n	800392a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333d      	adds	r3, #61	; 0x3d
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	333c      	adds	r3, #60	; 0x3c
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	b298      	uxth	r0, r3
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3342      	adds	r3, #66	; 0x42
 80038d0:	4602      	mov	r2, r0
 80038d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	333f      	adds	r3, #63	; 0x3f
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3344      	adds	r3, #68	; 0x44
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3348      	adds	r3, #72	; 0x48
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3350      	adds	r3, #80	; 0x50
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	3301      	adds	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d3af      	bcc.n	8003894 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	e044      	b.n	80039c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	3301      	adds	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3b5      	bcc.n	800393a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	687e      	ldr	r6, [r7, #4]
 80039d6:	466d      	mov	r5, sp
 80039d8:	f106 0410 	add.w	r4, r6, #16
 80039dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ec:	1d33      	adds	r3, r6, #4
 80039ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f0:	6838      	ldr	r0, [r7, #0]
 80039f2:	f002 f929 	bl	8005c48 <USB_DevInit>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e014      	b.n	8003a32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d102      	bne.n	8003a26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f80b 	bl	8003a3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 fadb 	bl	8005fe6 <USB_DevDisconnect>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	10000003 	.word	0x10000003

08003a84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e291      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8087 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac8:	4b96      	ldr	r3, [pc, #600]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d00c      	beq.n	8003aee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad4:	4b93      	ldr	r3, [pc, #588]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d112      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
 8003ae0:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aee:	4b8d      	ldr	r3, [pc, #564]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d06c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x130>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d168      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e26b      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7a>
 8003b10:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a83      	ldr	r2, [pc, #524]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e02e      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x9c>
 8003b26:	4b7f      	ldr	r3, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7e      	ldr	r2, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7b      	ldr	r2, [pc, #492]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xd8>
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6b      	ldr	r2, [pc, #428]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f81c 	bl	8001bc0 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f818 	bl	8001bc0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e21f      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b61      	ldr	r3, [pc, #388]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe f808 	bl	8001bc0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f804 	bl	8001bc0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e20b      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x110>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d069      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bee:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d11c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x190>
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x17a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1df      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	493d      	ldr	r1, [pc, #244]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	e040      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd ffba 	bl	8001bc0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fd ffb6 	bl	8001bc0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1bd      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4929      	ldr	r1, [pc, #164]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
 8003c82:	e018      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd ff96 	bl	8001bc0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fd ff92 	bl	8001bc0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e199      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d038      	beq.n	8003d34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d019      	beq.n	8003cfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fd ff73 	bl	8001bc0 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fd ff6f 	bl	8001bc0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e176      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x23a>
 8003cfc:	e01a      	b.n	8003d34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <HAL_RCC_OscConfig+0x280>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0a:	f7fd ff59 	bl	8001bc0 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	e00a      	b.n	8003d28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fd ff55 	bl	8001bc0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d903      	bls.n	8003d28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e15c      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
 8003d24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	4b91      	ldr	r3, [pc, #580]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ee      	bne.n	8003d12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a4 	beq.w	8003e8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d42:	4b8b      	ldr	r3, [pc, #556]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10d      	bne.n	8003d6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a87      	ldr	r2, [pc, #540]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b85      	ldr	r3, [pc, #532]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6a:	4b82      	ldr	r3, [pc, #520]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d118      	bne.n	8003da8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d76:	4b7f      	ldr	r3, [pc, #508]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7e      	ldr	r2, [pc, #504]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d82:	f7fd ff1d 	bl	8001bc0 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd ff19 	bl	8001bc0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	; 0x64
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e120      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	4b75      	ldr	r3, [pc, #468]	; (8003f74 <HAL_RCC_OscConfig+0x4d0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x31a>
 8003db0:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a6e      	ldr	r2, [pc, #440]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	e02d      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x33c>
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a69      	ldr	r2, [pc, #420]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a66      	ldr	r2, [pc, #408]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	e01c      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0x35e>
 8003de8:	4b61      	ldr	r3, [pc, #388]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a60      	ldr	r2, [pc, #384]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	4b5e      	ldr	r3, [pc, #376]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4a5d      	ldr	r2, [pc, #372]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
 8003e02:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a5a      	ldr	r2, [pc, #360]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd fecd 	bl	8001bc0 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fd fec9 	bl	8001bc0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0ce      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCC_OscConfig+0x386>
 8003e4c:	e014      	b.n	8003e78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd feb7 	bl	8001bc0 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd feb3 	bl	8001bc0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0b8      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b3c      	ldr	r3, [pc, #240]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80a4 	beq.w	8003fdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d06b      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d149      	bne.n	8003f3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a30      	ldr	r2, [pc, #192]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fe84 	bl	8001bc0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fe80 	bl	8001bc0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e087      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	4313      	orrs	r3, r2
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fe54 	bl	8001bc0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fe50 	bl	8001bc0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e057      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x478>
 8003f3a:	e04f      	b.n	8003fdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd fe3a 	bl	8001bc0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fe36 	bl	8001bc0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e03d      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4ac>
 8003f6e:	e035      	b.n	8003fdc <HAL_RCC_OscConfig+0x538>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x544>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d121      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800

08003fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0d0      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004004:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d910      	bls.n	8004034 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b67      	ldr	r3, [pc, #412]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 020f 	bic.w	r2, r3, #15
 800401a:	4965      	ldr	r1, [pc, #404]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4313      	orrs	r3, r2
 8004020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b63      	ldr	r3, [pc, #396]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0b8      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800404c:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a58      	ldr	r2, [pc, #352]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004056:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a52      	ldr	r2, [pc, #328]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800406e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b50      	ldr	r3, [pc, #320]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	494d      	ldr	r1, [pc, #308]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d040      	beq.n	8004110 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d115      	bne.n	80040ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e073      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06b      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4936      	ldr	r1, [pc, #216]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e0:	f7fd fd6e 	bl	8001bc0 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e8:	f7fd fd6a 	bl	8001bc0 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e053      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 020c 	and.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	429a      	cmp	r2, r3
 800410e:	d1eb      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004110:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d210      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 020f 	bic.w	r2, r3, #15
 8004126:	4922      	ldr	r1, [pc, #136]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e032      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4916      	ldr	r1, [pc, #88]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	490e      	ldr	r1, [pc, #56]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800417e:	f000 f821 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 8004182:	4602      	mov	r2, r0
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	490a      	ldr	r1, [pc, #40]	; (80041b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	4a09      	ldr	r2, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1d0>)
 8004198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <HAL_RCC_ClockConfig+0x1d4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fd fb68 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023c00 	.word	0x40023c00
 80041b4:	40023800 	.word	0x40023800
 80041b8:	0801d4a8 	.word	0x0801d4a8
 80041bc:	20000004 	.word	0x20000004
 80041c0:	20000008 	.word	0x20000008

080041c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	2300      	movs	r3, #0
 80041d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041dc:	4b67      	ldr	r3, [pc, #412]	; (800437c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d00d      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x40>
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	f200 80bd 	bhi.w	8004368 <HAL_RCC_GetSysClockFreq+0x1a4>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x34>
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0x3a>
 80041f6:	e0b7      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041fa:	60bb      	str	r3, [r7, #8]
      break;
 80041fc:	e0b7      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fe:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004200:	60bb      	str	r3, [r7, #8]
      break;
 8004202:	e0b4      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004204:	4b5d      	ldr	r3, [pc, #372]	; (800437c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800420c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04d      	beq.n	80042b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421a:	4b58      	ldr	r3, [pc, #352]	; (800437c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	461a      	mov	r2, r3
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f240 10ff 	movw	r0, #511	; 0x1ff
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	ea02 0800 	and.w	r8, r2, r0
 8004232:	ea03 0901 	and.w	r9, r3, r1
 8004236:	4640      	mov	r0, r8
 8004238:	4649      	mov	r1, r9
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	014b      	lsls	r3, r1, #5
 8004244:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004248:	0142      	lsls	r2, r0, #5
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	ebb0 0008 	subs.w	r0, r0, r8
 8004252:	eb61 0109 	sbc.w	r1, r1, r9
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004264:	0182      	lsls	r2, r0, #6
 8004266:	1a12      	subs	r2, r2, r0
 8004268:	eb63 0301 	sbc.w	r3, r3, r1
 800426c:	f04f 0000 	mov.w	r0, #0
 8004270:	f04f 0100 	mov.w	r1, #0
 8004274:	00d9      	lsls	r1, r3, #3
 8004276:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800427a:	00d0      	lsls	r0, r2, #3
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	eb12 0208 	adds.w	r2, r2, r8
 8004284:	eb43 0309 	adc.w	r3, r3, r9
 8004288:	f04f 0000 	mov.w	r0, #0
 800428c:	f04f 0100 	mov.w	r1, #0
 8004290:	0259      	lsls	r1, r3, #9
 8004292:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004296:	0250      	lsls	r0, r2, #9
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f7fc f81a 	bl	80002e0 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4613      	mov	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	e04a      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	099b      	lsrs	r3, r3, #6
 80042bc:	461a      	mov	r2, r3
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	ea02 0400 	and.w	r4, r2, r0
 80042ce:	ea03 0501 	and.w	r5, r3, r1
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	014b      	lsls	r3, r1, #5
 80042e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e4:	0142      	lsls	r2, r0, #5
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	1b00      	subs	r0, r0, r4
 80042ec:	eb61 0105 	sbc.w	r1, r1, r5
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	018b      	lsls	r3, r1, #6
 80042fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042fe:	0182      	lsls	r2, r0, #6
 8004300:	1a12      	subs	r2, r2, r0
 8004302:	eb63 0301 	sbc.w	r3, r3, r1
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	00d9      	lsls	r1, r3, #3
 8004310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004314:	00d0      	lsls	r0, r2, #3
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	1912      	adds	r2, r2, r4
 800431c:	eb45 0303 	adc.w	r3, r5, r3
 8004320:	f04f 0000 	mov.w	r0, #0
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	0299      	lsls	r1, r3, #10
 800432a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800432e:	0290      	lsls	r0, r2, #10
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	461a      	mov	r2, r3
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	f7fb ffce 	bl	80002e0 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	60bb      	str	r3, [r7, #8]
      break;
 8004366:	e002      	b.n	800436e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800436a:	60bb      	str	r3, [r7, #8]
      break;
 800436c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436e:	68bb      	ldr	r3, [r7, #8]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	00f42400 	.word	0x00f42400
 8004384:	007a1200 	.word	0x007a1200

08004388 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCC_GetHCLKFreq+0x14>)
 800438e:	681b      	ldr	r3, [r3, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043a4:	f7ff fff0 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4903      	ldr	r1, [pc, #12]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	0801d4b8 	.word	0x0801d4b8

080043c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043cc:	f7ff ffdc 	bl	8004388 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0b5b      	lsrs	r3, r3, #13
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	0801d4b8 	.word	0x0801d4b8

080043f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	220f      	movs	r2, #15
 80043fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_GetClockConfig+0x5c>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0203 	and.w	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCC_GetClockConfig+0x5c>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCC_GetClockConfig+0x5c>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_GetClockConfig+0x5c>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_RCC_GetClockConfig+0x60>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40023c00 	.word	0x40023c00

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d012      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800447c:	4b69      	ldr	r3, [pc, #420]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a68      	ldr	r2, [pc, #416]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004486:	6093      	str	r3, [r2, #8]
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	4964      	ldr	r1, [pc, #400]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d017      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ae:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	4959      	ldr	r1, [pc, #356]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044cc:	d101      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044ce:	2301      	movs	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d017      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ea:	4b4e      	ldr	r3, [pc, #312]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	494a      	ldr	r1, [pc, #296]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004508:	d101      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800450a:	2301      	movs	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004516:	2301      	movs	r3, #1
 8004518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004526:	2301      	movs	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 808b 	beq.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	4b3a      	ldr	r3, [pc, #232]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	4a39      	ldr	r2, [pc, #228]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6413      	str	r3, [r2, #64]	; 0x40
 8004544:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004550:	4b35      	ldr	r3, [pc, #212]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a34      	ldr	r2, [pc, #208]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455c:	f7fd fb30 	bl	8001bc0 <HAL_GetTick>
 8004560:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fd fb2c 	bl	8001bc0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e357      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004582:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d035      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	429a      	cmp	r2, r3
 800459e:	d02e      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a0:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d114      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd faf4 	bl	8001bc0 <HAL_GetTick>
 80045d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd faf0 	bl	8001bc0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e319      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ee      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460a:	d111      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800461a:	400b      	ands	r3, r1
 800461c:	4901      	ldr	r1, [pc, #4]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	e00b      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004624:	40023800 	.word	0x40023800
 8004628:	40007000 	.word	0x40007000
 800462c:	0ffffcff 	.word	0x0ffffcff
 8004630:	4bb1      	ldr	r3, [pc, #708]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4ab0      	ldr	r2, [pc, #704]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004636:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	4bae      	ldr	r3, [pc, #696]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004648:	49ab      	ldr	r1, [pc, #684]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	d010      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800465a:	4ba7      	ldr	r3, [pc, #668]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800465c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004660:	4aa5      	ldr	r2, [pc, #660]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004666:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800466a:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800466c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	49a0      	ldr	r1, [pc, #640]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004688:	4b9b      	ldr	r3, [pc, #620]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004696:	4998      	ldr	r1, [pc, #608]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046aa:	4b93      	ldr	r3, [pc, #588]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b8:	498f      	ldr	r1, [pc, #572]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046cc:	4b8a      	ldr	r3, [pc, #552]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	4987      	ldr	r1, [pc, #540]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046ee:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	497e      	ldr	r1, [pc, #504]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004710:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f023 0203 	bic.w	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	4976      	ldr	r1, [pc, #472]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004732:	4b71      	ldr	r3, [pc, #452]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f023 020c 	bic.w	r2, r3, #12
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	496d      	ldr	r1, [pc, #436]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004754:	4b68      	ldr	r3, [pc, #416]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004762:	4965      	ldr	r1, [pc, #404]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004776:	4b60      	ldr	r3, [pc, #384]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	495c      	ldr	r1, [pc, #368]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004798:	4b57      	ldr	r3, [pc, #348]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	4954      	ldr	r1, [pc, #336]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047ba:	4b4f      	ldr	r3, [pc, #316]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	494b      	ldr	r1, [pc, #300]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047dc:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	4943      	ldr	r1, [pc, #268]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047fe:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	493a      	ldr	r1, [pc, #232]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482e:	4932      	ldr	r1, [pc, #200]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d011      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004842:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004850:	4929      	ldr	r1, [pc, #164]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004860:	d101      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004872:	2301      	movs	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004882:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	4919      	ldr	r1, [pc, #100]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048a4:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b4:	4910      	ldr	r1, [pc, #64]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d006      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80d9 	beq.w	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048dc:	f7fd f970 	bl	8001bc0 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e2:	e00b      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e4:	f7fd f96c 	bl	8001bc0 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d904      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e197      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048fc:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ed      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d021      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11d      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800491c:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800492a:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004930:	0e1b      	lsrs	r3, r3, #24
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	019a      	lsls	r2, r3, #6
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	431a      	orrs	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	071b      	lsls	r3, r3, #28
 8004950:	4957      	ldr	r1, [pc, #348]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02e      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004982:	d129      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004992:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004998:	0f1b      	lsrs	r3, r3, #28
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	019a      	lsls	r2, r3, #6
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	431a      	orrs	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	071b      	lsls	r3, r3, #28
 80049b8:	493d      	ldr	r1, [pc, #244]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049c0:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c6:	f023 021f 	bic.w	r2, r3, #31
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4937      	ldr	r1, [pc, #220]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01d      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049e4:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ea:	0e1b      	lsrs	r3, r3, #24
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049f2:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f8:	0f1b      	lsrs	r3, r3, #28
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	019a      	lsls	r2, r3, #6
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	071b      	lsls	r3, r3, #28
 8004a18:	4925      	ldr	r1, [pc, #148]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d011      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	019a      	lsls	r2, r3, #6
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	071b      	lsls	r3, r3, #28
 8004a48:	4919      	ldr	r1, [pc, #100]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a50:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fd f8b0 	bl	8001bc0 <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a64:	f7fd f8ac 	bl	8001bc0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0d7      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 80cd 	bne.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a96:	f7fd f893 	bl	8001bc0 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a9e:	f7fd f88f 	bl	8001bc0 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	; 0x64
 8004aaa:	d903      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0ba      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ab0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ab4:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac0:	d0ed      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02e      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d12a      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aea:	4b51      	ldr	r3, [pc, #324]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af8:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	0f1b      	lsrs	r3, r3, #28
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	019a      	lsls	r2, r3, #6
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	4944      	ldr	r1, [pc, #272]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b26:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	493d      	ldr	r1, [pc, #244]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b54:	d11d      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b56:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	0e1b      	lsrs	r3, r3, #24
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	0f1b      	lsrs	r3, r3, #28
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	019a      	lsls	r2, r3, #6
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	4929      	ldr	r1, [pc, #164]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	0e1b      	lsrs	r3, r3, #24
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bac:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	019a      	lsls	r2, r3, #6
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	4917      	ldr	r1, [pc, #92]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	4911      	ldr	r1, [pc, #68]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0e      	ldr	r2, [pc, #56]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fc ffe0 	bl	8001bc0 <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c04:	f7fc ffdc 	bl	8001bc0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e007      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c22:	d1ef      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800

08004c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e049      	b.n	8004cda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f841 	bl	8004ce2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fa00 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e054      	b.n	8004dba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_TIM_Base_Start_IT+0xd4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_TIM_Base_Start_IT+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d115      	bne.n	8004da4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_TIM_Base_Start_IT+0xec>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d015      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0xbe>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d011      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40001800 	.word	0x40001800
 8004de4:	00010007 	.word	0x00010007

08004de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0202 	mvn.w	r2, #2
 8004e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f905 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8f7 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f908 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0204 	mvn.w	r2, #4
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8db 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8cd 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8de 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0208 	mvn.w	r2, #8
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8b1 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8a3 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8b4 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0210 	mvn.w	r2, #16
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2208      	movs	r2, #8
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f887 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f879 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f88a 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10e      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d107      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0201 	mvn.w	r2, #1
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fb6a 	bl	8001640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d10e      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d107      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f91a 	bl	80051cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d10e      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d107      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f90d 	bl	80051e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d107      	bne.n	8004ff2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f838 	bl	8005062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d10e      	bne.n	800501e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d107      	bne.n	800501e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f06f 0220 	mvn.w	r2, #32
 8005016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8cd 	bl	80051b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a40      	ldr	r2, [pc, #256]	; (800518c <TIM_Base_SetConfig+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3d      	ldr	r2, [pc, #244]	; (8005190 <TIM_Base_SetConfig+0x118>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <TIM_Base_SetConfig+0x11c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3b      	ldr	r2, [pc, #236]	; (8005198 <TIM_Base_SetConfig+0x120>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3a      	ldr	r2, [pc, #232]	; (800519c <TIM_Base_SetConfig+0x124>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	; (800518c <TIM_Base_SetConfig+0x114>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d027      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <TIM_Base_SetConfig+0x118>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d023      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <TIM_Base_SetConfig+0x11c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <TIM_Base_SetConfig+0x120>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <TIM_Base_SetConfig+0x124>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a28      	ldr	r2, [pc, #160]	; (80051a0 <TIM_Base_SetConfig+0x128>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <TIM_Base_SetConfig+0x12c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <TIM_Base_SetConfig+0x130>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a25      	ldr	r2, [pc, #148]	; (80051ac <TIM_Base_SetConfig+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <TIM_Base_SetConfig+0x138>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <TIM_Base_SetConfig+0x13c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <TIM_Base_SetConfig+0x114>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <TIM_Base_SetConfig+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40001800 	.word	0x40001800
 80051b0:	40001c00 	.word	0x40001c00
 80051b4:	40002000 	.word	0x40002000

080051b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e040      	b.n	8005288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fa52 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	; 0x24
 8005220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8c0 	bl	80053b8 <UART_SetConfig>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e022      	b.n	8005288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fb16 	bl	800587c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800525e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800526e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb9d 	bl	80059c0 <UART_CheckIdleState>
 8005286:	4603      	mov	r3, r0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	f040 8081 	bne.w	80053ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_UART_Transmit+0x26>
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e079      	b.n	80053ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_UART_Transmit+0x38>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e072      	b.n	80053ae <HAL_UART_Transmit+0x11e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2221      	movs	r2, #33	; 0x21
 80052dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052de:	f7fc fc6f 	bl	8001bc0 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fc:	d108      	bne.n	8005310 <HAL_UART_Transmit+0x80>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d104      	bne.n	8005310 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e003      	b.n	8005318 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005320:	e02c      	b.n	800537c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fb7a 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e038      	b.n	80053ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005350:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	3302      	adds	r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e007      	b.n	800536a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	781a      	ldrb	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	3301      	adds	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1cc      	bne.n	8005322 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2200      	movs	r2, #0
 8005390:	2140      	movs	r1, #64	; 0x40
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fb47 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e005      	b.n	80053ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4ba7      	ldr	r3, [pc, #668]	; (8005680 <UART_SetConfig+0x2c8>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	6979      	ldr	r1, [r7, #20]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	430a      	orrs	r2, r1
 8005428:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a95      	ldr	r2, [pc, #596]	; (8005684 <UART_SetConfig+0x2cc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d120      	bne.n	8005476 <UART_SetConfig+0xbe>
 8005434:	4b94      	ldr	r3, [pc, #592]	; (8005688 <UART_SetConfig+0x2d0>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d816      	bhi.n	8005470 <UART_SetConfig+0xb8>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x90>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005459 	.word	0x08005459
 800544c:	08005465 	.word	0x08005465
 8005450:	0800545f 	.word	0x0800545f
 8005454:	0800546b 	.word	0x0800546b
 8005458:	2301      	movs	r3, #1
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e14f      	b.n	80056fe <UART_SetConfig+0x346>
 800545e:	2302      	movs	r3, #2
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e14c      	b.n	80056fe <UART_SetConfig+0x346>
 8005464:	2304      	movs	r3, #4
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e149      	b.n	80056fe <UART_SetConfig+0x346>
 800546a:	2308      	movs	r3, #8
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e146      	b.n	80056fe <UART_SetConfig+0x346>
 8005470:	2310      	movs	r3, #16
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e143      	b.n	80056fe <UART_SetConfig+0x346>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a84      	ldr	r2, [pc, #528]	; (800568c <UART_SetConfig+0x2d4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d132      	bne.n	80054e6 <UART_SetConfig+0x12e>
 8005480:	4b81      	ldr	r3, [pc, #516]	; (8005688 <UART_SetConfig+0x2d0>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d828      	bhi.n	80054e0 <UART_SetConfig+0x128>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xdc>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080054e1 	.word	0x080054e1
 800549c:	080054e1 	.word	0x080054e1
 80054a0:	080054e1 	.word	0x080054e1
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054e1 	.word	0x080054e1
 80054ac:	080054e1 	.word	0x080054e1
 80054b0:	080054e1 	.word	0x080054e1
 80054b4:	080054cf 	.word	0x080054cf
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054e1 	.word	0x080054e1
 80054c4:	080054db 	.word	0x080054db
 80054c8:	2300      	movs	r3, #0
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e117      	b.n	80056fe <UART_SetConfig+0x346>
 80054ce:	2302      	movs	r3, #2
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e114      	b.n	80056fe <UART_SetConfig+0x346>
 80054d4:	2304      	movs	r3, #4
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e111      	b.n	80056fe <UART_SetConfig+0x346>
 80054da:	2308      	movs	r3, #8
 80054dc:	77fb      	strb	r3, [r7, #31]
 80054de:	e10e      	b.n	80056fe <UART_SetConfig+0x346>
 80054e0:	2310      	movs	r3, #16
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e10b      	b.n	80056fe <UART_SetConfig+0x346>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a69      	ldr	r2, [pc, #420]	; (8005690 <UART_SetConfig+0x2d8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d120      	bne.n	8005532 <UART_SetConfig+0x17a>
 80054f0:	4b65      	ldr	r3, [pc, #404]	; (8005688 <UART_SetConfig+0x2d0>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054fa:	2b30      	cmp	r3, #48	; 0x30
 80054fc:	d013      	beq.n	8005526 <UART_SetConfig+0x16e>
 80054fe:	2b30      	cmp	r3, #48	; 0x30
 8005500:	d814      	bhi.n	800552c <UART_SetConfig+0x174>
 8005502:	2b20      	cmp	r3, #32
 8005504:	d009      	beq.n	800551a <UART_SetConfig+0x162>
 8005506:	2b20      	cmp	r3, #32
 8005508:	d810      	bhi.n	800552c <UART_SetConfig+0x174>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <UART_SetConfig+0x15c>
 800550e:	2b10      	cmp	r3, #16
 8005510:	d006      	beq.n	8005520 <UART_SetConfig+0x168>
 8005512:	e00b      	b.n	800552c <UART_SetConfig+0x174>
 8005514:	2300      	movs	r3, #0
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e0f1      	b.n	80056fe <UART_SetConfig+0x346>
 800551a:	2302      	movs	r3, #2
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e0ee      	b.n	80056fe <UART_SetConfig+0x346>
 8005520:	2304      	movs	r3, #4
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e0eb      	b.n	80056fe <UART_SetConfig+0x346>
 8005526:	2308      	movs	r3, #8
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e0e8      	b.n	80056fe <UART_SetConfig+0x346>
 800552c:	2310      	movs	r3, #16
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e0e5      	b.n	80056fe <UART_SetConfig+0x346>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a57      	ldr	r2, [pc, #348]	; (8005694 <UART_SetConfig+0x2dc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d120      	bne.n	800557e <UART_SetConfig+0x1c6>
 800553c:	4b52      	ldr	r3, [pc, #328]	; (8005688 <UART_SetConfig+0x2d0>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005546:	2bc0      	cmp	r3, #192	; 0xc0
 8005548:	d013      	beq.n	8005572 <UART_SetConfig+0x1ba>
 800554a:	2bc0      	cmp	r3, #192	; 0xc0
 800554c:	d814      	bhi.n	8005578 <UART_SetConfig+0x1c0>
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d009      	beq.n	8005566 <UART_SetConfig+0x1ae>
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d810      	bhi.n	8005578 <UART_SetConfig+0x1c0>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <UART_SetConfig+0x1a8>
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d006      	beq.n	800556c <UART_SetConfig+0x1b4>
 800555e:	e00b      	b.n	8005578 <UART_SetConfig+0x1c0>
 8005560:	2300      	movs	r3, #0
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e0cb      	b.n	80056fe <UART_SetConfig+0x346>
 8005566:	2302      	movs	r3, #2
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e0c8      	b.n	80056fe <UART_SetConfig+0x346>
 800556c:	2304      	movs	r3, #4
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e0c5      	b.n	80056fe <UART_SetConfig+0x346>
 8005572:	2308      	movs	r3, #8
 8005574:	77fb      	strb	r3, [r7, #31]
 8005576:	e0c2      	b.n	80056fe <UART_SetConfig+0x346>
 8005578:	2310      	movs	r3, #16
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e0bf      	b.n	80056fe <UART_SetConfig+0x346>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a45      	ldr	r2, [pc, #276]	; (8005698 <UART_SetConfig+0x2e0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d125      	bne.n	80055d4 <UART_SetConfig+0x21c>
 8005588:	4b3f      	ldr	r3, [pc, #252]	; (8005688 <UART_SetConfig+0x2d0>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005596:	d017      	beq.n	80055c8 <UART_SetConfig+0x210>
 8005598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559c:	d817      	bhi.n	80055ce <UART_SetConfig+0x216>
 800559e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a2:	d00b      	beq.n	80055bc <UART_SetConfig+0x204>
 80055a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a8:	d811      	bhi.n	80055ce <UART_SetConfig+0x216>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <UART_SetConfig+0x1fe>
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b2:	d006      	beq.n	80055c2 <UART_SetConfig+0x20a>
 80055b4:	e00b      	b.n	80055ce <UART_SetConfig+0x216>
 80055b6:	2300      	movs	r3, #0
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e0a0      	b.n	80056fe <UART_SetConfig+0x346>
 80055bc:	2302      	movs	r3, #2
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e09d      	b.n	80056fe <UART_SetConfig+0x346>
 80055c2:	2304      	movs	r3, #4
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e09a      	b.n	80056fe <UART_SetConfig+0x346>
 80055c8:	2308      	movs	r3, #8
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e097      	b.n	80056fe <UART_SetConfig+0x346>
 80055ce:	2310      	movs	r3, #16
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e094      	b.n	80056fe <UART_SetConfig+0x346>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a30      	ldr	r2, [pc, #192]	; (800569c <UART_SetConfig+0x2e4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d125      	bne.n	800562a <UART_SetConfig+0x272>
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <UART_SetConfig+0x2d0>)
 80055e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ec:	d017      	beq.n	800561e <UART_SetConfig+0x266>
 80055ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f2:	d817      	bhi.n	8005624 <UART_SetConfig+0x26c>
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	d00b      	beq.n	8005612 <UART_SetConfig+0x25a>
 80055fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fe:	d811      	bhi.n	8005624 <UART_SetConfig+0x26c>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <UART_SetConfig+0x254>
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d006      	beq.n	8005618 <UART_SetConfig+0x260>
 800560a:	e00b      	b.n	8005624 <UART_SetConfig+0x26c>
 800560c:	2301      	movs	r3, #1
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e075      	b.n	80056fe <UART_SetConfig+0x346>
 8005612:	2302      	movs	r3, #2
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e072      	b.n	80056fe <UART_SetConfig+0x346>
 8005618:	2304      	movs	r3, #4
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e06f      	b.n	80056fe <UART_SetConfig+0x346>
 800561e:	2308      	movs	r3, #8
 8005620:	77fb      	strb	r3, [r7, #31]
 8005622:	e06c      	b.n	80056fe <UART_SetConfig+0x346>
 8005624:	2310      	movs	r3, #16
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e069      	b.n	80056fe <UART_SetConfig+0x346>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <UART_SetConfig+0x2e8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d137      	bne.n	80056a4 <UART_SetConfig+0x2ec>
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <UART_SetConfig+0x2d0>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800563e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005642:	d017      	beq.n	8005674 <UART_SetConfig+0x2bc>
 8005644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005648:	d817      	bhi.n	800567a <UART_SetConfig+0x2c2>
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564e:	d00b      	beq.n	8005668 <UART_SetConfig+0x2b0>
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d811      	bhi.n	800567a <UART_SetConfig+0x2c2>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <UART_SetConfig+0x2aa>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565e:	d006      	beq.n	800566e <UART_SetConfig+0x2b6>
 8005660:	e00b      	b.n	800567a <UART_SetConfig+0x2c2>
 8005662:	2300      	movs	r3, #0
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e04a      	b.n	80056fe <UART_SetConfig+0x346>
 8005668:	2302      	movs	r3, #2
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e047      	b.n	80056fe <UART_SetConfig+0x346>
 800566e:	2304      	movs	r3, #4
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e044      	b.n	80056fe <UART_SetConfig+0x346>
 8005674:	2308      	movs	r3, #8
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e041      	b.n	80056fe <UART_SetConfig+0x346>
 800567a:	2310      	movs	r3, #16
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e03e      	b.n	80056fe <UART_SetConfig+0x346>
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40011000 	.word	0x40011000
 8005688:	40023800 	.word	0x40023800
 800568c:	40004400 	.word	0x40004400
 8005690:	40004800 	.word	0x40004800
 8005694:	40004c00 	.word	0x40004c00
 8005698:	40005000 	.word	0x40005000
 800569c:	40011400 	.word	0x40011400
 80056a0:	40007800 	.word	0x40007800
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a71      	ldr	r2, [pc, #452]	; (8005870 <UART_SetConfig+0x4b8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d125      	bne.n	80056fa <UART_SetConfig+0x342>
 80056ae:	4b71      	ldr	r3, [pc, #452]	; (8005874 <UART_SetConfig+0x4bc>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056bc:	d017      	beq.n	80056ee <UART_SetConfig+0x336>
 80056be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056c2:	d817      	bhi.n	80056f4 <UART_SetConfig+0x33c>
 80056c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c8:	d00b      	beq.n	80056e2 <UART_SetConfig+0x32a>
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ce:	d811      	bhi.n	80056f4 <UART_SetConfig+0x33c>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <UART_SetConfig+0x324>
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d8:	d006      	beq.n	80056e8 <UART_SetConfig+0x330>
 80056da:	e00b      	b.n	80056f4 <UART_SetConfig+0x33c>
 80056dc:	2300      	movs	r3, #0
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e00d      	b.n	80056fe <UART_SetConfig+0x346>
 80056e2:	2302      	movs	r3, #2
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e00a      	b.n	80056fe <UART_SetConfig+0x346>
 80056e8:	2304      	movs	r3, #4
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e007      	b.n	80056fe <UART_SetConfig+0x346>
 80056ee:	2308      	movs	r3, #8
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e004      	b.n	80056fe <UART_SetConfig+0x346>
 80056f4:	2310      	movs	r3, #16
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e001      	b.n	80056fe <UART_SetConfig+0x346>
 80056fa:	2310      	movs	r3, #16
 80056fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005706:	d15b      	bne.n	80057c0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005708:	7ffb      	ldrb	r3, [r7, #31]
 800570a:	2b08      	cmp	r3, #8
 800570c:	d827      	bhi.n	800575e <UART_SetConfig+0x3a6>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x35c>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fe32 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 800573c:	61b8      	str	r0, [r7, #24]
        break;
 800573e:	e013      	b.n	8005768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fe42 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 8005744:	61b8      	str	r0, [r7, #24]
        break;
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <UART_SetConfig+0x4c0>)
 800574a:	61bb      	str	r3, [r7, #24]
        break;
 800574c:	e00c      	b.n	8005768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fe fd39 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 8005752:	61b8      	str	r0, [r7, #24]
        break;
 8005754:	e008      	b.n	8005768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	61bb      	str	r3, [r7, #24]
        break;
 800575c:	e004      	b.n	8005768 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	77bb      	strb	r3, [r7, #30]
        break;
 8005766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d074      	beq.n	8005858 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	005a      	lsls	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d916      	bls.n	80057ba <UART_SetConfig+0x402>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005792:	d212      	bcs.n	80057ba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f023 030f 	bic.w	r3, r3, #15
 800579c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	89fb      	ldrh	r3, [r7, #14]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	89fa      	ldrh	r2, [r7, #14]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e04e      	b.n	8005858 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	77bb      	strb	r3, [r7, #30]
 80057be:	e04b      	b.n	8005858 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d827      	bhi.n	8005816 <UART_SetConfig+0x45e>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x414>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005817 	.word	0x08005817
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005817 	.word	0x08005817
 80057e4:	08005817 	.word	0x08005817
 80057e8:	08005817 	.word	0x08005817
 80057ec:	0800580f 	.word	0x0800580f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fe fdd6 	bl	80043a0 <HAL_RCC_GetPCLK1Freq>
 80057f4:	61b8      	str	r0, [r7, #24]
        break;
 80057f6:	e013      	b.n	8005820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7fe fde6 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 80057fc:	61b8      	str	r0, [r7, #24]
        break;
 80057fe:	e00f      	b.n	8005820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <UART_SetConfig+0x4c0>)
 8005802:	61bb      	str	r3, [r7, #24]
        break;
 8005804:	e00c      	b.n	8005820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005806:	f7fe fcdd 	bl	80041c4 <HAL_RCC_GetSysClockFreq>
 800580a:	61b8      	str	r0, [r7, #24]
        break;
 800580c:	e008      	b.n	8005820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005812:	61bb      	str	r3, [r7, #24]
        break;
 8005814:	e004      	b.n	8005820 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	77bb      	strb	r3, [r7, #30]
        break;
 800581e:	bf00      	nop
    }

    if (pclk != 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d018      	beq.n	8005858 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085a      	lsrs	r2, r3, #1
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b0f      	cmp	r3, #15
 8005840:	d908      	bls.n	8005854 <UART_SetConfig+0x49c>
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d204      	bcs.n	8005854 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	e001      	b.n	8005858 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005864:	7fbb      	ldrb	r3, [r7, #30]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40007c00 	.word	0x40007c00
 8005874:	40023800 	.word	0x40023800
 8005878:	00f42400 	.word	0x00f42400

0800587c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597a:	d10a      	bne.n	8005992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d0:	f7fc f8f6 	bl	8001bc0 <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10e      	bne.n	8005a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f817 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e00d      	b.n	8005a1e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a36:	e05e      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d05a      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fc f8be 	bl	8001bc0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11b      	bne.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e043      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02c      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d124      	bne.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e00f      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d091      	beq.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b20:	b084      	sub	sp, #16
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	f107 001c 	add.w	r0, r7, #28
 8005b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d120      	bne.n	8005b7a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <USB_CoreInit+0xac>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa5a 	bl	8006028 <USB_CoreReset>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e010      	b.n	8005b9c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa4e 	bl	8006028 <USB_CoreReset>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10b      	bne.n	8005bba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f043 0206 	orr.w	r2, r3, #6
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f043 0220 	orr.w	r2, r3, #32
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bc6:	b004      	add	sp, #16
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	ffbdffbf 	.word	0xffbdffbf

08005bd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f023 0201 	bic.w	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d106      	bne.n	8005c1e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e00b      	b.n	8005c36 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	e001      	b.n	8005c36 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e003      	b.n	8005c3e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c36:	2032      	movs	r0, #50	; 0x32
 8005c38:	f7fb ffce 	bl	8001bd8 <HAL_Delay>

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c48:	b084      	sub	sp, #16
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	e009      	b.n	8005c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	d9f2      	bls.n	8005c68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11c      	bne.n	8005cc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e005      	b.n	8005cce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	461a      	mov	r2, r3
 8005cea:	680b      	ldr	r3, [r1, #0]
 8005cec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10c      	bne.n	8005d0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f959 	bl	8005fb4 <USB_SetDevSpeed>
 8005d02:	e018      	b.n	8005d36 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d04:	2101      	movs	r1, #1
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f954 	bl	8005fb4 <USB_SetDevSpeed>
 8005d0c:	e013      	b.n	8005d36 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d10c      	bne.n	8005d2e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f949 	bl	8005fb4 <USB_SetDevSpeed>
 8005d22:	e008      	b.n	8005d36 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d24:	2101      	movs	r1, #1
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f944 	bl	8005fb4 <USB_SetDevSpeed>
 8005d2c:	e003      	b.n	8005d36 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d2e:	2103      	movs	r1, #3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f93f 	bl	8005fb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d36:	2110      	movs	r1, #16
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8f3 	bl	8005f24 <USB_FlushTxFifo>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f911 	bl	8005f70 <USB_FlushRxFifo>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e043      	b.n	8005e0a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d118      	bne.n	8005dcc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	461a      	mov	r2, r3
 8005dae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e013      	b.n	8005dde <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e008      	b.n	8005dde <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	461a      	mov	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3301      	adds	r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3b7      	bcc.n	8005d82 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e043      	b.n	8005ea0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2e:	d118      	bne.n	8005e62 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e013      	b.n	8005e74 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e008      	b.n	8005e74 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	461a      	mov	r2, r3
 8005e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3b7      	bcc.n	8005e18 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ec8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f043 0210 	orr.w	r2, r3, #16
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <USB_DevInit+0x2d4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d105      	bne.n	8005f0c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <USB_DevInit+0x2d8>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f18:	b004      	add	sp, #16
 8005f1a:	4770      	bx	lr
 8005f1c:	803c3800 	.word	0x803c3800
 8005f20:	40000004 	.word	0x40000004

08005f24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	019b      	lsls	r3, r3, #6
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <USB_FlushTxFifo+0x48>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d901      	bls.n	8005f50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e006      	b.n	8005f5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d0f0      	beq.n	8005f3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	00030d40 	.word	0x00030d40

08005f70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2210      	movs	r2, #16
 8005f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <USB_FlushRxFifo+0x40>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e006      	b.n	8005fa2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d0f0      	beq.n	8005f82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	00030d40 	.word	0x00030d40

08005fb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006000:	f023 0303 	bic.w	r3, r3, #3
 8006004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006014:	f043 0302 	orr.w	r3, r3, #2
 8006018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <USB_CoreReset+0x64>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01b      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	daf2      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_CoreReset+0x64>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d0f0      	beq.n	800605e <USB_CoreReset+0x36>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006090:	b5b0      	push	{r4, r5, r7, lr}
 8006092:	b08e      	sub	sp, #56	; 0x38
 8006094:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006096:	4ba0      	ldr	r3, [pc, #640]	; (8006318 <MX_LWIP_Init+0x288>)
 8006098:	22c0      	movs	r2, #192	; 0xc0
 800609a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800609c:	4b9e      	ldr	r3, [pc, #632]	; (8006318 <MX_LWIP_Init+0x288>)
 800609e:	22a8      	movs	r2, #168	; 0xa8
 80060a0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80060a2:	4b9d      	ldr	r3, [pc, #628]	; (8006318 <MX_LWIP_Init+0x288>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80060a8:	4b9b      	ldr	r3, [pc, #620]	; (8006318 <MX_LWIP_Init+0x288>)
 80060aa:	226f      	movs	r2, #111	; 0x6f
 80060ac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80060ae:	4b9b      	ldr	r3, [pc, #620]	; (800631c <MX_LWIP_Init+0x28c>)
 80060b0:	22ff      	movs	r2, #255	; 0xff
 80060b2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80060b4:	4b99      	ldr	r3, [pc, #612]	; (800631c <MX_LWIP_Init+0x28c>)
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80060ba:	4b98      	ldr	r3, [pc, #608]	; (800631c <MX_LWIP_Init+0x28c>)
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80060c0:	4b96      	ldr	r3, [pc, #600]	; (800631c <MX_LWIP_Init+0x28c>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80060c6:	4b96      	ldr	r3, [pc, #600]	; (8006320 <MX_LWIP_Init+0x290>)
 80060c8:	22c0      	movs	r2, #192	; 0xc0
 80060ca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80060cc:	4b94      	ldr	r3, [pc, #592]	; (8006320 <MX_LWIP_Init+0x290>)
 80060ce:	22a8      	movs	r2, #168	; 0xa8
 80060d0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80060d2:	4b93      	ldr	r3, [pc, #588]	; (8006320 <MX_LWIP_Init+0x290>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80060d8:	4b91      	ldr	r3, [pc, #580]	; (8006320 <MX_LWIP_Init+0x290>)
 80060da:	2201      	movs	r2, #1
 80060dc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80060de:	2100      	movs	r1, #0
 80060e0:	2000      	movs	r0, #0
 80060e2:	f006 ff9b 	bl	800d01c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80060e6:	4b8c      	ldr	r3, [pc, #560]	; (8006318 <MX_LWIP_Init+0x288>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	061a      	lsls	r2, r3, #24
 80060ec:	4b8a      	ldr	r3, [pc, #552]	; (8006318 <MX_LWIP_Init+0x288>)
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	431a      	orrs	r2, r3
 80060f4:	4b88      	ldr	r3, [pc, #544]	; (8006318 <MX_LWIP_Init+0x288>)
 80060f6:	789b      	ldrb	r3, [r3, #2]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	4313      	orrs	r3, r2
 80060fc:	4a86      	ldr	r2, [pc, #536]	; (8006318 <MX_LWIP_Init+0x288>)
 80060fe:	78d2      	ldrb	r2, [r2, #3]
 8006100:	4313      	orrs	r3, r2
 8006102:	061a      	lsls	r2, r3, #24
 8006104:	4b84      	ldr	r3, [pc, #528]	; (8006318 <MX_LWIP_Init+0x288>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	0619      	lsls	r1, r3, #24
 800610a:	4b83      	ldr	r3, [pc, #524]	; (8006318 <MX_LWIP_Init+0x288>)
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	4319      	orrs	r1, r3
 8006112:	4b81      	ldr	r3, [pc, #516]	; (8006318 <MX_LWIP_Init+0x288>)
 8006114:	789b      	ldrb	r3, [r3, #2]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	430b      	orrs	r3, r1
 800611a:	497f      	ldr	r1, [pc, #508]	; (8006318 <MX_LWIP_Init+0x288>)
 800611c:	78c9      	ldrb	r1, [r1, #3]
 800611e:	430b      	orrs	r3, r1
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006126:	431a      	orrs	r2, r3
 8006128:	4b7b      	ldr	r3, [pc, #492]	; (8006318 <MX_LWIP_Init+0x288>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	0619      	lsls	r1, r3, #24
 800612e:	4b7a      	ldr	r3, [pc, #488]	; (8006318 <MX_LWIP_Init+0x288>)
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	4319      	orrs	r1, r3
 8006136:	4b78      	ldr	r3, [pc, #480]	; (8006318 <MX_LWIP_Init+0x288>)
 8006138:	789b      	ldrb	r3, [r3, #2]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	430b      	orrs	r3, r1
 800613e:	4976      	ldr	r1, [pc, #472]	; (8006318 <MX_LWIP_Init+0x288>)
 8006140:	78c9      	ldrb	r1, [r1, #3]
 8006142:	430b      	orrs	r3, r1
 8006144:	0a1b      	lsrs	r3, r3, #8
 8006146:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800614a:	431a      	orrs	r2, r3
 800614c:	4b72      	ldr	r3, [pc, #456]	; (8006318 <MX_LWIP_Init+0x288>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	0619      	lsls	r1, r3, #24
 8006152:	4b71      	ldr	r3, [pc, #452]	; (8006318 <MX_LWIP_Init+0x288>)
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	4319      	orrs	r1, r3
 800615a:	4b6f      	ldr	r3, [pc, #444]	; (8006318 <MX_LWIP_Init+0x288>)
 800615c:	789b      	ldrb	r3, [r3, #2]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	430b      	orrs	r3, r1
 8006162:	496d      	ldr	r1, [pc, #436]	; (8006318 <MX_LWIP_Init+0x288>)
 8006164:	78c9      	ldrb	r1, [r1, #3]
 8006166:	430b      	orrs	r3, r1
 8006168:	0e1b      	lsrs	r3, r3, #24
 800616a:	4313      	orrs	r3, r2
 800616c:	4a6d      	ldr	r2, [pc, #436]	; (8006324 <MX_LWIP_Init+0x294>)
 800616e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006170:	4b6a      	ldr	r3, [pc, #424]	; (800631c <MX_LWIP_Init+0x28c>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	061a      	lsls	r2, r3, #24
 8006176:	4b69      	ldr	r3, [pc, #420]	; (800631c <MX_LWIP_Init+0x28c>)
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	431a      	orrs	r2, r3
 800617e:	4b67      	ldr	r3, [pc, #412]	; (800631c <MX_LWIP_Init+0x28c>)
 8006180:	789b      	ldrb	r3, [r3, #2]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	4313      	orrs	r3, r2
 8006186:	4a65      	ldr	r2, [pc, #404]	; (800631c <MX_LWIP_Init+0x28c>)
 8006188:	78d2      	ldrb	r2, [r2, #3]
 800618a:	4313      	orrs	r3, r2
 800618c:	061a      	lsls	r2, r3, #24
 800618e:	4b63      	ldr	r3, [pc, #396]	; (800631c <MX_LWIP_Init+0x28c>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	0619      	lsls	r1, r3, #24
 8006194:	4b61      	ldr	r3, [pc, #388]	; (800631c <MX_LWIP_Init+0x28c>)
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	4319      	orrs	r1, r3
 800619c:	4b5f      	ldr	r3, [pc, #380]	; (800631c <MX_LWIP_Init+0x28c>)
 800619e:	789b      	ldrb	r3, [r3, #2]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	430b      	orrs	r3, r1
 80061a4:	495d      	ldr	r1, [pc, #372]	; (800631c <MX_LWIP_Init+0x28c>)
 80061a6:	78c9      	ldrb	r1, [r1, #3]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061b0:	431a      	orrs	r2, r3
 80061b2:	4b5a      	ldr	r3, [pc, #360]	; (800631c <MX_LWIP_Init+0x28c>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	0619      	lsls	r1, r3, #24
 80061b8:	4b58      	ldr	r3, [pc, #352]	; (800631c <MX_LWIP_Init+0x28c>)
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	4319      	orrs	r1, r3
 80061c0:	4b56      	ldr	r3, [pc, #344]	; (800631c <MX_LWIP_Init+0x28c>)
 80061c2:	789b      	ldrb	r3, [r3, #2]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	430b      	orrs	r3, r1
 80061c8:	4954      	ldr	r1, [pc, #336]	; (800631c <MX_LWIP_Init+0x28c>)
 80061ca:	78c9      	ldrb	r1, [r1, #3]
 80061cc:	430b      	orrs	r3, r1
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80061d4:	431a      	orrs	r2, r3
 80061d6:	4b51      	ldr	r3, [pc, #324]	; (800631c <MX_LWIP_Init+0x28c>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	0619      	lsls	r1, r3, #24
 80061dc:	4b4f      	ldr	r3, [pc, #316]	; (800631c <MX_LWIP_Init+0x28c>)
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	4319      	orrs	r1, r3
 80061e4:	4b4d      	ldr	r3, [pc, #308]	; (800631c <MX_LWIP_Init+0x28c>)
 80061e6:	789b      	ldrb	r3, [r3, #2]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	430b      	orrs	r3, r1
 80061ec:	494b      	ldr	r1, [pc, #300]	; (800631c <MX_LWIP_Init+0x28c>)
 80061ee:	78c9      	ldrb	r1, [r1, #3]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	4313      	orrs	r3, r2
 80061f6:	4a4c      	ldr	r2, [pc, #304]	; (8006328 <MX_LWIP_Init+0x298>)
 80061f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80061fa:	4b49      	ldr	r3, [pc, #292]	; (8006320 <MX_LWIP_Init+0x290>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	061a      	lsls	r2, r3, #24
 8006200:	4b47      	ldr	r3, [pc, #284]	; (8006320 <MX_LWIP_Init+0x290>)
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	431a      	orrs	r2, r3
 8006208:	4b45      	ldr	r3, [pc, #276]	; (8006320 <MX_LWIP_Init+0x290>)
 800620a:	789b      	ldrb	r3, [r3, #2]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	4313      	orrs	r3, r2
 8006210:	4a43      	ldr	r2, [pc, #268]	; (8006320 <MX_LWIP_Init+0x290>)
 8006212:	78d2      	ldrb	r2, [r2, #3]
 8006214:	4313      	orrs	r3, r2
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	4b41      	ldr	r3, [pc, #260]	; (8006320 <MX_LWIP_Init+0x290>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	0619      	lsls	r1, r3, #24
 800621e:	4b40      	ldr	r3, [pc, #256]	; (8006320 <MX_LWIP_Init+0x290>)
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	041b      	lsls	r3, r3, #16
 8006224:	4319      	orrs	r1, r3
 8006226:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <MX_LWIP_Init+0x290>)
 8006228:	789b      	ldrb	r3, [r3, #2]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	430b      	orrs	r3, r1
 800622e:	493c      	ldr	r1, [pc, #240]	; (8006320 <MX_LWIP_Init+0x290>)
 8006230:	78c9      	ldrb	r1, [r1, #3]
 8006232:	430b      	orrs	r3, r1
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800623a:	431a      	orrs	r2, r3
 800623c:	4b38      	ldr	r3, [pc, #224]	; (8006320 <MX_LWIP_Init+0x290>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	0619      	lsls	r1, r3, #24
 8006242:	4b37      	ldr	r3, [pc, #220]	; (8006320 <MX_LWIP_Init+0x290>)
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	4319      	orrs	r1, r3
 800624a:	4b35      	ldr	r3, [pc, #212]	; (8006320 <MX_LWIP_Init+0x290>)
 800624c:	789b      	ldrb	r3, [r3, #2]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	430b      	orrs	r3, r1
 8006252:	4933      	ldr	r1, [pc, #204]	; (8006320 <MX_LWIP_Init+0x290>)
 8006254:	78c9      	ldrb	r1, [r1, #3]
 8006256:	430b      	orrs	r3, r1
 8006258:	0a1b      	lsrs	r3, r3, #8
 800625a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800625e:	431a      	orrs	r2, r3
 8006260:	4b2f      	ldr	r3, [pc, #188]	; (8006320 <MX_LWIP_Init+0x290>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	0619      	lsls	r1, r3, #24
 8006266:	4b2e      	ldr	r3, [pc, #184]	; (8006320 <MX_LWIP_Init+0x290>)
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	4319      	orrs	r1, r3
 800626e:	4b2c      	ldr	r3, [pc, #176]	; (8006320 <MX_LWIP_Init+0x290>)
 8006270:	789b      	ldrb	r3, [r3, #2]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	430b      	orrs	r3, r1
 8006276:	492a      	ldr	r1, [pc, #168]	; (8006320 <MX_LWIP_Init+0x290>)
 8006278:	78c9      	ldrb	r1, [r1, #3]
 800627a:	430b      	orrs	r3, r1
 800627c:	0e1b      	lsrs	r3, r3, #24
 800627e:	4313      	orrs	r3, r2
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <MX_LWIP_Init+0x29c>)
 8006282:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006284:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <MX_LWIP_Init+0x2a0>)
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	4b2a      	ldr	r3, [pc, #168]	; (8006334 <MX_LWIP_Init+0x2a4>)
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4b26      	ldr	r3, [pc, #152]	; (800632c <MX_LWIP_Init+0x29c>)
 8006292:	4a25      	ldr	r2, [pc, #148]	; (8006328 <MX_LWIP_Init+0x298>)
 8006294:	4923      	ldr	r1, [pc, #140]	; (8006324 <MX_LWIP_Init+0x294>)
 8006296:	4828      	ldr	r0, [pc, #160]	; (8006338 <MX_LWIP_Init+0x2a8>)
 8006298:	f007 fc44 	bl	800db24 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800629c:	4826      	ldr	r0, [pc, #152]	; (8006338 <MX_LWIP_Init+0x2a8>)
 800629e:	f007 fdf3 	bl	800de88 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80062a2:	4b25      	ldr	r3, [pc, #148]	; (8006338 <MX_LWIP_Init+0x2a8>)
 80062a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062a8:	089b      	lsrs	r3, r3, #2
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80062b4:	4820      	ldr	r0, [pc, #128]	; (8006338 <MX_LWIP_Init+0x2a8>)
 80062b6:	f007 fdf7 	bl	800dea8 <netif_set_up>
 80062ba:	e002      	b.n	80062c2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80062bc:	481e      	ldr	r0, [pc, #120]	; (8006338 <MX_LWIP_Init+0x2a8>)
 80062be:	f007 fe5f 	bl	800df80 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80062c2:	491e      	ldr	r1, [pc, #120]	; (800633c <MX_LWIP_Init+0x2ac>)
 80062c4:	481c      	ldr	r0, [pc, #112]	; (8006338 <MX_LWIP_Init+0x2a8>)
 80062c6:	f007 fef1 	bl	800e0ac <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80062ca:	2300      	movs	r3, #0
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80062d2:	f107 0320 	add.w	r3, r7, #32
 80062d6:	2101      	movs	r1, #1
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fd97 	bl	8006e0c <osSemaphoreCreate>
 80062de:	4603      	mov	r3, r0
 80062e0:	4a17      	ldr	r2, [pc, #92]	; (8006340 <MX_LWIP_Init+0x2b0>)
 80062e2:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <MX_LWIP_Init+0x2b4>)
 80062e6:	4a14      	ldr	r2, [pc, #80]	; (8006338 <MX_LWIP_Init+0x2a8>)
 80062e8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <MX_LWIP_Init+0x2b0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a15      	ldr	r2, [pc, #84]	; (8006344 <MX_LWIP_Init+0x2b4>)
 80062f0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <MX_LWIP_Init+0x2b8>)
 80062f4:	1d3c      	adds	r4, r7, #4
 80062f6:	461d      	mov	r5, r3
 80062f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	490f      	ldr	r1, [pc, #60]	; (8006344 <MX_LWIP_Init+0x2b4>)
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fc82 	bl	8006c12 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800630e:	bf00      	nop
 8006310:	3728      	adds	r7, #40	; 0x28
 8006312:	46bd      	mov	sp, r7
 8006314:	bdb0      	pop	{r4, r5, r7, pc}
 8006316:	bf00      	nop
 8006318:	20007304 	.word	0x20007304
 800631c:	20007300 	.word	0x20007300
 8006320:	200072c4 	.word	0x200072c4
 8006324:	200072fc 	.word	0x200072fc
 8006328:	20007308 	.word	0x20007308
 800632c:	2000730c 	.word	0x2000730c
 8006330:	0800cf2d 	.word	0x0800cf2d
 8006334:	080069a1 	.word	0x080069a1
 8006338:	200072c8 	.word	0x200072c8
 800633c:	08006a85 	.word	0x08006a85
 8006340:	20000560 	.word	0x20000560
 8006344:	200072bc 	.word	0x200072bc
 8006348:	08019b6c 	.word	0x08019b6c

0800634c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08e      	sub	sp, #56	; 0x38
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	605a      	str	r2, [r3, #4]
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	60da      	str	r2, [r3, #12]
 8006362:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a52      	ldr	r2, [pc, #328]	; (80064b4 <HAL_ETH_MspInit+0x168>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f040 809e 	bne.w	80064ac <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006370:	4b51      	ldr	r3, [pc, #324]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	4a50      	ldr	r2, [pc, #320]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 8006376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800637a:	6313      	str	r3, [r2, #48]	; 0x30
 800637c:	4b4e      	ldr	r3, [pc, #312]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	4a4a      	ldr	r2, [pc, #296]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 800638e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006392:	6313      	str	r3, [r2, #48]	; 0x30
 8006394:	4b48      	ldr	r3, [pc, #288]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4b45      	ldr	r3, [pc, #276]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a4:	4a44      	ldr	r2, [pc, #272]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063aa:	6313      	str	r3, [r2, #48]	; 0x30
 80063ac:	4b42      	ldr	r3, [pc, #264]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063b8:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	4a3e      	ldr	r2, [pc, #248]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063be:	f043 0304 	orr.w	r3, r3, #4
 80063c2:	6313      	str	r3, [r2, #48]	; 0x30
 80063c4:	4b3c      	ldr	r3, [pc, #240]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d0:	4b39      	ldr	r3, [pc, #228]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	4a38      	ldr	r2, [pc, #224]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	6313      	str	r3, [r2, #48]	; 0x30
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e8:	4b33      	ldr	r3, [pc, #204]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	4a32      	ldr	r2, [pc, #200]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063ee:	f043 0302 	orr.w	r3, r3, #2
 80063f2:	6313      	str	r3, [r2, #48]	; 0x30
 80063f4:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006400:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 8006406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640a:	6313      	str	r3, [r2, #48]	; 0x30
 800640c:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <HAL_ETH_MspInit+0x16c>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006418:	2332      	movs	r3, #50	; 0x32
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641c:	2302      	movs	r3, #2
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006420:	2300      	movs	r3, #0
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006424:	2303      	movs	r3, #3
 8006426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006428:	230b      	movs	r3, #11
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800642c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006430:	4619      	mov	r1, r3
 8006432:	4822      	ldr	r0, [pc, #136]	; (80064bc <HAL_ETH_MspInit+0x170>)
 8006434:	f7fd f818 	bl	8003468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006438:	2386      	movs	r3, #134	; 0x86
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643c:	2302      	movs	r3, #2
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006440:	2300      	movs	r3, #0
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006444:	2303      	movs	r3, #3
 8006446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006448:	230b      	movs	r3, #11
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800644c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006450:	4619      	mov	r1, r3
 8006452:	481b      	ldr	r0, [pc, #108]	; (80064c0 <HAL_ETH_MspInit+0x174>)
 8006454:	f7fd f808 	bl	8003468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645e:	2302      	movs	r3, #2
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006462:	2300      	movs	r3, #0
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006466:	2303      	movs	r3, #3
 8006468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800646a:	230b      	movs	r3, #11
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800646e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006472:	4619      	mov	r1, r3
 8006474:	4813      	ldr	r0, [pc, #76]	; (80064c4 <HAL_ETH_MspInit+0x178>)
 8006476:	f7fc fff7 	bl	8003468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800647a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006480:	2302      	movs	r3, #2
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006488:	2303      	movs	r3, #3
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800648c:	230b      	movs	r3, #11
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	4619      	mov	r1, r3
 8006496:	480c      	ldr	r0, [pc, #48]	; (80064c8 <HAL_ETH_MspInit+0x17c>)
 8006498:	f7fc ffe6 	bl	8003468 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800649c:	2200      	movs	r2, #0
 800649e:	2105      	movs	r1, #5
 80064a0:	203d      	movs	r0, #61	; 0x3d
 80064a2:	f7fb fc75 	bl	8001d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80064a6:	203d      	movs	r0, #61	; 0x3d
 80064a8:	f7fb fc8e 	bl	8001dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80064ac:	bf00      	nop
 80064ae:	3738      	adds	r7, #56	; 0x38
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40028000 	.word	0x40028000
 80064b8:	40023800 	.word	0x40023800
 80064bc:	40020800 	.word	0x40020800
 80064c0:	40020000 	.word	0x40020000
 80064c4:	40020400 	.word	0x40020400
 80064c8:	40021800 	.word	0x40021800

080064cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80064d4:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fd17 	bl	8006f0c <osSemaphoreRelease>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000564 	.word	0x20000564

080064ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80064ec:	b5b0      	push	{r4, r5, r7, lr}
 80064ee:	b090      	sub	sp, #64	; 0x40
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80064f8:	4b60      	ldr	r3, [pc, #384]	; (800667c <low_level_init+0x190>)
 80064fa:	4a61      	ldr	r2, [pc, #388]	; (8006680 <low_level_init+0x194>)
 80064fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80064fe:	4b5f      	ldr	r3, [pc, #380]	; (800667c <low_level_init+0x190>)
 8006500:	2201      	movs	r2, #1
 8006502:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <low_level_init+0x190>)
 8006506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800650a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800650c:	4b5b      	ldr	r3, [pc, #364]	; (800667c <low_level_init+0x190>)
 800650e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006512:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006514:	4b59      	ldr	r3, [pc, #356]	; (800667c <low_level_init+0x190>)
 8006516:	2200      	movs	r2, #0
 8006518:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800651a:	2300      	movs	r3, #0
 800651c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006526:	23e1      	movs	r3, #225	; 0xe1
 8006528:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800652c:	2300      	movs	r3, #0
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006532:	2300      	movs	r3, #0
 8006534:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800653e:	4a4f      	ldr	r2, [pc, #316]	; (800667c <low_level_init+0x190>)
 8006540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006544:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006546:	4b4d      	ldr	r3, [pc, #308]	; (800667c <low_level_init+0x190>)
 8006548:	2201      	movs	r2, #1
 800654a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <low_level_init+0x190>)
 800654e:	2200      	movs	r2, #0
 8006550:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006552:	4b4a      	ldr	r3, [pc, #296]	; (800667c <low_level_init+0x190>)
 8006554:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006558:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800655a:	4848      	ldr	r0, [pc, #288]	; (800667c <low_level_init+0x190>)
 800655c:	f7fb fc42 	bl	8001de4 <HAL_ETH_Init>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006574:	f043 0304 	orr.w	r3, r3, #4
 8006578:	b2da      	uxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006580:	2304      	movs	r3, #4
 8006582:	4a40      	ldr	r2, [pc, #256]	; (8006684 <low_level_init+0x198>)
 8006584:	4940      	ldr	r1, [pc, #256]	; (8006688 <low_level_init+0x19c>)
 8006586:	483d      	ldr	r0, [pc, #244]	; (800667c <low_level_init+0x190>)
 8006588:	f7fb fdc6 	bl	8002118 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800658c:	2304      	movs	r3, #4
 800658e:	4a3f      	ldr	r2, [pc, #252]	; (800668c <low_level_init+0x1a0>)
 8006590:	493f      	ldr	r1, [pc, #252]	; (8006690 <low_level_init+0x1a4>)
 8006592:	483a      	ldr	r0, [pc, #232]	; (800667c <low_level_init+0x190>)
 8006594:	f7fb fe29 	bl	80021ea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2206      	movs	r2, #6
 800659c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80065a0:	4b36      	ldr	r3, [pc, #216]	; (800667c <low_level_init+0x190>)
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80065ac:	4b33      	ldr	r3, [pc, #204]	; (800667c <low_level_init+0x190>)
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	785a      	ldrb	r2, [r3, #1]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80065b8:	4b30      	ldr	r3, [pc, #192]	; (800667c <low_level_init+0x190>)
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	789a      	ldrb	r2, [r3, #2]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80065c4:	4b2d      	ldr	r3, [pc, #180]	; (800667c <low_level_init+0x190>)
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	78da      	ldrb	r2, [r3, #3]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80065d0:	4b2a      	ldr	r3, [pc, #168]	; (800667c <low_level_init+0x190>)
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	791a      	ldrb	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80065dc:	4b27      	ldr	r3, [pc, #156]	; (800667c <low_level_init+0x190>)
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	795a      	ldrb	r2, [r3, #5]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80065ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065f6:	f043 030a 	orr.w	r3, r3, #10
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006602:	2300      	movs	r3, #0
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
 8006606:	2300      	movs	r3, #0
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800660a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800660e:	2101      	movs	r1, #1
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fbfb 	bl	8006e0c <osSemaphoreCreate>
 8006616:	4603      	mov	r3, r0
 8006618:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <low_level_init+0x1a8>)
 800661a:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800661c:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <low_level_init+0x1ac>)
 800661e:	f107 040c 	add.w	r4, r7, #12
 8006622:	461d      	mov	r5, r3
 8006624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800662c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006630:	f107 030c 	add.w	r3, r7, #12
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 faeb 	bl	8006c12 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800663c:	480f      	ldr	r0, [pc, #60]	; (800667c <low_level_init+0x190>)
 800663e:	f7fc f8fc 	bl	800283a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006646:	461a      	mov	r2, r3
 8006648:	211d      	movs	r1, #29
 800664a:	480c      	ldr	r0, [pc, #48]	; (800667c <low_level_init+0x190>)
 800664c:	f7fc f827 	bl	800269e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	f043 030b 	orr.w	r3, r3, #11
 8006656:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	461a      	mov	r2, r3
 800665c:	211d      	movs	r1, #29
 800665e:	4807      	ldr	r0, [pc, #28]	; (800667c <low_level_init+0x190>)
 8006660:	f7fc f885 	bl	800276e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006664:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006668:	461a      	mov	r2, r3
 800666a:	211d      	movs	r1, #29
 800666c:	4803      	ldr	r0, [pc, #12]	; (800667c <low_level_init+0x190>)
 800666e:	f7fc f816 	bl	800269e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006672:	bf00      	nop
 8006674:	3740      	adds	r7, #64	; 0x40
 8006676:	46bd      	mov	sp, r7
 8006678:	bdb0      	pop	{r4, r5, r7, pc}
 800667a:	bf00      	nop
 800667c:	20008be0 	.word	0x20008be0
 8006680:	40028000 	.word	0x40028000
 8006684:	20008c28 	.word	0x20008c28
 8006688:	20007310 	.word	0x20007310
 800668c:	20007390 	.word	0x20007390
 8006690:	20008b60 	.word	0x20008b60
 8006694:	20000564 	.word	0x20000564
 8006698:	08019b90 	.word	0x08019b90

0800669c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80066a6:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <low_level_output+0x138>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80066be:	4b45      	ldr	r3, [pc, #276]	; (80067d4 <low_level_output+0x138>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	e05a      	b.n	8006784 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da03      	bge.n	80066de <low_level_output+0x42>
      {
        errval = ERR_USE;
 80066d6:	23f8      	movs	r3, #248	; 0xf8
 80066d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80066dc:	e05c      	b.n	8006798 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	895b      	ldrh	r3, [r3, #10]
 80066e2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80066e8:	e02f      	b.n	800674a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	18d0      	adds	r0, r2, r3
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	18d1      	adds	r1, r2, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	461a      	mov	r2, r3
 8006702:	f011 ff57 	bl	80185b4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	da03      	bge.n	800671c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006714:	23f8      	movs	r3, #248	; 0xf8
 8006716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800671a:	e03d      	b.n	8006798 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800672c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006738:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006744:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006754:	4293      	cmp	r3, r2
 8006756:	d8c8      	bhi.n	80066ea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	18d0      	adds	r0, r2, r3
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4413      	add	r3, r2
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4619      	mov	r1, r3
 800676a:	f011 ff23 	bl	80185b4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	623b      	str	r3, [r7, #32]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1a1      	bne.n	80066ce <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	4811      	ldr	r0, [pc, #68]	; (80067d4 <low_level_output+0x138>)
 800678e:	f7fb fd99 	bl	80022c4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <low_level_output+0x138>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	f241 0314 	movw	r3, #4116	; 0x1014
 80067a0:	4413      	add	r3, r2
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <low_level_output+0x138>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80067b4:	4413      	add	r3, r2
 80067b6:	2220      	movs	r2, #32
 80067b8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <low_level_output+0x138>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f241 0304 	movw	r3, #4100	; 0x1004
 80067c2:	4413      	add	r3, r2
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80067c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	; 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20008be0 	.word	0x20008be0

080067d8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80067fc:	484f      	ldr	r0, [pc, #316]	; (800693c <low_level_input+0x164>)
 80067fe:	f7fb fe4b 	bl	8002498 <HAL_ETH_GetReceivedFrame_IT>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <low_level_input+0x34>

    return NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	e092      	b.n	8006932 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800680c:	4b4b      	ldr	r3, [pc, #300]	; (800693c <low_level_input+0x164>)
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006812:	4b4a      	ldr	r3, [pc, #296]	; (800693c <low_level_input+0x164>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800681e:	89fb      	ldrh	r3, [r7, #14]
 8006820:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006824:	4619      	mov	r1, r3
 8006826:	2000      	movs	r0, #0
 8006828:	f007 fd0a 	bl	800e240 <pbuf_alloc>
 800682c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d04b      	beq.n	80068cc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006834:	4b41      	ldr	r3, [pc, #260]	; (800693c <low_level_input+0x164>)
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	62bb      	str	r3, [r7, #40]	; 0x28
 8006842:	e040      	b.n	80068c6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	895b      	ldrh	r3, [r3, #10]
 8006848:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800684e:	e021      	b.n	8006894 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	18d0      	adds	r0, r2, r3
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	18d1      	adds	r1, r2, r3
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	461a      	mov	r2, r3
 8006868:	f011 fea4 	bl	80185b4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006882:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800688e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800689e:	4293      	cmp	r3, r2
 80068a0:	d8d6      	bhi.n	8006850 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	18d0      	adds	r0, r2, r3
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4619      	mov	r1, r3
 80068b4:	f011 fe7e 	bl	80185b4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1bb      	bne.n	8006844 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80068cc:	4b1b      	ldr	r3, [pc, #108]	; (800693c <low_level_input+0x164>)
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e00b      	b.n	80068f0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3301      	adds	r3, #1
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	4b12      	ldr	r3, [pc, #72]	; (800693c <low_level_input+0x164>)
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d3ee      	bcc.n	80068d8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80068fa:	4b10      	ldr	r3, [pc, #64]	; (800693c <low_level_input+0x164>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <low_level_input+0x164>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	f241 0314 	movw	r3, #4116	; 0x1014
 8006908:	4413      	add	r3, r2
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <low_level_input+0x164>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	f241 0314 	movw	r3, #4116	; 0x1014
 800691c:	4413      	add	r3, r2
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <low_level_input+0x164>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	f241 0308 	movw	r3, #4104	; 0x1008
 800692a:	4413      	add	r3, r2
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006932:	4618      	mov	r0, r3
 8006934:	3730      	adds	r7, #48	; 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20008be0 	.word	0x20008be0

08006940 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <ethernetif_input+0x58>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f04f 31ff 	mov.w	r1, #4294967295
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fa8b 	bl	8006e70 <osSemaphoreWait>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f5      	bne.n	800694c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006960:	480e      	ldr	r0, [pc, #56]	; (800699c <ethernetif_input+0x5c>)
 8006962:	f011 fc8b 	bl	801827c <sys_mutex_lock>
        p = low_level_input( netif );
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff ff36 	bl	80067d8 <low_level_input>
 800696c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	68b8      	ldr	r0, [r7, #8]
 800697c:	4798      	blx	r3
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006984:	68b8      	ldr	r0, [r7, #8]
 8006986:	f007 ff71 	bl	800e86c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800698a:	4804      	ldr	r0, [pc, #16]	; (800699c <ethernetif_input+0x5c>)
 800698c:	f011 fc85 	bl	801829a <sys_mutex_unlock>
      } while(p!=NULL);
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e4      	bne.n	8006960 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006996:	e7d9      	b.n	800694c <ethernetif_input+0xc>
 8006998:	20000564 	.word	0x20000564
 800699c:	2000a438 	.word	0x2000a438

080069a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <ethernetif_init+0x1c>
 80069ae:	4b0e      	ldr	r3, [pc, #56]	; (80069e8 <ethernetif_init+0x48>)
 80069b0:	f240 2236 	movw	r2, #566	; 0x236
 80069b4:	490d      	ldr	r1, [pc, #52]	; (80069ec <ethernetif_init+0x4c>)
 80069b6:	480e      	ldr	r0, [pc, #56]	; (80069f0 <ethernetif_init+0x50>)
 80069b8:	f011 fed6 	bl	8018768 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2273      	movs	r2, #115	; 0x73
 80069c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2274      	movs	r2, #116	; 0x74
 80069c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <ethernetif_init+0x54>)
 80069d0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a08      	ldr	r2, [pc, #32]	; (80069f8 <ethernetif_init+0x58>)
 80069d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fd87 	bl	80064ec <low_level_init>

  return ERR_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	08019bac 	.word	0x08019bac
 80069ec:	08019bc8 	.word	0x08019bc8
 80069f0:	08019bd8 	.word	0x08019bd8
 80069f4:	08016291 	.word	0x08016291
 80069f8:	0800669d 	.word	0x0800669d

080069fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006a00:	f7fb f8de 	bl	8001bc0 <HAL_GetTick>
 8006a04:	4603      	mov	r3, r0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	461a      	mov	r2, r3
 8006a22:	2101      	movs	r1, #1
 8006a24:	4816      	ldr	r0, [pc, #88]	; (8006a80 <ethernetif_set_link+0x74>)
 8006a26:	f7fb fe3a 	bl	800269e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <ethernetif_set_link+0x48>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f007 fac9 	bl	800dfe4 <netif_set_link_up>
 8006a52:	e011      	b.n	8006a78 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a5c:	089b      	lsrs	r3, r3, #2
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <ethernetif_set_link+0x6c>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f007 faea 	bl	800e04c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8006a78:	20c8      	movs	r0, #200	; 0xc8
 8006a7a:	f000 f916 	bl	8006caa <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006a7e:	e7cd      	b.n	8006a1c <ethernetif_set_link+0x10>
 8006a80:	20008be0 	.word	0x20008be0

08006a84 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d05d      	beq.n	8006b62 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006aa6:	4b34      	ldr	r3, [pc, #208]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d03f      	beq.n	8006b2e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4830      	ldr	r0, [pc, #192]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006ab6:	f7fb fe5a 	bl	800276e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006aba:	f7fb f881 	bl	8001bc0 <HAL_GetTick>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006ac2:	f107 0308 	add.w	r3, r7, #8
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2101      	movs	r1, #1
 8006aca:	482b      	ldr	r0, [pc, #172]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006acc:	f7fb fde7 	bl	800269e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006ad0:	f7fb f876 	bl	8001bc0 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ade:	d828      	bhi.n	8006b32 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0eb      	beq.n	8006ac2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006aea:	f107 0308 	add.w	r3, r7, #8
 8006aee:	461a      	mov	r2, r3
 8006af0:	2110      	movs	r1, #16
 8006af2:	4821      	ldr	r0, [pc, #132]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006af4:	f7fb fdd3 	bl	800269e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	e002      	b.n	8006b12 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006b0c:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006b1c:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	e016      	b.n	8006b52 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	e011      	b.n	8006b52 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006b2e:	bf00      	nop
 8006b30:	e000      	b.n	8006b34 <ethernetif_update_config+0xb0>
          goto error;
 8006b32:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006b34:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	08db      	lsrs	r3, r3, #3
 8006b3a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006b3c:	4b0e      	ldr	r3, [pc, #56]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006b44:	4313      	orrs	r3, r2
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	480a      	ldr	r0, [pc, #40]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b4e:	f7fb fe0e 	bl	800276e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006b52:	2100      	movs	r1, #0
 8006b54:	4808      	ldr	r0, [pc, #32]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b56:	f7fb fecf 	bl	80028f8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006b5a:	4807      	ldr	r0, [pc, #28]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b5c:	f7fb fe6d 	bl	800283a <HAL_ETH_Start>
 8006b60:	e002      	b.n	8006b68 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006b62:	4805      	ldr	r0, [pc, #20]	; (8006b78 <ethernetif_update_config+0xf4>)
 8006b64:	f7fb fe98 	bl	8002898 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f807 	bl	8006b7c <ethernetif_notify_conn_changed>
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20008be0 	.word	0x20008be0

08006b7c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ba2:	2b84      	cmp	r3, #132	; 0x84
 8006ba4:	d005      	beq.n	8006bb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ba6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	3303      	adds	r3, #3
 8006bb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc6:	f3ef 8305 	mrs	r3, IPSR
 8006bca:	607b      	str	r3, [r7, #4]
  return(result);
 8006bcc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bf14      	ite	ne
 8006bd2:	2301      	movne	r3, #1
 8006bd4:	2300      	moveq	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006be8:	f001 fe1c 	bl	8008824 <vTaskStartScheduler>
  
  return osOK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006bf6:	f7ff ffe3 	bl	8006bc0 <inHandlerMode>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006c00:	f001 ff3a 	bl	8008a78 <xTaskGetTickCountFromISR>
 8006c04:	4603      	mov	r3, r0
 8006c06:	e002      	b.n	8006c0e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006c08:	f001 ff26 	bl	8008a58 <xTaskGetTickCount>
 8006c0c:	4603      	mov	r3, r0
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c14:	b089      	sub	sp, #36	; 0x24
 8006c16:	af04      	add	r7, sp, #16
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d020      	beq.n	8006c66 <osThreadCreate+0x54>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01c      	beq.n	8006c66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685c      	ldr	r4, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681d      	ldr	r5, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691e      	ldr	r6, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff ffa6 	bl	8006b90 <makeFreeRtosPriority>
 8006c44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c4e:	9202      	str	r2, [sp, #8]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	9100      	str	r1, [sp, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4632      	mov	r2, r6
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f001 fb68 	bl	8008330 <xTaskCreateStatic>
 8006c60:	4603      	mov	r3, r0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e01c      	b.n	8006ca0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685c      	ldr	r4, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c72:	b29e      	uxth	r6, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff ff88 	bl	8006b90 <makeFreeRtosPriority>
 8006c80:	4602      	mov	r2, r0
 8006c82:	f107 030c 	add.w	r3, r7, #12
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	9200      	str	r2, [sp, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4620      	mov	r0, r4
 8006c92:	f001 fbb0 	bl	80083f6 <xTaskCreate>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d001      	beq.n	8006ca0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e000      	b.n	8006ca2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006caa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <osDelay+0x16>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e000      	b.n	8006cc2 <osDelay+0x18>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fd78 	bl	80087b8 <vTaskDelay>
  
  return osOK;
 8006cc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	2001      	movs	r0, #1
 8006cea:	f000 fc92 	bl	8007612 <xQueueCreateMutexStatic>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	e003      	b.n	8006cfa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	f000 fc75 	bl	80075e2 <xQueueCreateMutex>
 8006cf8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <osMutexWait+0x18>
    return osErrorParameter;
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	e03a      	b.n	8006d92 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d103      	bne.n	8006d30 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e009      	b.n	8006d44 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d006      	beq.n	8006d44 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <osMutexWait+0x40>
      ticks = 1;
 8006d40:	2301      	movs	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006d44:	f7ff ff3c 	bl	8006bc0 <inHandlerMode>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d017      	beq.n	8006d7e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006d4e:	f107 0308 	add.w	r3, r7, #8
 8006d52:	461a      	mov	r2, r3
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f8ac 	bl	8007eb4 <xQueueReceiveFromISR>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d001      	beq.n	8006d66 <osMutexWait+0x62>
      return osErrorOS;
 8006d62:	23ff      	movs	r3, #255	; 0xff
 8006d64:	e015      	b.n	8006d92 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d011      	beq.n	8006d90 <osMutexWait+0x8c>
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <osMutexWait+0x98>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	e008      	b.n	8006d90 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 ff83 	bl	8007c8c <xQueueSemaphoreTake>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d001      	beq.n	8006d90 <osMutexWait+0x8c>
    return osErrorOS;
 8006d8c:	23ff      	movs	r3, #255	; 0xff
 8006d8e:	e000      	b.n	8006d92 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006db0:	f7ff ff06 	bl	8006bc0 <inHandlerMode>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d016      	beq.n	8006de8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fde7 	bl	8007994 <xQueueGiveFromISR>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d001      	beq.n	8006dd0 <osMutexRelease+0x30>
      return osErrorOS;
 8006dcc:	23ff      	movs	r3, #255	; 0xff
 8006dce:	e017      	b.n	8006e00 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d013      	beq.n	8006dfe <osMutexRelease+0x5e>
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <osMutexRelease+0x68>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	e00a      	b.n	8006dfe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc2a 	bl	8007648 <xQueueGenericSend>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d001      	beq.n	8006dfe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006dfa:	23ff      	movs	r3, #255	; 0xff
 8006dfc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00f      	beq.n	8006e3e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d10a      	bne.n	8006e3a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	2001      	movs	r0, #1
 8006e32:	f000 fad9 	bl	80073e8 <xQueueGenericCreateStatic>
 8006e36:	4603      	mov	r3, r0
 8006e38:	e016      	b.n	8006e68 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e014      	b.n	8006e68 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d110      	bne.n	8006e66 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006e44:	2203      	movs	r2, #3
 8006e46:	2100      	movs	r1, #0
 8006e48:	2001      	movs	r0, #1
 8006e4a:	f000 fb4f 	bl	80074ec <xQueueGenericCreate>
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <osSemaphoreCreate+0x56>
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fbf3 	bl	8007648 <xQueueGenericSend>
      return sema;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	e000      	b.n	8006e68 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006e66:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	e03a      	b.n	8006efe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e92:	d103      	bne.n	8006e9c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e009      	b.n	8006eb0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <osSemaphoreWait+0x40>
      ticks = 1;
 8006eac:	2301      	movs	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006eb0:	f7ff fe86 	bl	8006bc0 <inHandlerMode>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006eba:	f107 0308 	add.w	r3, r7, #8
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fff6 	bl	8007eb4 <xQueueReceiveFromISR>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d001      	beq.n	8006ed2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006ece:	23ff      	movs	r3, #255	; 0xff
 8006ed0:	e015      	b.n	8006efe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d011      	beq.n	8006efc <osSemaphoreWait+0x8c>
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <osSemaphoreWait+0x98>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	e008      	b.n	8006efc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fecd 	bl	8007c8c <xQueueSemaphoreTake>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d001      	beq.n	8006efc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006ef8:	23ff      	movs	r3, #255	; 0xff
 8006efa:	e000      	b.n	8006efe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006f1c:	f7ff fe50 	bl	8006bc0 <inHandlerMode>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d016      	beq.n	8006f54 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f26:	f107 0308 	add.w	r3, r7, #8
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fd31 	bl	8007994 <xQueueGiveFromISR>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d001      	beq.n	8006f3c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006f38:	23ff      	movs	r3, #255	; 0xff
 8006f3a:	e017      	b.n	8006f6c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d013      	beq.n	8006f6a <osSemaphoreRelease+0x5e>
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <osSemaphoreRelease+0x68>)
 8006f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	e00a      	b.n	8006f6a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006f54:	2300      	movs	r3, #0
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb74 	bl	8007648 <xQueueGenericSend>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d001      	beq.n	8006f6a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006f66:	23ff      	movs	r3, #255	; 0xff
 8006f68:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006f80:	f7ff fe1e 	bl	8006bc0 <inHandlerMode>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006f8a:	2382      	movs	r3, #130	; 0x82
 8006f8c:	e003      	b.n	8006f96 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f856 	bl	8008040 <vQueueDelete>

  return osOK; 
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006f9e:	b590      	push	{r4, r7, lr}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af02      	add	r7, sp, #8
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d011      	beq.n	8006fd4 <osMessageCreate+0x36>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2400      	movs	r4, #0
 8006fca:	9400      	str	r4, [sp, #0]
 8006fcc:	f000 fa0c 	bl	80073e8 <xQueueGenericCreateStatic>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	e008      	b.n	8006fe6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f000 fa84 	bl	80074ec <xQueueGenericCreate>
 8006fe4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
	...

08006ff0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <osMessagePut+0x1e>
    ticks = 1;
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800700e:	f7ff fdd7 	bl	8006bc0 <inHandlerMode>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d018      	beq.n	800704a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007018:	f107 0210 	add.w	r2, r7, #16
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	2300      	movs	r3, #0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 fc16 	bl	8007854 <xQueueGenericSendFromISR>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d001      	beq.n	8007032 <osMessagePut+0x42>
      return osErrorOS;
 800702e:	23ff      	movs	r3, #255	; 0xff
 8007030:	e018      	b.n	8007064 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d014      	beq.n	8007062 <osMessagePut+0x72>
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <osMessagePut+0x7c>)
 800703a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	e00b      	b.n	8007062 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800704a:	f107 0108 	add.w	r1, r7, #8
 800704e:	2300      	movs	r3, #0
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 faf8 	bl	8007648 <xQueueGenericSend>
 8007058:	4603      	mov	r3, r0
 800705a:	2b01      	cmp	r3, #1
 800705c:	d001      	beq.n	8007062 <osMessagePut+0x72>
      return osErrorOS;
 800705e:	23ff      	movs	r3, #255	; 0xff
 8007060:	e000      	b.n	8007064 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b08b      	sub	sp, #44	; 0x2c
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	617b      	str	r3, [r7, #20]
    return event;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	461c      	mov	r4, r3
 8007092:	f107 0314 	add.w	r3, r7, #20
 8007096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800709a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800709e:	e054      	b.n	800714a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d103      	bne.n	80070b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80070b0:	f04f 33ff 	mov.w	r3, #4294967295
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	e009      	b.n	80070cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <osMessageGet+0x5c>
      ticks = 1;
 80070c8:	2301      	movs	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80070cc:	f7ff fd78 	bl	8006bc0 <inHandlerMode>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01c      	beq.n	8007110 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80070d6:	f107 0220 	add.w	r2, r7, #32
 80070da:	f107 0314 	add.w	r3, r7, #20
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f000 fee6 	bl	8007eb4 <xQueueReceiveFromISR>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d102      	bne.n	80070f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80070ee:	2310      	movs	r3, #16
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e001      	b.n	80070f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01d      	beq.n	800713a <osMessageGet+0xca>
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <osMessageGet+0xe4>)
 8007100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	e014      	b.n	800713a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	3304      	adds	r3, #4
 8007116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007118:	4619      	mov	r1, r3
 800711a:	68b8      	ldr	r0, [r7, #8]
 800711c:	f000 fcd0 	bl	8007ac0 <xQueueReceive>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d102      	bne.n	800712c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007126:	2310      	movs	r3, #16
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	e006      	b.n	800713a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <osMessageGet+0xc6>
 8007132:	2300      	movs	r3, #0
 8007134:	e000      	b.n	8007138 <osMessageGet+0xc8>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	461c      	mov	r4, r3
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	372c      	adds	r7, #44	; 0x2c
 800714e:	46bd      	mov	sp, r7
 8007150:	bd90      	pop	{r4, r7, pc}
 8007152:	bf00      	nop
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007160:	f7ff fd2e 	bl	8006bc0 <inHandlerMode>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 ff48 	bl	8008000 <uxQueueMessagesWaitingFromISR>
 8007170:	4603      	mov	r3, r0
 8007172:	e003      	b.n	800717c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 ff23 	bl	8007fc0 <uxQueueMessagesWaiting>
 800717a:	4603      	mov	r3, r0
  }
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800718c:	f7ff fd18 	bl	8006bc0 <inHandlerMode>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <osMessageDelete+0x16>
    return osErrorISR;
 8007196:	2382      	movs	r3, #130	; 0x82
 8007198:	e003      	b.n	80071a2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 ff50 	bl	8008040 <vQueueDelete>

  return osOK; 
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f103 0208 	add.w	r2, r3, #8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f04f 32ff 	mov.w	r2, #4294967295
 80071c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f103 0208 	add.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f103 0208 	add.w	r2, r3, #8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d103      	bne.n	800726c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e00c      	b.n	8007286 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3308      	adds	r3, #8
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e002      	b.n	800727a <vListInsert+0x2e>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	d2f6      	bcs.n	8007274 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6892      	ldr	r2, [r2, #8]
 80072d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d103      	bne.n	80072f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007342:	f002 fa03 	bl	800974c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	441a      	add	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	3b01      	subs	r3, #1
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	22ff      	movs	r2, #255	; 0xff
 8007386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d114      	bne.n	80073c2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fcbd 	bl	8008d24 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <xQueueGenericReset+0xd0>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	e009      	b.n	80073d6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3310      	adds	r3, #16
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff feef 	bl	80071aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff feea 	bl	80071aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073d6:	f002 f9ed 	bl	80097b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073da:	2301      	movs	r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	b672      	cpsid	i
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	b662      	cpsie	i
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <xQueueGenericCreateStatic+0x5a>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <xQueueGenericCreateStatic+0x5e>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <xQueueGenericCreateStatic+0x60>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10c      	bne.n	8007466 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	b672      	cpsid	i
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	b662      	cpsie	i
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <xQueueGenericCreateStatic+0x8a>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <xQueueGenericCreateStatic+0x8e>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <xQueueGenericCreateStatic+0x90>
 8007476:	2300      	movs	r3, #0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	b672      	cpsid	i
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	b662      	cpsie	i
 8007490:	61fb      	str	r3, [r7, #28]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007496:	2348      	movs	r3, #72	; 0x48
 8007498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b48      	cmp	r3, #72	; 0x48
 800749e:	d00c      	beq.n	80074ba <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	61bb      	str	r3, [r7, #24]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f847 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3730      	adds	r7, #48	; 0x30
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10c      	bne.n	800751a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	b672      	cpsid	i
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	b662      	cpsie	i
 8007514:	613b      	str	r3, [r7, #16]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e004      	b.n	8007530 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3348      	adds	r3, #72	; 0x48
 8007534:	4618      	mov	r0, r3
 8007536:	f002 fa35 	bl	80099a4 <pvPortMalloc>
 800753a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d011      	beq.n	8007566 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	3348      	adds	r3, #72	; 0x48
 800754a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007554:	79fa      	ldrb	r2, [r7, #7]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f805 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007566:	69bb      	ldr	r3, [r7, #24]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3720      	adds	r7, #32
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e002      	b.n	8007592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800759e:	2101      	movs	r1, #1
 80075a0:	69b8      	ldr	r0, [r7, #24]
 80075a2:	f7ff feb7 	bl	8007314 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00e      	beq.n	80075da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075ce:	2300      	movs	r3, #0
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f837 	bl	8007648 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b086      	sub	sp, #24
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	4603      	mov	r3, r0
 80075ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6939      	ldr	r1, [r7, #16]
 80075fa:	6978      	ldr	r0, [r7, #20]
 80075fc:	f7ff ff76 	bl	80074ec <xQueueGenericCreate>
 8007600:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff ffd3 	bl	80075ae <prvInitialiseMutex>

		return xNewQueue;
 8007608:	68fb      	ldr	r3, [r7, #12]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007612:	b580      	push	{r7, lr}
 8007614:	b088      	sub	sp, #32
 8007616:	af02      	add	r7, sp, #8
 8007618:	4603      	mov	r3, r0
 800761a:	6039      	str	r1, [r7, #0]
 800761c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800761e:	2301      	movs	r3, #1
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	2300      	movs	r3, #0
 8007624:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2200      	movs	r2, #0
 800762e:	6939      	ldr	r1, [r7, #16]
 8007630:	6978      	ldr	r0, [r7, #20]
 8007632:	f7ff fed9 	bl	80073e8 <xQueueGenericCreateStatic>
 8007636:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff ffb8 	bl	80075ae <prvInitialiseMutex>

		return xNewQueue;
 800763e:	68fb      	ldr	r3, [r7, #12]
	}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007656:	2300      	movs	r3, #0
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10c      	bne.n	800767e <xQueueGenericSend+0x36>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	b672      	cpsid	i
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	b662      	cpsie	i
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <xQueueGenericSend+0x44>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <xQueueGenericSend+0x48>
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <xQueueGenericSend+0x4a>
 8007690:	2300      	movs	r3, #0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10c      	bne.n	80076b0 <xQueueGenericSend+0x68>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	b672      	cpsid	i
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	b662      	cpsie	i
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d103      	bne.n	80076be <xQueueGenericSend+0x76>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <xQueueGenericSend+0x7a>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <xQueueGenericSend+0x7c>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10c      	bne.n	80076e2 <xQueueGenericSend+0x9a>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	b672      	cpsid	i
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	b662      	cpsie	i
 80076dc:	623b      	str	r3, [r7, #32]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e2:	f001 fce7 	bl	80090b4 <xTaskGetSchedulerState>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <xQueueGenericSend+0xaa>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <xQueueGenericSend+0xae>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <xQueueGenericSend+0xb0>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10c      	bne.n	8007716 <xQueueGenericSend+0xce>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	b672      	cpsid	i
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	b662      	cpsie	i
 8007710:	61fb      	str	r3, [r7, #28]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007716:	f002 f819 	bl	800974c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <xQueueGenericSend+0xe4>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d129      	bne.n	8007780 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007732:	f000 fcc2 	bl	80080ba <prvCopyDataToQueue>
 8007736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	4618      	mov	r0, r3
 8007746:	f001 faed 	bl	8008d24 <xTaskRemoveFromEventList>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d013      	beq.n	8007778 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007750:	4b3f      	ldr	r3, [pc, #252]	; (8007850 <xQueueGenericSend+0x208>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	e00a      	b.n	8007778 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007768:	4b39      	ldr	r3, [pc, #228]	; (8007850 <xQueueGenericSend+0x208>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007778:	f002 f81c 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 800777c:	2301      	movs	r3, #1
 800777e:	e063      	b.n	8007848 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007786:	f002 f815 	bl	80097b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800778a:	2300      	movs	r3, #0
 800778c:	e05c      	b.n	8007848 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fb27 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077a2:	f002 f807 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a6:	f001 f8ab 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077aa:	f001 ffcf 	bl	800974c <vPortEnterCritical>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d103      	bne.n	80077c4 <xQueueGenericSend+0x17c>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d0:	d103      	bne.n	80077da <xQueueGenericSend+0x192>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077da:	f001 ffeb 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077de:	1d3a      	adds	r2, r7, #4
 80077e0:	f107 0314 	add.w	r3, r7, #20
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fb16 	bl	8008e18 <xTaskCheckForTimeOut>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d124      	bne.n	800783c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f4:	f000 fd59 	bl	80082aa <prvIsQueueFull>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	3310      	adds	r3, #16
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f001 fa66 	bl	8008cd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800780c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800780e:	f000 fce4 	bl	80081da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007812:	f001 f883 	bl	800891c <xTaskResumeAll>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f47f af7c 	bne.w	8007716 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800781e:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <xQueueGenericSend+0x208>)
 8007820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	e772      	b.n	8007716 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007832:	f000 fcd2 	bl	80081da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007836:	f001 f871 	bl	800891c <xTaskResumeAll>
 800783a:	e76c      	b.n	8007716 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800783c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800783e:	f000 fccc 	bl	80081da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007842:	f001 f86b 	bl	800891c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007848:	4618      	mov	r0, r3
 800784a:	3738      	adds	r7, #56	; 0x38
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08e      	sub	sp, #56	; 0x38
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10c      	bne.n	8007886 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	b672      	cpsid	i
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	b662      	cpsie	i
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <xQueueGenericSendFromISR+0x40>
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <xQueueGenericSendFromISR+0x44>
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <xQueueGenericSendFromISR+0x46>
 8007898:	2300      	movs	r3, #0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10c      	bne.n	80078b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	b672      	cpsid	i
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	b662      	cpsie	i
 80078b2:	623b      	str	r3, [r7, #32]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d103      	bne.n	80078c6 <xQueueGenericSendFromISR+0x72>
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <xQueueGenericSendFromISR+0x76>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <xQueueGenericSendFromISR+0x78>
 80078ca:	2300      	movs	r3, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10c      	bne.n	80078ea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	b672      	cpsid	i
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	b662      	cpsie	i
 80078e4:	61fb      	str	r3, [r7, #28]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ea:	f002 f817 	bl	800991c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078ee:	f3ef 8211 	mrs	r2, BASEPRI
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	b672      	cpsid	i
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	b662      	cpsie	i
 8007906:	61ba      	str	r2, [r7, #24]
 8007908:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800790a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	429a      	cmp	r2, r3
 8007918:	d302      	bcc.n	8007920 <xQueueGenericSendFromISR+0xcc>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d12c      	bne.n	800797a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007930:	f000 fbc3 	bl	80080ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007934:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d112      	bne.n	8007964 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	3324      	adds	r3, #36	; 0x24
 800794a:	4618      	mov	r0, r3
 800794c:	f001 f9ea 	bl	8008d24 <xTaskRemoveFromEventList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00e      	beq.n	8007974 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e007      	b.n	8007974 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007964:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007968:	3301      	adds	r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	b25a      	sxtb	r2, r3
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007974:	2301      	movs	r3, #1
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007978:	e001      	b.n	800797e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007988:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800798c:	4618      	mov	r0, r3
 800798e:	3738      	adds	r7, #56	; 0x38
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08e      	sub	sp, #56	; 0x38
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	b672      	cpsid	i
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	b662      	cpsie	i
 80079bc:	623b      	str	r3, [r7, #32]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00c      	beq.n	80079e4 <xQueueGiveFromISR+0x50>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	b672      	cpsid	i
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	b662      	cpsie	i
 80079de:	61fb      	str	r3, [r7, #28]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <xQueueGiveFromISR+0x60>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <xQueueGiveFromISR+0x64>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <xQueueGiveFromISR+0x66>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10c      	bne.n	8007a18 <xQueueGiveFromISR+0x84>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	b672      	cpsid	i
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	b662      	cpsie	i
 8007a12:	61bb      	str	r3, [r7, #24]
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a18:	f001 ff80 	bl	800991c <vPortValidateInterruptPriority>
	__asm volatile
 8007a1c:	f3ef 8211 	mrs	r2, BASEPRI
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	b672      	cpsid	i
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	b662      	cpsie	i
 8007a34:	617a      	str	r2, [r7, #20]
 8007a36:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a38:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d22b      	bcs.n	8007aa4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d112      	bne.n	8007a8e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d016      	beq.n	8007a9e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	3324      	adds	r3, #36	; 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 f955 	bl	8008d24 <xTaskRemoveFromEventList>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	e007      	b.n	8007a9e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a92:	3301      	adds	r3, #1
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	b25a      	sxtb	r2, r3
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa2:	e001      	b.n	8007aa8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f383 8811 	msr	BASEPRI, r3
}
 8007ab2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3738      	adds	r7, #56	; 0x38
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10c      	bne.n	8007af4 <xQueueReceive+0x34>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	b672      	cpsid	i
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	b662      	cpsie	i
 8007aee:	623b      	str	r3, [r7, #32]
}
 8007af0:	bf00      	nop
 8007af2:	e7fe      	b.n	8007af2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d103      	bne.n	8007b02 <xQueueReceive+0x42>
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <xQueueReceive+0x46>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <xQueueReceive+0x48>
 8007b06:	2300      	movs	r3, #0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10c      	bne.n	8007b26 <xQueueReceive+0x66>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	61fb      	str	r3, [r7, #28]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b26:	f001 fac5 	bl	80090b4 <xTaskGetSchedulerState>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <xQueueReceive+0x76>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <xQueueReceive+0x7a>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <xQueueReceive+0x7c>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10c      	bne.n	8007b5a <xQueueReceive+0x9a>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	b672      	cpsid	i
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	b662      	cpsie	i
 8007b54:	61bb      	str	r3, [r7, #24]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b5a:	f001 fdf7 	bl	800974c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01f      	beq.n	8007baa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6e:	f000 fb0e 	bl	800818e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00f      	beq.n	8007ba2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	3310      	adds	r3, #16
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 f8cc 	bl	8008d24 <xTaskRemoveFromEventList>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b92:	4b3d      	ldr	r3, [pc, #244]	; (8007c88 <xQueueReceive+0x1c8>)
 8007b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ba2:	f001 fe07 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e069      	b.n	8007c7e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bb0:	f001 fe00 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e062      	b.n	8007c7e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d106      	bne.n	8007bcc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bbe:	f107 0310 	add.w	r3, r7, #16
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f912 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bcc:	f001 fdf2 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bd0:	f000 fe96 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bd4:	f001 fdba 	bl	800974c <vPortEnterCritical>
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bde:	b25b      	sxtb	r3, r3
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d103      	bne.n	8007bee <xQueueReceive+0x12e>
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bf4:	b25b      	sxtb	r3, r3
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d103      	bne.n	8007c04 <xQueueReceive+0x144>
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c04:	f001 fdd6 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c08:	1d3a      	adds	r2, r7, #4
 8007c0a:	f107 0310 	add.w	r3, r7, #16
 8007c0e:	4611      	mov	r1, r2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 f901 	bl	8008e18 <xTaskCheckForTimeOut>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d123      	bne.n	8007c64 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c1e:	f000 fb2e 	bl	800827e <prvIsQueueEmpty>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d017      	beq.n	8007c58 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	3324      	adds	r3, #36	; 0x24
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f851 	bl	8008cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c38:	f000 facf 	bl	80081da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c3c:	f000 fe6e 	bl	800891c <xTaskResumeAll>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d189      	bne.n	8007b5a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007c46:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <xQueueReceive+0x1c8>)
 8007c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	e780      	b.n	8007b5a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5a:	f000 fabe 	bl	80081da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c5e:	f000 fe5d 	bl	800891c <xTaskResumeAll>
 8007c62:	e77a      	b.n	8007b5a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c66:	f000 fab8 	bl	80081da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c6a:	f000 fe57 	bl	800891c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f000 fb05 	bl	800827e <prvIsQueueEmpty>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f43f af6f 	beq.w	8007b5a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3730      	adds	r7, #48	; 0x30
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08e      	sub	sp, #56	; 0x38
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10c      	bne.n	8007cc2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	b672      	cpsid	i
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	b662      	cpsie	i
 8007cbc:	623b      	str	r3, [r7, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00c      	beq.n	8007ce4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	b672      	cpsid	i
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	b662      	cpsie	i
 8007cde:	61fb      	str	r3, [r7, #28]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ce4:	f001 f9e6 	bl	80090b4 <xTaskGetSchedulerState>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d102      	bne.n	8007cf4 <xQueueSemaphoreTake+0x68>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <xQueueSemaphoreTake+0x6c>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <xQueueSemaphoreTake+0x6e>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10c      	bne.n	8007d18 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
 8007d12:	61bb      	str	r3, [r7, #24]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d18:	f001 fd18 	bl	800974c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d024      	beq.n	8007d72 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	1e5a      	subs	r2, r3, #1
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d38:	f001 fb82 	bl	8009440 <pvTaskIncrementMutexHeldCount>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00f      	beq.n	8007d6a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 ffe8 	bl	8008d24 <xTaskRemoveFromEventList>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d5a:	4b55      	ldr	r3, [pc, #340]	; (8007eb0 <xQueueSemaphoreTake+0x224>)
 8007d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d6a:	f001 fd23 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e099      	b.n	8007ea6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d113      	bne.n	8007da0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00c      	beq.n	8007d98 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	b672      	cpsid	i
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	b662      	cpsie	i
 8007d92:	617b      	str	r3, [r7, #20]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d98:	f001 fd0c 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e082      	b.n	8007ea6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d106      	bne.n	8007db4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 f81e 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007db0:	2301      	movs	r3, #1
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007db4:	f001 fcfe 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007db8:	f000 fda2 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dbc:	f001 fcc6 	bl	800974c <vPortEnterCritical>
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dc6:	b25b      	sxtb	r3, r3
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dcc:	d103      	bne.n	8007dd6 <xQueueSemaphoreTake+0x14a>
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d103      	bne.n	8007dec <xQueueSemaphoreTake+0x160>
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dec:	f001 fce2 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007df0:	463a      	mov	r2, r7
 8007df2:	f107 030c 	add.w	r3, r7, #12
 8007df6:	4611      	mov	r1, r2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 f80d 	bl	8008e18 <xTaskCheckForTimeOut>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d132      	bne.n	8007e6a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e06:	f000 fa3a 	bl	800827e <prvIsQueueEmpty>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d026      	beq.n	8007e5e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007e18:	f001 fc98 	bl	800974c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 f965 	bl	80090f0 <xTaskPriorityInherit>
 8007e26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007e28:	f001 fcc4 	bl	80097b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2e:	3324      	adds	r3, #36	; 0x24
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 ff4f 	bl	8008cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e3c:	f000 f9cd 	bl	80081da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e40:	f000 fd6c 	bl	800891c <xTaskResumeAll>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f47f af66 	bne.w	8007d18 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007e4c:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <xQueueSemaphoreTake+0x224>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	e75c      	b.n	8007d18 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e60:	f000 f9bb 	bl	80081da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e64:	f000 fd5a 	bl	800891c <xTaskResumeAll>
 8007e68:	e756      	b.n	8007d18 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e6c:	f000 f9b5 	bl	80081da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e70:	f000 fd54 	bl	800891c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e76:	f000 fa02 	bl	800827e <prvIsQueueEmpty>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f43f af4b 	beq.w	8007d18 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007e88:	f001 fc60 	bl	800974c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e8e:	f000 f8fc 	bl	800808a <prvGetDisinheritPriorityAfterTimeout>
 8007e92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fa32 	bl	8009304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ea0:	f001 fc88 	bl	80097b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3738      	adds	r7, #56	; 0x38
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	e000ed04 	.word	0xe000ed04

08007eb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08e      	sub	sp, #56	; 0x38
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10c      	bne.n	8007ee4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	b672      	cpsid	i
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	b662      	cpsie	i
 8007ede:	623b      	str	r3, [r7, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <xQueueReceiveFromISR+0x3e>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <xQueueReceiveFromISR+0x42>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <xQueueReceiveFromISR+0x44>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10c      	bne.n	8007f16 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	b672      	cpsid	i
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	b662      	cpsie	i
 8007f10:	61fb      	str	r3, [r7, #28]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f16:	f001 fd01 	bl	800991c <vPortValidateInterruptPriority>
	__asm volatile
 8007f1a:	f3ef 8211 	mrs	r2, BASEPRI
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	b672      	cpsid	i
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	b662      	cpsie	i
 8007f32:	61ba      	str	r2, [r7, #24]
 8007f34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02f      	beq.n	8007fa6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f54:	f000 f91b 	bl	800818e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	1e5a      	subs	r2, r3, #1
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d112      	bne.n	8007f90 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	3310      	adds	r3, #16
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fed4 	bl	8008d24 <xTaskRemoveFromEventList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e007      	b.n	8007fa0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f94:	3301      	adds	r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	b25a      	sxtb	r2, r3
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa4:	e001      	b.n	8007faa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f383 8811 	msr	BASEPRI, r3
}
 8007fb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3738      	adds	r7, #56	; 0x38
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10c      	bne.n	8007fe8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	b672      	cpsid	i
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	b662      	cpsie	i
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007fe8:	f001 fbb0 	bl	800974c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007ff2:	f001 fbdf 	bl	80097b4 <vPortExitCritical>

	return uxReturn;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10c      	bne.n	800802c <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	b672      	cpsid	i
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	b662      	cpsie	i
 8008026:	60fb      	str	r3, [r7, #12]
}
 8008028:	bf00      	nop
 800802a:	e7fe      	b.n	800802a <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008032:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008034:	4618      	mov	r0, r3
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10c      	bne.n	800806c <vQueueDelete+0x2c>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	b672      	cpsid	i
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	b662      	cpsie	i
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f935 	bl	80082dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f001 fd5b 	bl	8009b38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f1c3 0307 	rsb	r3, r3, #7
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	e001      	b.n	80080ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080ac:	68fb      	ldr	r3, [r7, #12]
	}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10d      	bne.n	80080f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d14d      	bne.n	800817c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f883 	bl	80091f0 <xTaskPriorityDisinherit>
 80080ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	609a      	str	r2, [r3, #8]
 80080f2:	e043      	b.n	800817c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d119      	bne.n	800812e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6858      	ldr	r0, [r3, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	461a      	mov	r2, r3
 8008104:	68b9      	ldr	r1, [r7, #8]
 8008106:	f010 fa55 	bl	80185b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	441a      	add	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	429a      	cmp	r2, r3
 8008122:	d32b      	bcc.n	800817c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	e026      	b.n	800817c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68d8      	ldr	r0, [r3, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	461a      	mov	r2, r3
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	f010 fa3b 	bl	80185b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	425b      	negs	r3, r3
 8008148:	441a      	add	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d207      	bcs.n	800816a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	425b      	negs	r3, r3
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d105      	bne.n	800817c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008184:	697b      	ldr	r3, [r7, #20]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d018      	beq.n	80081d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	441a      	add	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d303      	bcc.n	80081c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68d9      	ldr	r1, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	461a      	mov	r2, r3
 80081cc:	6838      	ldr	r0, [r7, #0]
 80081ce:	f010 f9f1 	bl	80185b4 <memcpy>
	}
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081e2:	f001 fab3 	bl	800974c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ee:	e011      	b.n	8008214 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d012      	beq.n	800821e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fd91 	bl	8008d24 <xTaskRemoveFromEventList>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008208:	f000 fe6c 	bl	8008ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	3b01      	subs	r3, #1
 8008210:	b2db      	uxtb	r3, r3
 8008212:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dce9      	bgt.n	80081f0 <prvUnlockQueue+0x16>
 800821c:	e000      	b.n	8008220 <prvUnlockQueue+0x46>
					break;
 800821e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	22ff      	movs	r2, #255	; 0xff
 8008224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008228:	f001 fac4 	bl	80097b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800822c:	f001 fa8e 	bl	800974c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008236:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008238:	e011      	b.n	800825e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d012      	beq.n	8008268 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3310      	adds	r3, #16
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fd6c 	bl	8008d24 <xTaskRemoveFromEventList>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008252:	f000 fe47 	bl	8008ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	3b01      	subs	r3, #1
 800825a:	b2db      	uxtb	r3, r3
 800825c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800825e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008262:	2b00      	cmp	r3, #0
 8008264:	dce9      	bgt.n	800823a <prvUnlockQueue+0x60>
 8008266:	e000      	b.n	800826a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008268:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	22ff      	movs	r2, #255	; 0xff
 800826e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008272:	f001 fa9f 	bl	80097b4 <vPortExitCritical>
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008286:	f001 fa61 	bl	800974c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008292:	2301      	movs	r3, #1
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	e001      	b.n	800829c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800829c:	f001 fa8a 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 80082a0:	68fb      	ldr	r3, [r7, #12]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082b2:	f001 fa4b 	bl	800974c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d102      	bne.n	80082c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	e001      	b.n	80082cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082cc:	f001 fa72 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 80082d0:	68fb      	ldr	r3, [r7, #12]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e016      	b.n	8008318 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80082ea:	4a10      	ldr	r2, [pc, #64]	; (800832c <vQueueUnregisterQueue+0x50>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4413      	add	r3, r2
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d10b      	bne.n	8008312 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80082fa:	4a0c      	ldr	r2, [pc, #48]	; (800832c <vQueueUnregisterQueue+0x50>)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2100      	movs	r1, #0
 8008300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008304:	4a09      	ldr	r2, [pc, #36]	; (800832c <vQueueUnregisterQueue+0x50>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	2200      	movs	r2, #0
 800830e:	605a      	str	r2, [r3, #4]
				break;
 8008310:	e006      	b.n	8008320 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b07      	cmp	r3, #7
 800831c:	d9e5      	bls.n	80082ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800831e:	bf00      	nop
 8008320:	bf00      	nop
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	2000a3f8 	.word	0x2000a3f8

08008330 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08e      	sub	sp, #56	; 0x38
 8008334:	af04      	add	r7, sp, #16
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10c      	bne.n	800835e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	b672      	cpsid	i
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	b662      	cpsie	i
 8008358:	623b      	str	r3, [r7, #32]
}
 800835a:	bf00      	nop
 800835c:	e7fe      	b.n	800835c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10c      	bne.n	800837e <xTaskCreateStatic+0x4e>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	b672      	cpsid	i
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	b662      	cpsie	i
 8008378:	61fb      	str	r3, [r7, #28]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800837e:	23b4      	movs	r3, #180	; 0xb4
 8008380:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2bb4      	cmp	r3, #180	; 0xb4
 8008386:	d00c      	beq.n	80083a2 <xTaskCreateStatic+0x72>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	b672      	cpsid	i
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	b662      	cpsie	i
 800839c:	61bb      	str	r3, [r7, #24]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01e      	beq.n	80083e8 <xTaskCreateStatic+0xb8>
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01b      	beq.n	80083e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083c2:	2300      	movs	r3, #0
 80083c4:	9303      	str	r3, [sp, #12]
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	9302      	str	r3, [sp, #8]
 80083ca:	f107 0314 	add.w	r3, r7, #20
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f850 	bl	8008480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083e2:	f000 f8ed 	bl	80085c0 <prvAddNewTaskToReadyList>
 80083e6:	e001      	b.n	80083ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083ec:	697b      	ldr	r3, [r7, #20]
	}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b08c      	sub	sp, #48	; 0x30
 80083fa:	af04      	add	r7, sp, #16
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4618      	mov	r0, r3
 800840c:	f001 faca 	bl	80099a4 <pvPortMalloc>
 8008410:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00e      	beq.n	8008436 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008418:	20b4      	movs	r0, #180	; 0xb4
 800841a:	f001 fac3 	bl	80099a4 <pvPortMalloc>
 800841e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
 800842c:	e005      	b.n	800843a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800842e:	6978      	ldr	r0, [r7, #20]
 8008430:	f001 fb82 	bl	8009b38 <vPortFree>
 8008434:	e001      	b.n	800843a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d017      	beq.n	8008470 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008448:	88fa      	ldrh	r2, [r7, #6]
 800844a:	2300      	movs	r3, #0
 800844c:	9303      	str	r3, [sp, #12]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f80e 	bl	8008480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008464:	69f8      	ldr	r0, [r7, #28]
 8008466:	f000 f8ab 	bl	80085c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800846a:	2301      	movs	r3, #1
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e002      	b.n	8008476 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008470:	f04f 33ff 	mov.w	r3, #4294967295
 8008474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008476:	69bb      	ldr	r3, [r7, #24]
	}
 8008478:	4618      	mov	r0, r3
 800847a:	3720      	adds	r7, #32
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008498:	440b      	add	r3, r1
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f023 0307 	bic.w	r3, r3, #7
 80084a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00c      	beq.n	80084cc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	b672      	cpsid	i
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	b662      	cpsie	i
 80084c6:	617b      	str	r3, [r7, #20]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01f      	beq.n	8008512 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084d2:	2300      	movs	r3, #0
 80084d4:	61fb      	str	r3, [r7, #28]
 80084d6:	e012      	b.n	80084fe <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	7819      	ldrb	r1, [r3, #0]
 80084e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	3334      	adds	r3, #52	; 0x34
 80084e8:	460a      	mov	r2, r1
 80084ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d006      	beq.n	8008506 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	2b0f      	cmp	r3, #15
 8008502:	d9e9      	bls.n	80084d8 <prvInitialiseNewTask+0x58>
 8008504:	e000      	b.n	8008508 <prvInitialiseNewTask+0x88>
			{
				break;
 8008506:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008510:	e003      	b.n	800851a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	2b06      	cmp	r3, #6
 800851e:	d901      	bls.n	8008524 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008520:	2306      	movs	r3, #6
 8008522:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008528:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800852e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	2200      	movs	r2, #0
 8008534:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	3304      	adds	r3, #4
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fe55 	bl	80071ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	3318      	adds	r3, #24
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fe50 	bl	80071ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	f1c3 0207 	rsb	r2, r3, #7
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	2200      	movs	r2, #0
 8008564:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	2200      	movs	r2, #0
 800856c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	334c      	adds	r3, #76	; 0x4c
 8008574:	2260      	movs	r2, #96	; 0x60
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f010 f843 	bl	8018604 <memset>
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	4a0c      	ldr	r2, [pc, #48]	; (80085b4 <prvInitialiseNewTask+0x134>)
 8008582:	651a      	str	r2, [r3, #80]	; 0x50
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <prvInitialiseNewTask+0x138>)
 8008588:	655a      	str	r2, [r3, #84]	; 0x54
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	4a0b      	ldr	r2, [pc, #44]	; (80085bc <prvInitialiseNewTask+0x13c>)
 800858e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	69b8      	ldr	r0, [r7, #24]
 8008596:	f000 ffcd 	bl	8009534 <pxPortInitialiseStack>
 800859a:	4602      	mov	r2, r0
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ac:	bf00      	nop
 80085ae:	3720      	adds	r7, #32
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	0801d654 	.word	0x0801d654
 80085b8:	0801d674 	.word	0x0801d674
 80085bc:	0801d634 	.word	0x0801d634

080085c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085c8:	f001 f8c0 	bl	800974c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085cc:	4b2a      	ldr	r3, [pc, #168]	; (8008678 <prvAddNewTaskToReadyList+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3301      	adds	r3, #1
 80085d2:	4a29      	ldr	r2, [pc, #164]	; (8008678 <prvAddNewTaskToReadyList+0xb8>)
 80085d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085d6:	4b29      	ldr	r3, [pc, #164]	; (800867c <prvAddNewTaskToReadyList+0xbc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085de:	4a27      	ldr	r2, [pc, #156]	; (800867c <prvAddNewTaskToReadyList+0xbc>)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085e4:	4b24      	ldr	r3, [pc, #144]	; (8008678 <prvAddNewTaskToReadyList+0xb8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d110      	bne.n	800860e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085ec:	f000 fc9e 	bl	8008f2c <prvInitialiseTaskLists>
 80085f0:	e00d      	b.n	800860e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085f2:	4b23      	ldr	r3, [pc, #140]	; (8008680 <prvAddNewTaskToReadyList+0xc0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d109      	bne.n	800860e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085fa:	4b20      	ldr	r3, [pc, #128]	; (800867c <prvAddNewTaskToReadyList+0xbc>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	429a      	cmp	r2, r3
 8008606:	d802      	bhi.n	800860e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008608:	4a1c      	ldr	r2, [pc, #112]	; (800867c <prvAddNewTaskToReadyList+0xbc>)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800860e:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <prvAddNewTaskToReadyList+0xc4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a1b      	ldr	r2, [pc, #108]	; (8008684 <prvAddNewTaskToReadyList+0xc4>)
 8008616:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	2201      	movs	r2, #1
 800861e:	409a      	lsls	r2, r3
 8008620:	4b19      	ldr	r3, [pc, #100]	; (8008688 <prvAddNewTaskToReadyList+0xc8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4313      	orrs	r3, r2
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <prvAddNewTaskToReadyList+0xc8>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4a15      	ldr	r2, [pc, #84]	; (800868c <prvAddNewTaskToReadyList+0xcc>)
 8008638:	441a      	add	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe fddf 	bl	8007204 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008646:	f001 f8b5 	bl	80097b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <prvAddNewTaskToReadyList+0xc0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <prvAddNewTaskToReadyList+0xbc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	429a      	cmp	r2, r3
 800865e:	d207      	bcs.n	8008670 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008660:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <prvAddNewTaskToReadyList+0xd0>)
 8008662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000668 	.word	0x20000668
 800867c:	20000568 	.word	0x20000568
 8008680:	20000674 	.word	0x20000674
 8008684:	20000684 	.word	0x20000684
 8008688:	20000670 	.word	0x20000670
 800868c:	2000056c 	.word	0x2000056c
 8008690:	e000ed04 	.word	0xe000ed04

08008694 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800869c:	f001 f856 	bl	800974c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <vTaskDelete+0x18>
 80086a6:	4b3a      	ldr	r3, [pc, #232]	; (8008790 <vTaskDelete+0xfc>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	e000      	b.n	80086ae <vTaskDelete+0x1a>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fe fe02 	bl	80072be <uxListRemove>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d115      	bne.n	80086ec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c4:	4933      	ldr	r1, [pc, #204]	; (8008794 <vTaskDelete+0x100>)
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <vTaskDelete+0x58>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	2201      	movs	r2, #1
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	43da      	mvns	r2, r3
 80086e2:	4b2d      	ldr	r3, [pc, #180]	; (8008798 <vTaskDelete+0x104>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4013      	ands	r3, r2
 80086e8:	4a2b      	ldr	r2, [pc, #172]	; (8008798 <vTaskDelete+0x104>)
 80086ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3318      	adds	r3, #24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fde0 	bl	80072be <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80086fe:	4b27      	ldr	r3, [pc, #156]	; (800879c <vTaskDelete+0x108>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	4a25      	ldr	r2, [pc, #148]	; (800879c <vTaskDelete+0x108>)
 8008706:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008708:	4b21      	ldr	r3, [pc, #132]	; (8008790 <vTaskDelete+0xfc>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	429a      	cmp	r2, r3
 8008710:	d10b      	bne.n	800872a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4821      	ldr	r0, [pc, #132]	; (80087a0 <vTaskDelete+0x10c>)
 800871a:	f7fe fd73 	bl	8007204 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800871e:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <vTaskDelete+0x110>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	4a1f      	ldr	r2, [pc, #124]	; (80087a4 <vTaskDelete+0x110>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	e009      	b.n	800873e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800872a:	4b1f      	ldr	r3, [pc, #124]	; (80087a8 <vTaskDelete+0x114>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3b01      	subs	r3, #1
 8008730:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <vTaskDelete+0x114>)
 8008732:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 fc67 	bl	8009008 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800873a:	f000 fc9b 	bl	8009074 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800873e:	f001 f839 	bl	80097b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008742:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <vTaskDelete+0x118>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01d      	beq.n	8008786 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800874a:	4b11      	ldr	r3, [pc, #68]	; (8008790 <vTaskDelete+0xfc>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	429a      	cmp	r2, r3
 8008752:	d118      	bne.n	8008786 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008754:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <vTaskDelete+0x11c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00c      	beq.n	8008776 <vTaskDelete+0xe2>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	b672      	cpsid	i
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	b662      	cpsie	i
 8008770:	60bb      	str	r3, [r7, #8]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <vTaskDelete+0x120>)
 8008778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000568 	.word	0x20000568
 8008794:	2000056c 	.word	0x2000056c
 8008798:	20000670 	.word	0x20000670
 800879c:	20000684 	.word	0x20000684
 80087a0:	2000063c 	.word	0x2000063c
 80087a4:	20000650 	.word	0x20000650
 80087a8:	20000668 	.word	0x20000668
 80087ac:	20000674 	.word	0x20000674
 80087b0:	20000690 	.word	0x20000690
 80087b4:	e000ed04 	.word	0xe000ed04

080087b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d019      	beq.n	80087fe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ca:	4b14      	ldr	r3, [pc, #80]	; (800881c <vTaskDelay+0x64>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00c      	beq.n	80087ec <vTaskDelay+0x34>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	b672      	cpsid	i
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	b662      	cpsie	i
 80087e6:	60bb      	str	r3, [r7, #8]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <vTaskDelay+0x32>
			vTaskSuspendAll();
 80087ec:	f000 f888 	bl	8008900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087f0:	2100      	movs	r1, #0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fe38 	bl	8009468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087f8:	f000 f890 	bl	800891c <xTaskResumeAll>
 80087fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008804:	4b06      	ldr	r3, [pc, #24]	; (8008820 <vTaskDelay+0x68>)
 8008806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000690 	.word	0x20000690
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08a      	sub	sp, #40	; 0x28
 8008828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008832:	463a      	mov	r2, r7
 8008834:	1d39      	adds	r1, r7, #4
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fecc 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	9202      	str	r2, [sp, #8]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	2300      	movs	r3, #0
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	460a      	mov	r2, r1
 8008852:	4923      	ldr	r1, [pc, #140]	; (80088e0 <vTaskStartScheduler+0xbc>)
 8008854:	4823      	ldr	r0, [pc, #140]	; (80088e4 <vTaskStartScheduler+0xc0>)
 8008856:	f7ff fd6b 	bl	8008330 <xTaskCreateStatic>
 800885a:	4603      	mov	r3, r0
 800885c:	4a22      	ldr	r2, [pc, #136]	; (80088e8 <vTaskStartScheduler+0xc4>)
 800885e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008860:	4b21      	ldr	r3, [pc, #132]	; (80088e8 <vTaskStartScheduler+0xc4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008868:	2301      	movs	r3, #1
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	e001      	b.n	8008872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800886e:	2300      	movs	r3, #0
 8008870:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d11d      	bne.n	80088b4 <vTaskStartScheduler+0x90>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	b672      	cpsid	i
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	b662      	cpsie	i
 800888c:	613b      	str	r3, [r7, #16]
}
 800888e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008890:	4b16      	ldr	r3, [pc, #88]	; (80088ec <vTaskStartScheduler+0xc8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	334c      	adds	r3, #76	; 0x4c
 8008896:	4a16      	ldr	r2, [pc, #88]	; (80088f0 <vTaskStartScheduler+0xcc>)
 8008898:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800889a:	4b16      	ldr	r3, [pc, #88]	; (80088f4 <vTaskStartScheduler+0xd0>)
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <vTaskStartScheduler+0xd4>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <vTaskStartScheduler+0xd8>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088ae:	f000 fecf 	bl	8009650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b2:	e010      	b.n	80088d6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d10c      	bne.n	80088d6 <vTaskStartScheduler+0xb2>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	b672      	cpsid	i
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	b662      	cpsie	i
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <vTaskStartScheduler+0xb0>
}
 80088d6:	bf00      	nop
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	08019c00 	.word	0x08019c00
 80088e4:	08008efd 	.word	0x08008efd
 80088e8:	2000068c 	.word	0x2000068c
 80088ec:	20000568 	.word	0x20000568
 80088f0:	20000020 	.word	0x20000020
 80088f4:	20000688 	.word	0x20000688
 80088f8:	20000674 	.word	0x20000674
 80088fc:	2000066c 	.word	0x2000066c

08008900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <vTaskSuspendAll+0x18>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	4a03      	ldr	r2, [pc, #12]	; (8008918 <vTaskSuspendAll+0x18>)
 800890c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000690 	.word	0x20000690

0800891c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800892a:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <xTaskResumeAll+0x118>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10c      	bne.n	800894c <xTaskResumeAll+0x30>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	b672      	cpsid	i
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	b662      	cpsie	i
 8008946:	603b      	str	r3, [r7, #0]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800894c:	f000 fefe 	bl	800974c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008950:	4b38      	ldr	r3, [pc, #224]	; (8008a34 <xTaskResumeAll+0x118>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3b01      	subs	r3, #1
 8008956:	4a37      	ldr	r2, [pc, #220]	; (8008a34 <xTaskResumeAll+0x118>)
 8008958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800895a:	4b36      	ldr	r3, [pc, #216]	; (8008a34 <xTaskResumeAll+0x118>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d161      	bne.n	8008a26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008962:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <xTaskResumeAll+0x11c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d05d      	beq.n	8008a26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800896a:	e02e      	b.n	80089ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896c:	4b33      	ldr	r3, [pc, #204]	; (8008a3c <xTaskResumeAll+0x120>)
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3318      	adds	r3, #24
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fca0 	bl	80072be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fc9b 	bl	80072be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	2201      	movs	r2, #1
 800898e:	409a      	lsls	r2, r3
 8008990:	4b2b      	ldr	r3, [pc, #172]	; (8008a40 <xTaskResumeAll+0x124>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	4a2a      	ldr	r2, [pc, #168]	; (8008a40 <xTaskResumeAll+0x124>)
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <xTaskResumeAll+0x128>)
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fe fc27 	bl	8007204 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <xTaskResumeAll+0x12c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <xTaskResumeAll+0x130>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ca:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <xTaskResumeAll+0x120>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1cc      	bne.n	800896c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089d8:	f000 fb4c 	bl	8009074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089dc:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <xTaskResumeAll+0x134>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d010      	beq.n	8008a0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089e8:	f000 f858 	bl	8008a9c <xTaskIncrementTick>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <xTaskResumeAll+0x130>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f1      	bne.n	80089e8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008a04:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <xTaskResumeAll+0x134>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <xTaskResumeAll+0x130>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <xTaskResumeAll+0x138>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a26:	f000 fec5 	bl	80097b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20000690 	.word	0x20000690
 8008a38:	20000668 	.word	0x20000668
 8008a3c:	20000628 	.word	0x20000628
 8008a40:	20000670 	.word	0x20000670
 8008a44:	2000056c 	.word	0x2000056c
 8008a48:	20000568 	.word	0x20000568
 8008a4c:	2000067c 	.word	0x2000067c
 8008a50:	20000678 	.word	0x20000678
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <xTaskGetTickCount+0x1c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a64:	687b      	ldr	r3, [r7, #4]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	2000066c 	.word	0x2000066c

08008a78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a7e:	f000 ff4d 	bl	800991c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008a86:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <xTaskGetTickCountFromISR+0x20>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a8c:	683b      	ldr	r3, [r7, #0]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	2000066c 	.word	0x2000066c

08008a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aa6:	4b4f      	ldr	r3, [pc, #316]	; (8008be4 <xTaskIncrementTick+0x148>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f040 808a 	bne.w	8008bc4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ab0:	4b4d      	ldr	r3, [pc, #308]	; (8008be8 <xTaskIncrementTick+0x14c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ab8:	4a4b      	ldr	r2, [pc, #300]	; (8008be8 <xTaskIncrementTick+0x14c>)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d122      	bne.n	8008b0a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ac4:	4b49      	ldr	r3, [pc, #292]	; (8008bec <xTaskIncrementTick+0x150>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	b672      	cpsid	i
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	b662      	cpsie	i
 8008ae2:	603b      	str	r3, [r7, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xTaskIncrementTick+0x4a>
 8008ae8:	4b40      	ldr	r3, [pc, #256]	; (8008bec <xTaskIncrementTick+0x150>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	4b40      	ldr	r3, [pc, #256]	; (8008bf0 <xTaskIncrementTick+0x154>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a3e      	ldr	r2, [pc, #248]	; (8008bec <xTaskIncrementTick+0x150>)
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	4a3e      	ldr	r2, [pc, #248]	; (8008bf0 <xTaskIncrementTick+0x154>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	4b3d      	ldr	r3, [pc, #244]	; (8008bf4 <xTaskIncrementTick+0x158>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3301      	adds	r3, #1
 8008b02:	4a3c      	ldr	r2, [pc, #240]	; (8008bf4 <xTaskIncrementTick+0x158>)
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	f000 fab5 	bl	8009074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b0a:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <xTaskIncrementTick+0x15c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d348      	bcc.n	8008ba6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b14:	4b35      	ldr	r3, [pc, #212]	; (8008bec <xTaskIncrementTick+0x150>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1e:	4b36      	ldr	r3, [pc, #216]	; (8008bf8 <xTaskIncrementTick+0x15c>)
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	601a      	str	r2, [r3, #0]
					break;
 8008b26:	e03e      	b.n	8008ba6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b28:	4b30      	ldr	r3, [pc, #192]	; (8008bec <xTaskIncrementTick+0x150>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d203      	bcs.n	8008b48 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b40:	4a2d      	ldr	r2, [pc, #180]	; (8008bf8 <xTaskIncrementTick+0x15c>)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b46:	e02e      	b.n	8008ba6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fbb6 	bl	80072be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d004      	beq.n	8008b64 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	3318      	adds	r3, #24
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fbad 	bl	80072be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	2201      	movs	r2, #1
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <xTaskIncrementTick+0x160>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	4a22      	ldr	r2, [pc, #136]	; (8008bfc <xTaskIncrementTick+0x160>)
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <xTaskIncrementTick+0x164>)
 8008b84:	441a      	add	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7fe fb39 	bl	8007204 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <xTaskIncrementTick+0x168>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3b9      	bcc.n	8008b14 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba4:	e7b6      	b.n	8008b14 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ba6:	4b17      	ldr	r3, [pc, #92]	; (8008c04 <xTaskIncrementTick+0x168>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4914      	ldr	r1, [pc, #80]	; (8008c00 <xTaskIncrementTick+0x164>)
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d907      	bls.n	8008bce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e004      	b.n	8008bce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bc4:	4b10      	ldr	r3, [pc, #64]	; (8008c08 <xTaskIncrementTick+0x16c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	4a0f      	ldr	r2, [pc, #60]	; (8008c08 <xTaskIncrementTick+0x16c>)
 8008bcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bce:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <xTaskIncrementTick+0x170>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bda:	697b      	ldr	r3, [r7, #20]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000690 	.word	0x20000690
 8008be8:	2000066c 	.word	0x2000066c
 8008bec:	20000620 	.word	0x20000620
 8008bf0:	20000624 	.word	0x20000624
 8008bf4:	20000680 	.word	0x20000680
 8008bf8:	20000688 	.word	0x20000688
 8008bfc:	20000670 	.word	0x20000670
 8008c00:	2000056c 	.word	0x2000056c
 8008c04:	20000568 	.word	0x20000568
 8008c08:	20000678 	.word	0x20000678
 8008c0c:	2000067c 	.word	0x2000067c

08008c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c16:	4b2a      	ldr	r3, [pc, #168]	; (8008cc0 <vTaskSwitchContext+0xb0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c1e:	4b29      	ldr	r3, [pc, #164]	; (8008cc4 <vTaskSwitchContext+0xb4>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c24:	e046      	b.n	8008cb4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c26:	4b27      	ldr	r3, [pc, #156]	; (8008cc4 <vTaskSwitchContext+0xb4>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c2c:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <vTaskSwitchContext+0xb8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	fab3 f383 	clz	r3, r3
 8008c38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	f1c3 031f 	rsb	r3, r3, #31
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	4922      	ldr	r1, [pc, #136]	; (8008ccc <vTaskSwitchContext+0xbc>)
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	4613      	mov	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	440b      	add	r3, r1
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10c      	bne.n	8008c70 <vTaskSwitchContext+0x60>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	b672      	cpsid	i
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	b662      	cpsie	i
 8008c6a:	607b      	str	r3, [r7, #4]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <vTaskSwitchContext+0x5e>
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4a14      	ldr	r2, [pc, #80]	; (8008ccc <vTaskSwitchContext+0xbc>)
 8008c7c:	4413      	add	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	605a      	str	r2, [r3, #4]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	3308      	adds	r3, #8
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d104      	bne.n	8008ca0 <vTaskSwitchContext+0x90>
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	605a      	str	r2, [r3, #4]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	4a0a      	ldr	r2, [pc, #40]	; (8008cd0 <vTaskSwitchContext+0xc0>)
 8008ca8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <vTaskSwitchContext+0xc0>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	334c      	adds	r3, #76	; 0x4c
 8008cb0:	4a08      	ldr	r2, [pc, #32]	; (8008cd4 <vTaskSwitchContext+0xc4>)
 8008cb2:	6013      	str	r3, [r2, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	20000690 	.word	0x20000690
 8008cc4:	2000067c 	.word	0x2000067c
 8008cc8:	20000670 	.word	0x20000670
 8008ccc:	2000056c 	.word	0x2000056c
 8008cd0:	20000568 	.word	0x20000568
 8008cd4:	20000020 	.word	0x20000020

08008cd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	b672      	cpsid	i
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	b662      	cpsie	i
 8008cfc:	60fb      	str	r3, [r7, #12]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d02:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <vTaskPlaceOnEventList+0x48>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3318      	adds	r3, #24
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fe fa9e 	bl	800724c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d10:	2101      	movs	r1, #1
 8008d12:	6838      	ldr	r0, [r7, #0]
 8008d14:	f000 fba8 	bl	8009468 <prvAddCurrentTaskToDelayedList>
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000568 	.word	0x20000568

08008d24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10c      	bne.n	8008d54 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	b672      	cpsid	i
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	b662      	cpsie	i
 8008d4e:	60fb      	str	r3, [r7, #12]
}
 8008d50:	bf00      	nop
 8008d52:	e7fe      	b.n	8008d52 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	3318      	adds	r3, #24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fab0 	bl	80072be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d5e:	4b1d      	ldr	r3, [pc, #116]	; (8008dd4 <xTaskRemoveFromEventList+0xb0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d11c      	bne.n	8008da0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe faa7 	bl	80072be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	2201      	movs	r2, #1
 8008d76:	409a      	lsls	r2, r3
 8008d78:	4b17      	ldr	r3, [pc, #92]	; (8008dd8 <xTaskRemoveFromEventList+0xb4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	4a16      	ldr	r2, [pc, #88]	; (8008dd8 <xTaskRemoveFromEventList+0xb4>)
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <xTaskRemoveFromEventList+0xb8>)
 8008d90:	441a      	add	r2, r3
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	4610      	mov	r0, r2
 8008d9a:	f7fe fa33 	bl	8007204 <vListInsertEnd>
 8008d9e:	e005      	b.n	8008dac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3318      	adds	r3, #24
 8008da4:	4619      	mov	r1, r3
 8008da6:	480e      	ldr	r0, [pc, #56]	; (8008de0 <xTaskRemoveFromEventList+0xbc>)
 8008da8:	f7fe fa2c 	bl	8007204 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <xTaskRemoveFromEventList+0xc0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d905      	bls.n	8008dc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <xTaskRemoveFromEventList+0xc4>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e001      	b.n	8008dca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dca:	697b      	ldr	r3, [r7, #20]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000690 	.word	0x20000690
 8008dd8:	20000670 	.word	0x20000670
 8008ddc:	2000056c 	.word	0x2000056c
 8008de0:	20000628 	.word	0x20000628
 8008de4:	20000568 	.word	0x20000568
 8008de8:	2000067c 	.word	0x2000067c

08008dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <vTaskInternalSetTimeOutState+0x24>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <vTaskInternalSetTimeOutState+0x28>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	605a      	str	r2, [r3, #4]
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	20000680 	.word	0x20000680
 8008e14:	2000066c 	.word	0x2000066c

08008e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10c      	bne.n	8008e42 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	b672      	cpsid	i
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	b662      	cpsie	i
 8008e3c:	613b      	str	r3, [r7, #16]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10c      	bne.n	8008e62 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4c:	b672      	cpsid	i
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	b662      	cpsie	i
 8008e5c:	60fb      	str	r3, [r7, #12]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008e62:	f000 fc73 	bl	800974c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e66:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <xTaskCheckForTimeOut+0xc4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d102      	bne.n	8008e86 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e023      	b.n	8008ece <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <xTaskCheckForTimeOut+0xc8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d007      	beq.n	8008ea2 <xTaskCheckForTimeOut+0x8a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e015      	b.n	8008ece <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d20b      	bcs.n	8008ec4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	1ad2      	subs	r2, r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff ff97 	bl	8008dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	e004      	b.n	8008ece <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ece:	f000 fc71 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8008ed2:	69fb      	ldr	r3, [r7, #28]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	2000066c 	.word	0x2000066c
 8008ee0:	20000680 	.word	0x20000680

08008ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ee8:	4b03      	ldr	r3, [pc, #12]	; (8008ef8 <vTaskMissedYield+0x14>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	2000067c 	.word	0x2000067c

08008efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f04:	f000 f852 	bl	8008fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <prvIdleTask+0x28>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d9f9      	bls.n	8008f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <prvIdleTask+0x2c>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f20:	e7f0      	b.n	8008f04 <prvIdleTask+0x8>
 8008f22:	bf00      	nop
 8008f24:	2000056c 	.word	0x2000056c
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f32:	2300      	movs	r3, #0
 8008f34:	607b      	str	r3, [r7, #4]
 8008f36:	e00c      	b.n	8008f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4a12      	ldr	r2, [pc, #72]	; (8008f8c <prvInitialiseTaskLists+0x60>)
 8008f44:	4413      	add	r3, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe f92f 	bl	80071aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	607b      	str	r3, [r7, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b06      	cmp	r3, #6
 8008f56:	d9ef      	bls.n	8008f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f58:	480d      	ldr	r0, [pc, #52]	; (8008f90 <prvInitialiseTaskLists+0x64>)
 8008f5a:	f7fe f926 	bl	80071aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f5e:	480d      	ldr	r0, [pc, #52]	; (8008f94 <prvInitialiseTaskLists+0x68>)
 8008f60:	f7fe f923 	bl	80071aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f64:	480c      	ldr	r0, [pc, #48]	; (8008f98 <prvInitialiseTaskLists+0x6c>)
 8008f66:	f7fe f920 	bl	80071aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f6a:	480c      	ldr	r0, [pc, #48]	; (8008f9c <prvInitialiseTaskLists+0x70>)
 8008f6c:	f7fe f91d 	bl	80071aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f70:	480b      	ldr	r0, [pc, #44]	; (8008fa0 <prvInitialiseTaskLists+0x74>)
 8008f72:	f7fe f91a 	bl	80071aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <prvInitialiseTaskLists+0x78>)
 8008f78:	4a05      	ldr	r2, [pc, #20]	; (8008f90 <prvInitialiseTaskLists+0x64>)
 8008f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <prvInitialiseTaskLists+0x7c>)
 8008f7e:	4a05      	ldr	r2, [pc, #20]	; (8008f94 <prvInitialiseTaskLists+0x68>)
 8008f80:	601a      	str	r2, [r3, #0]
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	2000056c 	.word	0x2000056c
 8008f90:	200005f8 	.word	0x200005f8
 8008f94:	2000060c 	.word	0x2000060c
 8008f98:	20000628 	.word	0x20000628
 8008f9c:	2000063c 	.word	0x2000063c
 8008fa0:	20000654 	.word	0x20000654
 8008fa4:	20000620 	.word	0x20000620
 8008fa8:	20000624 	.word	0x20000624

08008fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fb2:	e019      	b.n	8008fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fb4:	f000 fbca 	bl	800974c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb8:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <prvCheckTasksWaitingTermination+0x50>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe f97a 	bl	80072be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <prvCheckTasksWaitingTermination+0x54>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	4a0b      	ldr	r2, [pc, #44]	; (8009000 <prvCheckTasksWaitingTermination+0x54>)
 8008fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fd4:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <prvCheckTasksWaitingTermination+0x58>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <prvCheckTasksWaitingTermination+0x58>)
 8008fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fde:	f000 fbe9 	bl	80097b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f810 	bl	8009008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <prvCheckTasksWaitingTermination+0x58>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e1      	bne.n	8008fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000063c 	.word	0x2000063c
 8009000:	20000668 	.word	0x20000668
 8009004:	20000650 	.word	0x20000650

08009008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	334c      	adds	r3, #76	; 0x4c
 8009014:	4618      	mov	r0, r3
 8009016:	f00f fc83 	bl	8018920 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d108      	bne.n	8009036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fd85 	bl	8009b38 <vPortFree>
				vPortFree( pxTCB );
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fd82 	bl	8009b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009034:	e01a      	b.n	800906c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800903c:	2b01      	cmp	r3, #1
 800903e:	d103      	bne.n	8009048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fd79 	bl	8009b38 <vPortFree>
	}
 8009046:	e011      	b.n	800906c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800904e:	2b02      	cmp	r3, #2
 8009050:	d00c      	beq.n	800906c <prvDeleteTCB+0x64>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	b672      	cpsid	i
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	b662      	cpsie	i
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <prvDeleteTCB+0x62>
	}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <prvResetNextTaskUnblockTime+0x38>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d104      	bne.n	800908e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009086:	f04f 32ff 	mov.w	r2, #4294967295
 800908a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800908c:	e008      	b.n	80090a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <prvResetNextTaskUnblockTime+0x38>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4a04      	ldr	r2, [pc, #16]	; (80090b0 <prvResetNextTaskUnblockTime+0x3c>)
 800909e:	6013      	str	r3, [r2, #0]
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000620 	.word	0x20000620
 80090b0:	20000688 	.word	0x20000688

080090b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090ba:	4b0b      	ldr	r3, [pc, #44]	; (80090e8 <xTaskGetSchedulerState+0x34>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d102      	bne.n	80090c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090c2:	2301      	movs	r3, #1
 80090c4:	607b      	str	r3, [r7, #4]
 80090c6:	e008      	b.n	80090da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c8:	4b08      	ldr	r3, [pc, #32]	; (80090ec <xTaskGetSchedulerState+0x38>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090d0:	2302      	movs	r3, #2
 80090d2:	607b      	str	r3, [r7, #4]
 80090d4:	e001      	b.n	80090da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090d6:	2300      	movs	r3, #0
 80090d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090da:	687b      	ldr	r3, [r7, #4]
	}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	20000674 	.word	0x20000674
 80090ec:	20000690 	.word	0x20000690

080090f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d069      	beq.n	80091da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910a:	4b36      	ldr	r3, [pc, #216]	; (80091e4 <xTaskPriorityInherit+0xf4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	429a      	cmp	r2, r3
 8009112:	d259      	bcs.n	80091c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	db06      	blt.n	800912a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800911c:	4b31      	ldr	r3, [pc, #196]	; (80091e4 <xTaskPriorityInherit+0xf4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	f1c3 0207 	rsb	r2, r3, #7
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	6959      	ldr	r1, [r3, #20]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4a2b      	ldr	r2, [pc, #172]	; (80091e8 <xTaskPriorityInherit+0xf8>)
 800913c:	4413      	add	r3, r2
 800913e:	4299      	cmp	r1, r3
 8009140:	d13a      	bne.n	80091b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3304      	adds	r3, #4
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f8b9 	bl	80072be <uxListRemove>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d115      	bne.n	800917e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009156:	4924      	ldr	r1, [pc, #144]	; (80091e8 <xTaskPriorityInherit+0xf8>)
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <xTaskPriorityInherit+0x8e>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	2201      	movs	r2, #1
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	43da      	mvns	r2, r3
 8009174:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <xTaskPriorityInherit+0xfc>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4013      	ands	r3, r2
 800917a:	4a1c      	ldr	r2, [pc, #112]	; (80091ec <xTaskPriorityInherit+0xfc>)
 800917c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800917e:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <xTaskPriorityInherit+0xf4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	2201      	movs	r2, #1
 800918e:	409a      	lsls	r2, r3
 8009190:	4b16      	ldr	r3, [pc, #88]	; (80091ec <xTaskPriorityInherit+0xfc>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4313      	orrs	r3, r2
 8009196:	4a15      	ldr	r2, [pc, #84]	; (80091ec <xTaskPriorityInherit+0xfc>)
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4a10      	ldr	r2, [pc, #64]	; (80091e8 <xTaskPriorityInherit+0xf8>)
 80091a8:	441a      	add	r2, r3
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fe f827 	bl	8007204 <vListInsertEnd>
 80091b6:	e004      	b.n	80091c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <xTaskPriorityInherit+0xf4>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091c2:	2301      	movs	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	e008      	b.n	80091da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091cc:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <xTaskPriorityInherit+0xf4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d201      	bcs.n	80091da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80091d6:	2301      	movs	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091da:	68fb      	ldr	r3, [r7, #12]
	}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20000568 	.word	0x20000568
 80091e8:	2000056c 	.word	0x2000056c
 80091ec:	20000670 	.word	0x20000670

080091f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d072      	beq.n	80092ec <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009206:	4b3c      	ldr	r3, [pc, #240]	; (80092f8 <xTaskPriorityDisinherit+0x108>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	429a      	cmp	r2, r3
 800920e:	d00c      	beq.n	800922a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	b672      	cpsid	i
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	b662      	cpsie	i
 8009224:	60fb      	str	r3, [r7, #12]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10c      	bne.n	800924c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	b672      	cpsid	i
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	b662      	cpsie	i
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
 800924a:	e7fe      	b.n	800924a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925e:	429a      	cmp	r2, r3
 8009260:	d044      	beq.n	80092ec <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	2b00      	cmp	r3, #0
 8009268:	d140      	bne.n	80092ec <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3304      	adds	r3, #4
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe f825 	bl	80072be <uxListRemove>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d115      	bne.n	80092a6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	491f      	ldr	r1, [pc, #124]	; (80092fc <xTaskPriorityDisinherit+0x10c>)
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xTaskPriorityDisinherit+0xb6>
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	2201      	movs	r2, #1
 8009296:	fa02 f303 	lsl.w	r3, r2, r3
 800929a:	43da      	mvns	r2, r3
 800929c:	4b18      	ldr	r3, [pc, #96]	; (8009300 <xTaskPriorityDisinherit+0x110>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4013      	ands	r3, r2
 80092a2:	4a17      	ldr	r2, [pc, #92]	; (8009300 <xTaskPriorityDisinherit+0x110>)
 80092a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	f1c3 0207 	rsb	r2, r3, #7
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	2201      	movs	r2, #1
 80092c0:	409a      	lsls	r2, r3
 80092c2:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <xTaskPriorityDisinherit+0x110>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <xTaskPriorityDisinherit+0x110>)
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d0:	4613      	mov	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4a08      	ldr	r2, [pc, #32]	; (80092fc <xTaskPriorityDisinherit+0x10c>)
 80092da:	441a      	add	r2, r3
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	3304      	adds	r3, #4
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f7fd ff8e 	bl	8007204 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092e8:	2301      	movs	r3, #1
 80092ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092ec:	697b      	ldr	r3, [r7, #20]
	}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20000568 	.word	0x20000568
 80092fc:	2000056c 	.word	0x2000056c
 8009300:	20000670 	.word	0x20000670

08009304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009312:	2301      	movs	r3, #1
 8009314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8087 	beq.w	800942c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10c      	bne.n	8009340 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	60fb      	str	r3, [r7, #12]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d902      	bls.n	8009350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e002      	b.n	8009356 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	429a      	cmp	r2, r3
 800935e:	d065      	beq.n	800942c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	429a      	cmp	r2, r3
 8009368:	d160      	bne.n	800942c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800936a:	4b32      	ldr	r3, [pc, #200]	; (8009434 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	429a      	cmp	r2, r3
 8009372:	d10c      	bne.n	800938e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	b672      	cpsid	i
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	b662      	cpsie	i
 8009388:	60bb      	str	r3, [r7, #8]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	db04      	blt.n	80093ac <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	f1c3 0207 	rsb	r2, r3, #7
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	6959      	ldr	r1, [r3, #20]
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4a1f      	ldr	r2, [pc, #124]	; (8009438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80093bc:	4413      	add	r3, r2
 80093be:	4299      	cmp	r1, r3
 80093c0:	d134      	bne.n	800942c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fd ff79 	bl	80072be <uxListRemove>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d115      	bne.n	80093fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	4918      	ldr	r1, [pc, #96]	; (8009438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	2201      	movs	r2, #1
 80093ee:	fa02 f303 	lsl.w	r3, r2, r3
 80093f2:	43da      	mvns	r2, r3
 80093f4:	4b11      	ldr	r3, [pc, #68]	; (800943c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	4a10      	ldr	r2, [pc, #64]	; (800943c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80093fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	2201      	movs	r2, #1
 8009404:	409a      	lsls	r2, r3
 8009406:	4b0d      	ldr	r3, [pc, #52]	; (800943c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4313      	orrs	r3, r2
 800940c:	4a0b      	ldr	r2, [pc, #44]	; (800943c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4a06      	ldr	r2, [pc, #24]	; (8009438 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800941e:	441a      	add	r2, r3
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	3304      	adds	r3, #4
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7fd feec 	bl	8007204 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800942c:	bf00      	nop
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000568 	.word	0x20000568
 8009438:	2000056c 	.word	0x2000056c
 800943c:	20000670 	.word	0x20000670

08009440 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <pvTaskIncrementMutexHeldCount+0x24>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <pvTaskIncrementMutexHeldCount+0x24>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009452:	3201      	adds	r2, #1
 8009454:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009456:	4b03      	ldr	r3, [pc, #12]	; (8009464 <pvTaskIncrementMutexHeldCount+0x24>)
 8009458:	681b      	ldr	r3, [r3, #0]
	}
 800945a:	4618      	mov	r0, r3
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20000568 	.word	0x20000568

08009468 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009472:	4b29      	ldr	r3, [pc, #164]	; (8009518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009478:	4b28      	ldr	r3, [pc, #160]	; (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3304      	adds	r3, #4
 800947e:	4618      	mov	r0, r3
 8009480:	f7fd ff1d 	bl	80072be <uxListRemove>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	2201      	movs	r2, #1
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	43da      	mvns	r2, r3
 8009498:	4b21      	ldr	r3, [pc, #132]	; (8009520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4013      	ands	r3, r2
 800949e:	4a20      	ldr	r2, [pc, #128]	; (8009520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80094a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d10a      	bne.n	80094c0 <prvAddCurrentTaskToDelayedList+0x58>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b0:	4b1a      	ldr	r3, [pc, #104]	; (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	481a      	ldr	r0, [pc, #104]	; (8009524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80094ba:	f7fd fea3 	bl	8007204 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094be:	e026      	b.n	800950e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094c8:	4b14      	ldr	r3, [pc, #80]	; (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d209      	bcs.n	80094ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094d8:	4b13      	ldr	r3, [pc, #76]	; (8009528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	4b0f      	ldr	r3, [pc, #60]	; (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fd feb1 	bl	800724c <vListInsert>
}
 80094ea:	e010      	b.n	800950e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ec:	4b0f      	ldr	r3, [pc, #60]	; (800952c <prvAddCurrentTaskToDelayedList+0xc4>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f7fd fea7 	bl	800724c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094fe:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	429a      	cmp	r2, r3
 8009506:	d202      	bcs.n	800950e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6013      	str	r3, [r2, #0]
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	2000066c 	.word	0x2000066c
 800951c:	20000568 	.word	0x20000568
 8009520:	20000670 	.word	0x20000670
 8009524:	20000654 	.word	0x20000654
 8009528:	20000624 	.word	0x20000624
 800952c:	20000620 	.word	0x20000620
 8009530:	20000688 	.word	0x20000688

08009534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3b04      	subs	r3, #4
 8009544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800954c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3b04      	subs	r3, #4
 8009552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f023 0201 	bic.w	r2, r3, #1
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3b04      	subs	r3, #4
 8009562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009564:	4a0c      	ldr	r2, [pc, #48]	; (8009598 <pxPortInitialiseStack+0x64>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3b14      	subs	r3, #20
 800956e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b04      	subs	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f06f 0202 	mvn.w	r2, #2
 8009582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3b20      	subs	r3, #32
 8009588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	0800959d 	.word	0x0800959d

0800959c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095a6:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <prvTaskExitError+0x5c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ae:	d00c      	beq.n	80095ca <prvTaskExitError+0x2e>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	b672      	cpsid	i
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	b662      	cpsie	i
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <prvTaskExitError+0x2c>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	b672      	cpsid	i
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	b662      	cpsie	i
 80095de:	60bb      	str	r3, [r7, #8]
}
 80095e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095e2:	bf00      	nop
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0fc      	beq.n	80095e4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095ea:	bf00      	nop
 80095ec:	bf00      	nop
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	20000010 	.word	0x20000010
 80095fc:	00000000 	.word	0x00000000

08009600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <pxCurrentTCBConst2>)
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	f380 8809 	msr	PSP, r0
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	4770      	bx	lr
 800961c:	f3af 8000 	nop.w

08009620 <pxCurrentTCBConst2>:
 8009620:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009628:	4808      	ldr	r0, [pc, #32]	; (800964c <prvPortStartFirstTask+0x24>)
 800962a:	6800      	ldr	r0, [r0, #0]
 800962c:	6800      	ldr	r0, [r0, #0]
 800962e:	f380 8808 	msr	MSP, r0
 8009632:	f04f 0000 	mov.w	r0, #0
 8009636:	f380 8814 	msr	CONTROL, r0
 800963a:	b662      	cpsie	i
 800963c:	b661      	cpsie	f
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	df00      	svc	0
 8009648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800964a:	bf00      	nop
 800964c:	e000ed08 	.word	0xe000ed08

08009650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009656:	4b37      	ldr	r3, [pc, #220]	; (8009734 <xPortStartScheduler+0xe4>)
 8009658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009678:	b2da      	uxtb	r2, r3
 800967a:	4b2f      	ldr	r3, [pc, #188]	; (8009738 <xPortStartScheduler+0xe8>)
 800967c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800967e:	4b2f      	ldr	r3, [pc, #188]	; (800973c <xPortStartScheduler+0xec>)
 8009680:	2207      	movs	r2, #7
 8009682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009684:	e009      	b.n	800969a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009686:	4b2d      	ldr	r3, [pc, #180]	; (800973c <xPortStartScheduler+0xec>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3b01      	subs	r3, #1
 800968c:	4a2b      	ldr	r2, [pc, #172]	; (800973c <xPortStartScheduler+0xec>)
 800968e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d0ef      	beq.n	8009686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096a6:	4b25      	ldr	r3, [pc, #148]	; (800973c <xPortStartScheduler+0xec>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1c3 0307 	rsb	r3, r3, #7
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d00c      	beq.n	80096cc <xPortStartScheduler+0x7c>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096cc:	4b1b      	ldr	r3, [pc, #108]	; (800973c <xPortStartScheduler+0xec>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	4a1a      	ldr	r2, [pc, #104]	; (800973c <xPortStartScheduler+0xec>)
 80096d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096d6:	4b19      	ldr	r3, [pc, #100]	; (800973c <xPortStartScheduler+0xec>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096de:	4a17      	ldr	r2, [pc, #92]	; (800973c <xPortStartScheduler+0xec>)
 80096e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096ea:	4b15      	ldr	r3, [pc, #84]	; (8009740 <xPortStartScheduler+0xf0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a14      	ldr	r2, [pc, #80]	; (8009740 <xPortStartScheduler+0xf0>)
 80096f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <xPortStartScheduler+0xf0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a11      	ldr	r2, [pc, #68]	; (8009740 <xPortStartScheduler+0xf0>)
 80096fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009700:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009702:	f000 f8dd 	bl	80098c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <xPortStartScheduler+0xf4>)
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800970c:	f000 f8fc 	bl	8009908 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009710:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <xPortStartScheduler+0xf8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a0c      	ldr	r2, [pc, #48]	; (8009748 <xPortStartScheduler+0xf8>)
 8009716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800971a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800971c:	f7ff ff84 	bl	8009628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009720:	f7ff fa76 	bl	8008c10 <vTaskSwitchContext>
	prvTaskExitError();
 8009724:	f7ff ff3a 	bl	800959c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	e000e400 	.word	0xe000e400
 8009738:	20000694 	.word	0x20000694
 800973c:	20000698 	.word	0x20000698
 8009740:	e000ed20 	.word	0xe000ed20
 8009744:	20000010 	.word	0x20000010
 8009748:	e000ef34 	.word	0xe000ef34

0800974c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	b672      	cpsid	i
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	b662      	cpsie	i
 8009766:	607b      	str	r3, [r7, #4]
}
 8009768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <vPortEnterCritical+0x60>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	4a0e      	ldr	r2, [pc, #56]	; (80097ac <vPortEnterCritical+0x60>)
 8009772:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <vPortEnterCritical+0x60>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d111      	bne.n	80097a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800977c:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <vPortEnterCritical+0x64>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <vPortEnterCritical+0x54>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	b672      	cpsid	i
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	b662      	cpsie	i
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <vPortEnterCritical+0x52>
	}
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000010 	.word	0x20000010
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <vPortExitCritical+0x54>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10c      	bne.n	80097dc <vPortExitCritical+0x28>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	b672      	cpsid	i
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	b662      	cpsie	i
 80097d6:	607b      	str	r3, [r7, #4]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <vPortExitCritical+0x54>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	4a09      	ldr	r2, [pc, #36]	; (8009808 <vPortExitCritical+0x54>)
 80097e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097e6:	4b08      	ldr	r3, [pc, #32]	; (8009808 <vPortExitCritical+0x54>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <vPortExitCritical+0x46>
 80097ee:	2300      	movs	r3, #0
 80097f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f383 8811 	msr	BASEPRI, r3
}
 80097f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000010 	.word	0x20000010
 800980c:	00000000 	.word	0x00000000

08009810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009810:	f3ef 8009 	mrs	r0, PSP
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4b15      	ldr	r3, [pc, #84]	; (8009870 <pxCurrentTCBConst>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f01e 0f10 	tst.w	lr, #16
 8009820:	bf08      	it	eq
 8009822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	6010      	str	r0, [r2, #0]
 800982c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009834:	b672      	cpsid	i
 8009836:	f380 8811 	msr	BASEPRI, r0
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	b662      	cpsie	i
 8009844:	f7ff f9e4 	bl	8008c10 <vTaskSwitchContext>
 8009848:	f04f 0000 	mov.w	r0, #0
 800984c:	f380 8811 	msr	BASEPRI, r0
 8009850:	bc09      	pop	{r0, r3}
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f01e 0f10 	tst.w	lr, #16
 800985e:	bf08      	it	eq
 8009860:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009864:	f380 8809 	msr	PSP, r0
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop

08009870 <pxCurrentTCBConst>:
 8009870:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	b672      	cpsid	i
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	b662      	cpsie	i
 8009892:	607b      	str	r3, [r7, #4]
}
 8009894:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009896:	f7ff f901 	bl	8008a9c <xTaskIncrementTick>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <SysTick_Handler+0x44>)
 80098a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	2300      	movs	r3, #0
 80098aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	f383 8811 	msr	BASEPRI, r3
}
 80098b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	e000ed04 	.word	0xe000ed04

080098c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098c4:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <vPortSetupTimerInterrupt+0x34>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098ca:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <vPortSetupTimerInterrupt+0x38>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <vPortSetupTimerInterrupt+0x3c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a0a      	ldr	r2, [pc, #40]	; (8009900 <vPortSetupTimerInterrupt+0x40>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	099b      	lsrs	r3, r3, #6
 80098dc:	4a09      	ldr	r2, [pc, #36]	; (8009904 <vPortSetupTimerInterrupt+0x44>)
 80098de:	3b01      	subs	r3, #1
 80098e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098e2:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <vPortSetupTimerInterrupt+0x34>)
 80098e4:	2207      	movs	r2, #7
 80098e6:	601a      	str	r2, [r3, #0]
}
 80098e8:	bf00      	nop
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	e000e010 	.word	0xe000e010
 80098f8:	e000e018 	.word	0xe000e018
 80098fc:	20000004 	.word	0x20000004
 8009900:	10624dd3 	.word	0x10624dd3
 8009904:	e000e014 	.word	0xe000e014

08009908 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009908:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009918 <vPortEnableVFP+0x10>
 800990c:	6801      	ldr	r1, [r0, #0]
 800990e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009912:	6001      	str	r1, [r0, #0]
 8009914:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009916:	bf00      	nop
 8009918:	e000ed88 	.word	0xe000ed88

0800991c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009922:	f3ef 8305 	mrs	r3, IPSR
 8009926:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b0f      	cmp	r3, #15
 800992c:	d916      	bls.n	800995c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800992e:	4a19      	ldr	r2, [pc, #100]	; (8009994 <vPortValidateInterruptPriority+0x78>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009938:	4b17      	ldr	r3, [pc, #92]	; (8009998 <vPortValidateInterruptPriority+0x7c>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	7afa      	ldrb	r2, [r7, #11]
 800993e:	429a      	cmp	r2, r3
 8009940:	d20c      	bcs.n	800995c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	607b      	str	r3, [r7, #4]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800995c:	4b0f      	ldr	r3, [pc, #60]	; (800999c <vPortValidateInterruptPriority+0x80>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009964:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <vPortValidateInterruptPriority+0x84>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d90c      	bls.n	8009986 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	603b      	str	r3, [r7, #0]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <vPortValidateInterruptPriority+0x68>
	}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	e000e3f0 	.word	0xe000e3f0
 8009998:	20000694 	.word	0x20000694
 800999c:	e000ed0c 	.word	0xe000ed0c
 80099a0:	20000698 	.word	0x20000698

080099a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08a      	sub	sp, #40	; 0x28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099b0:	f7fe ffa6 	bl	8008900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099b4:	4b5b      	ldr	r3, [pc, #364]	; (8009b24 <pvPortMalloc+0x180>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099bc:	f000 f91a 	bl	8009bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099c0:	4b59      	ldr	r3, [pc, #356]	; (8009b28 <pvPortMalloc+0x184>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4013      	ands	r3, r2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f040 8092 	bne.w	8009af2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d01f      	beq.n	8009a14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80099d4:	2208      	movs	r2, #8
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4413      	add	r3, r2
 80099da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f023 0307 	bic.w	r3, r3, #7
 80099ec:	3308      	adds	r3, #8
 80099ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <pvPortMalloc+0x70>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	b672      	cpsid	i
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	b662      	cpsie	i
 8009a0e:	617b      	str	r3, [r7, #20]
}
 8009a10:	bf00      	nop
 8009a12:	e7fe      	b.n	8009a12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d06b      	beq.n	8009af2 <pvPortMalloc+0x14e>
 8009a1a:	4b44      	ldr	r3, [pc, #272]	; (8009b2c <pvPortMalloc+0x188>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d866      	bhi.n	8009af2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a24:	4b42      	ldr	r3, [pc, #264]	; (8009b30 <pvPortMalloc+0x18c>)
 8009a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a28:	4b41      	ldr	r3, [pc, #260]	; (8009b30 <pvPortMalloc+0x18c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a2e:	e004      	b.n	8009a3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d903      	bls.n	8009a4c <pvPortMalloc+0xa8>
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f1      	bne.n	8009a30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a4c:	4b35      	ldr	r3, [pc, #212]	; (8009b24 <pvPortMalloc+0x180>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d04d      	beq.n	8009af2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	4413      	add	r3, r2
 8009a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	2308      	movs	r3, #8
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d921      	bls.n	8009abc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <pvPortMalloc+0x100>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	b672      	cpsid	i
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	b662      	cpsie	i
 8009a9e:	613b      	str	r3, [r7, #16]
}
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ab6:	69b8      	ldr	r0, [r7, #24]
 8009ab8:	f000 f8fe 	bl	8009cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009abc:	4b1b      	ldr	r3, [pc, #108]	; (8009b2c <pvPortMalloc+0x188>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	4a19      	ldr	r2, [pc, #100]	; (8009b2c <pvPortMalloc+0x188>)
 8009ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aca:	4b18      	ldr	r3, [pc, #96]	; (8009b2c <pvPortMalloc+0x188>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <pvPortMalloc+0x190>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d203      	bcs.n	8009ade <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ad6:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <pvPortMalloc+0x188>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a16      	ldr	r2, [pc, #88]	; (8009b34 <pvPortMalloc+0x190>)
 8009adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <pvPortMalloc+0x184>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009af2:	f7fe ff13 	bl	800891c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00c      	beq.n	8009b1a <pvPortMalloc+0x176>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <pvPortMalloc+0x174>
	return pvReturn;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3728      	adds	r7, #40	; 0x28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	200042a4 	.word	0x200042a4
 8009b28:	200042b0 	.word	0x200042b0
 8009b2c:	200042a8 	.word	0x200042a8
 8009b30:	2000429c 	.word	0x2000429c
 8009b34:	200042ac 	.word	0x200042ac

08009b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d04c      	beq.n	8009be4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4413      	add	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b23      	ldr	r3, [pc, #140]	; (8009bec <vPortFree+0xb4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4013      	ands	r3, r2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10c      	bne.n	8009b80 <vPortFree+0x48>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	b672      	cpsid	i
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	b662      	cpsie	i
 8009b7a:	60fb      	str	r3, [r7, #12]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00c      	beq.n	8009ba2 <vPortFree+0x6a>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	b672      	cpsid	i
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	b662      	cpsie	i
 8009b9c:	60bb      	str	r3, [r7, #8]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <vPortFree+0xb4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d019      	beq.n	8009be4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d115      	bne.n	8009be4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <vPortFree+0xb4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	43db      	mvns	r3, r3
 8009bc2:	401a      	ands	r2, r3
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bc8:	f7fe fe9a 	bl	8008900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <vPortFree+0xb8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	4a06      	ldr	r2, [pc, #24]	; (8009bf0 <vPortFree+0xb8>)
 8009bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bda:	6938      	ldr	r0, [r7, #16]
 8009bdc:	f000 f86c 	bl	8009cb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009be0:	f7fe fe9c 	bl	800891c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009be4:	bf00      	nop
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	200042b0 	.word	0x200042b0
 8009bf0:	200042a8 	.word	0x200042a8

08009bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c00:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <prvHeapInit+0xac>)
 8009c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3307      	adds	r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 0307 	bic.w	r3, r3, #7
 8009c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <prvHeapInit+0xac>)
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c40:	2208      	movs	r2, #8
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c74:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <prvHeapInit+0xb8>)
 8009c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <prvHeapInit+0xbc>)
 8009c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <prvHeapInit+0xc0>)
 8009c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	2000069c 	.word	0x2000069c
 8009ca4:	2000429c 	.word	0x2000429c
 8009ca8:	200042a4 	.word	0x200042a4
 8009cac:	200042ac 	.word	0x200042ac
 8009cb0:	200042a8 	.word	0x200042a8
 8009cb4:	200042b0 	.word	0x200042b0

08009cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cc0:	4b28      	ldr	r3, [pc, #160]	; (8009d64 <prvInsertBlockIntoFreeList+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e002      	b.n	8009ccc <prvInsertBlockIntoFreeList+0x14>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d8f7      	bhi.n	8009cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d108      	bne.n	8009cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	441a      	add	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d118      	bne.n	8009d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d00d      	beq.n	8009d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	441a      	add	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	e008      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e003      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d002      	beq.n	8009d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	2000429c 	.word	0x2000429c
 8009d68:	200042a4 	.word	0x200042a4

08009d6c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f003 f935 	bl	800cff0 <tcpip_send_msg_wait_sem>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009d98:	e001      	b.n	8009d9e <netconn_apimsg+0x32>
  }
  return err;
 8009d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08c      	sub	sp, #48	; 0x30
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	603a      	str	r2, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
 8009db4:	460b      	mov	r3, r1
 8009db6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f82f 	bl	800ae20 <netconn_alloc>
 8009dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d054      	beq.n	8009e74 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009dca:	79bb      	ldrb	r3, [r7, #6]
 8009dcc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4829      	ldr	r0, [pc, #164]	; (8009e80 <netconn_new_with_proto_and_callback+0xd8>)
 8009dda:	f7ff ffc7 	bl	8009d6c <netconn_apimsg>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009de4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d043      	beq.n	8009e74 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d005      	beq.n	8009e00 <netconn_new_with_proto_and_callback+0x58>
 8009df4:	4b23      	ldr	r3, [pc, #140]	; (8009e84 <netconn_new_with_proto_and_callback+0xdc>)
 8009df6:	22a3      	movs	r2, #163	; 0xa3
 8009df8:	4923      	ldr	r1, [pc, #140]	; (8009e88 <netconn_new_with_proto_and_callback+0xe0>)
 8009dfa:	4824      	ldr	r0, [pc, #144]	; (8009e8c <netconn_new_with_proto_and_callback+0xe4>)
 8009dfc:	f00e fcb4 	bl	8018768 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	3310      	adds	r3, #16
 8009e04:	4618      	mov	r0, r3
 8009e06:	f00e f960 	bl	80180ca <sys_mbox_valid>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d105      	bne.n	8009e1c <netconn_new_with_proto_and_callback+0x74>
 8009e10:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <netconn_new_with_proto_and_callback+0xdc>)
 8009e12:	22a4      	movs	r2, #164	; 0xa4
 8009e14:	491e      	ldr	r1, [pc, #120]	; (8009e90 <netconn_new_with_proto_and_callback+0xe8>)
 8009e16:	481d      	ldr	r0, [pc, #116]	; (8009e8c <netconn_new_with_proto_and_callback+0xe4>)
 8009e18:	f00e fca6 	bl	8018768 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	3314      	adds	r3, #20
 8009e20:	4618      	mov	r0, r3
 8009e22:	f00e f952 	bl	80180ca <sys_mbox_valid>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <netconn_new_with_proto_and_callback+0x90>
 8009e2c:	4b15      	ldr	r3, [pc, #84]	; (8009e84 <netconn_new_with_proto_and_callback+0xdc>)
 8009e2e:	22a6      	movs	r2, #166	; 0xa6
 8009e30:	4918      	ldr	r1, [pc, #96]	; (8009e94 <netconn_new_with_proto_and_callback+0xec>)
 8009e32:	4816      	ldr	r0, [pc, #88]	; (8009e8c <netconn_new_with_proto_and_callback+0xe4>)
 8009e34:	f00e fc98 	bl	8018768 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	330c      	adds	r3, #12
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f00e f9d5 	bl	80181ec <sys_sem_valid>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d105      	bne.n	8009e54 <netconn_new_with_proto_and_callback+0xac>
 8009e48:	4b0e      	ldr	r3, [pc, #56]	; (8009e84 <netconn_new_with_proto_and_callback+0xdc>)
 8009e4a:	22a9      	movs	r2, #169	; 0xa9
 8009e4c:	4912      	ldr	r1, [pc, #72]	; (8009e98 <netconn_new_with_proto_and_callback+0xf0>)
 8009e4e:	480f      	ldr	r0, [pc, #60]	; (8009e8c <netconn_new_with_proto_and_callback+0xe4>)
 8009e50:	f00e fc8a 	bl	8018768 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	330c      	adds	r3, #12
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f00e f9ba 	bl	80181d2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e60:	3310      	adds	r3, #16
 8009e62:	4618      	mov	r0, r3
 8009e64:	f00e f8aa 	bl	8017fbc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e6a:	2007      	movs	r0, #7
 8009e6c:	f003 fe28 	bl	800dac0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	e000      	b.n	8009e76 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3730      	adds	r7, #48	; 0x30
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	0800adf5 	.word	0x0800adf5
 8009e84:	08019c08 	.word	0x08019c08
 8009e88:	08019c3c 	.word	0x08019c3c
 8009e8c:	08019c60 	.word	0x08019c60
 8009e90:	08019c88 	.word	0x08019c88
 8009e94:	08019ca0 	.word	0x08019ca0
 8009e98:	08019cc4 	.word	0x08019cc4

08009e9c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08c      	sub	sp, #48	; 0x30
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e014      	b.n	8009ed8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009eb2:	2329      	movs	r3, #41	; 0x29
 8009eb4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009eb6:	f107 030c 	add.w	r3, r7, #12
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4808      	ldr	r0, [pc, #32]	; (8009ee0 <netconn_prepare_delete+0x44>)
 8009ebe:	f7ff ff55 	bl	8009d6c <netconn_apimsg>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009ec8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <netconn_prepare_delete+0x3a>
    return err;
 8009ed0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ed4:	e000      	b.n	8009ed8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3730      	adds	r7, #48	; 0x30
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	0800b359 	.word	0x0800b359

08009ee4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <netconn_delete+0x12>
    return ERR_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e00d      	b.n	8009f12 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff ffd0 	bl	8009e9c <netconn_prepare_delete>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d102      	bne.n	8009f0e <netconn_delete+0x2a>
    netconn_free(conn);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fff7 	bl	800aefc <netconn_free>
  }
  return err;
 8009f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
	...

08009f1c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08e      	sub	sp, #56	; 0x38
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <netconn_getaddr+0x28>
 8009f30:	4b1d      	ldr	r3, [pc, #116]	; (8009fa8 <netconn_getaddr+0x8c>)
 8009f32:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009f36:	491d      	ldr	r1, [pc, #116]	; (8009fac <netconn_getaddr+0x90>)
 8009f38:	481d      	ldr	r0, [pc, #116]	; (8009fb0 <netconn_getaddr+0x94>)
 8009f3a:	f00e fc15 	bl	8018768 <iprintf>
 8009f3e:	f06f 030f 	mvn.w	r3, #15
 8009f42:	e02d      	b.n	8009fa0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <netconn_getaddr+0x42>
 8009f4a:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <netconn_getaddr+0x8c>)
 8009f4c:	f240 1213 	movw	r2, #275	; 0x113
 8009f50:	4918      	ldr	r1, [pc, #96]	; (8009fb4 <netconn_getaddr+0x98>)
 8009f52:	4817      	ldr	r0, [pc, #92]	; (8009fb0 <netconn_getaddr+0x94>)
 8009f54:	f00e fc08 	bl	8018768 <iprintf>
 8009f58:	f06f 030f 	mvn.w	r3, #15
 8009f5c:	e020      	b.n	8009fa0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d109      	bne.n	8009f78 <netconn_getaddr+0x5c>
 8009f64:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <netconn_getaddr+0x8c>)
 8009f66:	f44f 728a 	mov.w	r2, #276	; 0x114
 8009f6a:	4913      	ldr	r1, [pc, #76]	; (8009fb8 <netconn_getaddr+0x9c>)
 8009f6c:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <netconn_getaddr+0x94>)
 8009f6e:	f00e fbfb 	bl	8018768 <iprintf>
 8009f72:	f06f 030f 	mvn.w	r3, #15
 8009f76:	e013      	b.n	8009fa0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8009f8a:	f107 0314 	add.w	r3, r7, #20
 8009f8e:	4619      	mov	r1, r3
 8009f90:	480a      	ldr	r0, [pc, #40]	; (8009fbc <netconn_getaddr+0xa0>)
 8009f92:	f7ff feeb 	bl	8009d6c <netconn_apimsg>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8009f9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3738      	adds	r7, #56	; 0x38
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	08019c08 	.word	0x08019c08
 8009fac:	08019ce0 	.word	0x08019ce0
 8009fb0:	08019c60 	.word	0x08019c60
 8009fb4:	08019d00 	.word	0x08019d00
 8009fb8:	08019d20 	.word	0x08019d20
 8009fbc:	0800bb49 	.word	0x0800bb49

08009fc0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08e      	sub	sp, #56	; 0x38
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <netconn_bind+0x28>
 8009fd4:	4b11      	ldr	r3, [pc, #68]	; (800a01c <netconn_bind+0x5c>)
 8009fd6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009fda:	4911      	ldr	r1, [pc, #68]	; (800a020 <netconn_bind+0x60>)
 8009fdc:	4811      	ldr	r0, [pc, #68]	; (800a024 <netconn_bind+0x64>)
 8009fde:	f00e fbc3 	bl	8018768 <iprintf>
 8009fe2:	f06f 030f 	mvn.w	r3, #15
 8009fe6:	e015      	b.n	800a014 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009fee:	4b0e      	ldr	r3, [pc, #56]	; (800a028 <netconn_bind+0x68>)
 8009ff0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009ffe:	f107 0314 	add.w	r3, r7, #20
 800a002:	4619      	mov	r1, r3
 800a004:	4809      	ldr	r0, [pc, #36]	; (800a02c <netconn_bind+0x6c>)
 800a006:	f7ff feb1 	bl	8009d6c <netconn_apimsg>
 800a00a:	4603      	mov	r3, r0
 800a00c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a010:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a014:	4618      	mov	r0, r3
 800a016:	3738      	adds	r7, #56	; 0x38
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	08019c08 	.word	0x08019c08
 800a020:	08019d40 	.word	0x08019d40
 800a024:	08019c60 	.word	0x08019c60
 800a028:	0801d618 	.word	0x0801d618
 800a02c:	0800b521 	.word	0x0800b521

0800a030 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d109      	bne.n	800a05c <netconn_recv_data+0x2c>
 800a048:	4b58      	ldr	r3, [pc, #352]	; (800a1ac <netconn_recv_data+0x17c>)
 800a04a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a04e:	4958      	ldr	r1, [pc, #352]	; (800a1b0 <netconn_recv_data+0x180>)
 800a050:	4858      	ldr	r0, [pc, #352]	; (800a1b4 <netconn_recv_data+0x184>)
 800a052:	f00e fb89 	bl	8018768 <iprintf>
 800a056:	f06f 030f 	mvn.w	r3, #15
 800a05a:	e0a2      	b.n	800a1a2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d109      	bne.n	800a07c <netconn_recv_data+0x4c>
 800a068:	4b50      	ldr	r3, [pc, #320]	; (800a1ac <netconn_recv_data+0x17c>)
 800a06a:	f240 224a 	movw	r2, #586	; 0x24a
 800a06e:	4952      	ldr	r1, [pc, #328]	; (800a1b8 <netconn_recv_data+0x188>)
 800a070:	4850      	ldr	r0, [pc, #320]	; (800a1b4 <netconn_recv_data+0x184>)
 800a072:	f00e fb79 	bl	8018768 <iprintf>
 800a076:	f06f 030f 	mvn.w	r3, #15
 800a07a:	e092      	b.n	800a1a2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3310      	adds	r3, #16
 800a080:	4618      	mov	r0, r3
 800a082:	f00e f822 	bl	80180ca <sys_mbox_valid>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10e      	bne.n	800a0aa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fb01 	bl	800a694 <netconn_err>
 800a092:	4603      	mov	r3, r0
 800a094:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a096:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a09e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a0a2:	e07e      	b.n	800a1a2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a0a4:	f06f 030a 	mvn.w	r3, #10
 800a0a8:	e07b      	b.n	800a1a2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	7f1b      	ldrb	r3, [r3, #28]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10f      	bne.n	800a0d6 <netconn_recv_data+0xa6>
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	7f1b      	ldrb	r3, [r3, #28]
 800a0c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d023      	beq.n	800a11e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3310      	adds	r3, #16
 800a0da:	f107 0218 	add.w	r2, r7, #24
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f00d ffd6 	bl	8018092 <sys_arch_mbox_tryfetch>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ec:	d11f      	bne.n	800a12e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fad0 	bl	800a694 <netconn_err>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a0f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a100:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a104:	e04d      	b.n	800a1a2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	7f1b      	ldrb	r3, [r3, #28]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a112:	f06f 030a 	mvn.w	r3, #10
 800a116:	e044      	b.n	800a1a2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a118:	f06f 0306 	mvn.w	r3, #6
 800a11c:	e041      	b.n	800a1a2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3310      	adds	r3, #16
 800a122:	f107 0118 	add.w	r1, r7, #24
 800a126:	2200      	movs	r2, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f00d ff73 	bl	8018014 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a136:	2b10      	cmp	r3, #16
 800a138:	d117      	bne.n	800a16a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	f107 0217 	add.w	r2, r7, #23
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f000 faf8 	bl	800a738 <lwip_netconn_is_err_msg>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d009      	beq.n	800a162 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a14e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a152:	f113 0f0f 	cmn.w	r3, #15
 800a156:	d101      	bne.n	800a15c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	e022      	b.n	800a1a2 <netconn_recv_data+0x172>
      }
      return err;
 800a15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a160:	e01f      	b.n	800a1a2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	891b      	ldrh	r3, [r3, #8]
 800a166:	83fb      	strh	r3, [r7, #30]
 800a168:	e00d      	b.n	800a186 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d106      	bne.n	800a17e <netconn_recv_data+0x14e>
 800a170:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <netconn_recv_data+0x17c>)
 800a172:	f240 2291 	movw	r2, #657	; 0x291
 800a176:	4911      	ldr	r1, [pc, #68]	; (800a1bc <netconn_recv_data+0x18c>)
 800a178:	480e      	ldr	r0, [pc, #56]	; (800a1b4 <netconn_recv_data+0x184>)
 800a17a:	f00e faf5 	bl	8018768 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	891b      	ldrh	r3, [r3, #8]
 800a184:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <netconn_recv_data+0x16a>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	8bfa      	ldrh	r2, [r7, #30]
 800a194:	2101      	movs	r1, #1
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3720      	adds	r7, #32
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	08019c08 	.word	0x08019c08
 800a1b0:	08019e20 	.word	0x08019e20
 800a1b4:	08019c60 	.word	0x08019c60
 800a1b8:	08019e40 	.word	0x08019e40
 800a1bc:	08019e5c 	.word	0x08019e5c

0800a1c0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <netconn_tcp_recvd_msg+0x1e>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1da:	2b10      	cmp	r3, #16
 800a1dc:	d009      	beq.n	800a1f2 <netconn_tcp_recvd_msg+0x32>
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <netconn_tcp_recvd_msg+0x50>)
 800a1e0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a1e4:	490b      	ldr	r1, [pc, #44]	; (800a214 <netconn_tcp_recvd_msg+0x54>)
 800a1e6:	480c      	ldr	r0, [pc, #48]	; (800a218 <netconn_tcp_recvd_msg+0x58>)
 800a1e8:	f00e fabe 	bl	8018768 <iprintf>
 800a1ec:	f06f 030f 	mvn.w	r3, #15
 800a1f0:	e00a      	b.n	800a208 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4806      	ldr	r0, [pc, #24]	; (800a21c <netconn_tcp_recvd_msg+0x5c>)
 800a202:	f7ff fdb3 	bl	8009d6c <netconn_apimsg>
 800a206:	4603      	mov	r3, r0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	08019c08 	.word	0x08019c08
 800a214:	08019e68 	.word	0x08019e68
 800a218:	08019c60 	.word	0x08019c60
 800a21c:	0800b62f 	.word	0x0800b62f

0800a220 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08c      	sub	sp, #48	; 0x30
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d005      	beq.n	800a23c <netconn_tcp_recvd+0x1c>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a238:	2b10      	cmp	r3, #16
 800a23a:	d009      	beq.n	800a250 <netconn_tcp_recvd+0x30>
 800a23c:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <netconn_tcp_recvd+0x50>)
 800a23e:	f240 22b5 	movw	r2, #693	; 0x2b5
 800a242:	490c      	ldr	r1, [pc, #48]	; (800a274 <netconn_tcp_recvd+0x54>)
 800a244:	480c      	ldr	r0, [pc, #48]	; (800a278 <netconn_tcp_recvd+0x58>)
 800a246:	f00e fa8f 	bl	8018768 <iprintf>
 800a24a:	f06f 030f 	mvn.w	r3, #15
 800a24e:	e00b      	b.n	800a268 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	461a      	mov	r2, r3
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ffb1 	bl	800a1c0 <netconn_tcp_recvd_msg>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800a264:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3730      	adds	r7, #48	; 0x30
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	08019c08 	.word	0x08019c08
 800a274:	08019e68 	.word	0x08019e68
 800a278:	08019c60 	.word	0x08019c60

0800a27c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b090      	sub	sp, #64	; 0x40
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3310      	adds	r3, #16
 800a28e:	4618      	mov	r0, r3
 800a290:	f00d ff1b 	bl	80180ca <sys_mbox_valid>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d102      	bne.n	800a2a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a29a:	f06f 030a 	mvn.w	r3, #10
 800a29e:	e06d      	b.n	800a37c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	7f1b      	ldrb	r3, [r3, #28]
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	da07      	bge.n	800a2ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	7f1b      	ldrb	r3, [r3, #28]
 800a2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a2b8:	e039      	b.n	800a32e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7ff feb5 	bl	800a030 <netconn_recv_data>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a2cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a2d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2d8:	e050      	b.n	800a37c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10e      	bne.n	800a308 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <netconn_recv_data_tcp+0x7a>
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	891b      	ldrh	r3, [r3, #8]
 800a2f4:	e000      	b.n	800a2f8 <netconn_recv_data_tcp+0x7c>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a2fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2fc:	f107 0214 	add.w	r2, r7, #20
 800a300:	4619      	mov	r1, r3
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff ff5c 	bl	800a1c0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d134      	bne.n	800a378 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	f003 0310 	and.w	r3, r3, #16
 800a314:	2b00      	cmp	r3, #0
 800a316:	d009      	beq.n	800a32c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	7f1b      	ldrb	r3, [r3, #28]
 800a31c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a320:	b2da      	uxtb	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a326:	f06f 0306 	mvn.w	r3, #6
 800a32a:	e027      	b.n	800a37c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a32c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <netconn_recv_data_tcp+0xc6>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	2200      	movs	r2, #0
 800a33c:	2101      	movs	r1, #1
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10f      	bne.n	800a36a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f9a2 	bl	800a694 <netconn_err>
 800a350:	4603      	mov	r3, r0
 800a352:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a356:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d002      	beq.n	800a364 <netconn_recv_data_tcp+0xe8>
          return err;
 800a35e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a362:	e00b      	b.n	800a37c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a364:	f06f 030d 	mvn.w	r3, #13
 800a368:	e008      	b.n	800a37c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a36a:	2101      	movs	r1, #1
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 f961 	bl	800a634 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a372:	f06f 030e 	mvn.w	r3, #14
 800a376:	e001      	b.n	800a37c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a378:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3740      	adds	r7, #64	; 0x40
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <netconn_recv_tcp_pbuf_flags+0x20>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	d009      	beq.n	800a3b8 <netconn_recv_tcp_pbuf_flags+0x34>
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800a3a6:	f240 3225 	movw	r2, #805	; 0x325
 800a3aa:	490a      	ldr	r1, [pc, #40]	; (800a3d4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800a3ac:	480a      	ldr	r0, [pc, #40]	; (800a3d8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800a3ae:	f00e f9db 	bl	8018768 <iprintf>
 800a3b2:	f06f 030f 	mvn.w	r3, #15
 800a3b6:	e006      	b.n	800a3c6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff ff5c 	bl	800a27c <netconn_recv_data_tcp>
 800a3c4:	4603      	mov	r3, r0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	08019c08 	.word	0x08019c08
 800a3d4:	08019e68 	.word	0x08019e68
 800a3d8:	08019c60 	.word	0x08019c60

0800a3dc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <netconn_recv_udp_raw_netbuf_flags+0x20>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d109      	bne.n	800a410 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800a3fe:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a402:	490a      	ldr	r1, [pc, #40]	; (800a42c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800a404:	480a      	ldr	r0, [pc, #40]	; (800a430 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800a406:	f00e f9af 	bl	8018768 <iprintf>
 800a40a:	f06f 030f 	mvn.w	r3, #15
 800a40e:	e006      	b.n	800a41e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	461a      	mov	r2, r3
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fe0a 	bl	800a030 <netconn_recv_data>
 800a41c:	4603      	mov	r3, r0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	08019c08 	.word	0x08019c08
 800a42c:	08019e8c 	.word	0x08019e8c
 800a430:	08019c60 	.word	0x08019c60

0800a434 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08c      	sub	sp, #48	; 0x30
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d109      	bne.n	800a458 <netconn_send+0x24>
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <netconn_send+0x4c>)
 800a446:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a44a:	490e      	ldr	r1, [pc, #56]	; (800a484 <netconn_send+0x50>)
 800a44c:	480e      	ldr	r0, [pc, #56]	; (800a488 <netconn_send+0x54>)
 800a44e:	f00e f98b 	bl	8018768 <iprintf>
 800a452:	f06f 030f 	mvn.w	r3, #15
 800a456:	e00e      	b.n	800a476 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4619      	mov	r1, r3
 800a466:	4809      	ldr	r0, [pc, #36]	; (800a48c <netconn_send+0x58>)
 800a468:	f7ff fc80 	bl	8009d6c <netconn_apimsg>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a472:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a476:	4618      	mov	r0, r3
 800a478:	3730      	adds	r7, #48	; 0x30
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	08019c08 	.word	0x08019c08
 800a484:	08019ec4 	.word	0x08019ec4
 800a488:	08019c60 	.word	0x08019c60
 800a48c:	0800b595 	.word	0x0800b595

0800a490 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af02      	add	r7, sp, #8
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a4a6:	78fa      	ldrb	r2, [r7, #3]
 800a4a8:	f107 0110 	add.w	r1, r7, #16
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 f805 	bl	800a4c4 <netconn_write_vectors_partly>
 800a4ba:	4603      	mov	r3, r0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b092      	sub	sp, #72	; 0x48
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	80fb      	strh	r3, [r7, #6]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d109      	bne.n	800a4f4 <netconn_write_vectors_partly+0x30>
 800a4e0:	4b4e      	ldr	r3, [pc, #312]	; (800a61c <netconn_write_vectors_partly+0x158>)
 800a4e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a4e6:	494e      	ldr	r1, [pc, #312]	; (800a620 <netconn_write_vectors_partly+0x15c>)
 800a4e8:	484e      	ldr	r0, [pc, #312]	; (800a624 <netconn_write_vectors_partly+0x160>)
 800a4ea:	f00e f93d 	bl	8018768 <iprintf>
 800a4ee:	f06f 030f 	mvn.w	r3, #15
 800a4f2:	e08e      	b.n	800a612 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4fc:	2b10      	cmp	r3, #16
 800a4fe:	d009      	beq.n	800a514 <netconn_write_vectors_partly+0x50>
 800a500:	4b46      	ldr	r3, [pc, #280]	; (800a61c <netconn_write_vectors_partly+0x158>)
 800a502:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a506:	4948      	ldr	r1, [pc, #288]	; (800a628 <netconn_write_vectors_partly+0x164>)
 800a508:	4846      	ldr	r0, [pc, #280]	; (800a624 <netconn_write_vectors_partly+0x160>)
 800a50a:	f00e f92d 	bl	8018768 <iprintf>
 800a50e:	f06f 0305 	mvn.w	r3, #5
 800a512:	e07e      	b.n	800a612 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	7f1b      	ldrb	r3, [r3, #28]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d104      	bne.n	800a52a <netconn_write_vectors_partly+0x66>
 800a520:	797b      	ldrb	r3, [r7, #5]
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <netconn_write_vectors_partly+0x6a>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <netconn_write_vectors_partly+0x6c>
 800a52e:	2300      	movs	r3, #0
 800a530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a534:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <netconn_write_vectors_partly+0x84>
 800a53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a542:	f06f 0305 	mvn.w	r3, #5
 800a546:	e064      	b.n	800a612 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a54c:	2300      	movs	r3, #0
 800a54e:	643b      	str	r3, [r7, #64]	; 0x40
 800a550:	e015      	b.n	800a57e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	4413      	add	r3, r2
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a55e:	4413      	add	r3, r2
 800a560:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a56e:	429a      	cmp	r2, r3
 800a570:	d202      	bcs.n	800a578 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a572:	f06f 0305 	mvn.w	r3, #5
 800a576:	e04c      	b.n	800a612 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57a:	3301      	adds	r3, #1
 800a57c:	643b      	str	r3, [r7, #64]	; 0x40
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a582:	429a      	cmp	r2, r3
 800a584:	dbe5      	blt.n	800a552 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e040      	b.n	800a612 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a592:	2b00      	cmp	r3, #0
 800a594:	da0a      	bge.n	800a5ac <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a59c:	f06f 0305 	mvn.w	r3, #5
 800a5a0:	e037      	b.n	800a612 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a5a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a5a6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a5b4:	88fb      	ldrh	r3, [r7, #6]
 800a5b6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a5bc:	797b      	ldrb	r3, [r7, #5]
 800a5be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a5ca:	f107 0314 	add.w	r3, r7, #20
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4816      	ldr	r0, [pc, #88]	; (800a62c <netconn_write_vectors_partly+0x168>)
 800a5d2:	f7ff fbcb 	bl	8009d6c <netconn_apimsg>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a5dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d114      	bne.n	800a60e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a5e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a5ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ee:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a5f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d006      	beq.n	800a60e <netconn_write_vectors_partly+0x14a>
 800a600:	4b06      	ldr	r3, [pc, #24]	; (800a61c <netconn_write_vectors_partly+0x158>)
 800a602:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a606:	490a      	ldr	r1, [pc, #40]	; (800a630 <netconn_write_vectors_partly+0x16c>)
 800a608:	4806      	ldr	r0, [pc, #24]	; (800a624 <netconn_write_vectors_partly+0x160>)
 800a60a:	f00e f8ad 	bl	8018768 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a60e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a612:	4618      	mov	r0, r3
 800a614:	3748      	adds	r7, #72	; 0x48
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	08019c08 	.word	0x08019c08
 800a620:	08019ee0 	.word	0x08019ee0
 800a624:	08019c60 	.word	0x08019c60
 800a628:	08019efc 	.word	0x08019efc
 800a62c:	0800ba31 	.word	0x0800ba31
 800a630:	08019f20 	.word	0x08019f20

0800a634 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08c      	sub	sp, #48	; 0x30
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d109      	bne.n	800a65a <netconn_close_shutdown+0x26>
 800a646:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <netconn_close_shutdown+0x50>)
 800a648:	f240 4247 	movw	r2, #1095	; 0x447
 800a64c:	490e      	ldr	r1, [pc, #56]	; (800a688 <netconn_close_shutdown+0x54>)
 800a64e:	480f      	ldr	r0, [pc, #60]	; (800a68c <netconn_close_shutdown+0x58>)
 800a650:	f00e f88a 	bl	8018768 <iprintf>
 800a654:	f06f 030f 	mvn.w	r3, #15
 800a658:	e010      	b.n	800a67c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a662:	2329      	movs	r3, #41	; 0x29
 800a664:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a666:	f107 030c 	add.w	r3, r7, #12
 800a66a:	4619      	mov	r1, r3
 800a66c:	4808      	ldr	r0, [pc, #32]	; (800a690 <netconn_close_shutdown+0x5c>)
 800a66e:	f7ff fb7d 	bl	8009d6c <netconn_apimsg>
 800a672:	4603      	mov	r3, r0
 800a674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a678:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3730      	adds	r7, #48	; 0x30
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	08019c08 	.word	0x08019c08
 800a688:	08019f44 	.word	0x08019f44
 800a68c:	08019c60 	.word	0x08019c60
 800a690:	0800bc55 	.word	0x0800bc55

0800a694 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <netconn_err+0x12>
    return ERR_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e00d      	b.n	800a6c2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a6a6:	f00d fe2b 	bl	8018300 <sys_arch_protect>
 800a6aa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7a1b      	ldrb	r3, [r3, #8]
 800a6b0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f00d fe2f 	bl	801831c <sys_arch_unprotect>
  return err;
 800a6be:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a6d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6da:	f113 0f0d 	cmn.w	r3, #13
 800a6de:	d009      	beq.n	800a6f4 <lwip_netconn_err_to_msg+0x28>
 800a6e0:	f113 0f0d 	cmn.w	r3, #13
 800a6e4:	dc0c      	bgt.n	800a700 <lwip_netconn_err_to_msg+0x34>
 800a6e6:	f113 0f0f 	cmn.w	r3, #15
 800a6ea:	d007      	beq.n	800a6fc <lwip_netconn_err_to_msg+0x30>
 800a6ec:	f113 0f0e 	cmn.w	r3, #14
 800a6f0:	d002      	beq.n	800a6f8 <lwip_netconn_err_to_msg+0x2c>
 800a6f2:	e005      	b.n	800a700 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <lwip_netconn_err_to_msg+0x54>)
 800a6f6:	e00e      	b.n	800a716 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <lwip_netconn_err_to_msg+0x58>)
 800a6fa:	e00c      	b.n	800a716 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <lwip_netconn_err_to_msg+0x5c>)
 800a6fe:	e00a      	b.n	800a716 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <lwip_netconn_err_to_msg+0x48>
 800a708:	4b08      	ldr	r3, [pc, #32]	; (800a72c <lwip_netconn_err_to_msg+0x60>)
 800a70a:	227d      	movs	r2, #125	; 0x7d
 800a70c:	4908      	ldr	r1, [pc, #32]	; (800a730 <lwip_netconn_err_to_msg+0x64>)
 800a70e:	4809      	ldr	r0, [pc, #36]	; (800a734 <lwip_netconn_err_to_msg+0x68>)
 800a710:	f00e f82a 	bl	8018768 <iprintf>
      return NULL;
 800a714:	2300      	movs	r3, #0
  }
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	0801d4c0 	.word	0x0801d4c0
 800a724:	0801d4c1 	.word	0x0801d4c1
 800a728:	0801d4c2 	.word	0x0801d4c2
 800a72c:	08019f60 	.word	0x08019f60
 800a730:	08019f94 	.word	0x08019f94
 800a734:	08019fa4 	.word	0x08019fa4

0800a738 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d105      	bne.n	800a754 <lwip_netconn_is_err_msg+0x1c>
 800a748:	4b12      	ldr	r3, [pc, #72]	; (800a794 <lwip_netconn_is_err_msg+0x5c>)
 800a74a:	2285      	movs	r2, #133	; 0x85
 800a74c:	4912      	ldr	r1, [pc, #72]	; (800a798 <lwip_netconn_is_err_msg+0x60>)
 800a74e:	4813      	ldr	r0, [pc, #76]	; (800a79c <lwip_netconn_is_err_msg+0x64>)
 800a750:	f00e f80a 	bl	8018768 <iprintf>

  if (msg == &netconn_aborted) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a12      	ldr	r2, [pc, #72]	; (800a7a0 <lwip_netconn_is_err_msg+0x68>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d104      	bne.n	800a766 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	22f3      	movs	r2, #243	; 0xf3
 800a760:	701a      	strb	r2, [r3, #0]
    return 1;
 800a762:	2301      	movs	r3, #1
 800a764:	e012      	b.n	800a78c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a0e      	ldr	r2, [pc, #56]	; (800a7a4 <lwip_netconn_is_err_msg+0x6c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d104      	bne.n	800a778 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	22f2      	movs	r2, #242	; 0xf2
 800a772:	701a      	strb	r2, [r3, #0]
    return 1;
 800a774:	2301      	movs	r3, #1
 800a776:	e009      	b.n	800a78c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a0b      	ldr	r2, [pc, #44]	; (800a7a8 <lwip_netconn_is_err_msg+0x70>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d104      	bne.n	800a78a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	22f1      	movs	r2, #241	; 0xf1
 800a784:	701a      	strb	r2, [r3, #0]
    return 1;
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	08019f60 	.word	0x08019f60
 800a798:	08019fcc 	.word	0x08019fcc
 800a79c:	08019fa4 	.word	0x08019fa4
 800a7a0:	0801d4c0 	.word	0x0801d4c0
 800a7a4:	0801d4c1 	.word	0x0801d4c1
 800a7a8:	0801d4c2 	.word	0x0801d4c2

0800a7ac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <recv_udp+0x20>
 800a7c0:	4b34      	ldr	r3, [pc, #208]	; (800a894 <recv_udp+0xe8>)
 800a7c2:	22e5      	movs	r2, #229	; 0xe5
 800a7c4:	4934      	ldr	r1, [pc, #208]	; (800a898 <recv_udp+0xec>)
 800a7c6:	4835      	ldr	r0, [pc, #212]	; (800a89c <recv_udp+0xf0>)
 800a7c8:	f00d ffce 	bl	8018768 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d105      	bne.n	800a7de <recv_udp+0x32>
 800a7d2:	4b30      	ldr	r3, [pc, #192]	; (800a894 <recv_udp+0xe8>)
 800a7d4:	22e6      	movs	r2, #230	; 0xe6
 800a7d6:	4932      	ldr	r1, [pc, #200]	; (800a8a0 <recv_udp+0xf4>)
 800a7d8:	4830      	ldr	r0, [pc, #192]	; (800a89c <recv_udp+0xf0>)
 800a7da:	f00d ffc5 	bl	8018768 <iprintf>
  conn = (struct netconn *)arg;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <recv_udp+0x44>
    pbuf_free(p);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f004 f83f 	bl	800e86c <pbuf_free>
    return;
 800a7ee:	e04d      	b.n	800a88c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d005      	beq.n	800a806 <recv_udp+0x5a>
 800a7fa:	4b26      	ldr	r3, [pc, #152]	; (800a894 <recv_udp+0xe8>)
 800a7fc:	22ee      	movs	r2, #238	; 0xee
 800a7fe:	4929      	ldr	r1, [pc, #164]	; (800a8a4 <recv_udp+0xf8>)
 800a800:	4826      	ldr	r0, [pc, #152]	; (800a89c <recv_udp+0xf0>)
 800a802:	f00d ffb1 	bl	8018768 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	3310      	adds	r3, #16
 800a80a:	4618      	mov	r0, r3
 800a80c:	f00d fc5d 	bl	80180ca <sys_mbox_valid>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d103      	bne.n	800a81e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f004 f828 	bl	800e86c <pbuf_free>
    return;
 800a81c:	e036      	b.n	800a88c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a81e:	2006      	movs	r0, #6
 800a820:	f003 f8fc 	bl	800da1c <memp_malloc>
 800a824:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d103      	bne.n	800a834 <recv_udp+0x88>
    pbuf_free(p);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f004 f81d 	bl	800e86c <pbuf_free>
    return;
 800a832:	e02b      	b.n	800a88c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <recv_udp+0xa0>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	e000      	b.n	800a84e <recv_udp+0xa2>
 800a84c:	2300      	movs	r3, #0
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a856:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	891b      	ldrh	r3, [r3, #8]
 800a85c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	3310      	adds	r3, #16
 800a862:	69b9      	ldr	r1, [r7, #24]
 800a864:	4618      	mov	r0, r3
 800a866:	f00d fbbb 	bl	8017fe0 <sys_mbox_trypost>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a870:	69b8      	ldr	r0, [r7, #24]
 800a872:	f001 fa99 	bl	800bda8 <netbuf_delete>
    return;
 800a876:	e009      	b.n	800a88c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d005      	beq.n	800a88c <recv_udp+0xe0>
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a884:	8afa      	ldrh	r2, [r7, #22]
 800a886:	2100      	movs	r1, #0
 800a888:	69f8      	ldr	r0, [r7, #28]
 800a88a:	4798      	blx	r3
  }
}
 800a88c:	3720      	adds	r7, #32
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	08019f60 	.word	0x08019f60
 800a898:	08019fd8 	.word	0x08019fd8
 800a89c:	08019fa4 	.word	0x08019fa4
 800a8a0:	08019ffc 	.word	0x08019ffc
 800a8a4:	0801a01c 	.word	0x0801a01c

0800a8a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <recv_tcp+0x22>
 800a8bc:	4b36      	ldr	r3, [pc, #216]	; (800a998 <recv_tcp+0xf0>)
 800a8be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a8c2:	4936      	ldr	r1, [pc, #216]	; (800a99c <recv_tcp+0xf4>)
 800a8c4:	4836      	ldr	r0, [pc, #216]	; (800a9a0 <recv_tcp+0xf8>)
 800a8c6:	f00d ff4f 	bl	8018768 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <recv_tcp+0x36>
 800a8d0:	4b31      	ldr	r3, [pc, #196]	; (800a998 <recv_tcp+0xf0>)
 800a8d2:	f240 122d 	movw	r2, #301	; 0x12d
 800a8d6:	4933      	ldr	r1, [pc, #204]	; (800a9a4 <recv_tcp+0xfc>)
 800a8d8:	4831      	ldr	r0, [pc, #196]	; (800a9a0 <recv_tcp+0xf8>)
 800a8da:	f00d ff45 	bl	8018768 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a8de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d006      	beq.n	800a8f4 <recv_tcp+0x4c>
 800a8e6:	4b2c      	ldr	r3, [pc, #176]	; (800a998 <recv_tcp+0xf0>)
 800a8e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a8ec:	492e      	ldr	r1, [pc, #184]	; (800a9a8 <recv_tcp+0x100>)
 800a8ee:	482c      	ldr	r0, [pc, #176]	; (800a9a0 <recv_tcp+0xf8>)
 800a8f0:	f00d ff3a 	bl	8018768 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d102      	bne.n	800a904 <recv_tcp+0x5c>
    return ERR_VAL;
 800a8fe:	f06f 0305 	mvn.w	r3, #5
 800a902:	e045      	b.n	800a990 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d006      	beq.n	800a91c <recv_tcp+0x74>
 800a90e:	4b22      	ldr	r3, [pc, #136]	; (800a998 <recv_tcp+0xf0>)
 800a910:	f240 1235 	movw	r2, #309	; 0x135
 800a914:	4925      	ldr	r1, [pc, #148]	; (800a9ac <recv_tcp+0x104>)
 800a916:	4822      	ldr	r0, [pc, #136]	; (800a9a0 <recv_tcp+0xf8>)
 800a918:	f00d ff26 	bl	8018768 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	3310      	adds	r3, #16
 800a920:	4618      	mov	r0, r3
 800a922:	f00d fbd2 	bl	80180ca <sys_mbox_valid>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10d      	bne.n	800a948 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d008      	beq.n	800a944 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	891b      	ldrh	r3, [r3, #8]
 800a936:	4619      	mov	r1, r3
 800a938:	68b8      	ldr	r0, [r7, #8]
 800a93a:	f004 fe95 	bl	800f668 <tcp_recved>
      pbuf_free(p);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f003 ff94 	bl	800e86c <pbuf_free>
    }
    return ERR_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	e023      	b.n	800a990 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <recv_tcp+0xb2>
    msg = p;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	891b      	ldrh	r3, [r3, #8]
 800a956:	83fb      	strh	r3, [r7, #30]
 800a958:	e003      	b.n	800a962 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a95a:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <recv_tcp+0x108>)
 800a95c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	3310      	adds	r3, #16
 800a966:	69b9      	ldr	r1, [r7, #24]
 800a968:	4618      	mov	r0, r3
 800a96a:	f00d fb39 	bl	8017fe0 <sys_mbox_trypost>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a974:	f04f 33ff 	mov.w	r3, #4294967295
 800a978:	e00a      	b.n	800a990 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <recv_tcp+0xe6>
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	8bfa      	ldrh	r2, [r7, #30]
 800a988:	2100      	movs	r1, #0
 800a98a:	6978      	ldr	r0, [r7, #20]
 800a98c:	4798      	blx	r3
  }

  return ERR_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3720      	adds	r7, #32
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	08019f60 	.word	0x08019f60
 800a99c:	0801a03c 	.word	0x0801a03c
 800a9a0:	08019fa4 	.word	0x08019fa4
 800a9a4:	0801a060 	.word	0x0801a060
 800a9a8:	0801a080 	.word	0x0801a080
 800a9ac:	0801a098 	.word	0x0801a098
 800a9b0:	0801d4c2 	.word	0x0801d4c2

0800a9b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <poll_tcp+0x22>
 800a9c8:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <poll_tcp+0xbc>)
 800a9ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a9ce:	4929      	ldr	r1, [pc, #164]	; (800aa74 <poll_tcp+0xc0>)
 800a9d0:	4829      	ldr	r0, [pc, #164]	; (800aa78 <poll_tcp+0xc4>)
 800a9d2:	f00d fec9 	bl	8018768 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d104      	bne.n	800a9e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a9de:	2101      	movs	r1, #1
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 fe59 	bl	800b698 <lwip_netconn_do_writemore>
 800a9e6:	e016      	b.n	800aa16 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d112      	bne.n	800aa16 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <poll_tcp+0x5a>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	7a5b      	ldrb	r3, [r3, #9]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d005      	beq.n	800aa0e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	7a5a      	ldrb	r2, [r3, #9]
 800aa08:	3a01      	subs	r2, #1
 800aa0a:	b2d2      	uxtb	r2, r2
 800aa0c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aa0e:	2101      	movs	r1, #1
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 fb3b 	bl	800b08c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	7f1b      	ldrb	r3, [r3, #28]
 800aa1a:	f003 0310 	and.w	r3, r3, #16
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d021      	beq.n	800aa66 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d01d      	beq.n	800aa66 <poll_tcp+0xb2>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa32:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aa36:	d316      	bcc.n	800aa66 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d810      	bhi.n	800aa66 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	7f1b      	ldrb	r3, [r3, #28]
 800aa48:	f023 0310 	bic.w	r3, r3, #16
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <poll_tcp+0xb2>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2102      	movs	r1, #2
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	08019f60 	.word	0x08019f60
 800aa74:	0801a0b8 	.word	0x0801a0b8
 800aa78:	08019fa4 	.word	0x08019fa4

0800aa7c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <sent_tcp+0x26>
 800aa94:	4b20      	ldr	r3, [pc, #128]	; (800ab18 <sent_tcp+0x9c>)
 800aa96:	f240 1293 	movw	r2, #403	; 0x193
 800aa9a:	4920      	ldr	r1, [pc, #128]	; (800ab1c <sent_tcp+0xa0>)
 800aa9c:	4820      	ldr	r0, [pc, #128]	; (800ab20 <sent_tcp+0xa4>)
 800aa9e:	f00d fe63 	bl	8018768 <iprintf>

  if (conn) {
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d032      	beq.n	800ab0e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d104      	bne.n	800aaba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aab0:	2101      	movs	r1, #1
 800aab2:	6978      	ldr	r0, [r7, #20]
 800aab4:	f000 fdf0 	bl	800b698 <lwip_netconn_do_writemore>
 800aab8:	e007      	b.n	800aaca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	785b      	ldrb	r3, [r3, #1]
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d103      	bne.n	800aaca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aac2:	2101      	movs	r1, #1
 800aac4:	6978      	ldr	r0, [r7, #20]
 800aac6:	f000 fae1 	bl	800b08c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01d      	beq.n	800ab0e <sent_tcp+0x92>
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aada:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aade:	d316      	bcc.n	800ab0e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d810      	bhi.n	800ab0e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	7f1b      	ldrb	r3, [r3, #28]
 800aaf0:	f023 0310 	bic.w	r3, r3, #16
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <sent_tcp+0x92>
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	88fa      	ldrh	r2, [r7, #6]
 800ab08:	2102      	movs	r1, #2
 800ab0a:	6978      	ldr	r0, [r7, #20]
 800ab0c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	08019f60 	.word	0x08019f60
 800ab1c:	0801a0b8 	.word	0x0801a0b8
 800ab20:	08019fa4 	.word	0x08019fa4

0800ab24 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d106      	bne.n	800ab48 <err_tcp+0x24>
 800ab3a:	4b5f      	ldr	r3, [pc, #380]	; (800acb8 <err_tcp+0x194>)
 800ab3c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ab40:	495e      	ldr	r1, [pc, #376]	; (800acbc <err_tcp+0x198>)
 800ab42:	485f      	ldr	r0, [pc, #380]	; (800acc0 <err_tcp+0x19c>)
 800ab44:	f00d fe10 	bl	8018768 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ab48:	f00d fbda 	bl	8018300 <sys_arch_protect>
 800ab4c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	2200      	movs	r2, #0
 800ab52:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	7f1b      	ldrb	r3, [r3, #28]
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	2200      	movs	r2, #0
 800ab72:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ab74:	69b8      	ldr	r0, [r7, #24]
 800ab76:	f00d fbd1 	bl	801831c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <err_tcp+0x6a>
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2200      	movs	r2, #0
 800ab88:	2104      	movs	r1, #4
 800ab8a:	69f8      	ldr	r0, [r7, #28]
 800ab8c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d005      	beq.n	800aba2 <err_tcp+0x7e>
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	69f8      	ldr	r0, [r7, #28]
 800aba0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <err_tcp+0x92>
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	2200      	movs	r2, #0
 800abb0:	2102      	movs	r1, #2
 800abb2:	69f8      	ldr	r0, [r7, #28]
 800abb4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800abb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fd86 	bl	800a6cc <lwip_netconn_err_to_msg>
 800abc0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	3310      	adds	r3, #16
 800abc6:	4618      	mov	r0, r3
 800abc8:	f00d fa7f 	bl	80180ca <sys_mbox_valid>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d005      	beq.n	800abde <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	3310      	adds	r3, #16
 800abd6:	6939      	ldr	r1, [r7, #16]
 800abd8:	4618      	mov	r0, r3
 800abda:	f00d fa01 	bl	8017fe0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	3314      	adds	r3, #20
 800abe2:	4618      	mov	r0, r3
 800abe4:	f00d fa71 	bl	80180ca <sys_mbox_valid>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d005      	beq.n	800abfa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	3314      	adds	r3, #20
 800abf2:	6939      	ldr	r1, [r7, #16]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f00d f9f3 	bl	8017fe0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800abfa:	7dfb      	ldrb	r3, [r7, #23]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d005      	beq.n	800ac0c <err_tcp+0xe8>
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d002      	beq.n	800ac0c <err_tcp+0xe8>
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d143      	bne.n	800ac94 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	7f1b      	ldrb	r3, [r3, #28]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bf14      	ite	ne
 800ac18:	2301      	movne	r3, #1
 800ac1a:	2300      	moveq	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	7f1b      	ldrb	r3, [r3, #28]
 800ac24:	f023 0304 	bic.w	r3, r3, #4
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d13b      	bne.n	800acac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <err_tcp+0x126>
 800ac3c:	4b1e      	ldr	r3, [pc, #120]	; (800acb8 <err_tcp+0x194>)
 800ac3e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ac42:	4920      	ldr	r1, [pc, #128]	; (800acc4 <err_tcp+0x1a0>)
 800ac44:	481e      	ldr	r0, [pc, #120]	; (800acc0 <err_tcp+0x19c>)
 800ac46:	f00d fd8f 	bl	8018768 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d104      	bne.n	800ac5a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	2200      	movs	r2, #0
 800ac56:	711a      	strb	r2, [r3, #4]
 800ac58:	e003      	b.n	800ac62 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	78fa      	ldrb	r2, [r7, #3]
 800ac60:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	330c      	adds	r3, #12
 800ac6a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ac6c:	68b8      	ldr	r0, [r7, #8]
 800ac6e:	f00d fabd 	bl	80181ec <sys_sem_valid>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d106      	bne.n	800ac86 <err_tcp+0x162>
 800ac78:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <err_tcp+0x194>)
 800ac7a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ac7e:	4912      	ldr	r1, [pc, #72]	; (800acc8 <err_tcp+0x1a4>)
 800ac80:	480f      	ldr	r0, [pc, #60]	; (800acc0 <err_tcp+0x19c>)
 800ac82:	f00d fd71 	bl	8018768 <iprintf>
      conn->current_msg = NULL;
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ac8c:	68b8      	ldr	r0, [r7, #8]
 800ac8e:	f00d fa93 	bl	80181b8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ac92:	e00b      	b.n	800acac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <err_tcp+0x18a>
 800ac9c:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <err_tcp+0x194>)
 800ac9e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800aca2:	490a      	ldr	r1, [pc, #40]	; (800accc <err_tcp+0x1a8>)
 800aca4:	4806      	ldr	r0, [pc, #24]	; (800acc0 <err_tcp+0x19c>)
 800aca6:	f00d fd5f 	bl	8018768 <iprintf>
  }
}
 800acaa:	e000      	b.n	800acae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800acac:	bf00      	nop
}
 800acae:	bf00      	nop
 800acb0:	3720      	adds	r7, #32
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	08019f60 	.word	0x08019f60
 800acbc:	0801a0b8 	.word	0x0801a0b8
 800acc0:	08019fa4 	.word	0x08019fa4
 800acc4:	0801a0c8 	.word	0x0801a0c8
 800acc8:	0801a0e4 	.word	0x0801a0e4
 800accc:	0801a100 	.word	0x0801a100

0800acd0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f005 fb87 	bl	80103f4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ace6:	490a      	ldr	r1, [pc, #40]	; (800ad10 <setup_tcp+0x40>)
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f005 fb95 	bl	8010418 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800acee:	4909      	ldr	r1, [pc, #36]	; (800ad14 <setup_tcp+0x44>)
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f005 fbb3 	bl	801045c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800acf6:	2202      	movs	r2, #2
 800acf8:	4907      	ldr	r1, [pc, #28]	; (800ad18 <setup_tcp+0x48>)
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f005 fc0a 	bl	8010514 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ad00:	4906      	ldr	r1, [pc, #24]	; (800ad1c <setup_tcp+0x4c>)
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f005 fbcc 	bl	80104a0 <tcp_err>
}
 800ad08:	bf00      	nop
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	0800a8a9 	.word	0x0800a8a9
 800ad14:	0800aa7d 	.word	0x0800aa7d
 800ad18:	0800a9b5 	.word	0x0800a9b5
 800ad1c:	0800ab25 	.word	0x0800ab25

0800ad20 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ad20:	b590      	push	{r4, r7, lr}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d006      	beq.n	800ad44 <pcb_new+0x24>
 800ad36:	4b2b      	ldr	r3, [pc, #172]	; (800ade4 <pcb_new+0xc4>)
 800ad38:	f240 2265 	movw	r2, #613	; 0x265
 800ad3c:	492a      	ldr	r1, [pc, #168]	; (800ade8 <pcb_new+0xc8>)
 800ad3e:	482b      	ldr	r0, [pc, #172]	; (800adec <pcb_new+0xcc>)
 800ad40:	f00d fd12 	bl	8018768 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad4e:	2b10      	cmp	r3, #16
 800ad50:	d022      	beq.n	800ad98 <pcb_new+0x78>
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d133      	bne.n	800adbe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681c      	ldr	r4, [r3, #0]
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f00a fe0e 	bl	801597e <udp_new_ip_type>
 800ad62:	4603      	mov	r3, r0
 800ad64:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d02a      	beq.n	800adc6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b22      	cmp	r3, #34	; 0x22
 800ad78:	d104      	bne.n	800ad84 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6858      	ldr	r0, [r3, #4]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4917      	ldr	r1, [pc, #92]	; (800adf0 <pcb_new+0xd0>)
 800ad92:	f00a fd7b 	bl	801588c <udp_recv>
      }
      break;
 800ad96:	e016      	b.n	800adc6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681c      	ldr	r4, [r3, #0]
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f005 fb1a 	bl	80103d8 <tcp_new_ip_type>
 800ada4:	4603      	mov	r3, r0
 800ada6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00b      	beq.n	800adca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff ff8a 	bl	800acd0 <setup_tcp>
      }
      break;
 800adbc:	e005      	b.n	800adca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	22fa      	movs	r2, #250	; 0xfa
 800adc2:	711a      	strb	r2, [r3, #4]
      return;
 800adc4:	e00a      	b.n	800addc <pcb_new+0xbc>
      break;
 800adc6:	bf00      	nop
 800adc8:	e000      	b.n	800adcc <pcb_new+0xac>
      break;
 800adca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	22ff      	movs	r2, #255	; 0xff
 800adda:	711a      	strb	r2, [r3, #4]
  }
}
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd90      	pop	{r4, r7, pc}
 800ade2:	bf00      	nop
 800ade4:	08019f60 	.word	0x08019f60
 800ade8:	0801a144 	.word	0x0801a144
 800adec:	08019fa4 	.word	0x08019fa4
 800adf0:	0800a7ad 	.word	0x0800a7ad

0800adf4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d102      	bne.n	800ae16 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff ff85 	bl	800ad20 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	6039      	str	r1, [r7, #0]
 800ae2a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ae30:	2007      	movs	r0, #7
 800ae32:	f002 fdf3 	bl	800da1c <memp_malloc>
 800ae36:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <netconn_alloc+0x22>
    return NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e052      	b.n	800aee8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	79fa      	ldrb	r2, [r7, #7]
 800ae4c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae5a:	2b10      	cmp	r3, #16
 800ae5c:	d004      	beq.n	800ae68 <netconn_alloc+0x48>
 800ae5e:	2b20      	cmp	r3, #32
 800ae60:	d105      	bne.n	800ae6e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ae62:	2306      	movs	r3, #6
 800ae64:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ae66:	e00a      	b.n	800ae7e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ae68:	2306      	movs	r3, #6
 800ae6a:	617b      	str	r3, [r7, #20]
      break;
 800ae6c:	e007      	b.n	800ae7e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ae6e:	4b20      	ldr	r3, [pc, #128]	; (800aef0 <netconn_alloc+0xd0>)
 800ae70:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ae74:	491f      	ldr	r1, [pc, #124]	; (800aef4 <netconn_alloc+0xd4>)
 800ae76:	4820      	ldr	r0, [pc, #128]	; (800aef8 <netconn_alloc+0xd8>)
 800ae78:	f00d fc76 	bl	8018768 <iprintf>
      goto free_and_return;
 800ae7c:	e02f      	b.n	800aede <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3310      	adds	r3, #16
 800ae82:	6979      	ldr	r1, [r7, #20]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f00d f877 	bl	8017f78 <sys_mbox_new>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d125      	bne.n	800aedc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	330c      	adds	r3, #12
 800ae94:	2100      	movs	r1, #0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f00d f935 	bl	8018106 <sys_sem_new>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3310      	adds	r3, #16
 800aea6:	4618      	mov	r0, r3
 800aea8:	f00d f888 	bl	8017fbc <sys_mbox_free>
    goto free_and_return;
 800aeac:	e017      	b.n	800aede <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f00d f91a 	bl	80180ec <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295
 800aec4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	7cfa      	ldrb	r2, [r7, #19]
 800aed6:	771a      	strb	r2, [r3, #28]
  return conn;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	e005      	b.n	800aee8 <netconn_alloc+0xc8>
    goto free_and_return;
 800aedc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	2007      	movs	r0, #7
 800aee2:	f002 fded 	bl	800dac0 <memp_free>
  return NULL;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	08019f60 	.word	0x08019f60
 800aef4:	0801a164 	.word	0x0801a164
 800aef8:	08019fa4 	.word	0x08019fa4

0800aefc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <netconn_free+0x1e>
 800af0c:	4b1b      	ldr	r3, [pc, #108]	; (800af7c <netconn_free+0x80>)
 800af0e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800af12:	491b      	ldr	r1, [pc, #108]	; (800af80 <netconn_free+0x84>)
 800af14:	481b      	ldr	r0, [pc, #108]	; (800af84 <netconn_free+0x88>)
 800af16:	f00d fc27 	bl	8018768 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3310      	adds	r3, #16
 800af1e:	4618      	mov	r0, r3
 800af20:	f00d f8d3 	bl	80180ca <sys_mbox_valid>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d006      	beq.n	800af38 <netconn_free+0x3c>
 800af2a:	4b14      	ldr	r3, [pc, #80]	; (800af7c <netconn_free+0x80>)
 800af2c:	f240 3223 	movw	r2, #803	; 0x323
 800af30:	4915      	ldr	r1, [pc, #84]	; (800af88 <netconn_free+0x8c>)
 800af32:	4814      	ldr	r0, [pc, #80]	; (800af84 <netconn_free+0x88>)
 800af34:	f00d fc18 	bl	8018768 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3314      	adds	r3, #20
 800af3c:	4618      	mov	r0, r3
 800af3e:	f00d f8c4 	bl	80180ca <sys_mbox_valid>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d006      	beq.n	800af56 <netconn_free+0x5a>
 800af48:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <netconn_free+0x80>)
 800af4a:	f240 3226 	movw	r2, #806	; 0x326
 800af4e:	490f      	ldr	r1, [pc, #60]	; (800af8c <netconn_free+0x90>)
 800af50:	480c      	ldr	r0, [pc, #48]	; (800af84 <netconn_free+0x88>)
 800af52:	f00d fc09 	bl	8018768 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	330c      	adds	r3, #12
 800af5a:	4618      	mov	r0, r3
 800af5c:	f00d f939 	bl	80181d2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	330c      	adds	r3, #12
 800af64:	4618      	mov	r0, r3
 800af66:	f00d f952 	bl	801820e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	2007      	movs	r0, #7
 800af6e:	f002 fda7 	bl	800dac0 <memp_free>
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	08019f60 	.word	0x08019f60
 800af80:	0801a18c 	.word	0x0801a18c
 800af84:	08019fa4 	.word	0x08019fa4
 800af88:	0801a1bc 	.word	0x0801a1bc
 800af8c:	0801a1f8 	.word	0x0801a1f8

0800af90 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3310      	adds	r3, #16
 800af9c:	4618      	mov	r0, r3
 800af9e:	f00d f894 	bl	80180ca <sys_mbox_valid>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d02f      	beq.n	800b008 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800afa8:	e018      	b.n	800afdc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afb2:	2b10      	cmp	r3, #16
 800afb4:	d10e      	bne.n	800afd4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f107 020f 	add.w	r2, r7, #15
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fbba 	bl	800a738 <lwip_netconn_is_err_msg>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d108      	bne.n	800afdc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	4618      	mov	r0, r3
 800afce:	f003 fc4d 	bl	800e86c <pbuf_free>
 800afd2:	e003      	b.n	800afdc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fee6 	bl	800bda8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3310      	adds	r3, #16
 800afe0:	f107 0210 	add.w	r2, r7, #16
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f00d f853 	bl	8018092 <sys_arch_mbox_tryfetch>
 800afec:	4603      	mov	r3, r0
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d1da      	bne.n	800afaa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3310      	adds	r3, #16
 800aff8:	4618      	mov	r0, r3
 800affa:	f00c ffdf 	bl	8017fbc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3310      	adds	r3, #16
 800b002:	4618      	mov	r0, r3
 800b004:	f00d f872 	bl	80180ec <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3314      	adds	r3, #20
 800b00c:	4618      	mov	r0, r3
 800b00e:	f00d f85c 	bl	80180ca <sys_mbox_valid>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d034      	beq.n	800b082 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b018:	e01d      	b.n	800b056 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f107 020e 	add.w	r2, r7, #14
 800b020:	4611      	mov	r1, r2
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fb88 	bl	800a738 <lwip_netconn_is_err_msg>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d113      	bne.n	800b056 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b032:	6978      	ldr	r0, [r7, #20]
 800b034:	f7ff ffac 	bl	800af90 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d007      	beq.n	800b050 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	4618      	mov	r0, r3
 800b046:	f004 fa11 	bl	800f46c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2200      	movs	r2, #0
 800b04e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b050:	6978      	ldr	r0, [r7, #20]
 800b052:	f7ff ff53 	bl	800aefc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3314      	adds	r3, #20
 800b05a:	f107 0210 	add.w	r2, r7, #16
 800b05e:	4611      	mov	r1, r2
 800b060:	4618      	mov	r0, r3
 800b062:	f00d f816 	bl	8018092 <sys_arch_mbox_tryfetch>
 800b066:	4603      	mov	r3, r0
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06c:	d1d5      	bne.n	800b01a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3314      	adds	r3, #20
 800b072:	4618      	mov	r0, r3
 800b074:	f00c ffa2 	bl	8017fbc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3314      	adds	r3, #20
 800b07c:	4618      	mov	r0, r3
 800b07e:	f00d f835 	bl	80180ec <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b082:	bf00      	nop
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
	...

0800b08c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <lwip_netconn_do_close_internal+0x24>
 800b0a2:	4ba1      	ldr	r3, [pc, #644]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b0a4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b0a8:	49a0      	ldr	r1, [pc, #640]	; (800b32c <lwip_netconn_do_close_internal+0x2a0>)
 800b0aa:	48a1      	ldr	r0, [pc, #644]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b0ac:	f00d fb5c 	bl	8018768 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0b8:	2b10      	cmp	r3, #16
 800b0ba:	d006      	beq.n	800b0ca <lwip_netconn_do_close_internal+0x3e>
 800b0bc:	4b9a      	ldr	r3, [pc, #616]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b0be:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b0c2:	499c      	ldr	r1, [pc, #624]	; (800b334 <lwip_netconn_do_close_internal+0x2a8>)
 800b0c4:	489a      	ldr	r0, [pc, #616]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b0c6:	f00d fb4f 	bl	8018768 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	785b      	ldrb	r3, [r3, #1]
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d006      	beq.n	800b0e0 <lwip_netconn_do_close_internal+0x54>
 800b0d2:	4b95      	ldr	r3, [pc, #596]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b0d4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b0d8:	4997      	ldr	r1, [pc, #604]	; (800b338 <lwip_netconn_do_close_internal+0x2ac>)
 800b0da:	4895      	ldr	r0, [pc, #596]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b0dc:	f00d fb44 	bl	8018768 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <lwip_netconn_do_close_internal+0x6a>
 800b0e8:	4b8f      	ldr	r3, [pc, #572]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b0ea:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b0ee:	4993      	ldr	r1, [pc, #588]	; (800b33c <lwip_netconn_do_close_internal+0x2b0>)
 800b0f0:	488f      	ldr	r0, [pc, #572]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b0f2:	f00d fb39 	bl	8018768 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <lwip_netconn_do_close_internal+0x80>
 800b0fe:	4b8a      	ldr	r3, [pc, #552]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b100:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b104:	498e      	ldr	r1, [pc, #568]	; (800b340 <lwip_netconn_do_close_internal+0x2b4>)
 800b106:	488a      	ldr	r0, [pc, #552]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b108:	f00d fb2e 	bl	8018768 <iprintf>

  tpcb = conn->pcb.tcp;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	7a1b      	ldrb	r3, [r3, #8]
 800b118:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d102      	bne.n	800b136 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b130:	2301      	movs	r3, #1
 800b132:	75bb      	strb	r3, [r7, #22]
 800b134:	e01f      	b.n	800b176 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00e      	beq.n	800b15a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b140:	2b05      	cmp	r3, #5
 800b142:	d007      	beq.n	800b154 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b148:	2b06      	cmp	r3, #6
 800b14a:	d003      	beq.n	800b154 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b150:	2b08      	cmp	r3, #8
 800b152:	d102      	bne.n	800b15a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b154:	2301      	movs	r3, #1
 800b156:	75bb      	strb	r3, [r7, #22]
 800b158:	e00d      	b.n	800b176 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b15a:	7b7b      	ldrb	r3, [r7, #13]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d008      	beq.n	800b172 <lwip_netconn_do_close_internal+0xe6>
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	8b5b      	ldrh	r3, [r3, #26]
 800b164:	f003 0310 	and.w	r3, r3, #16
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b16c:	2301      	movs	r3, #1
 800b16e:	75bb      	strb	r3, [r7, #22]
 800b170:	e001      	b.n	800b176 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b176:	7dbb      	ldrb	r3, [r7, #22]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b17c:	2100      	movs	r1, #0
 800b17e:	6938      	ldr	r0, [r7, #16]
 800b180:	f005 f938 	bl	80103f4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	7d1b      	ldrb	r3, [r3, #20]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d104      	bne.n	800b196 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b18c:	2100      	movs	r1, #0
 800b18e:	6938      	ldr	r0, [r7, #16]
 800b190:	f005 f9a8 	bl	80104e4 <tcp_accept>
 800b194:	e01d      	b.n	800b1d2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d007      	beq.n	800b1ac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b19c:	2100      	movs	r1, #0
 800b19e:	6938      	ldr	r0, [r7, #16]
 800b1a0:	f005 f93a 	bl	8010418 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	6938      	ldr	r0, [r7, #16]
 800b1a8:	f005 f99c 	bl	80104e4 <tcp_accept>
    }
    if (shut_tx) {
 800b1ac:	7b7b      	ldrb	r3, [r7, #13]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	6938      	ldr	r0, [r7, #16]
 800b1b6:	f005 f951 	bl	801045c <tcp_sent>
    }
    if (shut_close) {
 800b1ba:	7dbb      	ldrb	r3, [r7, #22]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d008      	beq.n	800b1d2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	6938      	ldr	r0, [r7, #16]
 800b1c6:	f005 f9a5 	bl	8010514 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	6938      	ldr	r0, [r7, #16]
 800b1ce:	f005 f967 	bl	80104a0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b1d2:	7dbb      	ldrb	r3, [r7, #22]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b1d8:	6938      	ldr	r0, [r7, #16]
 800b1da:	f004 f801 	bl	800f1e0 <tcp_close>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]
 800b1e2:	e007      	b.n	800b1f4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	7b7a      	ldrb	r2, [r7, #13]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f004 f824 	bl	800f238 <tcp_shutdown>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b1f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	757b      	strb	r3, [r7, #21]
 800b200:	e016      	b.n	800b230 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	d10f      	bne.n	800b22c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a1b      	ldr	r3, [r3, #32]
 800b210:	7a5b      	ldrb	r3, [r3, #9]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10c      	bne.n	800b230 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b216:	2301      	movs	r3, #1
 800b218:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b220:	6938      	ldr	r0, [r7, #16]
 800b222:	f004 f923 	bl	800f46c <tcp_abort>
          err = ERR_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	75fb      	strb	r3, [r7, #23]
 800b22a:	e001      	b.n	800b230 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b22c:	2301      	movs	r3, #1
 800b22e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b230:	7d7b      	ldrb	r3, [r7, #21]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d044      	beq.n	800b2c0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	330c      	adds	r3, #12
 800b23e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	7dfa      	ldrb	r2, [r7, #23]
 800b246:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d129      	bne.n	800b2b0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b25c:	7dbb      	ldrb	r3, [r7, #22]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <lwip_netconn_do_close_internal+0x1f0>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	2200      	movs	r2, #0
 800b276:	2104      	movs	r1, #4
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
      }
      if (shut_rx) {
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d009      	beq.n	800b296 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b00      	cmp	r3, #0
 800b288:	d005      	beq.n	800b296 <lwip_netconn_do_close_internal+0x20a>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2200      	movs	r2, #0
 800b290:	2100      	movs	r1, #0
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	4798      	blx	r3
      }
      if (shut_tx) {
 800b296:	7b7b      	ldrb	r3, [r7, #13]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d009      	beq.n	800b2b0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d005      	beq.n	800b2b0 <lwip_netconn_do_close_internal+0x224>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2102      	movs	r1, #2
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d002      	beq.n	800b2bc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b2b6:	68b8      	ldr	r0, [r7, #8]
 800b2b8:	f00c ff7e 	bl	80181b8 <sys_sem_signal>
    }
    return ERR_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e02e      	b.n	800b31e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b2c0:	7d7b      	ldrb	r3, [r7, #21]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d11e      	bne.n	800b304 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	7d1b      	ldrb	r3, [r3, #20]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d106      	bne.n	800b2dc <lwip_netconn_do_close_internal+0x250>
 800b2ce:	4b16      	ldr	r3, [pc, #88]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b2d0:	f240 4241 	movw	r2, #1089	; 0x441
 800b2d4:	491b      	ldr	r1, [pc, #108]	; (800b344 <lwip_netconn_do_close_internal+0x2b8>)
 800b2d6:	4816      	ldr	r0, [pc, #88]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b2d8:	f00d fa46 	bl	8018768 <iprintf>
    if (shut_tx) {
 800b2dc:	7b7b      	ldrb	r3, [r7, #13]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b2e2:	4919      	ldr	r1, [pc, #100]	; (800b348 <lwip_netconn_do_close_internal+0x2bc>)
 800b2e4:	6938      	ldr	r0, [r7, #16]
 800b2e6:	f005 f8b9 	bl	801045c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	4917      	ldr	r1, [pc, #92]	; (800b34c <lwip_netconn_do_close_internal+0x2c0>)
 800b2ee:	6938      	ldr	r0, [r7, #16]
 800b2f0:	f005 f910 	bl	8010514 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b2f4:	4916      	ldr	r1, [pc, #88]	; (800b350 <lwip_netconn_do_close_internal+0x2c4>)
 800b2f6:	6938      	ldr	r0, [r7, #16]
 800b2f8:	f005 f8d2 	bl	80104a0 <tcp_err>
    tcp_arg(tpcb, conn);
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	6938      	ldr	r0, [r7, #16]
 800b300:	f005 f878 	bl	80103f4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <lwip_netconn_do_close_internal+0x28e>
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <lwip_netconn_do_close_internal+0x29c>)
 800b30e:	f240 424d 	movw	r2, #1101	; 0x44d
 800b312:	4910      	ldr	r1, [pc, #64]	; (800b354 <lwip_netconn_do_close_internal+0x2c8>)
 800b314:	4806      	ldr	r0, [pc, #24]	; (800b330 <lwip_netconn_do_close_internal+0x2a4>)
 800b316:	f00d fa27 	bl	8018768 <iprintf>
  return err;
 800b31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	08019f60 	.word	0x08019f60
 800b32c:	0801a234 	.word	0x0801a234
 800b330:	08019fa4 	.word	0x08019fa4
 800b334:	0801a244 	.word	0x0801a244
 800b338:	0801a264 	.word	0x0801a264
 800b33c:	0801a288 	.word	0x0801a288
 800b340:	0801a0c8 	.word	0x0801a0c8
 800b344:	0801a29c 	.word	0x0801a29c
 800b348:	0800aa7d 	.word	0x0800aa7d
 800b34c:	0800a9b5 	.word	0x0800a9b5
 800b350:	0800ab25 	.word	0x0800ab25
 800b354:	0801a2c0 	.word	0x0801a2c0

0800b358 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00d      	beq.n	800b38e <lwip_netconn_do_delconn+0x36>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b37c:	2b10      	cmp	r3, #16
 800b37e:	d006      	beq.n	800b38e <lwip_netconn_do_delconn+0x36>
 800b380:	4b60      	ldr	r3, [pc, #384]	; (800b504 <lwip_netconn_do_delconn+0x1ac>)
 800b382:	f240 425e 	movw	r2, #1118	; 0x45e
 800b386:	4960      	ldr	r1, [pc, #384]	; (800b508 <lwip_netconn_do_delconn+0x1b0>)
 800b388:	4860      	ldr	r0, [pc, #384]	; (800b50c <lwip_netconn_do_delconn+0x1b4>)
 800b38a:	f00d f9ed 	bl	8018768 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <lwip_netconn_do_delconn+0x48>
 800b394:	7afb      	ldrb	r3, [r7, #11]
 800b396:	2b02      	cmp	r3, #2
 800b398:	d002      	beq.n	800b3a0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b39a:	7afb      	ldrb	r3, [r7, #11]
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d109      	bne.n	800b3b4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d10a      	bne.n	800b3bc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	7f1b      	ldrb	r3, [r3, #28]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d103      	bne.n	800b3bc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	22fb      	movs	r2, #251	; 0xfb
 800b3b8:	711a      	strb	r2, [r3, #4]
 800b3ba:	e097      	b.n	800b4ec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d10d      	bne.n	800b3de <lwip_netconn_do_delconn+0x86>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	7f1b      	ldrb	r3, [r3, #28]
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d106      	bne.n	800b3de <lwip_netconn_do_delconn+0x86>
 800b3d0:	4b4c      	ldr	r3, [pc, #304]	; (800b504 <lwip_netconn_do_delconn+0x1ac>)
 800b3d2:	f240 427a 	movw	r2, #1146	; 0x47a
 800b3d6:	494e      	ldr	r1, [pc, #312]	; (800b510 <lwip_netconn_do_delconn+0x1b8>)
 800b3d8:	484c      	ldr	r0, [pc, #304]	; (800b50c <lwip_netconn_do_delconn+0x1b4>)
 800b3da:	f00d f9c5 	bl	8018768 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff fdd1 	bl	800af90 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d05f      	beq.n	800b4b8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b402:	2b10      	cmp	r3, #16
 800b404:	d00d      	beq.n	800b422 <lwip_netconn_do_delconn+0xca>
 800b406:	2b20      	cmp	r3, #32
 800b408:	d151      	bne.n	800b4ae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f00a fa56 	bl	80158cc <udp_remove>
          break;
 800b420:	e046      	b.n	800b4b0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d006      	beq.n	800b43a <lwip_netconn_do_delconn+0xe2>
 800b42c:	4b35      	ldr	r3, [pc, #212]	; (800b504 <lwip_netconn_do_delconn+0x1ac>)
 800b42e:	f240 4294 	movw	r2, #1172	; 0x494
 800b432:	4938      	ldr	r1, [pc, #224]	; (800b514 <lwip_netconn_do_delconn+0x1bc>)
 800b434:	4835      	ldr	r0, [pc, #212]	; (800b50c <lwip_netconn_do_delconn+0x1b4>)
 800b436:	f00d f997 	bl	8018768 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2204      	movs	r2, #4
 800b440:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2203      	movs	r2, #3
 800b446:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2100      	movs	r1, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff fe18 	bl	800b08c <lwip_netconn_do_close_internal>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d04b      	beq.n	800b4fa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	785b      	ldrb	r3, [r3, #1]
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d006      	beq.n	800b47a <lwip_netconn_do_delconn+0x122>
 800b46c:	4b25      	ldr	r3, [pc, #148]	; (800b504 <lwip_netconn_do_delconn+0x1ac>)
 800b46e:	f240 429a 	movw	r2, #1178	; 0x49a
 800b472:	4929      	ldr	r1, [pc, #164]	; (800b518 <lwip_netconn_do_delconn+0x1c0>)
 800b474:	4825      	ldr	r0, [pc, #148]	; (800b50c <lwip_netconn_do_delconn+0x1b4>)
 800b476:	f00d f977 	bl	8018768 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b47a:	4828      	ldr	r0, [pc, #160]	; (800b51c <lwip_netconn_do_delconn+0x1c4>)
 800b47c:	f00c ff0d 	bl	801829a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	330c      	adds	r3, #12
 800b486:	2100      	movs	r1, #0
 800b488:	4618      	mov	r0, r3
 800b48a:	f00c fe64 	bl	8018156 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b48e:	4823      	ldr	r0, [pc, #140]	; (800b51c <lwip_netconn_do_delconn+0x1c4>)
 800b490:	f00c fef4 	bl	801827c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	785b      	ldrb	r3, [r3, #1]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02d      	beq.n	800b4fa <lwip_netconn_do_delconn+0x1a2>
 800b49e:	4b19      	ldr	r3, [pc, #100]	; (800b504 <lwip_netconn_do_delconn+0x1ac>)
 800b4a0:	f240 429e 	movw	r2, #1182	; 0x49e
 800b4a4:	491c      	ldr	r1, [pc, #112]	; (800b518 <lwip_netconn_do_delconn+0x1c0>)
 800b4a6:	4819      	ldr	r0, [pc, #100]	; (800b50c <lwip_netconn_do_delconn+0x1b4>)
 800b4a8:	f00d f95e 	bl	8018768 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b4ac:	e025      	b.n	800b4fa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b4ae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d007      	beq.n	800b4d2 <lwip_netconn_do_delconn+0x17a>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	6810      	ldr	r0, [r2, #0]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <lwip_netconn_do_delconn+0x194>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	6810      	ldr	r0, [r2, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2102      	movs	r1, #2
 800b4ea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f00c fe7a 	bl	80181ec <sys_sem_valid>
 800b4f8:	e000      	b.n	800b4fc <lwip_netconn_do_delconn+0x1a4>
          return;
 800b4fa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	08019f60 	.word	0x08019f60
 800b508:	0801a2d0 	.word	0x0801a2d0
 800b50c:	08019fa4 	.word	0x08019fa4
 800b510:	0801a2e4 	.word	0x0801a2e4
 800b514:	0801a304 	.word	0x0801a304
 800b518:	0801a320 	.word	0x0801a320
 800b51c:	2000a438 	.word	0x2000a438

0800b520 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d025      	beq.n	800b582 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b540:	2b10      	cmp	r3, #16
 800b542:	d00e      	beq.n	800b562 <lwip_netconn_do_bind+0x42>
 800b544:	2b20      	cmp	r3, #32
 800b546:	d119      	bne.n	800b57c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6858      	ldr	r0, [r3, #4]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6899      	ldr	r1, [r3, #8]
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	899b      	ldrh	r3, [r3, #12]
 800b556:	461a      	mov	r2, r3
 800b558:	f00a f910 	bl	801577c <udp_bind>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]
        break;
 800b560:	e011      	b.n	800b586 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6858      	ldr	r0, [r3, #4]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	6899      	ldr	r1, [r3, #8]
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	899b      	ldrh	r3, [r3, #12]
 800b570:	461a      	mov	r2, r3
 800b572:	f003 ff87 	bl	800f484 <tcp_bind>
 800b576:	4603      	mov	r3, r0
 800b578:	73fb      	strb	r3, [r7, #15]
        break;
 800b57a:	e004      	b.n	800b586 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b57c:	23fa      	movs	r3, #250	; 0xfa
 800b57e:	73fb      	strb	r3, [r7, #15]
        break;
 800b580:	e001      	b.n	800b586 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b582:	23fa      	movs	r3, #250	; 0xfa
 800b584:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	7bfa      	ldrb	r2, [r7, #15]
 800b58a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b58c:	bf00      	nop
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7ff f875 	bl	800a694 <netconn_err>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d134      	bne.n	800b620 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d02d      	beq.n	800b61c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d123      	bne.n	800b616 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10c      	bne.n	800b5f2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	f009 fede 	bl	80153a8 <udp_send>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b5f0:	e016      	b.n	800b620 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6858      	ldr	r0, [r3, #4]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	6819      	ldr	r1, [r3, #0]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f103 0208 	add.w	r2, r3, #8
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	899b      	ldrh	r3, [r3, #12]
 800b60c:	f009 ff00 	bl	8015410 <udp_sendto>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
          break;
 800b614:	e004      	b.n	800b620 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b616:	23f5      	movs	r3, #245	; 0xf5
 800b618:	73fb      	strb	r3, [r7, #15]
          break;
 800b61a:	e001      	b.n	800b620 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b61c:	23f5      	movs	r3, #245	; 0xf5
 800b61e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	7bfa      	ldrb	r2, [r7, #15]
 800b624:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b086      	sub	sp, #24
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2200      	movs	r2, #0
 800b63e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d022      	beq.n	800b690 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b654:	2b10      	cmp	r3, #16
 800b656:	d11b      	bne.n	800b690 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b664:	d202      	bcs.n	800b66c <lwip_netconn_do_recv+0x3e>
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	b29b      	uxth	r3, r3
 800b66a:	e001      	b.n	800b670 <lwip_netconn_do_recv+0x42>
 800b66c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b670:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	89fa      	ldrh	r2, [r7, #14]
 800b67a:	4611      	mov	r1, r2
 800b67c:	4618      	mov	r0, r3
 800b67e:	f003 fff3 	bl	800f668 <tcp_recved>
        remaining -= recved;
 800b682:	89fb      	ldrh	r3, [r7, #14]
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e6      	bne.n	800b65e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b690:	bf00      	nop
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <lwip_netconn_do_writemore+0x24>
 800b6ae:	4b96      	ldr	r3, [pc, #600]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b6b0:	f240 6273 	movw	r2, #1651	; 0x673
 800b6b4:	4995      	ldr	r1, [pc, #596]	; (800b90c <lwip_netconn_do_writemore+0x274>)
 800b6b6:	4896      	ldr	r0, [pc, #600]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b6b8:	f00d f856 	bl	8018768 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d006      	beq.n	800b6d2 <lwip_netconn_do_writemore+0x3a>
 800b6c4:	4b90      	ldr	r3, [pc, #576]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b6c6:	f240 6274 	movw	r2, #1652	; 0x674
 800b6ca:	4992      	ldr	r1, [pc, #584]	; (800b914 <lwip_netconn_do_writemore+0x27c>)
 800b6cc:	4890      	ldr	r0, [pc, #576]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b6ce:	f00d f84b 	bl	8018768 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <lwip_netconn_do_writemore+0x50>
 800b6da:	4b8b      	ldr	r3, [pc, #556]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b6dc:	f240 6275 	movw	r2, #1653	; 0x675
 800b6e0:	498d      	ldr	r1, [pc, #564]	; (800b918 <lwip_netconn_do_writemore+0x280>)
 800b6e2:	488b      	ldr	r0, [pc, #556]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b6e4:	f00d f840 	bl	8018768 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <lwip_netconn_do_writemore+0x66>
 800b6f0:	4b85      	ldr	r3, [pc, #532]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b6f2:	f240 6276 	movw	r2, #1654	; 0x676
 800b6f6:	4989      	ldr	r1, [pc, #548]	; (800b91c <lwip_netconn_do_writemore+0x284>)
 800b6f8:	4885      	ldr	r0, [pc, #532]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b6fa:	f00d f835 	bl	8018768 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	699a      	ldr	r2, [r3, #24]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d306      	bcc.n	800b71c <lwip_netconn_do_writemore+0x84>
 800b70e:	4b7e      	ldr	r3, [pc, #504]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b710:	f240 6277 	movw	r2, #1655	; 0x677
 800b714:	4982      	ldr	r1, [pc, #520]	; (800b920 <lwip_netconn_do_writemore+0x288>)
 800b716:	487e      	ldr	r0, [pc, #504]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b718:	f00d f826 	bl	8018768 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a1b      	ldr	r3, [r3, #32]
 800b720:	899b      	ldrh	r3, [r3, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <lwip_netconn_do_writemore+0x9c>
 800b726:	4b78      	ldr	r3, [pc, #480]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b728:	f240 6279 	movw	r2, #1657	; 0x679
 800b72c:	497d      	ldr	r1, [pc, #500]	; (800b924 <lwip_netconn_do_writemore+0x28c>)
 800b72e:	4878      	ldr	r0, [pc, #480]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b730:	f00d f81a 	bl	8018768 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	7f1b      	ldrb	r3, [r3, #28]
 800b73a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	7f1b      	ldrb	r3, [r3, #28]
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	2b00      	cmp	r3, #0
 800b746:	d104      	bne.n	800b752 <lwip_netconn_do_writemore+0xba>
 800b748:	7ebb      	ldrb	r3, [r7, #26]
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <lwip_netconn_do_writemore+0xbe>
 800b752:	2301      	movs	r3, #1
 800b754:	e000      	b.n	800b758 <lwip_netconn_do_writemore+0xc0>
 800b756:	2300      	movs	r3, #0
 800b758:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	4413      	add	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a1b      	ldr	r3, [r3, #32]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b784:	d307      	bcc.n	800b796 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b78a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b78c:	7ebb      	ldrb	r3, [r7, #26]
 800b78e:	f043 0302 	orr.w	r3, r3, #2
 800b792:	76bb      	strb	r3, [r7, #26]
 800b794:	e001      	b.n	800b79a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b7a2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b7a4:	89fa      	ldrh	r2, [r7, #14]
 800b7a6:	8bbb      	ldrh	r3, [r7, #28]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d216      	bcs.n	800b7da <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b7ac:	89fb      	ldrh	r3, [r7, #14]
 800b7ae:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b7b0:	7e3b      	ldrb	r3, [r7, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00d      	beq.n	800b7d2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b7b6:	8bbb      	ldrh	r3, [r7, #28]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10e      	bne.n	800b7da <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <lwip_netconn_do_writemore+0x134>
 800b7c6:	f06f 0306 	mvn.w	r3, #6
 800b7ca:	e000      	b.n	800b7ce <lwip_netconn_do_writemore+0x136>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b7d0:	e07d      	b.n	800b8ce <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b7d2:	7ebb      	ldrb	r3, [r7, #26]
 800b7d4:	f043 0302 	orr.w	r3, r3, #2
 800b7d8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	691a      	ldr	r2, [r3, #16]
 800b7e0:	8bbb      	ldrh	r3, [r7, #28]
 800b7e2:	441a      	add	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d906      	bls.n	800b7fe <lwip_netconn_do_writemore+0x166>
 800b7f0:	4b45      	ldr	r3, [pc, #276]	; (800b908 <lwip_netconn_do_writemore+0x270>)
 800b7f2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b7f6:	494c      	ldr	r1, [pc, #304]	; (800b928 <lwip_netconn_do_writemore+0x290>)
 800b7f8:	4845      	ldr	r0, [pc, #276]	; (800b910 <lwip_netconn_do_writemore+0x278>)
 800b7fa:	f00c ffb5 	bl	8018768 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b7fe:	8bbb      	ldrh	r3, [r7, #28]
 800b800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b804:	4293      	cmp	r3, r2
 800b806:	d103      	bne.n	800b810 <lwip_netconn_do_writemore+0x178>
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b80e:	d209      	bcs.n	800b824 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b814:	8bba      	ldrh	r2, [r7, #28]
 800b816:	429a      	cmp	r2, r3
 800b818:	d10b      	bne.n	800b832 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	899b      	ldrh	r3, [r3, #12]
 800b820:	2b01      	cmp	r3, #1
 800b822:	d906      	bls.n	800b832 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b824:	2301      	movs	r3, #1
 800b826:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b828:	7ebb      	ldrb	r3, [r7, #26]
 800b82a:	f043 0302 	orr.w	r3, r3, #2
 800b82e:	76bb      	strb	r3, [r7, #26]
 800b830:	e001      	b.n	800b836 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6858      	ldr	r0, [r3, #4]
 800b83a:	7ebb      	ldrb	r3, [r7, #26]
 800b83c:	8bba      	ldrh	r2, [r7, #28]
 800b83e:	6979      	ldr	r1, [r7, #20]
 800b840:	f007 fd16 	bl	8013270 <tcp_write>
 800b844:	4603      	mov	r3, r0
 800b846:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b848:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d12c      	bne.n	800b8aa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	6999      	ldr	r1, [r3, #24]
 800b856:	8bba      	ldrh	r2, [r7, #28]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	440a      	add	r2, r1
 800b85e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	6919      	ldr	r1, [r3, #16]
 800b866:	8bba      	ldrh	r2, [r7, #28]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	440a      	add	r2, r1
 800b86e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	691a      	ldr	r2, [r3, #16]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d113      	bne.n	800b8aa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	899a      	ldrh	r2, [r3, #12]
 800b888:	3a01      	subs	r2, #1
 800b88a:	b292      	uxth	r2, r2
 800b88c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	899b      	ldrh	r3, [r3, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d008      	beq.n	800b8aa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	689a      	ldr	r2, [r3, #8]
 800b89e:	3208      	adds	r2, #8
 800b8a0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b8aa:	7e7b      	ldrb	r3, [r7, #25]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d004      	beq.n	800b8ba <lwip_netconn_do_writemore+0x222>
 800b8b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f43f af50 	beq.w	800b75a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b8ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <lwip_netconn_do_writemore+0x234>
 800b8c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ca:	d146      	bne.n	800b95a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b8cc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b8ce:	7e3b      	ldrb	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d02b      	beq.n	800b92c <lwip_netconn_do_writemore+0x294>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	699a      	ldr	r2, [r3, #24]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d223      	bcs.n	800b92c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d005      	beq.n	800b8f8 <lwip_netconn_do_writemore+0x260>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2103      	movs	r1, #3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	7f1b      	ldrb	r3, [r3, #28]
 800b8fc:	f043 0310 	orr.w	r3, r3, #16
 800b900:	b2da      	uxtb	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	771a      	strb	r2, [r3, #28]
 800b906:	e028      	b.n	800b95a <lwip_netconn_do_writemore+0x2c2>
 800b908:	08019f60 	.word	0x08019f60
 800b90c:	0801a0b8 	.word	0x0801a0b8
 800b910:	08019fa4 	.word	0x08019fa4
 800b914:	0801a3c0 	.word	0x0801a3c0
 800b918:	0801a0c8 	.word	0x0801a0c8
 800b91c:	0801a3e0 	.word	0x0801a3e0
 800b920:	0801a3f8 	.word	0x0801a3f8
 800b924:	0801a438 	.word	0x0801a438
 800b928:	0801a460 	.word	0x0801a460
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b934:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b938:	d305      	bcc.n	800b946 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b942:	2b04      	cmp	r3, #4
 800b944:	d909      	bls.n	800b95a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <lwip_netconn_do_writemore+0x2c2>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b952:	2200      	movs	r2, #0
 800b954:	2103      	movs	r1, #3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b95a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d11d      	bne.n	800b99e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	699a      	ldr	r2, [r3, #24]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d002      	beq.n	800b978 <lwip_netconn_do_writemore+0x2e0>
 800b972:	7e3b      	ldrb	r3, [r7, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b978:	2301      	movs	r3, #1
 800b97a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4618      	mov	r0, r3
 800b982:	f008 fa5f 	bl	8013e44 <tcp_output>
 800b986:	4603      	mov	r3, r0
 800b988:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b98a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b98e:	f113 0f04 	cmn.w	r3, #4
 800b992:	d12c      	bne.n	800b9ee <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b994:	7b3b      	ldrb	r3, [r7, #12]
 800b996:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b998:	2301      	movs	r3, #1
 800b99a:	76fb      	strb	r3, [r7, #27]
 800b99c:	e027      	b.n	800b9ee <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b99e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d120      	bne.n	800b9ea <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f008 fa49 	bl	8013e44 <tcp_output>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b9b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b9ba:	f113 0f04 	cmn.w	r3, #4
 800b9be:	d104      	bne.n	800b9ca <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b9c0:	7b7b      	ldrb	r3, [r7, #13]
 800b9c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	76fb      	strb	r3, [r7, #27]
 800b9c8:	e011      	b.n	800b9ee <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b9ca:	7e3b      	ldrb	r3, [r7, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00e      	beq.n	800b9ee <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d102      	bne.n	800b9e0 <lwip_netconn_do_writemore+0x348>
 800b9da:	f06f 0306 	mvn.w	r3, #6
 800b9de:	e000      	b.n	800b9e2 <lwip_netconn_do_writemore+0x34a>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	76fb      	strb	r3, [r7, #27]
 800b9e8:	e001      	b.n	800b9ee <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b9ee:	7efb      	ldrb	r3, [r7, #27]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d015      	beq.n	800ba20 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	330c      	adds	r3, #12
 800b9fc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	7ffa      	ldrb	r2, [r7, #31]
 800ba04:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ba12:	78fb      	ldrb	r3, [r7, #3]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d006      	beq.n	800ba26 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ba18:	68b8      	ldr	r0, [r7, #8]
 800ba1a:	f00c fbcd 	bl	80181b8 <sys_sem_signal>
 800ba1e:	e002      	b.n	800ba26 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ba20:	f04f 33ff 	mov.w	r3, #4294967295
 800ba24:	e000      	b.n	800ba28 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3720      	adds	r7, #32
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fe27 	bl	800a694 <netconn_err>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ba4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d166      	bne.n	800bb20 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba5c:	2b10      	cmp	r3, #16
 800ba5e:	d15d      	bne.n	800bb1c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d002      	beq.n	800ba70 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ba6a:	23fb      	movs	r3, #251	; 0xfb
 800ba6c:	73fb      	strb	r3, [r7, #15]
 800ba6e:	e057      	b.n	800bb20 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d04d      	beq.n	800bb16 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6a1b      	ldr	r3, [r3, #32]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d006      	beq.n	800ba9a <lwip_netconn_do_write+0x6a>
 800ba8c:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <lwip_netconn_do_write+0x100>)
 800ba8e:	f240 7223 	movw	r2, #1827	; 0x723
 800ba92:	4928      	ldr	r1, [pc, #160]	; (800bb34 <lwip_netconn_do_write+0x104>)
 800ba94:	4828      	ldr	r0, [pc, #160]	; (800bb38 <lwip_netconn_do_write+0x108>)
 800ba96:	f00c fe67 	bl	8018768 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d106      	bne.n	800bab0 <lwip_netconn_do_write+0x80>
 800baa2:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <lwip_netconn_do_write+0x100>)
 800baa4:	f240 7224 	movw	r2, #1828	; 0x724
 800baa8:	4924      	ldr	r1, [pc, #144]	; (800bb3c <lwip_netconn_do_write+0x10c>)
 800baaa:	4823      	ldr	r0, [pc, #140]	; (800bb38 <lwip_netconn_do_write+0x108>)
 800baac:	f00c fe5c 	bl	8018768 <iprintf>
        msg->conn->current_msg = msg;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff fdea 	bl	800b698 <lwip_netconn_do_writemore>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d02e      	beq.n	800bb28 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	785b      	ldrb	r3, [r3, #1]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d006      	beq.n	800bae2 <lwip_netconn_do_write+0xb2>
 800bad4:	4b16      	ldr	r3, [pc, #88]	; (800bb30 <lwip_netconn_do_write+0x100>)
 800bad6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800bada:	4919      	ldr	r1, [pc, #100]	; (800bb40 <lwip_netconn_do_write+0x110>)
 800badc:	4816      	ldr	r0, [pc, #88]	; (800bb38 <lwip_netconn_do_write+0x108>)
 800bade:	f00c fe43 	bl	8018768 <iprintf>
          UNLOCK_TCPIP_CORE();
 800bae2:	4818      	ldr	r0, [pc, #96]	; (800bb44 <lwip_netconn_do_write+0x114>)
 800bae4:	f00c fbd9 	bl	801829a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f00c fb30 	bl	8018156 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800baf6:	4813      	ldr	r0, [pc, #76]	; (800bb44 <lwip_netconn_do_write+0x114>)
 800baf8:	f00c fbc0 	bl	801827c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d110      	bne.n	800bb28 <lwip_netconn_do_write+0xf8>
 800bb06:	4b0a      	ldr	r3, [pc, #40]	; (800bb30 <lwip_netconn_do_write+0x100>)
 800bb08:	f240 722c 	movw	r2, #1836	; 0x72c
 800bb0c:	490c      	ldr	r1, [pc, #48]	; (800bb40 <lwip_netconn_do_write+0x110>)
 800bb0e:	480a      	ldr	r0, [pc, #40]	; (800bb38 <lwip_netconn_do_write+0x108>)
 800bb10:	f00c fe2a 	bl	8018768 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800bb14:	e008      	b.n	800bb28 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800bb16:	23f5      	movs	r3, #245	; 0xf5
 800bb18:	73fb      	strb	r3, [r7, #15]
 800bb1a:	e001      	b.n	800bb20 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800bb1c:	23fa      	movs	r3, #250	; 0xfa
 800bb1e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	7bfa      	ldrb	r2, [r7, #15]
 800bb24:	711a      	strb	r2, [r3, #4]
 800bb26:	e000      	b.n	800bb2a <lwip_netconn_do_write+0xfa>
        return;
 800bb28:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	08019f60 	.word	0x08019f60
 800bb34:	0801a304 	.word	0x0801a304
 800bb38:	08019fa4 	.word	0x08019fa4
 800bb3c:	0801a48c 	.word	0x0801a48c
 800bb40:	0801a320 	.word	0x0801a320
 800bb44:	2000a438 	.word	0x2000a438

0800bb48 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d06b      	beq.n	800bc36 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	7c1b      	ldrb	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	6812      	ldr	r2, [r2, #0]
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	e006      	b.n	800bb84 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	6852      	ldr	r2, [r2, #4]
 800bb82:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb94:	2b10      	cmp	r3, #16
 800bb96:	d021      	beq.n	800bbdc <lwip_netconn_do_getaddr+0x94>
 800bb98:	2b20      	cmp	r3, #32
 800bb9a:	d144      	bne.n	800bc26 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	7c1b      	ldrb	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d007      	beq.n	800bbb4 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	8a52      	ldrh	r2, [r2, #18]
 800bbb0:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800bbb2:	e044      	b.n	800bc3e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	7c1b      	ldrb	r3, [r3, #16]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d103      	bne.n	800bbcc <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	22f5      	movs	r2, #245	; 0xf5
 800bbc8:	711a      	strb	r2, [r3, #4]
        break;
 800bbca:	e038      	b.n	800bc3e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	8a92      	ldrh	r2, [r2, #20]
 800bbd8:	801a      	strh	r2, [r3, #0]
        break;
 800bbda:	e030      	b.n	800bc3e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	7c1b      	ldrb	r3, [r3, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10f      	bne.n	800bc04 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	7d1b      	ldrb	r3, [r3, #20]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d103      	bne.n	800bc04 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	22f5      	movs	r2, #245	; 0xf5
 800bc00:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800bc02:	e01c      	b.n	800bc3e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	7c1b      	ldrb	r3, [r3, #16]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d004      	beq.n	800bc16 <lwip_netconn_do_getaddr+0xce>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	8adb      	ldrh	r3, [r3, #22]
 800bc14:	e003      	b.n	800bc1e <lwip_netconn_do_getaddr+0xd6>
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	8b1b      	ldrh	r3, [r3, #24]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	68d2      	ldr	r2, [r2, #12]
 800bc22:	8013      	strh	r3, [r2, #0]
        break;
 800bc24:	e00b      	b.n	800bc3e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800bc26:	4b08      	ldr	r3, [pc, #32]	; (800bc48 <lwip_netconn_do_getaddr+0x100>)
 800bc28:	f240 727d 	movw	r2, #1917	; 0x77d
 800bc2c:	4907      	ldr	r1, [pc, #28]	; (800bc4c <lwip_netconn_do_getaddr+0x104>)
 800bc2e:	4808      	ldr	r0, [pc, #32]	; (800bc50 <lwip_netconn_do_getaddr+0x108>)
 800bc30:	f00c fd9a 	bl	8018768 <iprintf>
        break;
 800bc34:	e003      	b.n	800bc3e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	22f5      	movs	r2, #245	; 0xf5
 800bc3a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	08019f60 	.word	0x08019f60
 800bc4c:	0801a4a0 	.word	0x0801a4a0
 800bc50:	08019fa4 	.word	0x08019fa4

0800bc54 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	785b      	ldrb	r3, [r3, #1]
 800bc66:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d069      	beq.n	800bd46 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d162      	bne.n	800bd46 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d002      	beq.n	800bc8e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bc88:	7afb      	ldrb	r3, [r7, #11]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d05b      	beq.n	800bd46 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bc8e:	7afb      	ldrb	r3, [r7, #11]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d103      	bne.n	800bc9c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	22f5      	movs	r2, #245	; 0xf5
 800bc98:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bc9a:	e059      	b.n	800bd50 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d103      	bne.n	800bcaa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	22fb      	movs	r2, #251	; 0xfb
 800bca6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bca8:	e052      	b.n	800bd50 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	7a1b      	ldrb	r3, [r3, #8]
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d004      	beq.n	800bcc0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff f968 	bl	800af90 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6a1b      	ldr	r3, [r3, #32]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d006      	beq.n	800bcd8 <lwip_netconn_do_close+0x84>
 800bcca:	4b23      	ldr	r3, [pc, #140]	; (800bd58 <lwip_netconn_do_close+0x104>)
 800bccc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800bcd0:	4922      	ldr	r1, [pc, #136]	; (800bd5c <lwip_netconn_do_close+0x108>)
 800bcd2:	4823      	ldr	r0, [pc, #140]	; (800bd60 <lwip_netconn_do_close+0x10c>)
 800bcd4:	f00c fd48 	bl	8018768 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2204      	movs	r2, #4
 800bcde:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2100      	movs	r1, #0
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff f9cc 	bl	800b08c <lwip_netconn_do_close_internal>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d029      	beq.n	800bd4e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d006      	beq.n	800bd12 <lwip_netconn_do_close+0xbe>
 800bd04:	4b14      	ldr	r3, [pc, #80]	; (800bd58 <lwip_netconn_do_close+0x104>)
 800bd06:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800bd0a:	4916      	ldr	r1, [pc, #88]	; (800bd64 <lwip_netconn_do_close+0x110>)
 800bd0c:	4814      	ldr	r0, [pc, #80]	; (800bd60 <lwip_netconn_do_close+0x10c>)
 800bd0e:	f00c fd2b 	bl	8018768 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bd12:	4815      	ldr	r0, [pc, #84]	; (800bd68 <lwip_netconn_do_close+0x114>)
 800bd14:	f00c fac1 	bl	801829a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	2100      	movs	r1, #0
 800bd20:	4618      	mov	r0, r3
 800bd22:	f00c fa18 	bl	8018156 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bd26:	4810      	ldr	r0, [pc, #64]	; (800bd68 <lwip_netconn_do_close+0x114>)
 800bd28:	f00c faa8 	bl	801827c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	785b      	ldrb	r3, [r3, #1]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00b      	beq.n	800bd4e <lwip_netconn_do_close+0xfa>
 800bd36:	4b08      	ldr	r3, [pc, #32]	; (800bd58 <lwip_netconn_do_close+0x104>)
 800bd38:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800bd3c:	4909      	ldr	r1, [pc, #36]	; (800bd64 <lwip_netconn_do_close+0x110>)
 800bd3e:	4808      	ldr	r0, [pc, #32]	; (800bd60 <lwip_netconn_do_close+0x10c>)
 800bd40:	f00c fd12 	bl	8018768 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bd44:	e003      	b.n	800bd4e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	22f5      	movs	r2, #245	; 0xf5
 800bd4a:	711a      	strb	r2, [r3, #4]
 800bd4c:	e000      	b.n	800bd50 <lwip_netconn_do_close+0xfc>
      return;
 800bd4e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	08019f60 	.word	0x08019f60
 800bd5c:	0801a304 	.word	0x0801a304
 800bd60:	08019fa4 	.word	0x08019fa4
 800bd64:	0801a320 	.word	0x0801a320
 800bd68:	2000a438 	.word	0x2000a438

0800bd6c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800bd76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dc04      	bgt.n	800bd88 <err_to_errno+0x1c>
 800bd7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd82:	f113 0f10 	cmn.w	r3, #16
 800bd86:	da01      	bge.n	800bd8c <err_to_errno+0x20>
    return EIO;
 800bd88:	2305      	movs	r3, #5
 800bd8a:	e005      	b.n	800bd98 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800bd8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd90:	425b      	negs	r3, r3
 800bd92:	4a04      	ldr	r2, [pc, #16]	; (800bda4 <err_to_errno+0x38>)
 800bd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	0801d4c4 	.word	0x0801d4c4

0800bda8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d013      	beq.n	800bdde <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f002 fd52 	bl	800e86c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	605a      	str	r2, [r3, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685a      	ldr	r2, [r3, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	2006      	movs	r0, #6
 800bdda:	f001 fe71 	bl	800dac0 <memp_free>
  }
}
 800bdde:	bf00      	nop
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
	...

0800bde8 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <netbuf_free+0x1c>
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <netbuf_free+0x44>)
 800bdf8:	2281      	movs	r2, #129	; 0x81
 800bdfa:	490d      	ldr	r1, [pc, #52]	; (800be30 <netbuf_free+0x48>)
 800bdfc:	480d      	ldr	r0, [pc, #52]	; (800be34 <netbuf_free+0x4c>)
 800bdfe:	f00c fcb3 	bl	8018768 <iprintf>
 800be02:	e00f      	b.n	800be24 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d004      	beq.n	800be16 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4618      	mov	r0, r3
 800be12:	f002 fd2b 	bl	800e86c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	605a      	str	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	0801a4b8 	.word	0x0801a4b8
 800be30:	0801a554 	.word	0x0801a554
 800be34:	0801a508 	.word	0x0801a508

0800be38 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	4613      	mov	r3, r2
 800be44:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d108      	bne.n	800be5e <netbuf_ref+0x26>
 800be4c:	4b1c      	ldr	r3, [pc, #112]	; (800bec0 <netbuf_ref+0x88>)
 800be4e:	2299      	movs	r2, #153	; 0x99
 800be50:	491c      	ldr	r1, [pc, #112]	; (800bec4 <netbuf_ref+0x8c>)
 800be52:	481d      	ldr	r0, [pc, #116]	; (800bec8 <netbuf_ref+0x90>)
 800be54:	f00c fc88 	bl	8018768 <iprintf>
 800be58:	f06f 030f 	mvn.w	r3, #15
 800be5c:	e02b      	b.n	800beb6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f002 fcfe 	bl	800e86c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800be70:	2241      	movs	r2, #65	; 0x41
 800be72:	2100      	movs	r1, #0
 800be74:	2036      	movs	r0, #54	; 0x36
 800be76:	f002 f9e3 	bl	800e240 <pbuf_alloc>
 800be7a:	4602      	mov	r2, r0
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800be8e:	f04f 33ff 	mov.w	r3, #4294967295
 800be92:	e010      	b.n	800beb6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	88fa      	ldrh	r2, [r7, #6]
 800bea2:	811a      	strh	r2, [r3, #8]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	6812      	ldr	r2, [r2, #0]
 800bea8:	891b      	ldrh	r3, [r3, #8]
 800beaa:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0801a4b8 	.word	0x0801a4b8
 800bec4:	0801a570 	.word	0x0801a570
 800bec8:	0801a508 	.word	0x0801a508

0800becc <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	db02      	blt.n	800bee4 <tryget_socket_unconn_nouse+0x18>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	dd01      	ble.n	800bee8 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800bee4:	2300      	movs	r3, #0
 800bee6:	e003      	b.n	800bef0 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	4a03      	ldr	r2, [pc, #12]	; (800befc <tryget_socket_unconn_nouse+0x30>)
 800beee:	4413      	add	r3, r2
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	200042b4 	.word	0x200042b4

0800bf00 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff ffdf 	bl	800becc <tryget_socket_unconn_nouse>
 800bf0e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800bf10:	68fb      	ldr	r3, [r7, #12]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff ffec 	bl	800bf00 <tryget_socket_unconn>
 800bf28:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <tryget_socket+0x22>
    if (sock->conn) {
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <tryget_socket+0x22>
      return sock;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	e000      	b.n	800bf3e <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff ffe2 	bl	800bf1a <tryget_socket>
 800bf56:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d104      	bne.n	800bf68 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800bf5e:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <get_socket+0x2c>)
 800bf60:	2209      	movs	r2, #9
 800bf62:	601a      	str	r2, [r3, #0]
    return NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	e000      	b.n	800bf6a <get_socket+0x22>
  }
  return sock;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	2000db6c 	.word	0x2000db6c

0800bf78 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800bf82:	2300      	movs	r3, #0
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	e052      	b.n	800c02e <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800bf88:	f00c f9ba 	bl	8018300 <sys_arch_protect>
 800bf8c:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800bf8e:	4a2c      	ldr	r2, [pc, #176]	; (800c040 <alloc_socket+0xc8>)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	011b      	lsls	r3, r3, #4
 800bf94:	4413      	add	r3, r2
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d142      	bne.n	800c022 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800bf9c:	4a28      	ldr	r2, [pc, #160]	; (800c040 <alloc_socket+0xc8>)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	4413      	add	r3, r2
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800bfa8:	68b8      	ldr	r0, [r7, #8]
 800bfaa:	f00c f9b7 	bl	801831c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800bfae:	4a24      	ldr	r2, [pc, #144]	; (800c040 <alloc_socket+0xc8>)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800bfbc:	4a20      	ldr	r2, [pc, #128]	; (800c040 <alloc_socket+0xc8>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	4413      	add	r3, r2
 800bfc4:	330e      	adds	r3, #14
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d006      	beq.n	800bfda <alloc_socket+0x62>
 800bfcc:	4b1d      	ldr	r3, [pc, #116]	; (800c044 <alloc_socket+0xcc>)
 800bfce:	f240 220e 	movw	r2, #526	; 0x20e
 800bfd2:	491d      	ldr	r1, [pc, #116]	; (800c048 <alloc_socket+0xd0>)
 800bfd4:	481d      	ldr	r0, [pc, #116]	; (800c04c <alloc_socket+0xd4>)
 800bfd6:	f00c fbc7 	bl	8018768 <iprintf>
      sockets[i].rcvevent   = 0;
 800bfda:	4a19      	ldr	r2, [pc, #100]	; (800c040 <alloc_socket+0xc8>)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	4413      	add	r3, r2
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff0:	2b10      	cmp	r3, #16
 800bff2:	d102      	bne.n	800bffa <alloc_socket+0x82>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <alloc_socket+0x86>
 800bffa:	2301      	movs	r3, #1
 800bffc:	e000      	b.n	800c000 <alloc_socket+0x88>
 800bffe:	2300      	movs	r3, #0
 800c000:	b299      	uxth	r1, r3
 800c002:	4a0f      	ldr	r2, [pc, #60]	; (800c040 <alloc_socket+0xc8>)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	011b      	lsls	r3, r3, #4
 800c008:	4413      	add	r3, r2
 800c00a:	330a      	adds	r3, #10
 800c00c:	460a      	mov	r2, r1
 800c00e:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800c010:	4a0b      	ldr	r2, [pc, #44]	; (800c040 <alloc_socket+0xc8>)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	4413      	add	r3, r2
 800c018:	330c      	adds	r3, #12
 800c01a:	2200      	movs	r2, #0
 800c01c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	e00a      	b.n	800c038 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800c022:	68b8      	ldr	r0, [r7, #8]
 800c024:	f00c f97a 	bl	801831c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3301      	adds	r3, #1
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b03      	cmp	r3, #3
 800c032:	dda9      	ble.n	800bf88 <alloc_socket+0x10>
  }
  return -1;
 800c034:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	200042b4 	.word	0x200042b4
 800c044:	0801a650 	.word	0x0801a650
 800c048:	0801a684 	.word	0x0801a684
 800c04c:	0801a6a4 	.word	0x0801a6a4

0800c050 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08a      	sub	sp, #40	; 0x28
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f7ff ff73 	bl	800bf48 <get_socket>
 800c062:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	d102      	bne.n	800c070 <lwip_bind+0x20>
    return -1;
 800c06a:	f04f 33ff 	mov.w	r3, #4294967295
 800c06e:	e051      	b.n	800c114 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b10      	cmp	r3, #16
 800c074:	d108      	bne.n	800c088 <lwip_bind+0x38>
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	785b      	ldrb	r3, [r3, #1]
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d104      	bne.n	800c088 <lwip_bind+0x38>
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f003 0303 	and.w	r3, r3, #3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d014      	beq.n	800c0b2 <lwip_bind+0x62>
 800c088:	4b24      	ldr	r3, [pc, #144]	; (800c11c <lwip_bind+0xcc>)
 800c08a:	f240 22e2 	movw	r2, #738	; 0x2e2
 800c08e:	4924      	ldr	r1, [pc, #144]	; (800c120 <lwip_bind+0xd0>)
 800c090:	4824      	ldr	r0, [pc, #144]	; (800c124 <lwip_bind+0xd4>)
 800c092:	f00c fb69 	bl	8018768 <iprintf>
 800c096:	f06f 000f 	mvn.w	r0, #15
 800c09a:	f7ff fe67 	bl	800bd6c <err_to_errno>
 800c09e:	6178      	str	r0, [r7, #20]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <lwip_bind+0x5c>
 800c0a6:	4a20      	ldr	r2, [pc, #128]	; (800c128 <lwip_bind+0xd8>)
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b0:	e030      	b.n	800c114 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	613b      	str	r3, [r7, #16]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	885b      	ldrh	r3, [r3, #2]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 fff7 	bl	800d0b0 <lwip_htons>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0cc:	f107 0110 	add.w	r1, r7, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fd ff75 	bl	8009fc0 <netconn_bind>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800c0dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00e      	beq.n	800c102 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c0e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7ff fe3f 	bl	800bd6c <err_to_errno>
 800c0ee:	61b8      	str	r0, [r7, #24]
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <lwip_bind+0xac>
 800c0f6:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <lwip_bind+0xd8>)
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c100:	e008      	b.n	800c114 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c102:	2300      	movs	r3, #0
 800c104:	61fb      	str	r3, [r7, #28]
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d002      	beq.n	800c112 <lwip_bind+0xc2>
 800c10c:	4a06      	ldr	r2, [pc, #24]	; (800c128 <lwip_bind+0xd8>)
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3728      	adds	r7, #40	; 0x28
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0801a650 	.word	0x0801a650
 800c120:	0801a6f4 	.word	0x0801a6f4
 800c124:	0801a6a4 	.word	0x0801a6a4
 800c128:	2000db6c 	.word	0x2000db6c

0800c12c <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08c      	sub	sp, #48	; 0x30
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c13a:	2308      	movs	r3, #8
 800c13c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	db01      	blt.n	800c14e <lwip_recv_tcp+0x22>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	e001      	b.n	800c152 <lwip_recv_tcp+0x26>
 800c14e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c152:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <lwip_recv_tcp+0x3c>
 800c15a:	4b74      	ldr	r3, [pc, #464]	; (800c32c <lwip_recv_tcp+0x200>)
 800c15c:	f240 329e 	movw	r2, #926	; 0x39e
 800c160:	4973      	ldr	r1, [pc, #460]	; (800c330 <lwip_recv_tcp+0x204>)
 800c162:	4874      	ldr	r0, [pc, #464]	; (800c334 <lwip_recv_tcp+0x208>)
 800c164:	f00c fb00 	bl	8018768 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c172:	2b10      	cmp	r3, #16
 800c174:	d006      	beq.n	800c184 <lwip_recv_tcp+0x58>
 800c176:	4b6d      	ldr	r3, [pc, #436]	; (800c32c <lwip_recv_tcp+0x200>)
 800c178:	f240 329f 	movw	r2, #927	; 0x39f
 800c17c:	496e      	ldr	r1, [pc, #440]	; (800c338 <lwip_recv_tcp+0x20c>)
 800c17e:	486d      	ldr	r0, [pc, #436]	; (800c334 <lwip_recv_tcp+0x208>)
 800c180:	f00c faf2 	bl	8018768 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	f003 0308 	and.w	r3, r3, #8
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d005      	beq.n	800c19a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c192:	f043 0304 	orr.w	r3, r3, #4
 800c196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d003      	beq.n	800c1aa <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	617b      	str	r3, [r7, #20]
 800c1a8:	e036      	b.n	800c218 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c1b2:	f107 0114 	add.w	r1, r7, #20
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe f8e4 	bl	800a384 <netconn_recv_tcp_pbuf_flags>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c1c2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d019      	beq.n	800c1fe <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f300 808d 	bgt.w	800c2ec <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c1d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff fdc8 	bl	800bd6c <err_to_errno>
 800c1dc:	61f8      	str	r0, [r7, #28]
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <lwip_recv_tcp+0xbe>
 800c1e4:	4a55      	ldr	r2, [pc, #340]	; (800c33c <lwip_recv_tcp+0x210>)
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c1ea:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c1ee:	f113 0f0f 	cmn.w	r3, #15
 800c1f2:	d101      	bne.n	800c1f8 <lwip_recv_tcp+0xcc>
          return 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	e094      	b.n	800c322 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1fc:	e091      	b.n	800c322 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <lwip_recv_tcp+0xe6>
 800c204:	4b49      	ldr	r3, [pc, #292]	; (800c32c <lwip_recv_tcp+0x200>)
 800c206:	f240 32c5 	movw	r2, #965	; 0x3c5
 800c20a:	494d      	ldr	r1, [pc, #308]	; (800c340 <lwip_recv_tcp+0x214>)
 800c20c:	4849      	ldr	r0, [pc, #292]	; (800c334 <lwip_recv_tcp+0x208>)
 800c20e:	f00c faab 	bl	8018768 <iprintf>
      sock->lastdata.pbuf = p;
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	891b      	ldrh	r3, [r3, #8]
 800c21c:	461a      	mov	r2, r3
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	4293      	cmp	r3, r2
 800c222:	dd03      	ble.n	800c22c <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	891b      	ldrh	r3, [r3, #8]
 800c228:	847b      	strh	r3, [r7, #34]	; 0x22
 800c22a:	e001      	b.n	800c230 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800c230:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c234:	4413      	add	r3, r2
 800c236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c238:	429a      	cmp	r2, r3
 800c23a:	dd03      	ble.n	800c244 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	b29b      	uxth	r3, r3
 800c240:	43db      	mvns	r3, r3
 800c242:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c244:	6978      	ldr	r0, [r7, #20]
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	18d1      	adds	r1, r2, r3
 800c24c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c24e:	2300      	movs	r3, #0
 800c250:	f002 fd12 	bl	800ec78 <pbuf_copy_partial>

    recvd += copylen;
 800c254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c258:	4413      	add	r3, r2
 800c25a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c260:	429a      	cmp	r2, r3
 800c262:	da06      	bge.n	800c272 <lwip_recv_tcp+0x146>
 800c264:	4b31      	ldr	r3, [pc, #196]	; (800c32c <lwip_recv_tcp+0x200>)
 800c266:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c26a:	4936      	ldr	r1, [pc, #216]	; (800c344 <lwip_recv_tcp+0x218>)
 800c26c:	4831      	ldr	r0, [pc, #196]	; (800c334 <lwip_recv_tcp+0x208>)
 800c26e:	f00c fa7b 	bl	8018768 <iprintf>
    recv_left -= copylen;
 800c272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	f003 0301 	and.w	r3, r3, #1
 800c280:	2b00      	cmp	r3, #0
 800c282:	d123      	bne.n	800c2cc <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	891b      	ldrh	r3, [r3, #8]
 800c288:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d906      	bls.n	800c29c <lwip_recv_tcp+0x170>
 800c28e:	4b27      	ldr	r3, [pc, #156]	; (800c32c <lwip_recv_tcp+0x200>)
 800c290:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c294:	492c      	ldr	r1, [pc, #176]	; (800c348 <lwip_recv_tcp+0x21c>)
 800c296:	4827      	ldr	r0, [pc, #156]	; (800c334 <lwip_recv_tcp+0x208>)
 800c298:	f00c fa66 	bl	8018768 <iprintf>
      if (p->tot_len - copylen > 0) {
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	891b      	ldrh	r3, [r3, #8]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	dd09      	ble.n	800c2be <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f002 faa8 	bl	800e806 <pbuf_free_header>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	605a      	str	r2, [r3, #4]
 800c2bc:	e006      	b.n	800c2cc <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f002 fad0 	bl	800e86c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c2cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2d0:	f043 0314 	orr.w	r3, r3, #20
 800c2d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dd08      	ble.n	800c2f0 <lwip_recv_tcp+0x1c4>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f43f af58 	beq.w	800c19a <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c2ea:	e001      	b.n	800c2f0 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c2ec:	bf00      	nop
 800c2ee:	e000      	b.n	800c2f2 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c2f0:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dd0b      	ble.n	800c310 <lwip_recv_tcp+0x1e4>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d106      	bne.n	800c310 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fd ff88 	bl	800a220 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c310:	2300      	movs	r3, #0
 800c312:	61bb      	str	r3, [r7, #24]
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <lwip_recv_tcp+0x1f4>
 800c31a:	4a08      	ldr	r2, [pc, #32]	; (800c33c <lwip_recv_tcp+0x210>)
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	6013      	str	r3, [r2, #0]
  return recvd;
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c322:	4618      	mov	r0, r3
 800c324:	3730      	adds	r7, #48	; 0x30
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	0801a650 	.word	0x0801a650
 800c330:	0801a748 	.word	0x0801a748
 800c334:	0801a6a4 	.word	0x0801a6a4
 800c338:	0801a758 	.word	0x0801a758
 800c33c:	2000db6c 	.word	0x2000db6c
 800c340:	0801a77c 	.word	0x0801a77c
 800c344:	0801a788 	.word	0x0801a788
 800c348:	0801a7b0 	.word	0x0801a7b0

0800c34c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c34c:	b590      	push	{r4, r7, lr}
 800c34e:	b08b      	sub	sp, #44	; 0x2c
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	603b      	str	r3, [r7, #0]
 800c358:	4613      	mov	r3, r2
 800c35a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <lwip_sock_make_addr+0x28>
 800c366:	4b2b      	ldr	r3, [pc, #172]	; (800c414 <lwip_sock_make_addr+0xc8>)
 800c368:	f240 4207 	movw	r2, #1031	; 0x407
 800c36c:	492a      	ldr	r1, [pc, #168]	; (800c418 <lwip_sock_make_addr+0xcc>)
 800c36e:	482b      	ldr	r0, [pc, #172]	; (800c41c <lwip_sock_make_addr+0xd0>)
 800c370:	f00c f9fa 	bl	8018768 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d106      	bne.n	800c388 <lwip_sock_make_addr+0x3c>
 800c37a:	4b26      	ldr	r3, [pc, #152]	; (800c414 <lwip_sock_make_addr+0xc8>)
 800c37c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c380:	4927      	ldr	r1, [pc, #156]	; (800c420 <lwip_sock_make_addr+0xd4>)
 800c382:	4826      	ldr	r0, [pc, #152]	; (800c41c <lwip_sock_make_addr+0xd0>)
 800c384:	f00c f9f0 	bl	8018768 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <lwip_sock_make_addr+0x50>
 800c38e:	4b21      	ldr	r3, [pc, #132]	; (800c414 <lwip_sock_make_addr+0xc8>)
 800c390:	f240 4209 	movw	r2, #1033	; 0x409
 800c394:	4923      	ldr	r1, [pc, #140]	; (800c424 <lwip_sock_make_addr+0xd8>)
 800c396:	4821      	ldr	r0, [pc, #132]	; (800c41c <lwip_sock_make_addr+0xd0>)
 800c398:	f00c f9e6 	bl	8018768 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c39c:	f107 0314 	add.w	r3, r7, #20
 800c3a0:	2210      	movs	r2, #16
 800c3a2:	701a      	strb	r2, [r3, #0]
 800c3a4:	f107 0314 	add.w	r3, r7, #20
 800c3a8:	2202      	movs	r2, #2
 800c3aa:	705a      	strb	r2, [r3, #1]
 800c3ac:	f107 0414 	add.w	r4, r7, #20
 800c3b0:	88fb      	ldrh	r3, [r7, #6]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 fe7c 	bl	800d0b0 <lwip_htons>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	8063      	strh	r3, [r4, #2]
 800c3bc:	f107 0314 	add.w	r3, r7, #20
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	6812      	ldr	r2, [r2, #0]
 800c3c4:	605a      	str	r2, [r3, #4]
 800c3c6:	f107 0314 	add.w	r3, r7, #20
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f00c f917 	bl	8018604 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	7d3a      	ldrb	r2, [r7, #20]
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d202      	bcs.n	800c3e6 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3e4:	e008      	b.n	800c3f8 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	7d3a      	ldrb	r2, [r7, #20]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d903      	bls.n	800c3f8 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c3f0:	7d3b      	ldrb	r3, [r7, #20]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	f107 0314 	add.w	r3, r7, #20
 800c400:	4619      	mov	r1, r3
 800c402:	6838      	ldr	r0, [r7, #0]
 800c404:	f00c f8d6 	bl	80185b4 <memcpy>
  return truncated;
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	372c      	adds	r7, #44	; 0x2c
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd90      	pop	{r4, r7, pc}
 800c412:	bf00      	nop
 800c414:	0801a650 	.word	0x0801a650
 800c418:	0801a7c0 	.word	0x0801a7c0
 800c41c:	0801a6a4 	.word	0x0801a6a4
 800c420:	0801a7d4 	.word	0x0801a7d4
 800c424:	0801a7e4 	.word	0x0801a7e4

0800c428 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b088      	sub	sp, #32
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d101      	bne.n	800c440 <lwip_recv_tcp_from+0x18>
    return 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e021      	b.n	800c484 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d01d      	beq.n	800c482 <lwip_recv_tcp_from+0x5a>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d01a      	beq.n	800c482 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6818      	ldr	r0, [r3, #0]
 800c450:	f107 0216 	add.w	r2, r7, #22
 800c454:	f107 0110 	add.w	r1, r7, #16
 800c458:	2300      	movs	r3, #0
 800c45a:	f7fd fd5f 	bl	8009f1c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00e      	beq.n	800c482 <lwip_recv_tcp_from+0x5a>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6818      	ldr	r0, [r3, #0]
 800c46e:	8afa      	ldrh	r2, [r7, #22]
 800c470:	f107 0110 	add.w	r1, r7, #16
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f7ff ff67 	bl	800c34c <lwip_sock_make_addr>
 800c47e:	4603      	mov	r3, r0
 800c480:	e000      	b.n	800c484 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3718      	adds	r7, #24
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b08d      	sub	sp, #52	; 0x34
 800c490:	af02      	add	r7, sp, #8
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10d      	bne.n	800c4be <lwip_recvfrom_udp_raw+0x32>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dd09      	ble.n	800c4be <lwip_recvfrom_udp_raw+0x32>
 800c4aa:	4b5e      	ldr	r3, [pc, #376]	; (800c624 <lwip_recvfrom_udp_raw+0x198>)
 800c4ac:	f240 4249 	movw	r2, #1097	; 0x449
 800c4b0:	495d      	ldr	r1, [pc, #372]	; (800c628 <lwip_recvfrom_udp_raw+0x19c>)
 800c4b2:	485e      	ldr	r0, [pc, #376]	; (800c62c <lwip_recvfrom_udp_raw+0x1a0>)
 800c4b4:	f00c f958 	bl	8018768 <iprintf>
 800c4b8:	f06f 030f 	mvn.w	r3, #15
 800c4bc:	e0ad      	b.n	800c61a <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f003 0308 	and.w	r3, r3, #8
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d003      	beq.n	800c4d0 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4ce:	e002      	b.n	800c4d6 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d11e      	bne.n	800c520 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c4ea:	f107 0110 	add.w	r1, r7, #16
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fd ff74 	bl	800a3dc <netconn_recv_udp_raw_netbuf_flags>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c4f8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c500:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c504:	e089      	b.n	800c61a <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <lwip_recvfrom_udp_raw+0x8e>
 800c50c:	4b45      	ldr	r3, [pc, #276]	; (800c624 <lwip_recvfrom_udp_raw+0x198>)
 800c50e:	f240 425e 	movw	r2, #1118	; 0x45e
 800c512:	4947      	ldr	r1, [pc, #284]	; (800c630 <lwip_recvfrom_udp_raw+0x1a4>)
 800c514:	4845      	ldr	r0, [pc, #276]	; (800c62c <lwip_recvfrom_udp_raw+0x1a0>)
 800c516:	f00c f927 	bl	8018768 <iprintf>
    sock->lastdata.netbuf = buf;
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	891b      	ldrh	r3, [r3, #8]
 800c526:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c52c:	2300      	movs	r3, #0
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	e029      	b.n	800c586 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c532:	8b3a      	ldrh	r2, [r7, #24]
 800c534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	689a      	ldr	r2, [r3, #8]
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	00db      	lsls	r3, r3, #3
 800c542:	4413      	add	r3, r2
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	8afb      	ldrh	r3, [r7, #22]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d902      	bls.n	800c552 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c54c:	8afb      	ldrh	r3, [r7, #22]
 800c54e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c550:	e006      	b.n	800c560 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	689a      	ldr	r2, [r3, #8]
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	4413      	add	r3, r2
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	6818      	ldr	r0, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689a      	ldr	r2, [r3, #8]
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	4413      	add	r3, r2
 800c56e:	6819      	ldr	r1, [r3, #0]
 800c570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c574:	f002 fb80 	bl	800ec78 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c578:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c57a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c57c:	4413      	add	r3, r2
 800c57e:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	3301      	adds	r3, #1
 800c584:	61fb      	str	r3, [r7, #28]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	69fa      	ldr	r2, [r7, #28]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	da03      	bge.n	800c598 <lwip_recvfrom_udp_raw+0x10c>
 800c590:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c592:	8b3b      	ldrh	r3, [r7, #24]
 800c594:	429a      	cmp	r2, r3
 800c596:	d3cc      	bcc.n	800c532 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d01a      	beq.n	800c5d6 <lwip_recvfrom_udp_raw+0x14a>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d016      	beq.n	800c5d6 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d012      	beq.n	800c5d6 <lwip_recvfrom_udp_raw+0x14a>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00e      	beq.n	800c5d6 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f103 0108 	add.w	r1, r3, #8
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	f7ff febb 	bl	800c34c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d007      	beq.n	800c5f4 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c5e8:	7d7b      	ldrb	r3, [r7, #21]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d102      	bne.n	800c5f4 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff fbce 	bl	800bda8 <netbuf_delete>
  }
  if (datagram_len) {
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	8b3a      	ldrh	r2, [r7, #24]
 800c616:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	372c      	adds	r7, #44	; 0x2c
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd90      	pop	{r4, r7, pc}
 800c622:	bf00      	nop
 800c624:	0801a650 	.word	0x0801a650
 800c628:	0801a7f4 	.word	0x0801a7f4
 800c62c:	0801a6a4 	.word	0x0801a6a4
 800c630:	0801a820 	.word	0x0801a820

0800c634 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b096      	sub	sp, #88	; 0x58
 800c638:	af02      	add	r7, sp, #8
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
 800c640:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff fc80 	bl	800bf48 <get_socket>
 800c648:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800c64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d102      	bne.n	800c656 <lwip_recvfrom+0x22>
    return -1;
 800c650:	f04f 33ff 	mov.w	r3, #4294967295
 800c654:	e078      	b.n	800c748 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c660:	2b10      	cmp	r3, #16
 800c662:	d112      	bne.n	800c68a <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c66c:	f7ff fd5e 	bl	800c12c <lwip_recv_tcp>
 800c670:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	4b35      	ldr	r3, [pc, #212]	; (800c750 <lwip_recvfrom+0x11c>)
 800c67c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c67e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c680:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c682:	f7ff fed1 	bl	800c428 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c688:	e05e      	b.n	800c748 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800c6a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6a6:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c6ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6ae:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c6b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d002      	beq.n	800c6bc <lwip_recvfrom+0x88>
 800c6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	e000      	b.n	800c6be <lwip_recvfrom+0x8a>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c6c0:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800c6c4:	f107 0214 	add.w	r2, r7, #20
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c6d2:	f7ff fedb 	bl	800c48c <lwip_recvfrom_udp_raw>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800c6dc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00e      	beq.n	800c702 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c6e4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff fb3f 	bl	800bd6c <err_to_errno>
 800c6ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <lwip_recvfrom+0xc8>
 800c6f6:	4a17      	ldr	r2, [pc, #92]	; (800c754 <lwip_recvfrom+0x120>)
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fa:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c700:	e022      	b.n	800c748 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c702:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c704:	461a      	mov	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4293      	cmp	r3, r2
 800c70a:	bf28      	it	cs
 800c70c:	4613      	movcs	r3, r2
 800c70e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c712:	4293      	cmp	r3, r2
 800c714:	d206      	bcs.n	800c724 <lwip_recvfrom+0xf0>
 800c716:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c718:	461a      	mov	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4293      	cmp	r3, r2
 800c71e:	bf28      	it	cs
 800c720:	4613      	movcs	r3, r2
 800c722:	e001      	b.n	800c728 <lwip_recvfrom+0xf4>
 800c724:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c728:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c734:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c736:	2300      	movs	r3, #0
 800c738:	643b      	str	r3, [r7, #64]	; 0x40
 800c73a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <lwip_recvfrom+0x112>
 800c740:	4a04      	ldr	r2, [pc, #16]	; (800c754 <lwip_recvfrom+0x120>)
 800c742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c744:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3750      	adds	r7, #80	; 0x50
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	0801a82c 	.word	0x0801a82c
 800c754:	2000db6c 	.word	0x2000db6c

0800c758 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	; 0x28
 800c75c:	af02      	add	r7, sp, #8
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7ff fbee 	bl	800bf48 <get_socket>
 800c76c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d102      	bne.n	800c77a <lwip_send+0x22>
    return -1;
 800c774:	f04f 33ff 	mov.w	r3, #4294967295
 800c778:	e046      	b.n	800c808 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c784:	2b10      	cmp	r3, #16
 800c786:	d00b      	beq.n	800c7a0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c788:	2300      	movs	r3, #0
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	2300      	movs	r3, #0
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	68b9      	ldr	r1, [r7, #8]
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f000 f83c 	bl	800c814 <lwip_sendto>
 800c79c:	4603      	mov	r3, r0
 800c79e:	e033      	b.n	800c808 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <lwip_send+0x56>
 800c7aa:	2203      	movs	r2, #3
 800c7ac:	e000      	b.n	800c7b0 <lwip_send+0x58>
 800c7ae:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	105b      	asrs	r3, r3, #1
 800c7b4:	b25b      	sxtb	r3, r3
 800c7b6:	f003 0304 	and.w	r3, r3, #4
 800c7ba:	b25b      	sxtb	r3, r3
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c7c0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	7efa      	ldrb	r2, [r7, #27]
 800c7cc:	f107 0310 	add.w	r3, r7, #16
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	f7fd fe5a 	bl	800a490 <netconn_write_partly>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c7e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7ff fac1 	bl	800bd6c <err_to_errno>
 800c7ea:	6178      	str	r0, [r7, #20]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <lwip_send+0xa0>
 800c7f2:	4a07      	ldr	r2, [pc, #28]	; (800c810 <lwip_send+0xb8>)
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c7f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <lwip_send+0xac>
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	e001      	b.n	800c808 <lwip_send+0xb0>
 800c804:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3720      	adds	r7, #32
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	2000db6c 	.word	0x2000db6c

0800c814 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08e      	sub	sp, #56	; 0x38
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f7ff fb90 	bl	800bf48 <get_socket>
 800c828:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d102      	bne.n	800c836 <lwip_sendto+0x22>
    return -1;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	e093      	b.n	800c95e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c840:	2b10      	cmp	r3, #16
 800c842:	d107      	bne.n	800c854 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	68b9      	ldr	r1, [r7, #8]
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7ff ff84 	bl	800c758 <lwip_send>
 800c850:	4603      	mov	r3, r0
 800c852:	e084      	b.n	800c95e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c85a:	d30a      	bcc.n	800c872 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c85c:	235a      	movs	r3, #90	; 0x5a
 800c85e:	623b      	str	r3, [r7, #32]
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <lwip_sendto+0x58>
 800c866:	4a40      	ldr	r2, [pc, #256]	; (800c968 <lwip_sendto+0x154>)
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c86c:	f04f 33ff 	mov.w	r3, #4294967295
 800c870:	e075      	b.n	800c95e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <lwip_sendto+0x6e>
 800c87c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d023      	beq.n	800c8ca <lwip_sendto+0xb6>
 800c882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c884:	2b10      	cmp	r3, #16
 800c886:	d10b      	bne.n	800c8a0 <lwip_sendto+0x8c>
 800c888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d008      	beq.n	800c8a0 <lwip_sendto+0x8c>
 800c88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c890:	785b      	ldrb	r3, [r3, #1]
 800c892:	2b02      	cmp	r3, #2
 800c894:	d104      	bne.n	800c8a0 <lwip_sendto+0x8c>
 800c896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c898:	f003 0303 	and.w	r3, r3, #3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d014      	beq.n	800c8ca <lwip_sendto+0xb6>
 800c8a0:	4b32      	ldr	r3, [pc, #200]	; (800c96c <lwip_sendto+0x158>)
 800c8a2:	f240 6252 	movw	r2, #1618	; 0x652
 800c8a6:	4932      	ldr	r1, [pc, #200]	; (800c970 <lwip_sendto+0x15c>)
 800c8a8:	4832      	ldr	r0, [pc, #200]	; (800c974 <lwip_sendto+0x160>)
 800c8aa:	f00b ff5d 	bl	8018768 <iprintf>
 800c8ae:	f06f 000f 	mvn.w	r0, #15
 800c8b2:	f7ff fa5b 	bl	800bd6c <err_to_errno>
 800c8b6:	62b8      	str	r0, [r7, #40]	; 0x28
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <lwip_sendto+0xb0>
 800c8be:	4a2a      	ldr	r2, [pc, #168]	; (800c968 <lwip_sendto+0x154>)
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c8:	e049      	b.n	800c95e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	617b      	str	r3, [r7, #20]
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00a      	beq.n	800c8ee <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	61bb      	str	r3, [r7, #24]
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	885b      	ldrh	r3, [r3, #2]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fbe4 	bl	800d0b0 <lwip_htons>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c8ec:	e003      	b.n	800c8f6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c8f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c8f8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c8fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8fc:	f107 0310 	add.w	r3, r7, #16
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fa98 	bl	800be38 <netbuf_ref>
 800c908:	4603      	mov	r3, r0
 800c90a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c90e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10a      	bne.n	800c92c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f107 0210 	add.w	r2, r7, #16
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f7fd fd87 	bl	800a434 <netconn_send>
 800c926:	4603      	mov	r3, r0
 800c928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c92c:	f107 0310 	add.w	r3, r7, #16
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fa59 	bl	800bde8 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c936:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff fa16 	bl	800bd6c <err_to_errno>
 800c940:	6278      	str	r0, [r7, #36]	; 0x24
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	2b00      	cmp	r3, #0
 800c946:	d002      	beq.n	800c94e <lwip_sendto+0x13a>
 800c948:	4a07      	ldr	r2, [pc, #28]	; (800c968 <lwip_sendto+0x154>)
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c94e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c952:	2b00      	cmp	r3, #0
 800c954:	d101      	bne.n	800c95a <lwip_sendto+0x146>
 800c956:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c958:	e001      	b.n	800c95e <lwip_sendto+0x14a>
 800c95a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3738      	adds	r7, #56	; 0x38
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	2000db6c 	.word	0x2000db6c
 800c96c:	0801a650 	.word	0x0801a650
 800c970:	0801a930 	.word	0x0801a930
 800c974:	0801a6a4 	.word	0x0801a6a4

0800c978 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b03      	cmp	r3, #3
 800c988:	d009      	beq.n	800c99e <lwip_socket+0x26>
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	dc23      	bgt.n	800c9d8 <lwip_socket+0x60>
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d019      	beq.n	800c9ca <lwip_socket+0x52>
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d009      	beq.n	800c9b0 <lwip_socket+0x38>
 800c99c:	e01c      	b.n	800c9d8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	4a22      	ldr	r2, [pc, #136]	; (800ca2c <lwip_socket+0xb4>)
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	2040      	movs	r0, #64	; 0x40
 800c9a8:	f7fd f9fe 	bl	8009da8 <netconn_new_with_proto_and_callback>
 800c9ac:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c9ae:	e019      	b.n	800c9e4 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b88      	cmp	r3, #136	; 0x88
 800c9b4:	d101      	bne.n	800c9ba <lwip_socket+0x42>
 800c9b6:	2321      	movs	r3, #33	; 0x21
 800c9b8:	e000      	b.n	800c9bc <lwip_socket+0x44>
 800c9ba:	2320      	movs	r3, #32
 800c9bc:	4a1b      	ldr	r2, [pc, #108]	; (800ca2c <lwip_socket+0xb4>)
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fd f9f1 	bl	8009da8 <netconn_new_with_proto_and_callback>
 800c9c6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c9c8:	e00c      	b.n	800c9e4 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c9ca:	4a18      	ldr	r2, [pc, #96]	; (800ca2c <lwip_socket+0xb4>)
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	2010      	movs	r0, #16
 800c9d0:	f7fd f9ea 	bl	8009da8 <netconn_new_with_proto_and_callback>
 800c9d4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c9d6:	e005      	b.n	800c9e4 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c9d8:	4b15      	ldr	r3, [pc, #84]	; (800ca30 <lwip_socket+0xb8>)
 800c9da:	2216      	movs	r2, #22
 800c9dc:	601a      	str	r2, [r3, #0]
      return -1;
 800c9de:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e2:	e01e      	b.n	800ca22 <lwip_socket+0xaa>
  }

  if (!conn) {
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d105      	bne.n	800c9f6 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c9ea:	4b11      	ldr	r3, [pc, #68]	; (800ca30 <lwip_socket+0xb8>)
 800c9ec:	2269      	movs	r2, #105	; 0x69
 800c9ee:	601a      	str	r2, [r3, #0]
    return -1;
 800c9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f4:	e015      	b.n	800ca22 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	6978      	ldr	r0, [r7, #20]
 800c9fa:	f7ff fabd 	bl	800bf78 <alloc_socket>
 800c9fe:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca06:	d108      	bne.n	800ca1a <lwip_socket+0xa2>
    netconn_delete(conn);
 800ca08:	6978      	ldr	r0, [r7, #20]
 800ca0a:	f7fd fa6b 	bl	8009ee4 <netconn_delete>
    set_errno(ENFILE);
 800ca0e:	4b08      	ldr	r3, [pc, #32]	; (800ca30 <lwip_socket+0xb8>)
 800ca10:	2217      	movs	r2, #23
 800ca12:	601a      	str	r2, [r3, #0]
    return -1;
 800ca14:	f04f 33ff 	mov.w	r3, #4294967295
 800ca18:	e003      	b.n	800ca22 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ca20:	693b      	ldr	r3, [r7, #16]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0800cabd 	.word	0x0800cabd
 800ca30:	2000db6c 	.word	0x2000db6c

0800ca34 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	e02c      	b.n	800caa2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	695a      	ldr	r2, [r3, #20]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	4413      	add	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d11e      	bne.n	800ca9c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d009      	beq.n	800ca78 <lwip_poll_should_wake+0x44>
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <lwip_poll_should_wake+0x44>
        return 1;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e01a      	b.n	800caae <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d009      	beq.n	800ca92 <lwip_poll_should_wake+0x5e>
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	f003 0302 	and.w	r3, r3, #2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <lwip_poll_should_wake+0x5e>
        return 1;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e00d      	b.n	800caae <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e008      	b.n	800caae <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	617b      	str	r3, [r7, #20]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d3cd      	bcc.n	800ca48 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	371c      	adds	r7, #28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
	...

0800cabc <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	; 0x28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
 800cac8:	4613      	mov	r3, r2
 800caca:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f000 80a4 	beq.w	800cc1c <event_callback+0x160>
    s = conn->socket;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	2b00      	cmp	r3, #0
 800cade:	da18      	bge.n	800cb12 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800cae0:	f00b fc0e 	bl	8018300 <sys_arch_protect>
 800cae4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	2b00      	cmp	r3, #0
 800caec:	da0b      	bge.n	800cb06 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800caee:	78fb      	ldrb	r3, [r7, #3]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	699b      	ldr	r3, [r3, #24]
 800caf8:	1e5a      	subs	r2, r3, #1
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800cafe:	69f8      	ldr	r0, [r7, #28]
 800cb00:	f00b fc0c 	bl	801831c <sys_arch_unprotect>
        return;
 800cb04:	e08d      	b.n	800cc22 <event_callback+0x166>
      }
      s = conn->socket;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800cb0c:	69f8      	ldr	r0, [r7, #28]
 800cb0e:	f00b fc05 	bl	801831c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800cb12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb14:	f7ff fa18 	bl	800bf48 <get_socket>
 800cb18:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d07f      	beq.n	800cc20 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800cb20:	2301      	movs	r3, #1
 800cb22:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800cb24:	f00b fbec 	bl	8018300 <sys_arch_protect>
 800cb28:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d83e      	bhi.n	800cbae <event_callback+0xf2>
 800cb30:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <event_callback+0x7c>)
 800cb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb36:	bf00      	nop
 800cb38:	0800cb4d 	.word	0x0800cb4d
 800cb3c:	0800cb6f 	.word	0x0800cb6f
 800cb40:	0800cb87 	.word	0x0800cb87
 800cb44:	0800cb9b 	.word	0x0800cb9b
 800cb48:	0800cba7 	.word	0x0800cba7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	3301      	adds	r3, #1
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	b21a      	sxth	r2, r3
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	dd2a      	ble.n	800cbbe <event_callback+0x102>
        check_waiters = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	623b      	str	r3, [r7, #32]
      }
      break;
 800cb6c:	e027      	b.n	800cbbe <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	3b01      	subs	r3, #1
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	b21a      	sxth	r2, r3
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	623b      	str	r3, [r7, #32]
      break;
 800cb84:	e01c      	b.n	800cbc0 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	895b      	ldrh	r3, [r3, #10]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <event_callback+0xd6>
        check_waiters = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	2201      	movs	r2, #1
 800cb96:	815a      	strh	r2, [r3, #10]
      break;
 800cb98:	e012      	b.n	800cbc0 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800cba0:	2300      	movs	r3, #0
 800cba2:	623b      	str	r3, [r7, #32]
      break;
 800cba4:	e00c      	b.n	800cbc0 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	819a      	strh	r2, [r3, #12]
      break;
 800cbac:	e008      	b.n	800cbc0 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800cbae:	4b1e      	ldr	r3, [pc, #120]	; (800cc28 <event_callback+0x16c>)
 800cbb0:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800cbb4:	491d      	ldr	r1, [pc, #116]	; (800cc2c <event_callback+0x170>)
 800cbb6:	481e      	ldr	r0, [pc, #120]	; (800cc30 <event_callback+0x174>)
 800cbb8:	f00b fdd6 	bl	8018768 <iprintf>
      break;
 800cbbc:	e000      	b.n	800cbc0 <event_callback+0x104>
      break;
 800cbbe:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	7b9b      	ldrb	r3, [r3, #14]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d025      	beq.n	800cc14 <event_callback+0x158>
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d022      	beq.n	800cc14 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	bfcc      	ite	gt
 800cbd8:	2301      	movgt	r3, #1
 800cbda:	2300      	movle	r3, #0
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	895b      	ldrh	r3, [r3, #10]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	bf14      	ite	ne
 800cbe8:	2301      	movne	r3, #1
 800cbea:	2300      	moveq	r3, #0
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	899b      	ldrh	r3, [r3, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bf14      	ite	ne
 800cbf8:	2301      	movne	r3, #1
 800cbfa:	2300      	moveq	r3, #0
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800cc00:	69f8      	ldr	r0, [r7, #28]
 800cc02:	f00b fb8b 	bl	801831c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	6979      	ldr	r1, [r7, #20]
 800cc0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc0e:	f000 f811 	bl	800cc34 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800cc12:	e006      	b.n	800cc22 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800cc14:	69f8      	ldr	r0, [r7, #28]
 800cc16:	f00b fb81 	bl	801831c <sys_arch_unprotect>
 800cc1a:	e002      	b.n	800cc22 <event_callback+0x166>
    return;
 800cc1c:	bf00      	nop
 800cc1e:	e000      	b.n	800cc22 <event_callback+0x166>
      return;
 800cc20:	bf00      	nop
  }
  done_socket(sock);
}
 800cc22:	3728      	adds	r7, #40	; 0x28
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	0801a650 	.word	0x0801a650
 800cc2c:	0801a9cc 	.word	0x0801a9cc
 800cc30:	0801a6a4 	.word	0x0801a6a4

0800cc34 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af02      	add	r7, sp, #8
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cc42:	4b3e      	ldr	r3, [pc, #248]	; (800cd3c <select_check_waiters+0x108>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	617b      	str	r3, [r7, #20]
 800cc48:	e06f      	b.n	800cd2a <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	69db      	ldr	r3, [r3, #28]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d168      	bne.n	800cd24 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d009      	beq.n	800cc72 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	68f9      	ldr	r1, [r7, #12]
 800cc68:	6978      	ldr	r0, [r7, #20]
 800cc6a:	f7ff fee3 	bl	800ca34 <lwip_poll_should_wake>
 800cc6e:	6138      	str	r0, [r7, #16]
 800cc70:	e04d      	b.n	800cd0e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d014      	beq.n	800cca2 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d010      	beq.n	800cca2 <select_check_waiters+0x6e>
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	0952      	lsrs	r2, r2, #5
 800cc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	f002 021f 	and.w	r2, r2, #31
 800cc92:	2101      	movs	r1, #1
 800cc94:	fa01 f202 	lsl.w	r2, r1, r2
 800cc98:	4013      	ands	r3, r2
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <select_check_waiters+0x6e>
            do_signal = 1;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d017      	beq.n	800ccd8 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d114      	bne.n	800ccd8 <select_check_waiters+0xa4>
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d010      	beq.n	800ccd8 <select_check_waiters+0xa4>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	0952      	lsrs	r2, r2, #5
 800ccbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	f002 021f 	and.w	r2, r2, #31
 800ccc8:	2101      	movs	r1, #1
 800ccca:	fa01 f202 	lsl.w	r2, r1, r2
 800ccce:	4013      	ands	r3, r2
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <select_check_waiters+0xa4>
            do_signal = 1;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d017      	beq.n	800cd0e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d114      	bne.n	800cd0e <select_check_waiters+0xda>
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d010      	beq.n	800cd0e <select_check_waiters+0xda>
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	0952      	lsrs	r2, r2, #5
 800ccf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	f002 021f 	and.w	r2, r2, #31
 800ccfe:	2101      	movs	r1, #1
 800cd00:	fa01 f202 	lsl.w	r2, r1, r2
 800cd04:	4013      	ands	r3, r2
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d001      	beq.n	800cd0e <select_check_waiters+0xda>
            do_signal = 1;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2201      	movs	r2, #1
 800cd18:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	3320      	adds	r3, #32
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f00b fa4a 	bl	80181b8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	617b      	str	r3, [r7, #20]
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d18c      	bne.n	800cc4a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800cd30:	bf00      	nop
 800cd32:	bf00      	nop
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200042f4 	.word	0x200042f4

0800cd40 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cd4a:	f008 f933 	bl	8014fb4 <sys_timeouts_sleeptime>
 800cd4e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd56:	d10b      	bne.n	800cd70 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cd58:	4813      	ldr	r0, [pc, #76]	; (800cda8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd5a:	f00b fa9e 	bl	801829a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cd5e:	2200      	movs	r2, #0
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f00b f956 	bl	8018014 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cd68:	480f      	ldr	r0, [pc, #60]	; (800cda8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd6a:	f00b fa87 	bl	801827c <sys_mutex_lock>
    return;
 800cd6e:	e018      	b.n	800cda2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cd76:	f008 f8e3 	bl	8014f40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd7a:	e7e6      	b.n	800cd4a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cd7c:	480a      	ldr	r0, [pc, #40]	; (800cda8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd7e:	f00b fa8c 	bl	801829a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f00b f944 	bl	8018014 <sys_arch_mbox_fetch>
 800cd8c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cd8e:	4806      	ldr	r0, [pc, #24]	; (800cda8 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd90:	f00b fa74 	bl	801827c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9a:	d102      	bne.n	800cda2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cd9c:	f008 f8d0 	bl	8014f40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cda0:	e7d3      	b.n	800cd4a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	2000a438 	.word	0x2000a438

0800cdac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cdb4:	4810      	ldr	r0, [pc, #64]	; (800cdf8 <tcpip_thread+0x4c>)
 800cdb6:	f00b fa61 	bl	801827c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cdba:	4b10      	ldr	r3, [pc, #64]	; (800cdfc <tcpip_thread+0x50>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d005      	beq.n	800cdce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cdc2:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <tcpip_thread+0x50>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a0e      	ldr	r2, [pc, #56]	; (800ce00 <tcpip_thread+0x54>)
 800cdc8:	6812      	ldr	r2, [r2, #0]
 800cdca:	4610      	mov	r0, r2
 800cdcc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cdce:	f107 030c 	add.w	r3, r7, #12
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	480b      	ldr	r0, [pc, #44]	; (800ce04 <tcpip_thread+0x58>)
 800cdd6:	f7ff ffb3 	bl	800cd40 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d106      	bne.n	800cdee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cde0:	4b09      	ldr	r3, [pc, #36]	; (800ce08 <tcpip_thread+0x5c>)
 800cde2:	2291      	movs	r2, #145	; 0x91
 800cde4:	4909      	ldr	r1, [pc, #36]	; (800ce0c <tcpip_thread+0x60>)
 800cde6:	480a      	ldr	r0, [pc, #40]	; (800ce10 <tcpip_thread+0x64>)
 800cde8:	f00b fcbe 	bl	8018768 <iprintf>
      continue;
 800cdec:	e003      	b.n	800cdf6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 f80f 	bl	800ce14 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cdf6:	e7ea      	b.n	800cdce <tcpip_thread+0x22>
 800cdf8:	2000a438 	.word	0x2000a438
 800cdfc:	200042f8 	.word	0x200042f8
 800ce00:	200042fc 	.word	0x200042fc
 800ce04:	20004300 	.word	0x20004300
 800ce08:	0801aa20 	.word	0x0801aa20
 800ce0c:	0801aa50 	.word	0x0801aa50
 800ce10:	0801aa70 	.word	0x0801aa70

0800ce14 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d026      	beq.n	800ce72 <tcpip_thread_handle_msg+0x5e>
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	dc2b      	bgt.n	800ce80 <tcpip_thread_handle_msg+0x6c>
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <tcpip_thread_handle_msg+0x1e>
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d015      	beq.n	800ce5c <tcpip_thread_handle_msg+0x48>
 800ce30:	e026      	b.n	800ce80 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	6850      	ldr	r0, [r2, #4]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	6892      	ldr	r2, [r2, #8]
 800ce3e:	4611      	mov	r1, r2
 800ce40:	4798      	blx	r3
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d004      	beq.n	800ce52 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f001 fd0d 	bl	800e86c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	2009      	movs	r0, #9
 800ce56:	f000 fe33 	bl	800dac0 <memp_free>
      break;
 800ce5a:	e018      	b.n	800ce8e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	6892      	ldr	r2, [r2, #8]
 800ce64:	4610      	mov	r0, r2
 800ce66:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	2008      	movs	r0, #8
 800ce6c:	f000 fe28 	bl	800dac0 <memp_free>
      break;
 800ce70:	e00d      	b.n	800ce8e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	6892      	ldr	r2, [r2, #8]
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	4798      	blx	r3
      break;
 800ce7e:	e006      	b.n	800ce8e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ce80:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <tcpip_thread_handle_msg+0x84>)
 800ce82:	22cf      	movs	r2, #207	; 0xcf
 800ce84:	4905      	ldr	r1, [pc, #20]	; (800ce9c <tcpip_thread_handle_msg+0x88>)
 800ce86:	4806      	ldr	r0, [pc, #24]	; (800cea0 <tcpip_thread_handle_msg+0x8c>)
 800ce88:	f00b fc6e 	bl	8018768 <iprintf>
      break;
 800ce8c:	bf00      	nop
  }
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	0801aa20 	.word	0x0801aa20
 800ce9c:	0801aa50 	.word	0x0801aa50
 800cea0:	0801aa70 	.word	0x0801aa70

0800cea4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ceb0:	481a      	ldr	r0, [pc, #104]	; (800cf1c <tcpip_inpkt+0x78>)
 800ceb2:	f00b f90a 	bl	80180ca <sys_mbox_valid>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d105      	bne.n	800cec8 <tcpip_inpkt+0x24>
 800cebc:	4b18      	ldr	r3, [pc, #96]	; (800cf20 <tcpip_inpkt+0x7c>)
 800cebe:	22fc      	movs	r2, #252	; 0xfc
 800cec0:	4918      	ldr	r1, [pc, #96]	; (800cf24 <tcpip_inpkt+0x80>)
 800cec2:	4819      	ldr	r0, [pc, #100]	; (800cf28 <tcpip_inpkt+0x84>)
 800cec4:	f00b fc50 	bl	8018768 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cec8:	2009      	movs	r0, #9
 800ceca:	f000 fda7 	bl	800da1c <memp_malloc>
 800cece:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d102      	bne.n	800cedc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ced6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceda:	e01a      	b.n	800cf12 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2200      	movs	r2, #0
 800cee0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cef4:	6979      	ldr	r1, [r7, #20]
 800cef6:	4809      	ldr	r0, [pc, #36]	; (800cf1c <tcpip_inpkt+0x78>)
 800cef8:	f00b f872 	bl	8017fe0 <sys_mbox_trypost>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d006      	beq.n	800cf10 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cf02:	6979      	ldr	r1, [r7, #20]
 800cf04:	2009      	movs	r0, #9
 800cf06:	f000 fddb 	bl	800dac0 <memp_free>
    return ERR_MEM;
 800cf0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0e:	e000      	b.n	800cf12 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cf10:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20004300 	.word	0x20004300
 800cf20:	0801aa20 	.word	0x0801aa20
 800cf24:	0801aa98 	.word	0x0801aa98
 800cf28:	0801aa70 	.word	0x0801aa70

0800cf2c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf3c:	f003 0318 	and.w	r3, r3, #24
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d006      	beq.n	800cf52 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cf44:	4a08      	ldr	r2, [pc, #32]	; (800cf68 <tcpip_input+0x3c>)
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff ffab 	bl	800cea4 <tcpip_inpkt>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	e005      	b.n	800cf5e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cf52:	4a06      	ldr	r2, [pc, #24]	; (800cf6c <tcpip_input+0x40>)
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff ffa4 	bl	800cea4 <tcpip_inpkt>
 800cf5c:	4603      	mov	r3, r0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	08017dcd 	.word	0x08017dcd
 800cf6c:	08016ce1 	.word	0x08016ce1

0800cf70 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cf7a:	4819      	ldr	r0, [pc, #100]	; (800cfe0 <tcpip_try_callback+0x70>)
 800cf7c:	f00b f8a5 	bl	80180ca <sys_mbox_valid>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d106      	bne.n	800cf94 <tcpip_try_callback+0x24>
 800cf86:	4b17      	ldr	r3, [pc, #92]	; (800cfe4 <tcpip_try_callback+0x74>)
 800cf88:	f240 125d 	movw	r2, #349	; 0x15d
 800cf8c:	4916      	ldr	r1, [pc, #88]	; (800cfe8 <tcpip_try_callback+0x78>)
 800cf8e:	4817      	ldr	r0, [pc, #92]	; (800cfec <tcpip_try_callback+0x7c>)
 800cf90:	f00b fbea 	bl	8018768 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cf94:	2008      	movs	r0, #8
 800cf96:	f000 fd41 	bl	800da1c <memp_malloc>
 800cf9a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d102      	bne.n	800cfa8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa6:	e017      	b.n	800cfd8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cfba:	68f9      	ldr	r1, [r7, #12]
 800cfbc:	4808      	ldr	r0, [pc, #32]	; (800cfe0 <tcpip_try_callback+0x70>)
 800cfbe:	f00b f80f 	bl	8017fe0 <sys_mbox_trypost>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d006      	beq.n	800cfd6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cfc8:	68f9      	ldr	r1, [r7, #12]
 800cfca:	2008      	movs	r0, #8
 800cfcc:	f000 fd78 	bl	800dac0 <memp_free>
    return ERR_MEM;
 800cfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd4:	e000      	b.n	800cfd8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cfd6:	2300      	movs	r3, #0
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	20004300 	.word	0x20004300
 800cfe4:	0801aa20 	.word	0x0801aa20
 800cfe8:	0801aa98 	.word	0x0801aa98
 800cfec:	0801aa70 	.word	0x0801aa70

0800cff0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cffc:	4806      	ldr	r0, [pc, #24]	; (800d018 <tcpip_send_msg_wait_sem+0x28>)
 800cffe:	f00b f93d 	bl	801827c <sys_mutex_lock>
  fn(apimsg);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	68b8      	ldr	r0, [r7, #8]
 800d006:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d008:	4803      	ldr	r0, [pc, #12]	; (800d018 <tcpip_send_msg_wait_sem+0x28>)
 800d00a:	f00b f946 	bl	801829a <sys_mutex_unlock>
  return ERR_OK;
 800d00e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000a438 	.word	0x2000a438

0800d01c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af02      	add	r7, sp, #8
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d026:	f000 f871 	bl	800d10c <lwip_init>

  tcpip_init_done = initfunc;
 800d02a:	4a17      	ldr	r2, [pc, #92]	; (800d088 <tcpip_init+0x6c>)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d030:	4a16      	ldr	r2, [pc, #88]	; (800d08c <tcpip_init+0x70>)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d036:	2106      	movs	r1, #6
 800d038:	4815      	ldr	r0, [pc, #84]	; (800d090 <tcpip_init+0x74>)
 800d03a:	f00a ff9d 	bl	8017f78 <sys_mbox_new>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d006      	beq.n	800d052 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d044:	4b13      	ldr	r3, [pc, #76]	; (800d094 <tcpip_init+0x78>)
 800d046:	f240 2261 	movw	r2, #609	; 0x261
 800d04a:	4913      	ldr	r1, [pc, #76]	; (800d098 <tcpip_init+0x7c>)
 800d04c:	4813      	ldr	r0, [pc, #76]	; (800d09c <tcpip_init+0x80>)
 800d04e:	f00b fb8b 	bl	8018768 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d052:	4813      	ldr	r0, [pc, #76]	; (800d0a0 <tcpip_init+0x84>)
 800d054:	f00b f8f6 	bl	8018244 <sys_mutex_new>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d006      	beq.n	800d06c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d05e:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <tcpip_init+0x78>)
 800d060:	f240 2265 	movw	r2, #613	; 0x265
 800d064:	490f      	ldr	r1, [pc, #60]	; (800d0a4 <tcpip_init+0x88>)
 800d066:	480d      	ldr	r0, [pc, #52]	; (800d09c <tcpip_init+0x80>)
 800d068:	f00b fb7e 	bl	8018768 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d06c:	2300      	movs	r3, #0
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d074:	2200      	movs	r2, #0
 800d076:	490c      	ldr	r1, [pc, #48]	; (800d0a8 <tcpip_init+0x8c>)
 800d078:	480c      	ldr	r0, [pc, #48]	; (800d0ac <tcpip_init+0x90>)
 800d07a:	f00b f91b 	bl	80182b4 <sys_thread_new>
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	200042f8 	.word	0x200042f8
 800d08c:	200042fc 	.word	0x200042fc
 800d090:	20004300 	.word	0x20004300
 800d094:	0801aa20 	.word	0x0801aa20
 800d098:	0801aaa8 	.word	0x0801aaa8
 800d09c:	0801aa70 	.word	0x0801aa70
 800d0a0:	2000a438 	.word	0x2000a438
 800d0a4:	0801aacc 	.word	0x0801aacc
 800d0a8:	0800cdad 	.word	0x0800cdad
 800d0ac:	0801aaf0 	.word	0x0801aaf0

0800d0b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	021b      	lsls	r3, r3, #8
 800d0be:	b21a      	sxth	r2, r3
 800d0c0:	88fb      	ldrh	r3, [r7, #6]
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	b21b      	sxth	r3, r3
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	b21b      	sxth	r3, r3
 800d0cc:	b29b      	uxth	r3, r3
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	061a      	lsls	r2, r3, #24
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	021b      	lsls	r3, r3, #8
 800d0ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	0a1b      	lsrs	r3, r3, #8
 800d0f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d0f8:	431a      	orrs	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	0e1b      	lsrs	r3, r3, #24
 800d0fe:	4313      	orrs	r3, r2
}
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d116:	f00b f887 	bl	8018228 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d11a:	f000 f8d5 	bl	800d2c8 <mem_init>
  memp_init();
 800d11e:	f000 fc31 	bl	800d984 <memp_init>
  pbuf_init();
  netif_init();
 800d122:	f000 fcf7 	bl	800db14 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d126:	f007 ff7d 	bl	8015024 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d12a:	f001 fe49 	bl	800edc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d12e:	f007 febf 	bl	8014eb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	4603      	mov	r3, r0
 800d144:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d146:	4b05      	ldr	r3, [pc, #20]	; (800d15c <ptr_to_mem+0x20>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	88fb      	ldrh	r3, [r7, #6]
 800d14c:	4413      	add	r3, r2
}
 800d14e:	4618      	mov	r0, r3
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20004304 	.word	0x20004304

0800d160 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d168:	4b05      	ldr	r3, [pc, #20]	; (800d180 <mem_to_ptr+0x20>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	b29b      	uxth	r3, r3
}
 800d172:	4618      	mov	r0, r3
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	20004304 	.word	0x20004304

0800d184 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d184:	b590      	push	{r4, r7, lr}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d18c:	4b45      	ldr	r3, [pc, #276]	; (800d2a4 <plug_holes+0x120>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	429a      	cmp	r2, r3
 800d194:	d206      	bcs.n	800d1a4 <plug_holes+0x20>
 800d196:	4b44      	ldr	r3, [pc, #272]	; (800d2a8 <plug_holes+0x124>)
 800d198:	f240 12df 	movw	r2, #479	; 0x1df
 800d19c:	4943      	ldr	r1, [pc, #268]	; (800d2ac <plug_holes+0x128>)
 800d19e:	4844      	ldr	r0, [pc, #272]	; (800d2b0 <plug_holes+0x12c>)
 800d1a0:	f00b fae2 	bl	8018768 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d1a4:	4b43      	ldr	r3, [pc, #268]	; (800d2b4 <plug_holes+0x130>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d306      	bcc.n	800d1bc <plug_holes+0x38>
 800d1ae:	4b3e      	ldr	r3, [pc, #248]	; (800d2a8 <plug_holes+0x124>)
 800d1b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d1b4:	4940      	ldr	r1, [pc, #256]	; (800d2b8 <plug_holes+0x134>)
 800d1b6:	483e      	ldr	r0, [pc, #248]	; (800d2b0 <plug_holes+0x12c>)
 800d1b8:	f00b fad6 	bl	8018768 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	791b      	ldrb	r3, [r3, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d006      	beq.n	800d1d2 <plug_holes+0x4e>
 800d1c4:	4b38      	ldr	r3, [pc, #224]	; (800d2a8 <plug_holes+0x124>)
 800d1c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d1ca:	493c      	ldr	r1, [pc, #240]	; (800d2bc <plug_holes+0x138>)
 800d1cc:	4838      	ldr	r0, [pc, #224]	; (800d2b0 <plug_holes+0x12c>)
 800d1ce:	f00b facb 	bl	8018768 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1da:	d906      	bls.n	800d1ea <plug_holes+0x66>
 800d1dc:	4b32      	ldr	r3, [pc, #200]	; (800d2a8 <plug_holes+0x124>)
 800d1de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d1e2:	4937      	ldr	r1, [pc, #220]	; (800d2c0 <plug_holes+0x13c>)
 800d1e4:	4832      	ldr	r0, [pc, #200]	; (800d2b0 <plug_holes+0x12c>)
 800d1e6:	f00b fabf 	bl	8018768 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	881b      	ldrh	r3, [r3, #0]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff ffa4 	bl	800d13c <ptr_to_mem>
 800d1f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d024      	beq.n	800d248 <plug_holes+0xc4>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	791b      	ldrb	r3, [r3, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d120      	bne.n	800d248 <plug_holes+0xc4>
 800d206:	4b2b      	ldr	r3, [pc, #172]	; (800d2b4 <plug_holes+0x130>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d01b      	beq.n	800d248 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d210:	4b2c      	ldr	r3, [pc, #176]	; (800d2c4 <plug_holes+0x140>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	429a      	cmp	r2, r3
 800d218:	d102      	bne.n	800d220 <plug_holes+0x9c>
      lfree = mem;
 800d21a:	4a2a      	ldr	r2, [pc, #168]	; (800d2c4 <plug_holes+0x140>)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	881a      	ldrh	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d230:	d00a      	beq.n	800d248 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff ff80 	bl	800d13c <ptr_to_mem>
 800d23c:	4604      	mov	r4, r0
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff ff8e 	bl	800d160 <mem_to_ptr>
 800d244:	4603      	mov	r3, r0
 800d246:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	885b      	ldrh	r3, [r3, #2]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff ff75 	bl	800d13c <ptr_to_mem>
 800d252:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d254:	68ba      	ldr	r2, [r7, #8]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d01f      	beq.n	800d29c <plug_holes+0x118>
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	791b      	ldrb	r3, [r3, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d11b      	bne.n	800d29c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d264:	4b17      	ldr	r3, [pc, #92]	; (800d2c4 <plug_holes+0x140>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d102      	bne.n	800d274 <plug_holes+0xf0>
      lfree = pmem;
 800d26e:	4a15      	ldr	r2, [pc, #84]	; (800d2c4 <plug_holes+0x140>)
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	881a      	ldrh	r2, [r3, #0]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d284:	d00a      	beq.n	800d29c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7ff ff56 	bl	800d13c <ptr_to_mem>
 800d290:	4604      	mov	r4, r0
 800d292:	68b8      	ldr	r0, [r7, #8]
 800d294:	f7ff ff64 	bl	800d160 <mem_to_ptr>
 800d298:	4603      	mov	r3, r0
 800d29a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d29c:	bf00      	nop
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd90      	pop	{r4, r7, pc}
 800d2a4:	20004304 	.word	0x20004304
 800d2a8:	0801ab00 	.word	0x0801ab00
 800d2ac:	0801ab30 	.word	0x0801ab30
 800d2b0:	0801ab48 	.word	0x0801ab48
 800d2b4:	20004308 	.word	0x20004308
 800d2b8:	0801ab70 	.word	0x0801ab70
 800d2bc:	0801ab8c 	.word	0x0801ab8c
 800d2c0:	0801aba8 	.word	0x0801aba8
 800d2c4:	20004310 	.word	0x20004310

0800d2c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d2ce:	4b1f      	ldr	r3, [pc, #124]	; (800d34c <mem_init+0x84>)
 800d2d0:	3303      	adds	r3, #3
 800d2d2:	f023 0303 	bic.w	r3, r3, #3
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4b1d      	ldr	r3, [pc, #116]	; (800d350 <mem_init+0x88>)
 800d2da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d2dc:	4b1c      	ldr	r3, [pc, #112]	; (800d350 <mem_init+0x88>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d2e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d2f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d2fa:	f7ff ff1f 	bl	800d13c <ptr_to_mem>
 800d2fe:	4603      	mov	r3, r0
 800d300:	4a14      	ldr	r2, [pc, #80]	; (800d354 <mem_init+0x8c>)
 800d302:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d304:	4b13      	ldr	r3, [pc, #76]	; (800d354 <mem_init+0x8c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2201      	movs	r2, #1
 800d30a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d30c:	4b11      	ldr	r3, [pc, #68]	; (800d354 <mem_init+0x8c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d314:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d316:	4b0f      	ldr	r3, [pc, #60]	; (800d354 <mem_init+0x8c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d31e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d320:	4b0b      	ldr	r3, [pc, #44]	; (800d350 <mem_init+0x88>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a0c      	ldr	r2, [pc, #48]	; (800d358 <mem_init+0x90>)
 800d326:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d328:	480c      	ldr	r0, [pc, #48]	; (800d35c <mem_init+0x94>)
 800d32a:	f00a ff8b 	bl	8018244 <sys_mutex_new>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d006      	beq.n	800d342 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d334:	4b0a      	ldr	r3, [pc, #40]	; (800d360 <mem_init+0x98>)
 800d336:	f240 221f 	movw	r2, #543	; 0x21f
 800d33a:	490a      	ldr	r1, [pc, #40]	; (800d364 <mem_init+0x9c>)
 800d33c:	480a      	ldr	r0, [pc, #40]	; (800d368 <mem_init+0xa0>)
 800d33e:	f00b fa13 	bl	8018768 <iprintf>
  }
}
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	2000a454 	.word	0x2000a454
 800d350:	20004304 	.word	0x20004304
 800d354:	20004308 	.word	0x20004308
 800d358:	20004310 	.word	0x20004310
 800d35c:	2000430c 	.word	0x2000430c
 800d360:	0801ab00 	.word	0x0801ab00
 800d364:	0801abd4 	.word	0x0801abd4
 800d368:	0801ab48 	.word	0x0801ab48

0800d36c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fef3 	bl	800d160 <mem_to_ptr>
 800d37a:	4603      	mov	r3, r0
 800d37c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff feda 	bl	800d13c <ptr_to_mem>
 800d388:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	885b      	ldrh	r3, [r3, #2]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fed4 	bl	800d13c <ptr_to_mem>
 800d394:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d39e:	d818      	bhi.n	800d3d2 <mem_link_valid+0x66>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	885b      	ldrh	r3, [r3, #2]
 800d3a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3a8:	d813      	bhi.n	800d3d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d3ae:	8afa      	ldrh	r2, [r7, #22]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d004      	beq.n	800d3be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	8afa      	ldrh	r2, [r7, #22]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d109      	bne.n	800d3d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d3be:	4b08      	ldr	r3, [pc, #32]	; (800d3e0 <mem_link_valid+0x74>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d006      	beq.n	800d3d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	885b      	ldrh	r3, [r3, #2]
 800d3cc:	8afa      	ldrh	r2, [r7, #22]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d001      	beq.n	800d3d6 <mem_link_valid+0x6a>
    return 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	e000      	b.n	800d3d8 <mem_link_valid+0x6c>
  }
  return 1;
 800d3d6:	2301      	movs	r3, #1
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3718      	adds	r7, #24
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20004308 	.word	0x20004308

0800d3e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b088      	sub	sp, #32
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d070      	beq.n	800d4d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f003 0303 	and.w	r3, r3, #3
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00d      	beq.n	800d418 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d3fc:	4b37      	ldr	r3, [pc, #220]	; (800d4dc <mem_free+0xf8>)
 800d3fe:	f240 2273 	movw	r2, #627	; 0x273
 800d402:	4937      	ldr	r1, [pc, #220]	; (800d4e0 <mem_free+0xfc>)
 800d404:	4837      	ldr	r0, [pc, #220]	; (800d4e4 <mem_free+0x100>)
 800d406:	f00b f9af 	bl	8018768 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d40a:	f00a ff79 	bl	8018300 <sys_arch_protect>
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f00a ff83 	bl	801831c <sys_arch_unprotect>
    return;
 800d416:	e05e      	b.n	800d4d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	3b08      	subs	r3, #8
 800d41c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d41e:	4b32      	ldr	r3, [pc, #200]	; (800d4e8 <mem_free+0x104>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	69fa      	ldr	r2, [r7, #28]
 800d424:	429a      	cmp	r2, r3
 800d426:	d306      	bcc.n	800d436 <mem_free+0x52>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f103 020c 	add.w	r2, r3, #12
 800d42e:	4b2f      	ldr	r3, [pc, #188]	; (800d4ec <mem_free+0x108>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d90d      	bls.n	800d452 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d436:	4b29      	ldr	r3, [pc, #164]	; (800d4dc <mem_free+0xf8>)
 800d438:	f240 227f 	movw	r2, #639	; 0x27f
 800d43c:	492c      	ldr	r1, [pc, #176]	; (800d4f0 <mem_free+0x10c>)
 800d43e:	4829      	ldr	r0, [pc, #164]	; (800d4e4 <mem_free+0x100>)
 800d440:	f00b f992 	bl	8018768 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d444:	f00a ff5c 	bl	8018300 <sys_arch_protect>
 800d448:	6138      	str	r0, [r7, #16]
 800d44a:	6938      	ldr	r0, [r7, #16]
 800d44c:	f00a ff66 	bl	801831c <sys_arch_unprotect>
    return;
 800d450:	e041      	b.n	800d4d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d452:	4828      	ldr	r0, [pc, #160]	; (800d4f4 <mem_free+0x110>)
 800d454:	f00a ff12 	bl	801827c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	791b      	ldrb	r3, [r3, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d110      	bne.n	800d482 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d460:	4b1e      	ldr	r3, [pc, #120]	; (800d4dc <mem_free+0xf8>)
 800d462:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d466:	4924      	ldr	r1, [pc, #144]	; (800d4f8 <mem_free+0x114>)
 800d468:	481e      	ldr	r0, [pc, #120]	; (800d4e4 <mem_free+0x100>)
 800d46a:	f00b f97d 	bl	8018768 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d46e:	4821      	ldr	r0, [pc, #132]	; (800d4f4 <mem_free+0x110>)
 800d470:	f00a ff13 	bl	801829a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d474:	f00a ff44 	bl	8018300 <sys_arch_protect>
 800d478:	6178      	str	r0, [r7, #20]
 800d47a:	6978      	ldr	r0, [r7, #20]
 800d47c:	f00a ff4e 	bl	801831c <sys_arch_unprotect>
    return;
 800d480:	e029      	b.n	800d4d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d482:	69f8      	ldr	r0, [r7, #28]
 800d484:	f7ff ff72 	bl	800d36c <mem_link_valid>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d110      	bne.n	800d4b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <mem_free+0xf8>)
 800d490:	f240 2295 	movw	r2, #661	; 0x295
 800d494:	4919      	ldr	r1, [pc, #100]	; (800d4fc <mem_free+0x118>)
 800d496:	4813      	ldr	r0, [pc, #76]	; (800d4e4 <mem_free+0x100>)
 800d498:	f00b f966 	bl	8018768 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d49c:	4815      	ldr	r0, [pc, #84]	; (800d4f4 <mem_free+0x110>)
 800d49e:	f00a fefc 	bl	801829a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4a2:	f00a ff2d 	bl	8018300 <sys_arch_protect>
 800d4a6:	61b8      	str	r0, [r7, #24]
 800d4a8:	69b8      	ldr	r0, [r7, #24]
 800d4aa:	f00a ff37 	bl	801831c <sys_arch_unprotect>
    return;
 800d4ae:	e012      	b.n	800d4d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d4b6:	4b12      	ldr	r3, [pc, #72]	; (800d500 <mem_free+0x11c>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	69fa      	ldr	r2, [r7, #28]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d202      	bcs.n	800d4c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d4c0:	4a0f      	ldr	r2, [pc, #60]	; (800d500 <mem_free+0x11c>)
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d4c6:	69f8      	ldr	r0, [r7, #28]
 800d4c8:	f7ff fe5c 	bl	800d184 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d4cc:	4809      	ldr	r0, [pc, #36]	; (800d4f4 <mem_free+0x110>)
 800d4ce:	f00a fee4 	bl	801829a <sys_mutex_unlock>
 800d4d2:	e000      	b.n	800d4d6 <mem_free+0xf2>
    return;
 800d4d4:	bf00      	nop
}
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	0801ab00 	.word	0x0801ab00
 800d4e0:	0801abf0 	.word	0x0801abf0
 800d4e4:	0801ab48 	.word	0x0801ab48
 800d4e8:	20004304 	.word	0x20004304
 800d4ec:	20004308 	.word	0x20004308
 800d4f0:	0801ac14 	.word	0x0801ac14
 800d4f4:	2000430c 	.word	0x2000430c
 800d4f8:	0801ac30 	.word	0x0801ac30
 800d4fc:	0801ac58 	.word	0x0801ac58
 800d500:	20004310 	.word	0x20004310

0800d504 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b088      	sub	sp, #32
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d510:	887b      	ldrh	r3, [r7, #2]
 800d512:	3303      	adds	r3, #3
 800d514:	b29b      	uxth	r3, r3
 800d516:	f023 0303 	bic.w	r3, r3, #3
 800d51a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d51c:	8bfb      	ldrh	r3, [r7, #30]
 800d51e:	2b0b      	cmp	r3, #11
 800d520:	d801      	bhi.n	800d526 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d522:	230c      	movs	r3, #12
 800d524:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d526:	8bfb      	ldrh	r3, [r7, #30]
 800d528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d52c:	d803      	bhi.n	800d536 <mem_trim+0x32>
 800d52e:	8bfa      	ldrh	r2, [r7, #30]
 800d530:	887b      	ldrh	r3, [r7, #2]
 800d532:	429a      	cmp	r2, r3
 800d534:	d201      	bcs.n	800d53a <mem_trim+0x36>
    return NULL;
 800d536:	2300      	movs	r3, #0
 800d538:	e0d8      	b.n	800d6ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d53a:	4b6e      	ldr	r3, [pc, #440]	; (800d6f4 <mem_trim+0x1f0>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d304      	bcc.n	800d54e <mem_trim+0x4a>
 800d544:	4b6c      	ldr	r3, [pc, #432]	; (800d6f8 <mem_trim+0x1f4>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d306      	bcc.n	800d55c <mem_trim+0x58>
 800d54e:	4b6b      	ldr	r3, [pc, #428]	; (800d6fc <mem_trim+0x1f8>)
 800d550:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d554:	496a      	ldr	r1, [pc, #424]	; (800d700 <mem_trim+0x1fc>)
 800d556:	486b      	ldr	r0, [pc, #428]	; (800d704 <mem_trim+0x200>)
 800d558:	f00b f906 	bl	8018768 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d55c:	4b65      	ldr	r3, [pc, #404]	; (800d6f4 <mem_trim+0x1f0>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	429a      	cmp	r2, r3
 800d564:	d304      	bcc.n	800d570 <mem_trim+0x6c>
 800d566:	4b64      	ldr	r3, [pc, #400]	; (800d6f8 <mem_trim+0x1f4>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d307      	bcc.n	800d580 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d570:	f00a fec6 	bl	8018300 <sys_arch_protect>
 800d574:	60b8      	str	r0, [r7, #8]
 800d576:	68b8      	ldr	r0, [r7, #8]
 800d578:	f00a fed0 	bl	801831c <sys_arch_unprotect>
    return rmem;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	e0b5      	b.n	800d6ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3b08      	subs	r3, #8
 800d584:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d586:	69b8      	ldr	r0, [r7, #24]
 800d588:	f7ff fdea 	bl	800d160 <mem_to_ptr>
 800d58c:	4603      	mov	r3, r0
 800d58e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	881a      	ldrh	r2, [r3, #0]
 800d594:	8afb      	ldrh	r3, [r7, #22]
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	3b08      	subs	r3, #8
 800d59c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d59e:	8bfa      	ldrh	r2, [r7, #30]
 800d5a0:	8abb      	ldrh	r3, [r7, #20]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d906      	bls.n	800d5b4 <mem_trim+0xb0>
 800d5a6:	4b55      	ldr	r3, [pc, #340]	; (800d6fc <mem_trim+0x1f8>)
 800d5a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d5ac:	4956      	ldr	r1, [pc, #344]	; (800d708 <mem_trim+0x204>)
 800d5ae:	4855      	ldr	r0, [pc, #340]	; (800d704 <mem_trim+0x200>)
 800d5b0:	f00b f8da 	bl	8018768 <iprintf>
  if (newsize > size) {
 800d5b4:	8bfa      	ldrh	r2, [r7, #30]
 800d5b6:	8abb      	ldrh	r3, [r7, #20]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d901      	bls.n	800d5c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e095      	b.n	800d6ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d5c0:	8bfa      	ldrh	r2, [r7, #30]
 800d5c2:	8abb      	ldrh	r3, [r7, #20]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d101      	bne.n	800d5cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	e08f      	b.n	800d6ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d5cc:	484f      	ldr	r0, [pc, #316]	; (800d70c <mem_trim+0x208>)
 800d5ce:	f00a fe55 	bl	801827c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	881b      	ldrh	r3, [r3, #0]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fdb0 	bl	800d13c <ptr_to_mem>
 800d5dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	791b      	ldrb	r3, [r3, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d13f      	bne.n	800d666 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5ee:	d106      	bne.n	800d5fe <mem_trim+0xfa>
 800d5f0:	4b42      	ldr	r3, [pc, #264]	; (800d6fc <mem_trim+0x1f8>)
 800d5f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d5f6:	4946      	ldr	r1, [pc, #280]	; (800d710 <mem_trim+0x20c>)
 800d5f8:	4842      	ldr	r0, [pc, #264]	; (800d704 <mem_trim+0x200>)
 800d5fa:	f00b f8b5 	bl	8018768 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	881b      	ldrh	r3, [r3, #0]
 800d602:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d604:	8afa      	ldrh	r2, [r7, #22]
 800d606:	8bfb      	ldrh	r3, [r7, #30]
 800d608:	4413      	add	r3, r2
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	3308      	adds	r3, #8
 800d60e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d610:	4b40      	ldr	r3, [pc, #256]	; (800d714 <mem_trim+0x210>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	429a      	cmp	r2, r3
 800d618:	d106      	bne.n	800d628 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d61a:	89fb      	ldrh	r3, [r7, #14]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff fd8d 	bl	800d13c <ptr_to_mem>
 800d622:	4603      	mov	r3, r0
 800d624:	4a3b      	ldr	r2, [pc, #236]	; (800d714 <mem_trim+0x210>)
 800d626:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d628:	89fb      	ldrh	r3, [r7, #14]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff fd86 	bl	800d13c <ptr_to_mem>
 800d630:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2200      	movs	r2, #0
 800d636:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	89ba      	ldrh	r2, [r7, #12]
 800d63c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	8afa      	ldrh	r2, [r7, #22]
 800d642:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	89fa      	ldrh	r2, [r7, #14]
 800d648:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d652:	d047      	beq.n	800d6e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	881b      	ldrh	r3, [r3, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff fd6f 	bl	800d13c <ptr_to_mem>
 800d65e:	4602      	mov	r2, r0
 800d660:	89fb      	ldrh	r3, [r7, #14]
 800d662:	8053      	strh	r3, [r2, #2]
 800d664:	e03e      	b.n	800d6e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d666:	8bfb      	ldrh	r3, [r7, #30]
 800d668:	f103 0214 	add.w	r2, r3, #20
 800d66c:	8abb      	ldrh	r3, [r7, #20]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d838      	bhi.n	800d6e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d672:	8afa      	ldrh	r2, [r7, #22]
 800d674:	8bfb      	ldrh	r3, [r7, #30]
 800d676:	4413      	add	r3, r2
 800d678:	b29b      	uxth	r3, r3
 800d67a:	3308      	adds	r3, #8
 800d67c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d686:	d106      	bne.n	800d696 <mem_trim+0x192>
 800d688:	4b1c      	ldr	r3, [pc, #112]	; (800d6fc <mem_trim+0x1f8>)
 800d68a:	f240 3216 	movw	r2, #790	; 0x316
 800d68e:	4920      	ldr	r1, [pc, #128]	; (800d710 <mem_trim+0x20c>)
 800d690:	481c      	ldr	r0, [pc, #112]	; (800d704 <mem_trim+0x200>)
 800d692:	f00b f869 	bl	8018768 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d696:	89fb      	ldrh	r3, [r7, #14]
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff fd4f 	bl	800d13c <ptr_to_mem>
 800d69e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d6a0:	4b1c      	ldr	r3, [pc, #112]	; (800d714 <mem_trim+0x210>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d202      	bcs.n	800d6b0 <mem_trim+0x1ac>
      lfree = mem2;
 800d6aa:	4a1a      	ldr	r2, [pc, #104]	; (800d714 <mem_trim+0x210>)
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	881a      	ldrh	r2, [r3, #0]
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	8afa      	ldrh	r2, [r7, #22]
 800d6c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	89fa      	ldrh	r2, [r7, #14]
 800d6c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6d2:	d007      	beq.n	800d6e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fd2f 	bl	800d13c <ptr_to_mem>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	89fb      	ldrh	r3, [r7, #14]
 800d6e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d6e4:	4809      	ldr	r0, [pc, #36]	; (800d70c <mem_trim+0x208>)
 800d6e6:	f00a fdd8 	bl	801829a <sys_mutex_unlock>
  return rmem;
 800d6ea:	687b      	ldr	r3, [r7, #4]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3720      	adds	r7, #32
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20004304 	.word	0x20004304
 800d6f8:	20004308 	.word	0x20004308
 800d6fc:	0801ab00 	.word	0x0801ab00
 800d700:	0801ac8c 	.word	0x0801ac8c
 800d704:	0801ab48 	.word	0x0801ab48
 800d708:	0801aca4 	.word	0x0801aca4
 800d70c:	2000430c 	.word	0x2000430c
 800d710:	0801acc4 	.word	0x0801acc4
 800d714:	20004310 	.word	0x20004310

0800d718 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	4603      	mov	r3, r0
 800d720:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d722:	88fb      	ldrh	r3, [r7, #6]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <mem_malloc+0x14>
    return NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	e0e2      	b.n	800d8f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	3303      	adds	r3, #3
 800d730:	b29b      	uxth	r3, r3
 800d732:	f023 0303 	bic.w	r3, r3, #3
 800d736:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d738:	8bbb      	ldrh	r3, [r7, #28]
 800d73a:	2b0b      	cmp	r3, #11
 800d73c:	d801      	bhi.n	800d742 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d73e:	230c      	movs	r3, #12
 800d740:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d742:	8bbb      	ldrh	r3, [r7, #28]
 800d744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d748:	d803      	bhi.n	800d752 <mem_malloc+0x3a>
 800d74a:	8bba      	ldrh	r2, [r7, #28]
 800d74c:	88fb      	ldrh	r3, [r7, #6]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d201      	bcs.n	800d756 <mem_malloc+0x3e>
    return NULL;
 800d752:	2300      	movs	r3, #0
 800d754:	e0cd      	b.n	800d8f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d756:	4869      	ldr	r0, [pc, #420]	; (800d8fc <mem_malloc+0x1e4>)
 800d758:	f00a fd90 	bl	801827c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d75c:	4b68      	ldr	r3, [pc, #416]	; (800d900 <mem_malloc+0x1e8>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff fcfd 	bl	800d160 <mem_to_ptr>
 800d766:	4603      	mov	r3, r0
 800d768:	83fb      	strh	r3, [r7, #30]
 800d76a:	e0b7      	b.n	800d8dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d76c:	8bfb      	ldrh	r3, [r7, #30]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7ff fce4 	bl	800d13c <ptr_to_mem>
 800d774:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	791b      	ldrb	r3, [r3, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f040 80a7 	bne.w	800d8ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	8bfb      	ldrh	r3, [r7, #30]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	f1a3 0208 	sub.w	r2, r3, #8
 800d78e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d790:	429a      	cmp	r2, r3
 800d792:	f0c0 809c 	bcc.w	800d8ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	461a      	mov	r2, r3
 800d79c:	8bfb      	ldrh	r3, [r7, #30]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	f1a3 0208 	sub.w	r2, r3, #8
 800d7a4:	8bbb      	ldrh	r3, [r7, #28]
 800d7a6:	3314      	adds	r3, #20
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d333      	bcc.n	800d814 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d7ac:	8bfa      	ldrh	r2, [r7, #30]
 800d7ae:	8bbb      	ldrh	r3, [r7, #28]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d7b8:	8a7b      	ldrh	r3, [r7, #18]
 800d7ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7be:	d106      	bne.n	800d7ce <mem_malloc+0xb6>
 800d7c0:	4b50      	ldr	r3, [pc, #320]	; (800d904 <mem_malloc+0x1ec>)
 800d7c2:	f240 3287 	movw	r2, #903	; 0x387
 800d7c6:	4950      	ldr	r1, [pc, #320]	; (800d908 <mem_malloc+0x1f0>)
 800d7c8:	4850      	ldr	r0, [pc, #320]	; (800d90c <mem_malloc+0x1f4>)
 800d7ca:	f00a ffcd 	bl	8018768 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d7ce:	8a7b      	ldrh	r3, [r7, #18]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fcb3 	bl	800d13c <ptr_to_mem>
 800d7d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	881a      	ldrh	r2, [r3, #0]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8bfa      	ldrh	r2, [r7, #30]
 800d7ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	8a7a      	ldrh	r2, [r7, #18]
 800d7f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d800:	d00b      	beq.n	800d81a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	4618      	mov	r0, r3
 800d808:	f7ff fc98 	bl	800d13c <ptr_to_mem>
 800d80c:	4602      	mov	r2, r0
 800d80e:	8a7b      	ldrh	r3, [r7, #18]
 800d810:	8053      	strh	r3, [r2, #2]
 800d812:	e002      	b.n	800d81a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	2201      	movs	r2, #1
 800d818:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d81a:	4b39      	ldr	r3, [pc, #228]	; (800d900 <mem_malloc+0x1e8>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	429a      	cmp	r2, r3
 800d822:	d127      	bne.n	800d874 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d824:	4b36      	ldr	r3, [pc, #216]	; (800d900 <mem_malloc+0x1e8>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d82a:	e005      	b.n	800d838 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff fc83 	bl	800d13c <ptr_to_mem>
 800d836:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	791b      	ldrb	r3, [r3, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d004      	beq.n	800d84a <mem_malloc+0x132>
 800d840:	4b33      	ldr	r3, [pc, #204]	; (800d910 <mem_malloc+0x1f8>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	69ba      	ldr	r2, [r7, #24]
 800d846:	429a      	cmp	r2, r3
 800d848:	d1f0      	bne.n	800d82c <mem_malloc+0x114>
          }
          lfree = cur;
 800d84a:	4a2d      	ldr	r2, [pc, #180]	; (800d900 <mem_malloc+0x1e8>)
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d850:	4b2b      	ldr	r3, [pc, #172]	; (800d900 <mem_malloc+0x1e8>)
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	4b2e      	ldr	r3, [pc, #184]	; (800d910 <mem_malloc+0x1f8>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d00b      	beq.n	800d874 <mem_malloc+0x15c>
 800d85c:	4b28      	ldr	r3, [pc, #160]	; (800d900 <mem_malloc+0x1e8>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	791b      	ldrb	r3, [r3, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <mem_malloc+0x15c>
 800d866:	4b27      	ldr	r3, [pc, #156]	; (800d904 <mem_malloc+0x1ec>)
 800d868:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d86c:	4929      	ldr	r1, [pc, #164]	; (800d914 <mem_malloc+0x1fc>)
 800d86e:	4827      	ldr	r0, [pc, #156]	; (800d90c <mem_malloc+0x1f4>)
 800d870:	f00a ff7a 	bl	8018768 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d874:	4821      	ldr	r0, [pc, #132]	; (800d8fc <mem_malloc+0x1e4>)
 800d876:	f00a fd10 	bl	801829a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d87a:	8bba      	ldrh	r2, [r7, #28]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	4413      	add	r3, r2
 800d880:	3308      	adds	r3, #8
 800d882:	4a23      	ldr	r2, [pc, #140]	; (800d910 <mem_malloc+0x1f8>)
 800d884:	6812      	ldr	r2, [r2, #0]
 800d886:	4293      	cmp	r3, r2
 800d888:	d906      	bls.n	800d898 <mem_malloc+0x180>
 800d88a:	4b1e      	ldr	r3, [pc, #120]	; (800d904 <mem_malloc+0x1ec>)
 800d88c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d890:	4921      	ldr	r1, [pc, #132]	; (800d918 <mem_malloc+0x200>)
 800d892:	481e      	ldr	r0, [pc, #120]	; (800d90c <mem_malloc+0x1f4>)
 800d894:	f00a ff68 	bl	8018768 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f003 0303 	and.w	r3, r3, #3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d006      	beq.n	800d8b0 <mem_malloc+0x198>
 800d8a2:	4b18      	ldr	r3, [pc, #96]	; (800d904 <mem_malloc+0x1ec>)
 800d8a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d8a8:	491c      	ldr	r1, [pc, #112]	; (800d91c <mem_malloc+0x204>)
 800d8aa:	4818      	ldr	r0, [pc, #96]	; (800d90c <mem_malloc+0x1f4>)
 800d8ac:	f00a ff5c 	bl	8018768 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	f003 0303 	and.w	r3, r3, #3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d006      	beq.n	800d8c8 <mem_malloc+0x1b0>
 800d8ba:	4b12      	ldr	r3, [pc, #72]	; (800d904 <mem_malloc+0x1ec>)
 800d8bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d8c0:	4917      	ldr	r1, [pc, #92]	; (800d920 <mem_malloc+0x208>)
 800d8c2:	4812      	ldr	r0, [pc, #72]	; (800d90c <mem_malloc+0x1f4>)
 800d8c4:	f00a ff50 	bl	8018768 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	3308      	adds	r3, #8
 800d8cc:	e011      	b.n	800d8f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d8ce:	8bfb      	ldrh	r3, [r7, #30]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff fc33 	bl	800d13c <ptr_to_mem>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d8dc:	8bfa      	ldrh	r2, [r7, #30]
 800d8de:	8bbb      	ldrh	r3, [r7, #28]
 800d8e0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	f4ff af41 	bcc.w	800d76c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d8ea:	4804      	ldr	r0, [pc, #16]	; (800d8fc <mem_malloc+0x1e4>)
 800d8ec:	f00a fcd5 	bl	801829a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	2000430c 	.word	0x2000430c
 800d900:	20004310 	.word	0x20004310
 800d904:	0801ab00 	.word	0x0801ab00
 800d908:	0801acc4 	.word	0x0801acc4
 800d90c:	0801ab48 	.word	0x0801ab48
 800d910:	20004308 	.word	0x20004308
 800d914:	0801acd8 	.word	0x0801acd8
 800d918:	0801acf4 	.word	0x0801acf4
 800d91c:	0801ad24 	.word	0x0801ad24
 800d920:	0801ad54 	.word	0x0801ad54

0800d924 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	3303      	adds	r3, #3
 800d93a:	f023 0303 	bic.w	r3, r3, #3
 800d93e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e011      	b.n	800d96a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	461a      	mov	r2, r3
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	4413      	add	r3, r2
 800d962:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	3301      	adds	r3, #1
 800d968:	60fb      	str	r3, [r7, #12]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	885b      	ldrh	r3, [r3, #2]
 800d96e:	461a      	mov	r2, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4293      	cmp	r3, r2
 800d974:	dbe7      	blt.n	800d946 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d976:	bf00      	nop
 800d978:	bf00      	nop
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d98a:	2300      	movs	r3, #0
 800d98c:	80fb      	strh	r3, [r7, #6]
 800d98e:	e009      	b.n	800d9a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d990:	88fb      	ldrh	r3, [r7, #6]
 800d992:	4a08      	ldr	r2, [pc, #32]	; (800d9b4 <memp_init+0x30>)
 800d994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d998:	4618      	mov	r0, r3
 800d99a:	f7ff ffc3 	bl	800d924 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d99e:	88fb      	ldrh	r3, [r7, #6]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	80fb      	strh	r3, [r7, #6]
 800d9a4:	88fb      	ldrh	r3, [r7, #6]
 800d9a6:	2b0c      	cmp	r3, #12
 800d9a8:	d9f2      	bls.n	800d990 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	0801d5a4 	.word	0x0801d5a4

0800d9b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d9c0:	f00a fc9e 	bl	8018300 <sys_arch_protect>
 800d9c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d015      	beq.n	800da00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	6812      	ldr	r2, [r2, #0]
 800d9dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f003 0303 	and.w	r3, r3, #3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <do_memp_malloc_pool+0x3e>
 800d9e8:	4b09      	ldr	r3, [pc, #36]	; (800da10 <do_memp_malloc_pool+0x58>)
 800d9ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d9ee:	4909      	ldr	r1, [pc, #36]	; (800da14 <do_memp_malloc_pool+0x5c>)
 800d9f0:	4809      	ldr	r0, [pc, #36]	; (800da18 <do_memp_malloc_pool+0x60>)
 800d9f2:	f00a feb9 	bl	8018768 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f00a fc90 	bl	801831c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	e003      	b.n	800da08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f00a fc8b 	bl	801831c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	0801ad78 	.word	0x0801ad78
 800da14:	0801ada8 	.word	0x0801ada8
 800da18:	0801adcc 	.word	0x0801adcc

0800da1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	2b0c      	cmp	r3, #12
 800da2a:	d908      	bls.n	800da3e <memp_malloc+0x22>
 800da2c:	4b0a      	ldr	r3, [pc, #40]	; (800da58 <memp_malloc+0x3c>)
 800da2e:	f240 1257 	movw	r2, #343	; 0x157
 800da32:	490a      	ldr	r1, [pc, #40]	; (800da5c <memp_malloc+0x40>)
 800da34:	480a      	ldr	r0, [pc, #40]	; (800da60 <memp_malloc+0x44>)
 800da36:	f00a fe97 	bl	8018768 <iprintf>
 800da3a:	2300      	movs	r3, #0
 800da3c:	e008      	b.n	800da50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	4a08      	ldr	r2, [pc, #32]	; (800da64 <memp_malloc+0x48>)
 800da42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff ffb6 	bl	800d9b8 <do_memp_malloc_pool>
 800da4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800da4e:	68fb      	ldr	r3, [r7, #12]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	0801ad78 	.word	0x0801ad78
 800da5c:	0801ae08 	.word	0x0801ae08
 800da60:	0801adcc 	.word	0x0801adcc
 800da64:	0801d5a4 	.word	0x0801d5a4

0800da68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	f003 0303 	and.w	r3, r3, #3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d006      	beq.n	800da8a <do_memp_free_pool+0x22>
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <do_memp_free_pool+0x4c>)
 800da7e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800da82:	490d      	ldr	r1, [pc, #52]	; (800dab8 <do_memp_free_pool+0x50>)
 800da84:	480d      	ldr	r0, [pc, #52]	; (800dabc <do_memp_free_pool+0x54>)
 800da86:	f00a fe6f 	bl	8018768 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800da8e:	f00a fc37 	bl	8018300 <sys_arch_protect>
 800da92:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800daa6:	68b8      	ldr	r0, [r7, #8]
 800daa8:	f00a fc38 	bl	801831c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800daac:	bf00      	nop
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	0801ad78 	.word	0x0801ad78
 800dab8:	0801ae28 	.word	0x0801ae28
 800dabc:	0801adcc 	.word	0x0801adcc

0800dac0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b0c      	cmp	r3, #12
 800dad0:	d907      	bls.n	800dae2 <memp_free+0x22>
 800dad2:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <memp_free+0x44>)
 800dad4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dad8:	490b      	ldr	r1, [pc, #44]	; (800db08 <memp_free+0x48>)
 800dada:	480c      	ldr	r0, [pc, #48]	; (800db0c <memp_free+0x4c>)
 800dadc:	f00a fe44 	bl	8018768 <iprintf>
 800dae0:	e00c      	b.n	800dafc <memp_free+0x3c>

  if (mem == NULL) {
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d008      	beq.n	800dafa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dae8:	79fb      	ldrb	r3, [r7, #7]
 800daea:	4a09      	ldr	r2, [pc, #36]	; (800db10 <memp_free+0x50>)
 800daec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff ffb8 	bl	800da68 <do_memp_free_pool>
 800daf8:	e000      	b.n	800dafc <memp_free+0x3c>
    return;
 800dafa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	0801ad78 	.word	0x0801ad78
 800db08:	0801ae48 	.word	0x0801ae48
 800db0c:	0801adcc 	.word	0x0801adcc
 800db10:	0801d5a4 	.word	0x0801d5a4

0800db14 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800db14:	b480      	push	{r7}
 800db16:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800db18:	bf00      	nop
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
	...

0800db24 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
 800db30:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d108      	bne.n	800db4a <netif_add+0x26>
 800db38:	4b57      	ldr	r3, [pc, #348]	; (800dc98 <netif_add+0x174>)
 800db3a:	f240 1227 	movw	r2, #295	; 0x127
 800db3e:	4957      	ldr	r1, [pc, #348]	; (800dc9c <netif_add+0x178>)
 800db40:	4857      	ldr	r0, [pc, #348]	; (800dca0 <netif_add+0x17c>)
 800db42:	f00a fe11 	bl	8018768 <iprintf>
 800db46:	2300      	movs	r3, #0
 800db48:	e0a2      	b.n	800dc90 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d108      	bne.n	800db62 <netif_add+0x3e>
 800db50:	4b51      	ldr	r3, [pc, #324]	; (800dc98 <netif_add+0x174>)
 800db52:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db56:	4953      	ldr	r1, [pc, #332]	; (800dca4 <netif_add+0x180>)
 800db58:	4851      	ldr	r0, [pc, #324]	; (800dca0 <netif_add+0x17c>)
 800db5a:	f00a fe05 	bl	8018768 <iprintf>
 800db5e:	2300      	movs	r3, #0
 800db60:	e096      	b.n	800dc90 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800db68:	4b4f      	ldr	r3, [pc, #316]	; (800dca8 <netif_add+0x184>)
 800db6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800db72:	4b4d      	ldr	r3, [pc, #308]	; (800dca8 <netif_add+0x184>)
 800db74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d101      	bne.n	800db80 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800db7c:	4b4a      	ldr	r3, [pc, #296]	; (800dca8 <netif_add+0x184>)
 800db7e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2200      	movs	r2, #0
 800db84:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	2200      	movs	r2, #0
 800db8a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2200      	movs	r2, #0
 800db90:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	4a45      	ldr	r2, [pc, #276]	; (800dcac <netif_add+0x188>)
 800db96:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6a3a      	ldr	r2, [r7, #32]
 800dbb0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dbb2:	4b3f      	ldr	r3, [pc, #252]	; (800dcb0 <netif_add+0x18c>)
 800dbb4:	781a      	ldrb	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbc0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f000 f913 	bl	800ddf4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	4798      	blx	r3
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d001      	beq.n	800dbde <netif_add+0xba>
    return NULL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e058      	b.n	800dc90 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbe4:	2bff      	cmp	r3, #255	; 0xff
 800dbe6:	d103      	bne.n	800dbf0 <netif_add+0xcc>
        netif->num = 0;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dbf4:	4b2f      	ldr	r3, [pc, #188]	; (800dcb4 <netif_add+0x190>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	617b      	str	r3, [r7, #20]
 800dbfa:	e02b      	b.n	800dc54 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d106      	bne.n	800dc12 <netif_add+0xee>
 800dc04:	4b24      	ldr	r3, [pc, #144]	; (800dc98 <netif_add+0x174>)
 800dc06:	f240 128b 	movw	r2, #395	; 0x18b
 800dc0a:	492b      	ldr	r1, [pc, #172]	; (800dcb8 <netif_add+0x194>)
 800dc0c:	4824      	ldr	r0, [pc, #144]	; (800dca0 <netif_add+0x17c>)
 800dc0e:	f00a fdab 	bl	8018768 <iprintf>
        num_netifs++;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	3301      	adds	r3, #1
 800dc16:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	2bff      	cmp	r3, #255	; 0xff
 800dc1c:	dd06      	ble.n	800dc2c <netif_add+0x108>
 800dc1e:	4b1e      	ldr	r3, [pc, #120]	; (800dc98 <netif_add+0x174>)
 800dc20:	f240 128d 	movw	r2, #397	; 0x18d
 800dc24:	4925      	ldr	r1, [pc, #148]	; (800dcbc <netif_add+0x198>)
 800dc26:	481e      	ldr	r0, [pc, #120]	; (800dca0 <netif_add+0x17c>)
 800dc28:	f00a fd9e 	bl	8018768 <iprintf>
        if (netif2->num == netif->num) {
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d108      	bne.n	800dc4e <netif_add+0x12a>
          netif->num++;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc42:	3301      	adds	r3, #1
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dc4c:	e005      	b.n	800dc5a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1d0      	bne.n	800dbfc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1be      	bne.n	800dbde <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc66:	2bfe      	cmp	r3, #254	; 0xfe
 800dc68:	d103      	bne.n	800dc72 <netif_add+0x14e>
    netif_num = 0;
 800dc6a:	4b11      	ldr	r3, [pc, #68]	; (800dcb0 <netif_add+0x18c>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	701a      	strb	r2, [r3, #0]
 800dc70:	e006      	b.n	800dc80 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc78:	3301      	adds	r3, #1
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	4b0c      	ldr	r3, [pc, #48]	; (800dcb0 <netif_add+0x18c>)
 800dc7e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dc80:	4b0c      	ldr	r3, [pc, #48]	; (800dcb4 <netif_add+0x190>)
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dc88:	4a0a      	ldr	r2, [pc, #40]	; (800dcb4 <netif_add+0x190>)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	0801ae64 	.word	0x0801ae64
 800dc9c:	0801aef8 	.word	0x0801aef8
 800dca0:	0801aeb4 	.word	0x0801aeb4
 800dca4:	0801af14 	.word	0x0801af14
 800dca8:	0801d618 	.word	0x0801d618
 800dcac:	0800e0cf 	.word	0x0800e0cf
 800dcb0:	20004348 	.word	0x20004348
 800dcb4:	2000db40 	.word	0x2000db40
 800dcb8:	0801af38 	.word	0x0801af38
 800dcbc:	0801af4c 	.word	0x0801af4c

0800dcc0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dcca:	6839      	ldr	r1, [r7, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f002 fdc7 	bl	8010860 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f007 fe5f 	bl	8015998 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dcda:	bf00      	nop
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
	...

0800dce4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <netif_do_set_ipaddr+0x20>
 800dcf6:	4b1d      	ldr	r3, [pc, #116]	; (800dd6c <netif_do_set_ipaddr+0x88>)
 800dcf8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dcfc:	491c      	ldr	r1, [pc, #112]	; (800dd70 <netif_do_set_ipaddr+0x8c>)
 800dcfe:	481d      	ldr	r0, [pc, #116]	; (800dd74 <netif_do_set_ipaddr+0x90>)
 800dd00:	f00a fd32 	bl	8018768 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d106      	bne.n	800dd18 <netif_do_set_ipaddr+0x34>
 800dd0a:	4b18      	ldr	r3, [pc, #96]	; (800dd6c <netif_do_set_ipaddr+0x88>)
 800dd0c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dd10:	4917      	ldr	r1, [pc, #92]	; (800dd70 <netif_do_set_ipaddr+0x8c>)
 800dd12:	4818      	ldr	r0, [pc, #96]	; (800dd74 <netif_do_set_ipaddr+0x90>)
 800dd14:	f00a fd28 	bl	8018768 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3304      	adds	r3, #4
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d01c      	beq.n	800dd60 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dd36:	f107 0314 	add.w	r3, r7, #20
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff ffbf 	bl	800dcc0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <netif_do_set_ipaddr+0x6a>
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	e000      	b.n	800dd50 <netif_do_set_ipaddr+0x6c>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dd54:	2101      	movs	r1, #1
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f000 f8d2 	bl	800df00 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e000      	b.n	800dd62 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	0801ae64 	.word	0x0801ae64
 800dd70:	0801af7c 	.word	0x0801af7c
 800dd74:	0801aeb4 	.word	0x0801aeb4

0800dd78 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d00a      	beq.n	800dda8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <netif_do_set_netmask+0x26>
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	e000      	b.n	800dda0 <netif_do_set_netmask+0x28>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dda4:	2301      	movs	r3, #1
 800dda6:	e000      	b.n	800ddaa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3714      	adds	r7, #20
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b085      	sub	sp, #20
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	330c      	adds	r3, #12
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d00a      	beq.n	800dde6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <netif_do_set_gw+0x26>
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	e000      	b.n	800ddde <netif_do_set_gw+0x28>
 800dddc:	2300      	movs	r3, #0
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dde2:	2301      	movs	r3, #1
 800dde4:	e000      	b.n	800dde8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b088      	sub	sp, #32
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
 800de00:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800de02:	2300      	movs	r3, #0
 800de04:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800de06:	2300      	movs	r3, #0
 800de08:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800de10:	4b1c      	ldr	r3, [pc, #112]	; (800de84 <netif_set_addr+0x90>)
 800de12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800de1a:	4b1a      	ldr	r3, [pc, #104]	; (800de84 <netif_set_addr+0x90>)
 800de1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800de24:	4b17      	ldr	r3, [pc, #92]	; (800de84 <netif_set_addr+0x90>)
 800de26:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d003      	beq.n	800de36 <netif_set_addr+0x42>
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <netif_set_addr+0x46>
 800de36:	2301      	movs	r3, #1
 800de38:	e000      	b.n	800de3c <netif_set_addr+0x48>
 800de3a:	2300      	movs	r3, #0
 800de3c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d006      	beq.n	800de52 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de44:	f107 0310 	add.w	r3, r7, #16
 800de48:	461a      	mov	r2, r3
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7ff ff49 	bl	800dce4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800de52:	69fa      	ldr	r2, [r7, #28]
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7ff ff8e 	bl	800dd78 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800de5c:	69ba      	ldr	r2, [r7, #24]
 800de5e:	6839      	ldr	r1, [r7, #0]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff ffa8 	bl	800ddb6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d106      	bne.n	800de7a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de6c:	f107 0310 	add.w	r3, r7, #16
 800de70:	461a      	mov	r2, r3
 800de72:	68b9      	ldr	r1, [r7, #8]
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7ff ff35 	bl	800dce4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800de7a:	bf00      	nop
 800de7c:	3720      	adds	r7, #32
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	0801d618 	.word	0x0801d618

0800de88 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800de90:	4a04      	ldr	r2, [pc, #16]	; (800dea4 <netif_set_default+0x1c>)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800de96:	bf00      	nop
 800de98:	370c      	adds	r7, #12
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	2000db44 	.word	0x2000db44

0800dea8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d107      	bne.n	800dec6 <netif_set_up+0x1e>
 800deb6:	4b0f      	ldr	r3, [pc, #60]	; (800def4 <netif_set_up+0x4c>)
 800deb8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800debc:	490e      	ldr	r1, [pc, #56]	; (800def8 <netif_set_up+0x50>)
 800debe:	480f      	ldr	r0, [pc, #60]	; (800defc <netif_set_up+0x54>)
 800dec0:	f00a fc52 	bl	8018768 <iprintf>
 800dec4:	e013      	b.n	800deee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d10c      	bne.n	800deee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deda:	f043 0301 	orr.w	r3, r3, #1
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dee6:	2103      	movs	r1, #3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f809 	bl	800df00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	0801ae64 	.word	0x0801ae64
 800def8:	0801afec 	.word	0x0801afec
 800defc:	0801aeb4 	.word	0x0801aeb4

0800df00 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d106      	bne.n	800df20 <netif_issue_reports+0x20>
 800df12:	4b18      	ldr	r3, [pc, #96]	; (800df74 <netif_issue_reports+0x74>)
 800df14:	f240 326d 	movw	r2, #877	; 0x36d
 800df18:	4917      	ldr	r1, [pc, #92]	; (800df78 <netif_issue_reports+0x78>)
 800df1a:	4818      	ldr	r0, [pc, #96]	; (800df7c <netif_issue_reports+0x7c>)
 800df1c:	f00a fc24 	bl	8018768 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df26:	f003 0304 	and.w	r3, r3, #4
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d01e      	beq.n	800df6c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df34:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d017      	beq.n	800df6c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800df3c:	78fb      	ldrb	r3, [r7, #3]
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d013      	beq.n	800df6e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3304      	adds	r3, #4
 800df4a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00e      	beq.n	800df6e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df56:	f003 0308 	and.w	r3, r3, #8
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d007      	beq.n	800df6e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3304      	adds	r3, #4
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f008 fc81 	bl	801686c <etharp_request>
 800df6a:	e000      	b.n	800df6e <netif_issue_reports+0x6e>
    return;
 800df6c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	0801ae64 	.word	0x0801ae64
 800df78:	0801b008 	.word	0x0801b008
 800df7c:	0801aeb4 	.word	0x0801aeb4

0800df80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d107      	bne.n	800df9e <netif_set_down+0x1e>
 800df8e:	4b12      	ldr	r3, [pc, #72]	; (800dfd8 <netif_set_down+0x58>)
 800df90:	f240 329b 	movw	r2, #923	; 0x39b
 800df94:	4911      	ldr	r1, [pc, #68]	; (800dfdc <netif_set_down+0x5c>)
 800df96:	4812      	ldr	r0, [pc, #72]	; (800dfe0 <netif_set_down+0x60>)
 800df98:	f00a fbe6 	bl	8018768 <iprintf>
 800df9c:	e019      	b.n	800dfd2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d012      	beq.n	800dfd2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfc4:	f003 0308 	and.w	r3, r3, #8
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f008 f80b 	bl	8015fe8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	0801ae64 	.word	0x0801ae64
 800dfdc:	0801b02c 	.word	0x0801b02c
 800dfe0:	0801aeb4 	.word	0x0801aeb4

0800dfe4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d107      	bne.n	800e002 <netif_set_link_up+0x1e>
 800dff2:	4b13      	ldr	r3, [pc, #76]	; (800e040 <netif_set_link_up+0x5c>)
 800dff4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dff8:	4912      	ldr	r1, [pc, #72]	; (800e044 <netif_set_link_up+0x60>)
 800dffa:	4813      	ldr	r0, [pc, #76]	; (800e048 <netif_set_link_up+0x64>)
 800dffc:	f00a fbb4 	bl	8018768 <iprintf>
 800e000:	e01b      	b.n	800e03a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e008:	f003 0304 	and.w	r3, r3, #4
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d114      	bne.n	800e03a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e016:	f043 0304 	orr.w	r3, r3, #4
 800e01a:	b2da      	uxtb	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e022:	2103      	movs	r1, #3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff ff6b 	bl	800df00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d003      	beq.n	800e03a <netif_set_link_up+0x56>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	0801ae64 	.word	0x0801ae64
 800e044:	0801b04c 	.word	0x0801b04c
 800e048:	0801aeb4 	.word	0x0801aeb4

0800e04c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d107      	bne.n	800e06a <netif_set_link_down+0x1e>
 800e05a:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <netif_set_link_down+0x54>)
 800e05c:	f240 4206 	movw	r2, #1030	; 0x406
 800e060:	4910      	ldr	r1, [pc, #64]	; (800e0a4 <netif_set_link_down+0x58>)
 800e062:	4811      	ldr	r0, [pc, #68]	; (800e0a8 <netif_set_link_down+0x5c>)
 800e064:	f00a fb80 	bl	8018768 <iprintf>
 800e068:	e017      	b.n	800e09a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e070:	f003 0304 	and.w	r3, r3, #4
 800e074:	2b00      	cmp	r3, #0
 800e076:	d010      	beq.n	800e09a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e07e:	f023 0304 	bic.w	r3, r3, #4
 800e082:	b2da      	uxtb	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	69db      	ldr	r3, [r3, #28]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <netif_set_link_down+0x4e>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	69db      	ldr	r3, [r3, #28]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	0801ae64 	.word	0x0801ae64
 800e0a4:	0801b070 	.word	0x0801b070
 800e0a8:	0801aeb4 	.word	0x0801aeb4

0800e0ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	61da      	str	r2, [r3, #28]
  }
}
 800e0c2:	bf00      	nop
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e0ce:	b480      	push	{r7}
 800e0d0:	b085      	sub	sp, #20
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	60f8      	str	r0, [r7, #12]
 800e0d6:	60b9      	str	r1, [r7, #8]
 800e0d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e0da:	f06f 030b 	mvn.w	r3, #11
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
	...

0800e0ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d013      	beq.n	800e124 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e0fc:	4b0d      	ldr	r3, [pc, #52]	; (800e134 <netif_get_by_index+0x48>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	60fb      	str	r3, [r7, #12]
 800e102:	e00c      	b.n	800e11e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e10a:	3301      	adds	r3, #1
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	79fa      	ldrb	r2, [r7, #7]
 800e110:	429a      	cmp	r2, r3
 800e112:	d101      	bne.n	800e118 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	e006      	b.n	800e126 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	60fb      	str	r3, [r7, #12]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1ef      	bne.n	800e104 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	2000db40 	.word	0x2000db40

0800e138 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e13e:	f00a f8df 	bl	8018300 <sys_arch_protect>
 800e142:	6038      	str	r0, [r7, #0]
 800e144:	4b0d      	ldr	r3, [pc, #52]	; (800e17c <pbuf_free_ooseq+0x44>)
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
 800e14a:	6838      	ldr	r0, [r7, #0]
 800e14c:	f00a f8e6 	bl	801831c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <pbuf_free_ooseq+0x48>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	607b      	str	r3, [r7, #4]
 800e156:	e00a      	b.n	800e16e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d003      	beq.n	800e168 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f002 fbbb 	bl	80108dc <tcp_free_ooseq>
      return;
 800e166:	e005      	b.n	800e174 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	607b      	str	r3, [r7, #4]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1f1      	bne.n	800e158 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e174:	3708      	adds	r7, #8
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	2000db48 	.word	0x2000db48
 800e180:	2000db50 	.word	0x2000db50

0800e184 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e18c:	f7ff ffd4 	bl	800e138 <pbuf_free_ooseq>
}
 800e190:	bf00      	nop
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e19e:	f00a f8af 	bl	8018300 <sys_arch_protect>
 800e1a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e1a4:	4b0f      	ldr	r3, [pc, #60]	; (800e1e4 <pbuf_pool_is_empty+0x4c>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e1aa:	4b0e      	ldr	r3, [pc, #56]	; (800e1e4 <pbuf_pool_is_empty+0x4c>)
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f00a f8b3 	bl	801831c <sys_arch_unprotect>

  if (!queued) {
 800e1b6:	78fb      	ldrb	r3, [r7, #3]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10f      	bne.n	800e1dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e1bc:	2100      	movs	r1, #0
 800e1be:	480a      	ldr	r0, [pc, #40]	; (800e1e8 <pbuf_pool_is_empty+0x50>)
 800e1c0:	f7fe fed6 	bl	800cf70 <tcpip_try_callback>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d008      	beq.n	800e1dc <pbuf_pool_is_empty+0x44>
 800e1ca:	f00a f899 	bl	8018300 <sys_arch_protect>
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	4b04      	ldr	r3, [pc, #16]	; (800e1e4 <pbuf_pool_is_empty+0x4c>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f00a f8a0 	bl	801831c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	2000db48 	.word	0x2000db48
 800e1e8:	0800e185 	.word	0x0800e185

0800e1ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	80fb      	strh	r3, [r7, #6]
 800e1fe:	4613      	mov	r3, r2
 800e200:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	88fa      	ldrh	r2, [r7, #6]
 800e212:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	88ba      	ldrh	r2, [r7, #4]
 800e218:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e21a:	8b3b      	ldrh	r3, [r7, #24]
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	7f3a      	ldrb	r2, [r7, #28]
 800e226:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2201      	movs	r2, #1
 800e22c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2200      	movs	r2, #0
 800e232:	73da      	strb	r2, [r3, #15]
}
 800e234:	bf00      	nop
 800e236:	3714      	adds	r7, #20
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b08c      	sub	sp, #48	; 0x30
 800e244:	af02      	add	r7, sp, #8
 800e246:	4603      	mov	r3, r0
 800e248:	71fb      	strb	r3, [r7, #7]
 800e24a:	460b      	mov	r3, r1
 800e24c:	80bb      	strh	r3, [r7, #4]
 800e24e:	4613      	mov	r3, r2
 800e250:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e256:	887b      	ldrh	r3, [r7, #2]
 800e258:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e25c:	d07f      	beq.n	800e35e <pbuf_alloc+0x11e>
 800e25e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e262:	f300 80c8 	bgt.w	800e3f6 <pbuf_alloc+0x1b6>
 800e266:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e26a:	d010      	beq.n	800e28e <pbuf_alloc+0x4e>
 800e26c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e270:	f300 80c1 	bgt.w	800e3f6 <pbuf_alloc+0x1b6>
 800e274:	2b01      	cmp	r3, #1
 800e276:	d002      	beq.n	800e27e <pbuf_alloc+0x3e>
 800e278:	2b41      	cmp	r3, #65	; 0x41
 800e27a:	f040 80bc 	bne.w	800e3f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e27e:	887a      	ldrh	r2, [r7, #2]
 800e280:	88bb      	ldrh	r3, [r7, #4]
 800e282:	4619      	mov	r1, r3
 800e284:	2000      	movs	r0, #0
 800e286:	f000 f8d1 	bl	800e42c <pbuf_alloc_reference>
 800e28a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e28c:	e0bd      	b.n	800e40a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e296:	88bb      	ldrh	r3, [r7, #4]
 800e298:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e29a:	200c      	movs	r0, #12
 800e29c:	f7ff fbbe 	bl	800da1c <memp_malloc>
 800e2a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d109      	bne.n	800e2bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e2a8:	f7ff ff76 	bl	800e198 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d002      	beq.n	800e2b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e2b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2b4:	f000 fada 	bl	800e86c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e0a7      	b.n	800e40c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e2bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2be:	3303      	adds	r3, #3
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f023 0303 	bic.w	r3, r3, #3
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	8b7a      	ldrh	r2, [r7, #26]
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	bf28      	it	cs
 800e2d4:	4613      	movcs	r3, r2
 800e2d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e2d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2da:	3310      	adds	r3, #16
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	4413      	add	r3, r2
 800e2e0:	3303      	adds	r3, #3
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	89f9      	ldrh	r1, [r7, #14]
 800e2ea:	8b7a      	ldrh	r2, [r7, #26]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	9301      	str	r3, [sp, #4]
 800e2f0:	887b      	ldrh	r3, [r7, #2]
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	6938      	ldr	r0, [r7, #16]
 800e2fa:	f7ff ff77 	bl	800e1ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f003 0303 	and.w	r3, r3, #3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d006      	beq.n	800e318 <pbuf_alloc+0xd8>
 800e30a:	4b42      	ldr	r3, [pc, #264]	; (800e414 <pbuf_alloc+0x1d4>)
 800e30c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e310:	4941      	ldr	r1, [pc, #260]	; (800e418 <pbuf_alloc+0x1d8>)
 800e312:	4842      	ldr	r0, [pc, #264]	; (800e41c <pbuf_alloc+0x1dc>)
 800e314:	f00a fa28 	bl	8018768 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e31a:	3303      	adds	r3, #3
 800e31c:	f023 0303 	bic.w	r3, r3, #3
 800e320:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e324:	d106      	bne.n	800e334 <pbuf_alloc+0xf4>
 800e326:	4b3b      	ldr	r3, [pc, #236]	; (800e414 <pbuf_alloc+0x1d4>)
 800e328:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e32c:	493c      	ldr	r1, [pc, #240]	; (800e420 <pbuf_alloc+0x1e0>)
 800e32e:	483b      	ldr	r0, [pc, #236]	; (800e41c <pbuf_alloc+0x1dc>)
 800e330:	f00a fa1a 	bl	8018768 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e336:	2b00      	cmp	r3, #0
 800e338:	d102      	bne.n	800e340 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	627b      	str	r3, [r7, #36]	; 0x24
 800e33e:	e002      	b.n	800e346 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e34a:	8b7a      	ldrh	r2, [r7, #26]
 800e34c:	89fb      	ldrh	r3, [r7, #14]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e356:	8b7b      	ldrh	r3, [r7, #26]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d19e      	bne.n	800e29a <pbuf_alloc+0x5a>
      break;
 800e35c:	e055      	b.n	800e40a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e35e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e360:	3303      	adds	r3, #3
 800e362:	b29b      	uxth	r3, r3
 800e364:	f023 0303 	bic.w	r3, r3, #3
 800e368:	b29a      	uxth	r2, r3
 800e36a:	88bb      	ldrh	r3, [r7, #4]
 800e36c:	3303      	adds	r3, #3
 800e36e:	b29b      	uxth	r3, r3
 800e370:	f023 0303 	bic.w	r3, r3, #3
 800e374:	b29b      	uxth	r3, r3
 800e376:	4413      	add	r3, r2
 800e378:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e37a:	8b3b      	ldrh	r3, [r7, #24]
 800e37c:	3310      	adds	r3, #16
 800e37e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e380:	8b3a      	ldrh	r2, [r7, #24]
 800e382:	88bb      	ldrh	r3, [r7, #4]
 800e384:	3303      	adds	r3, #3
 800e386:	f023 0303 	bic.w	r3, r3, #3
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d306      	bcc.n	800e39c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e38e:	8afa      	ldrh	r2, [r7, #22]
 800e390:	88bb      	ldrh	r3, [r7, #4]
 800e392:	3303      	adds	r3, #3
 800e394:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e398:	429a      	cmp	r2, r3
 800e39a:	d201      	bcs.n	800e3a0 <pbuf_alloc+0x160>
        return NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	e035      	b.n	800e40c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e3a0:	8afb      	ldrh	r3, [r7, #22]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff f9b8 	bl	800d718 <mem_malloc>
 800e3a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d101      	bne.n	800e3b4 <pbuf_alloc+0x174>
        return NULL;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e02b      	b.n	800e40c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e3b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3b6:	3310      	adds	r3, #16
 800e3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ba:	4413      	add	r3, r2
 800e3bc:	3303      	adds	r3, #3
 800e3be:	f023 0303 	bic.w	r3, r3, #3
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	88b9      	ldrh	r1, [r7, #4]
 800e3c6:	88ba      	ldrh	r2, [r7, #4]
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	887b      	ldrh	r3, [r7, #2]
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3d6:	f7ff ff09 	bl	800e1ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f003 0303 	and.w	r3, r3, #3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d010      	beq.n	800e408 <pbuf_alloc+0x1c8>
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	; (800e414 <pbuf_alloc+0x1d4>)
 800e3e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e3ec:	490d      	ldr	r1, [pc, #52]	; (800e424 <pbuf_alloc+0x1e4>)
 800e3ee:	480b      	ldr	r0, [pc, #44]	; (800e41c <pbuf_alloc+0x1dc>)
 800e3f0:	f00a f9ba 	bl	8018768 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e3f4:	e008      	b.n	800e408 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e3f6:	4b07      	ldr	r3, [pc, #28]	; (800e414 <pbuf_alloc+0x1d4>)
 800e3f8:	f240 1227 	movw	r2, #295	; 0x127
 800e3fc:	490a      	ldr	r1, [pc, #40]	; (800e428 <pbuf_alloc+0x1e8>)
 800e3fe:	4807      	ldr	r0, [pc, #28]	; (800e41c <pbuf_alloc+0x1dc>)
 800e400:	f00a f9b2 	bl	8018768 <iprintf>
      return NULL;
 800e404:	2300      	movs	r3, #0
 800e406:	e001      	b.n	800e40c <pbuf_alloc+0x1cc>
      break;
 800e408:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3728      	adds	r7, #40	; 0x28
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	0801b094 	.word	0x0801b094
 800e418:	0801b0c4 	.word	0x0801b0c4
 800e41c:	0801b0f4 	.word	0x0801b0f4
 800e420:	0801b11c 	.word	0x0801b11c
 800e424:	0801b150 	.word	0x0801b150
 800e428:	0801b17c 	.word	0x0801b17c

0800e42c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af02      	add	r7, sp, #8
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	807b      	strh	r3, [r7, #2]
 800e438:	4613      	mov	r3, r2
 800e43a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e43c:	883b      	ldrh	r3, [r7, #0]
 800e43e:	2b41      	cmp	r3, #65	; 0x41
 800e440:	d009      	beq.n	800e456 <pbuf_alloc_reference+0x2a>
 800e442:	883b      	ldrh	r3, [r7, #0]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d006      	beq.n	800e456 <pbuf_alloc_reference+0x2a>
 800e448:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <pbuf_alloc_reference+0x5c>)
 800e44a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e44e:	490f      	ldr	r1, [pc, #60]	; (800e48c <pbuf_alloc_reference+0x60>)
 800e450:	480f      	ldr	r0, [pc, #60]	; (800e490 <pbuf_alloc_reference+0x64>)
 800e452:	f00a f989 	bl	8018768 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e456:	200b      	movs	r0, #11
 800e458:	f7ff fae0 	bl	800da1c <memp_malloc>
 800e45c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e464:	2300      	movs	r3, #0
 800e466:	e00b      	b.n	800e480 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e468:	8879      	ldrh	r1, [r7, #2]
 800e46a:	887a      	ldrh	r2, [r7, #2]
 800e46c:	2300      	movs	r3, #0
 800e46e:	9301      	str	r3, [sp, #4]
 800e470:	883b      	ldrh	r3, [r7, #0]
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	460b      	mov	r3, r1
 800e476:	6879      	ldr	r1, [r7, #4]
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7ff feb7 	bl	800e1ec <pbuf_init_alloced_pbuf>
  return p;
 800e47e:	68fb      	ldr	r3, [r7, #12]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	0801b094 	.word	0x0801b094
 800e48c:	0801b198 	.word	0x0801b198
 800e490:	0801b0f4 	.word	0x0801b0f4

0800e494 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b088      	sub	sp, #32
 800e498:	af02      	add	r7, sp, #8
 800e49a:	607b      	str	r3, [r7, #4]
 800e49c:	4603      	mov	r3, r0
 800e49e:	73fb      	strb	r3, [r7, #15]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	81bb      	strh	r3, [r7, #12]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e4a8:	7bfb      	ldrb	r3, [r7, #15]
 800e4aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e4ac:	8a7b      	ldrh	r3, [r7, #18]
 800e4ae:	3303      	adds	r3, #3
 800e4b0:	f023 0203 	bic.w	r2, r3, #3
 800e4b4:	89bb      	ldrh	r3, [r7, #12]
 800e4b6:	441a      	add	r2, r3
 800e4b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d901      	bls.n	800e4c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e018      	b.n	800e4f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d007      	beq.n	800e4d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e4c8:	8a7b      	ldrh	r3, [r7, #18]
 800e4ca:	3303      	adds	r3, #3
 800e4cc:	f023 0303 	bic.w	r3, r3, #3
 800e4d0:	6a3a      	ldr	r2, [r7, #32]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	617b      	str	r3, [r7, #20]
 800e4d6:	e001      	b.n	800e4dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	89b9      	ldrh	r1, [r7, #12]
 800e4e0:	89ba      	ldrh	r2, [r7, #12]
 800e4e2:	2302      	movs	r3, #2
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	897b      	ldrh	r3, [r7, #10]
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	6979      	ldr	r1, [r7, #20]
 800e4ee:	f7ff fe7d 	bl	800e1ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e4f2:	687b      	ldr	r3, [r7, #4]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	460b      	mov	r3, r1
 800e506:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d106      	bne.n	800e51c <pbuf_realloc+0x20>
 800e50e:	4b3a      	ldr	r3, [pc, #232]	; (800e5f8 <pbuf_realloc+0xfc>)
 800e510:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e514:	4939      	ldr	r1, [pc, #228]	; (800e5fc <pbuf_realloc+0x100>)
 800e516:	483a      	ldr	r0, [pc, #232]	; (800e600 <pbuf_realloc+0x104>)
 800e518:	f00a f926 	bl	8018768 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	891b      	ldrh	r3, [r3, #8]
 800e520:	887a      	ldrh	r2, [r7, #2]
 800e522:	429a      	cmp	r2, r3
 800e524:	d263      	bcs.n	800e5ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	891a      	ldrh	r2, [r3, #8]
 800e52a:	887b      	ldrh	r3, [r7, #2]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e530:	887b      	ldrh	r3, [r7, #2]
 800e532:	817b      	strh	r3, [r7, #10]
  q = p;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e538:	e018      	b.n	800e56c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	895b      	ldrh	r3, [r3, #10]
 800e53e:	897a      	ldrh	r2, [r7, #10]
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	891a      	ldrh	r2, [r3, #8]
 800e548:	893b      	ldrh	r3, [r7, #8]
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <pbuf_realloc+0x70>
 800e55e:	4b26      	ldr	r3, [pc, #152]	; (800e5f8 <pbuf_realloc+0xfc>)
 800e560:	f240 12af 	movw	r2, #431	; 0x1af
 800e564:	4927      	ldr	r1, [pc, #156]	; (800e604 <pbuf_realloc+0x108>)
 800e566:	4826      	ldr	r0, [pc, #152]	; (800e600 <pbuf_realloc+0x104>)
 800e568:	f00a f8fe 	bl	8018768 <iprintf>
  while (rem_len > q->len) {
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	895b      	ldrh	r3, [r3, #10]
 800e570:	897a      	ldrh	r2, [r7, #10]
 800e572:	429a      	cmp	r2, r3
 800e574:	d8e1      	bhi.n	800e53a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	7b1b      	ldrb	r3, [r3, #12]
 800e57a:	f003 030f 	and.w	r3, r3, #15
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d121      	bne.n	800e5c6 <pbuf_realloc+0xca>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	895b      	ldrh	r3, [r3, #10]
 800e586:	897a      	ldrh	r2, [r7, #10]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d01c      	beq.n	800e5c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	7b5b      	ldrb	r3, [r3, #13]
 800e590:	f003 0302 	and.w	r3, r3, #2
 800e594:	2b00      	cmp	r3, #0
 800e596:	d116      	bne.n	800e5c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	897b      	ldrh	r3, [r7, #10]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7fe ffaa 	bl	800d504 <mem_trim>
 800e5b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d106      	bne.n	800e5c6 <pbuf_realloc+0xca>
 800e5b8:	4b0f      	ldr	r3, [pc, #60]	; (800e5f8 <pbuf_realloc+0xfc>)
 800e5ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e5be:	4912      	ldr	r1, [pc, #72]	; (800e608 <pbuf_realloc+0x10c>)
 800e5c0:	480f      	ldr	r0, [pc, #60]	; (800e600 <pbuf_realloc+0x104>)
 800e5c2:	f00a f8d1 	bl	8018768 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	897a      	ldrh	r2, [r7, #10]
 800e5ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	895a      	ldrh	r2, [r3, #10]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d004      	beq.n	800e5e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 f943 	bl	800e86c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]
 800e5ec:	e000      	b.n	800e5f0 <pbuf_realloc+0xf4>
    return;
 800e5ee:	bf00      	nop

}
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	0801b094 	.word	0x0801b094
 800e5fc:	0801b1ac 	.word	0x0801b1ac
 800e600:	0801b0f4 	.word	0x0801b0f4
 800e604:	0801b1c4 	.word	0x0801b1c4
 800e608:	0801b1dc 	.word	0x0801b1dc

0800e60c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b086      	sub	sp, #24
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4613      	mov	r3, r2
 800e618:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <pbuf_add_header_impl+0x22>
 800e620:	4b2b      	ldr	r3, [pc, #172]	; (800e6d0 <pbuf_add_header_impl+0xc4>)
 800e622:	f240 12df 	movw	r2, #479	; 0x1df
 800e626:	492b      	ldr	r1, [pc, #172]	; (800e6d4 <pbuf_add_header_impl+0xc8>)
 800e628:	482b      	ldr	r0, [pc, #172]	; (800e6d8 <pbuf_add_header_impl+0xcc>)
 800e62a:	f00a f89d 	bl	8018768 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d003      	beq.n	800e63c <pbuf_add_header_impl+0x30>
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e63a:	d301      	bcc.n	800e640 <pbuf_add_header_impl+0x34>
    return 1;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e043      	b.n	800e6c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <pbuf_add_header_impl+0x3e>
    return 0;
 800e646:	2300      	movs	r3, #0
 800e648:	e03e      	b.n	800e6c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	891a      	ldrh	r2, [r3, #8]
 800e652:	8a7b      	ldrh	r3, [r7, #18]
 800e654:	4413      	add	r3, r2
 800e656:	b29b      	uxth	r3, r3
 800e658:	8a7a      	ldrh	r2, [r7, #18]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d901      	bls.n	800e662 <pbuf_add_header_impl+0x56>
    return 1;
 800e65e:	2301      	movs	r3, #1
 800e660:	e032      	b.n	800e6c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	7b1b      	ldrb	r3, [r3, #12]
 800e666:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e668:	8a3b      	ldrh	r3, [r7, #16]
 800e66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00c      	beq.n	800e68c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	425b      	negs	r3, r3
 800e67a:	4413      	add	r3, r2
 800e67c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3310      	adds	r3, #16
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	429a      	cmp	r2, r3
 800e686:	d20d      	bcs.n	800e6a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e688:	2301      	movs	r3, #1
 800e68a:	e01d      	b.n	800e6c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d006      	beq.n	800e6a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	685a      	ldr	r2, [r3, #4]
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	425b      	negs	r3, r3
 800e69a:	4413      	add	r3, r2
 800e69c:	617b      	str	r3, [r7, #20]
 800e69e:	e001      	b.n	800e6a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e011      	b.n	800e6c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	895a      	ldrh	r2, [r3, #10]
 800e6ae:	8a7b      	ldrh	r3, [r7, #18]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	891a      	ldrh	r2, [r3, #8]
 800e6bc:	8a7b      	ldrh	r3, [r7, #18]
 800e6be:	4413      	add	r3, r2
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	0801b094 	.word	0x0801b094
 800e6d4:	0801b1f8 	.word	0x0801b1f8
 800e6d8:	0801b0f4 	.word	0x0801b0f4

0800e6dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	6839      	ldr	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff ff8e 	bl	800e60c <pbuf_add_header_impl>
 800e6f0:	4603      	mov	r3, r0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
	...

0800e6fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d106      	bne.n	800e71a <pbuf_remove_header+0x1e>
 800e70c:	4b20      	ldr	r3, [pc, #128]	; (800e790 <pbuf_remove_header+0x94>)
 800e70e:	f240 224b 	movw	r2, #587	; 0x24b
 800e712:	4920      	ldr	r1, [pc, #128]	; (800e794 <pbuf_remove_header+0x98>)
 800e714:	4820      	ldr	r0, [pc, #128]	; (800e798 <pbuf_remove_header+0x9c>)
 800e716:	f00a f827 	bl	8018768 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d003      	beq.n	800e728 <pbuf_remove_header+0x2c>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e726:	d301      	bcc.n	800e72c <pbuf_remove_header+0x30>
    return 1;
 800e728:	2301      	movs	r3, #1
 800e72a:	e02c      	b.n	800e786 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d101      	bne.n	800e736 <pbuf_remove_header+0x3a>
    return 0;
 800e732:	2300      	movs	r3, #0
 800e734:	e027      	b.n	800e786 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	895b      	ldrh	r3, [r3, #10]
 800e73e:	89fa      	ldrh	r2, [r7, #14]
 800e740:	429a      	cmp	r2, r3
 800e742:	d908      	bls.n	800e756 <pbuf_remove_header+0x5a>
 800e744:	4b12      	ldr	r3, [pc, #72]	; (800e790 <pbuf_remove_header+0x94>)
 800e746:	f240 2255 	movw	r2, #597	; 0x255
 800e74a:	4914      	ldr	r1, [pc, #80]	; (800e79c <pbuf_remove_header+0xa0>)
 800e74c:	4812      	ldr	r0, [pc, #72]	; (800e798 <pbuf_remove_header+0x9c>)
 800e74e:	f00a f80b 	bl	8018768 <iprintf>
 800e752:	2301      	movs	r3, #1
 800e754:	e017      	b.n	800e786 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	441a      	add	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	895a      	ldrh	r2, [r3, #10]
 800e76c:	89fb      	ldrh	r3, [r7, #14]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	b29a      	uxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	891a      	ldrh	r2, [r3, #8]
 800e77a:	89fb      	ldrh	r3, [r7, #14]
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	b29a      	uxth	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	0801b094 	.word	0x0801b094
 800e794:	0801b1f8 	.word	0x0801b1f8
 800e798:	0801b0f4 	.word	0x0801b0f4
 800e79c:	0801b204 	.word	0x0801b204

0800e7a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	807b      	strh	r3, [r7, #2]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e7b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	da08      	bge.n	800e7ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e7b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7bc:	425b      	negs	r3, r3
 800e7be:	4619      	mov	r1, r3
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7ff ff9b 	bl	800e6fc <pbuf_remove_header>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	e007      	b.n	800e7da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e7ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7ce:	787a      	ldrb	r2, [r7, #1]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7ff ff1a 	bl	800e60c <pbuf_add_header_impl>
 800e7d8:	4603      	mov	r3, r0
  }
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b082      	sub	sp, #8
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e7ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff ffd2 	bl	800e7a0 <pbuf_header_impl>
 800e7fc:	4603      	mov	r3, r0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b086      	sub	sp, #24
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	460b      	mov	r3, r1
 800e810:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e816:	887b      	ldrh	r3, [r7, #2]
 800e818:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e81a:	e01c      	b.n	800e856 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	895b      	ldrh	r3, [r3, #10]
 800e820:	8a7a      	ldrh	r2, [r7, #18]
 800e822:	429a      	cmp	r2, r3
 800e824:	d310      	bcc.n	800e848 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	895b      	ldrh	r3, [r3, #10]
 800e82e:	8a7a      	ldrh	r2, [r7, #18]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 f813 	bl	800e86c <pbuf_free>
 800e846:	e006      	b.n	800e856 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e848:	8a7b      	ldrh	r3, [r7, #18]
 800e84a:	4619      	mov	r1, r3
 800e84c:	6978      	ldr	r0, [r7, #20]
 800e84e:	f7ff ff55 	bl	800e6fc <pbuf_remove_header>
      free_left = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e856:	8a7b      	ldrh	r3, [r7, #18]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <pbuf_free_header+0x5c>
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1dc      	bne.n	800e81c <pbuf_free_header+0x16>
    }
  }
  return p;
 800e862:	697b      	ldr	r3, [r7, #20]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b088      	sub	sp, #32
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d10b      	bne.n	800e892 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d106      	bne.n	800e88e <pbuf_free+0x22>
 800e880:	4b3b      	ldr	r3, [pc, #236]	; (800e970 <pbuf_free+0x104>)
 800e882:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e886:	493b      	ldr	r1, [pc, #236]	; (800e974 <pbuf_free+0x108>)
 800e888:	483b      	ldr	r0, [pc, #236]	; (800e978 <pbuf_free+0x10c>)
 800e88a:	f009 ff6d 	bl	8018768 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	e069      	b.n	800e966 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e896:	e062      	b.n	800e95e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e898:	f009 fd32 	bl	8018300 <sys_arch_protect>
 800e89c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7b9b      	ldrb	r3, [r3, #14]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <pbuf_free+0x48>
 800e8a6:	4b32      	ldr	r3, [pc, #200]	; (800e970 <pbuf_free+0x104>)
 800e8a8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e8ac:	4933      	ldr	r1, [pc, #204]	; (800e97c <pbuf_free+0x110>)
 800e8ae:	4832      	ldr	r0, [pc, #200]	; (800e978 <pbuf_free+0x10c>)
 800e8b0:	f009 ff5a 	bl	8018768 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	7b9b      	ldrb	r3, [r3, #14]
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	739a      	strb	r2, [r3, #14]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7b9b      	ldrb	r3, [r3, #14]
 800e8c4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e8c6:	69b8      	ldr	r0, [r7, #24]
 800e8c8:	f009 fd28 	bl	801831c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d143      	bne.n	800e95a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	7b1b      	ldrb	r3, [r3, #12]
 800e8dc:	f003 030f 	and.w	r3, r3, #15
 800e8e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	7b5b      	ldrb	r3, [r3, #13]
 800e8e6:	f003 0302 	and.w	r3, r3, #2
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d011      	beq.n	800e912 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	691b      	ldr	r3, [r3, #16]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <pbuf_free+0x9c>
 800e8fa:	4b1d      	ldr	r3, [pc, #116]	; (800e970 <pbuf_free+0x104>)
 800e8fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e900:	491f      	ldr	r1, [pc, #124]	; (800e980 <pbuf_free+0x114>)
 800e902:	481d      	ldr	r0, [pc, #116]	; (800e978 <pbuf_free+0x10c>)
 800e904:	f009 ff30 	bl	8018768 <iprintf>
        pc->custom_free_function(p);
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	4798      	blx	r3
 800e910:	e01d      	b.n	800e94e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e912:	7bfb      	ldrb	r3, [r7, #15]
 800e914:	2b02      	cmp	r3, #2
 800e916:	d104      	bne.n	800e922 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e918:	6879      	ldr	r1, [r7, #4]
 800e91a:	200c      	movs	r0, #12
 800e91c:	f7ff f8d0 	bl	800dac0 <memp_free>
 800e920:	e015      	b.n	800e94e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e922:	7bfb      	ldrb	r3, [r7, #15]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d104      	bne.n	800e932 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e928:	6879      	ldr	r1, [r7, #4]
 800e92a:	200b      	movs	r0, #11
 800e92c:	f7ff f8c8 	bl	800dac0 <memp_free>
 800e930:	e00d      	b.n	800e94e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e932:	7bfb      	ldrb	r3, [r7, #15]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d103      	bne.n	800e940 <pbuf_free+0xd4>
          mem_free(p);
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7fe fd53 	bl	800d3e4 <mem_free>
 800e93e:	e006      	b.n	800e94e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e940:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <pbuf_free+0x104>)
 800e942:	f240 320f 	movw	r2, #783	; 0x30f
 800e946:	490f      	ldr	r1, [pc, #60]	; (800e984 <pbuf_free+0x118>)
 800e948:	480b      	ldr	r0, [pc, #44]	; (800e978 <pbuf_free+0x10c>)
 800e94a:	f009 ff0d 	bl	8018768 <iprintf>
        }
      }
      count++;
 800e94e:	7ffb      	ldrb	r3, [r7, #31]
 800e950:	3301      	adds	r3, #1
 800e952:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	607b      	str	r3, [r7, #4]
 800e958:	e001      	b.n	800e95e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e95a:	2300      	movs	r3, #0
 800e95c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d199      	bne.n	800e898 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e964:	7ffb      	ldrb	r3, [r7, #31]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3720      	adds	r7, #32
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	0801b094 	.word	0x0801b094
 800e974:	0801b1f8 	.word	0x0801b1f8
 800e978:	0801b0f4 	.word	0x0801b0f4
 800e97c:	0801b224 	.word	0x0801b224
 800e980:	0801b23c 	.word	0x0801b23c
 800e984:	0801b260 	.word	0x0801b260

0800e988 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e994:	e005      	b.n	800e9a2 <pbuf_clen+0x1a>
    ++len;
 800e996:	89fb      	ldrh	r3, [r7, #14]
 800e998:	3301      	adds	r3, #1
 800e99a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1f6      	bne.n	800e996 <pbuf_clen+0xe>
  }
  return len;
 800e9a8:	89fb      	ldrh	r3, [r7, #14]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3714      	adds	r7, #20
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
	...

0800e9b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d016      	beq.n	800e9f4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e9c6:	f009 fc9b 	bl	8018300 <sys_arch_protect>
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	7b9b      	ldrb	r3, [r3, #14]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	739a      	strb	r2, [r3, #14]
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f009 fc9f 	bl	801831c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7b9b      	ldrb	r3, [r3, #14]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d106      	bne.n	800e9f4 <pbuf_ref+0x3c>
 800e9e6:	4b05      	ldr	r3, [pc, #20]	; (800e9fc <pbuf_ref+0x44>)
 800e9e8:	f240 3242 	movw	r2, #834	; 0x342
 800e9ec:	4904      	ldr	r1, [pc, #16]	; (800ea00 <pbuf_ref+0x48>)
 800e9ee:	4805      	ldr	r0, [pc, #20]	; (800ea04 <pbuf_ref+0x4c>)
 800e9f0:	f009 feba 	bl	8018768 <iprintf>
  }
}
 800e9f4:	bf00      	nop
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	0801b094 	.word	0x0801b094
 800ea00:	0801b274 	.word	0x0801b274
 800ea04:	0801b0f4 	.word	0x0801b0f4

0800ea08 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <pbuf_cat+0x16>
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d107      	bne.n	800ea2e <pbuf_cat+0x26>
 800ea1e:	4b20      	ldr	r3, [pc, #128]	; (800eaa0 <pbuf_cat+0x98>)
 800ea20:	f240 3259 	movw	r2, #857	; 0x359
 800ea24:	491f      	ldr	r1, [pc, #124]	; (800eaa4 <pbuf_cat+0x9c>)
 800ea26:	4820      	ldr	r0, [pc, #128]	; (800eaa8 <pbuf_cat+0xa0>)
 800ea28:	f009 fe9e 	bl	8018768 <iprintf>
 800ea2c:	e034      	b.n	800ea98 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e00a      	b.n	800ea4a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	891a      	ldrh	r2, [r3, #8]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	891b      	ldrh	r3, [r3, #8]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	60fb      	str	r3, [r7, #12]
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1f0      	bne.n	800ea34 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	891a      	ldrh	r2, [r3, #8]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	895b      	ldrh	r3, [r3, #10]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d006      	beq.n	800ea6c <pbuf_cat+0x64>
 800ea5e:	4b10      	ldr	r3, [pc, #64]	; (800eaa0 <pbuf_cat+0x98>)
 800ea60:	f240 3262 	movw	r2, #866	; 0x362
 800ea64:	4911      	ldr	r1, [pc, #68]	; (800eaac <pbuf_cat+0xa4>)
 800ea66:	4810      	ldr	r0, [pc, #64]	; (800eaa8 <pbuf_cat+0xa0>)
 800ea68:	f009 fe7e 	bl	8018768 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d006      	beq.n	800ea82 <pbuf_cat+0x7a>
 800ea74:	4b0a      	ldr	r3, [pc, #40]	; (800eaa0 <pbuf_cat+0x98>)
 800ea76:	f240 3263 	movw	r2, #867	; 0x363
 800ea7a:	490d      	ldr	r1, [pc, #52]	; (800eab0 <pbuf_cat+0xa8>)
 800ea7c:	480a      	ldr	r0, [pc, #40]	; (800eaa8 <pbuf_cat+0xa0>)
 800ea7e:	f009 fe73 	bl	8018768 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	891a      	ldrh	r2, [r3, #8]
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	891b      	ldrh	r3, [r3, #8]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	0801b094 	.word	0x0801b094
 800eaa4:	0801b288 	.word	0x0801b288
 800eaa8:	0801b0f4 	.word	0x0801b0f4
 800eaac:	0801b2c0 	.word	0x0801b2c0
 800eab0:	0801b2f0 	.word	0x0801b2f0

0800eab4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff ffa1 	bl	800ea08 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800eac6:	6838      	ldr	r0, [r7, #0]
 800eac8:	f7ff ff76 	bl	800e9b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800eacc:	bf00      	nop
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b086      	sub	sp, #24
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800eade:	2300      	movs	r3, #0
 800eae0:	617b      	str	r3, [r7, #20]
 800eae2:	2300      	movs	r3, #0
 800eae4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d008      	beq.n	800eafe <pbuf_copy+0x2a>
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d005      	beq.n	800eafe <pbuf_copy+0x2a>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	891a      	ldrh	r2, [r3, #8]
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	891b      	ldrh	r3, [r3, #8]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d209      	bcs.n	800eb12 <pbuf_copy+0x3e>
 800eafe:	4b57      	ldr	r3, [pc, #348]	; (800ec5c <pbuf_copy+0x188>)
 800eb00:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eb04:	4956      	ldr	r1, [pc, #344]	; (800ec60 <pbuf_copy+0x18c>)
 800eb06:	4857      	ldr	r0, [pc, #348]	; (800ec64 <pbuf_copy+0x190>)
 800eb08:	f009 fe2e 	bl	8018768 <iprintf>
 800eb0c:	f06f 030f 	mvn.w	r3, #15
 800eb10:	e09f      	b.n	800ec52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	895b      	ldrh	r3, [r3, #10]
 800eb16:	461a      	mov	r2, r3
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	1ad2      	subs	r2, r2, r3
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	895b      	ldrh	r3, [r3, #10]
 800eb20:	4619      	mov	r1, r3
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	1acb      	subs	r3, r1, r3
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d306      	bcc.n	800eb38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	895b      	ldrh	r3, [r3, #10]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	60fb      	str	r3, [r7, #12]
 800eb36:	e005      	b.n	800eb44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	895b      	ldrh	r3, [r3, #10]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685a      	ldr	r2, [r3, #4]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	18d0      	adds	r0, r2, r3
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	4413      	add	r3, r2
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	4619      	mov	r1, r3
 800eb58:	f009 fd2c 	bl	80185b4 <memcpy>
    offset_to += len;
 800eb5c:	697a      	ldr	r2, [r7, #20]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	4413      	add	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	895b      	ldrh	r3, [r3, #10]
 800eb70:	461a      	mov	r2, r3
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d906      	bls.n	800eb86 <pbuf_copy+0xb2>
 800eb78:	4b38      	ldr	r3, [pc, #224]	; (800ec5c <pbuf_copy+0x188>)
 800eb7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb7e:	493a      	ldr	r1, [pc, #232]	; (800ec68 <pbuf_copy+0x194>)
 800eb80:	4838      	ldr	r0, [pc, #224]	; (800ec64 <pbuf_copy+0x190>)
 800eb82:	f009 fdf1 	bl	8018768 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	895b      	ldrh	r3, [r3, #10]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d906      	bls.n	800eba0 <pbuf_copy+0xcc>
 800eb92:	4b32      	ldr	r3, [pc, #200]	; (800ec5c <pbuf_copy+0x188>)
 800eb94:	f240 32da 	movw	r2, #986	; 0x3da
 800eb98:	4934      	ldr	r1, [pc, #208]	; (800ec6c <pbuf_copy+0x198>)
 800eb9a:	4832      	ldr	r0, [pc, #200]	; (800ec64 <pbuf_copy+0x190>)
 800eb9c:	f009 fde4 	bl	8018768 <iprintf>
    if (offset_from >= p_from->len) {
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	895b      	ldrh	r3, [r3, #10]
 800eba4:	461a      	mov	r2, r3
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d304      	bcc.n	800ebb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	895b      	ldrh	r3, [r3, #10]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d114      	bne.n	800ebec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10c      	bne.n	800ebec <pbuf_copy+0x118>
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d009      	beq.n	800ebec <pbuf_copy+0x118>
 800ebd8:	4b20      	ldr	r3, [pc, #128]	; (800ec5c <pbuf_copy+0x188>)
 800ebda:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ebde:	4924      	ldr	r1, [pc, #144]	; (800ec70 <pbuf_copy+0x19c>)
 800ebe0:	4820      	ldr	r0, [pc, #128]	; (800ec64 <pbuf_copy+0x190>)
 800ebe2:	f009 fdc1 	bl	8018768 <iprintf>
 800ebe6:	f06f 030f 	mvn.w	r3, #15
 800ebea:	e032      	b.n	800ec52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d013      	beq.n	800ec1a <pbuf_copy+0x146>
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	895a      	ldrh	r2, [r3, #10]
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	891b      	ldrh	r3, [r3, #8]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d10d      	bne.n	800ec1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d009      	beq.n	800ec1a <pbuf_copy+0x146>
 800ec06:	4b15      	ldr	r3, [pc, #84]	; (800ec5c <pbuf_copy+0x188>)
 800ec08:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ec0c:	4919      	ldr	r1, [pc, #100]	; (800ec74 <pbuf_copy+0x1a0>)
 800ec0e:	4815      	ldr	r0, [pc, #84]	; (800ec64 <pbuf_copy+0x190>)
 800ec10:	f009 fdaa 	bl	8018768 <iprintf>
 800ec14:	f06f 0305 	mvn.w	r3, #5
 800ec18:	e01b      	b.n	800ec52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d013      	beq.n	800ec48 <pbuf_copy+0x174>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	895a      	ldrh	r2, [r3, #10]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	891b      	ldrh	r3, [r3, #8]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d10d      	bne.n	800ec48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d009      	beq.n	800ec48 <pbuf_copy+0x174>
 800ec34:	4b09      	ldr	r3, [pc, #36]	; (800ec5c <pbuf_copy+0x188>)
 800ec36:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ec3a:	490e      	ldr	r1, [pc, #56]	; (800ec74 <pbuf_copy+0x1a0>)
 800ec3c:	4809      	ldr	r0, [pc, #36]	; (800ec64 <pbuf_copy+0x190>)
 800ec3e:	f009 fd93 	bl	8018768 <iprintf>
 800ec42:	f06f 0305 	mvn.w	r3, #5
 800ec46:	e004      	b.n	800ec52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f47f af61 	bne.w	800eb12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3718      	adds	r7, #24
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	0801b094 	.word	0x0801b094
 800ec60:	0801b33c 	.word	0x0801b33c
 800ec64:	0801b0f4 	.word	0x0801b0f4
 800ec68:	0801b36c 	.word	0x0801b36c
 800ec6c:	0801b384 	.word	0x0801b384
 800ec70:	0801b3a0 	.word	0x0801b3a0
 800ec74:	0801b3b0 	.word	0x0801b3b0

0800ec78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	4611      	mov	r1, r2
 800ec84:	461a      	mov	r2, r3
 800ec86:	460b      	mov	r3, r1
 800ec88:	80fb      	strh	r3, [r7, #6]
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec92:	2300      	movs	r3, #0
 800ec94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d108      	bne.n	800ecae <pbuf_copy_partial+0x36>
 800ec9c:	4b2b      	ldr	r3, [pc, #172]	; (800ed4c <pbuf_copy_partial+0xd4>)
 800ec9e:	f240 420a 	movw	r2, #1034	; 0x40a
 800eca2:	492b      	ldr	r1, [pc, #172]	; (800ed50 <pbuf_copy_partial+0xd8>)
 800eca4:	482b      	ldr	r0, [pc, #172]	; (800ed54 <pbuf_copy_partial+0xdc>)
 800eca6:	f009 fd5f 	bl	8018768 <iprintf>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	e04a      	b.n	800ed44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d108      	bne.n	800ecc6 <pbuf_copy_partial+0x4e>
 800ecb4:	4b25      	ldr	r3, [pc, #148]	; (800ed4c <pbuf_copy_partial+0xd4>)
 800ecb6:	f240 420b 	movw	r2, #1035	; 0x40b
 800ecba:	4927      	ldr	r1, [pc, #156]	; (800ed58 <pbuf_copy_partial+0xe0>)
 800ecbc:	4825      	ldr	r0, [pc, #148]	; (800ed54 <pbuf_copy_partial+0xdc>)
 800ecbe:	f009 fd53 	bl	8018768 <iprintf>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e03e      	b.n	800ed44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	61fb      	str	r3, [r7, #28]
 800ecca:	e034      	b.n	800ed36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800eccc:	88bb      	ldrh	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00a      	beq.n	800ece8 <pbuf_copy_partial+0x70>
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	895b      	ldrh	r3, [r3, #10]
 800ecd6:	88ba      	ldrh	r2, [r7, #4]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d305      	bcc.n	800ece8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	88ba      	ldrh	r2, [r7, #4]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	80bb      	strh	r3, [r7, #4]
 800ece6:	e023      	b.n	800ed30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	895a      	ldrh	r2, [r3, #10]
 800ecec:	88bb      	ldrh	r3, [r7, #4]
 800ecee:	1ad3      	subs	r3, r2, r3
 800ecf0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ecf2:	8b3a      	ldrh	r2, [r7, #24]
 800ecf4:	88fb      	ldrh	r3, [r7, #6]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d901      	bls.n	800ecfe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ecfa:	88fb      	ldrh	r3, [r7, #6]
 800ecfc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ecfe:	8b7b      	ldrh	r3, [r7, #26]
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	18d0      	adds	r0, r2, r3
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	685a      	ldr	r2, [r3, #4]
 800ed08:	88bb      	ldrh	r3, [r7, #4]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	8b3a      	ldrh	r2, [r7, #24]
 800ed0e:	4619      	mov	r1, r3
 800ed10:	f009 fc50 	bl	80185b4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ed14:	8afa      	ldrh	r2, [r7, #22]
 800ed16:	8b3b      	ldrh	r3, [r7, #24]
 800ed18:	4413      	add	r3, r2
 800ed1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ed1c:	8b7a      	ldrh	r2, [r7, #26]
 800ed1e:	8b3b      	ldrh	r3, [r7, #24]
 800ed20:	4413      	add	r3, r2
 800ed22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ed24:	88fa      	ldrh	r2, [r7, #6]
 800ed26:	8b3b      	ldrh	r3, [r7, #24]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	61fb      	str	r3, [r7, #28]
 800ed36:	88fb      	ldrh	r3, [r7, #6]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <pbuf_copy_partial+0xca>
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1c4      	bne.n	800eccc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ed42:	8afb      	ldrh	r3, [r7, #22]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3720      	adds	r7, #32
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	0801b094 	.word	0x0801b094
 800ed50:	0801b3dc 	.word	0x0801b3dc
 800ed54:	0801b0f4 	.word	0x0801b0f4
 800ed58:	0801b3fc 	.word	0x0801b3fc

0800ed5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	603a      	str	r2, [r7, #0]
 800ed66:	71fb      	strb	r3, [r7, #7]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	8919      	ldrh	r1, [r3, #8]
 800ed70:	88ba      	ldrh	r2, [r7, #4]
 800ed72:	79fb      	ldrb	r3, [r7, #7]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7ff fa63 	bl	800e240 <pbuf_alloc>
 800ed7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <pbuf_clone+0x2a>
    return NULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	e011      	b.n	800edaa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed86:	6839      	ldr	r1, [r7, #0]
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff fea3 	bl	800ead4 <pbuf_copy>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d006      	beq.n	800eda8 <pbuf_clone+0x4c>
 800ed9a:	4b06      	ldr	r3, [pc, #24]	; (800edb4 <pbuf_clone+0x58>)
 800ed9c:	f240 5224 	movw	r2, #1316	; 0x524
 800eda0:	4905      	ldr	r1, [pc, #20]	; (800edb8 <pbuf_clone+0x5c>)
 800eda2:	4806      	ldr	r0, [pc, #24]	; (800edbc <pbuf_clone+0x60>)
 800eda4:	f009 fce0 	bl	8018768 <iprintf>
  return q;
 800eda8:	68fb      	ldr	r3, [r7, #12]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	0801b094 	.word	0x0801b094
 800edb8:	0801b508 	.word	0x0801b508
 800edbc:	0801b0f4 	.word	0x0801b0f4

0800edc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800edc4:	f009 fd5e 	bl	8018884 <rand>
 800edc8:	4603      	mov	r3, r0
 800edca:	b29b      	uxth	r3, r3
 800edcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	4b01      	ldr	r3, [pc, #4]	; (800ede0 <tcp_init+0x20>)
 800edda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eddc:	bf00      	nop
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	20000014 	.word	0x20000014

0800ede4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	7d1b      	ldrb	r3, [r3, #20]
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d105      	bne.n	800ee00 <tcp_free+0x1c>
 800edf4:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <tcp_free+0x2c>)
 800edf6:	22d4      	movs	r2, #212	; 0xd4
 800edf8:	4906      	ldr	r1, [pc, #24]	; (800ee14 <tcp_free+0x30>)
 800edfa:	4807      	ldr	r0, [pc, #28]	; (800ee18 <tcp_free+0x34>)
 800edfc:	f009 fcb4 	bl	8018768 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ee00:	6879      	ldr	r1, [r7, #4]
 800ee02:	2001      	movs	r0, #1
 800ee04:	f7fe fe5c 	bl	800dac0 <memp_free>
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	0801b594 	.word	0x0801b594
 800ee14:	0801b5c4 	.word	0x0801b5c4
 800ee18:	0801b5d8 	.word	0x0801b5d8

0800ee1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	7d1b      	ldrb	r3, [r3, #20]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d105      	bne.n	800ee38 <tcp_free_listen+0x1c>
 800ee2c:	4b06      	ldr	r3, [pc, #24]	; (800ee48 <tcp_free_listen+0x2c>)
 800ee2e:	22df      	movs	r2, #223	; 0xdf
 800ee30:	4906      	ldr	r1, [pc, #24]	; (800ee4c <tcp_free_listen+0x30>)
 800ee32:	4807      	ldr	r0, [pc, #28]	; (800ee50 <tcp_free_listen+0x34>)
 800ee34:	f009 fc98 	bl	8018768 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	2002      	movs	r0, #2
 800ee3c:	f7fe fe40 	bl	800dac0 <memp_free>
}
 800ee40:	bf00      	nop
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	0801b594 	.word	0x0801b594
 800ee4c:	0801b600 	.word	0x0801b600
 800ee50:	0801b5d8 	.word	0x0801b5d8

0800ee54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee58:	f000 ffdc 	bl	800fe14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee5c:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <tcp_tmr+0x28>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	3301      	adds	r3, #1
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <tcp_tmr+0x28>)
 800ee66:	701a      	strb	r2, [r3, #0]
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <tcp_tmr+0x28>)
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d001      	beq.n	800ee78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee74:	f000 fc8e 	bl	800f794 <tcp_slowtmr>
  }
}
 800ee78:	bf00      	nop
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20004349 	.word	0x20004349

0800ee80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d105      	bne.n	800ee9c <tcp_remove_listener+0x1c>
 800ee90:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <tcp_remove_listener+0x48>)
 800ee92:	22ff      	movs	r2, #255	; 0xff
 800ee94:	490d      	ldr	r1, [pc, #52]	; (800eecc <tcp_remove_listener+0x4c>)
 800ee96:	480e      	ldr	r0, [pc, #56]	; (800eed0 <tcp_remove_listener+0x50>)
 800ee98:	f009 fc66 	bl	8018768 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	e00a      	b.n	800eeb8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d102      	bne.n	800eeb2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1f1      	bne.n	800eea2 <tcp_remove_listener+0x22>
    }
  }
}
 800eebe:	bf00      	nop
 800eec0:	bf00      	nop
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	0801b594 	.word	0x0801b594
 800eecc:	0801b61c 	.word	0x0801b61c
 800eed0:	0801b5d8 	.word	0x0801b5d8

0800eed4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <tcp_listen_closed+0x1c>
 800eee2:	4b14      	ldr	r3, [pc, #80]	; (800ef34 <tcp_listen_closed+0x60>)
 800eee4:	f240 1211 	movw	r2, #273	; 0x111
 800eee8:	4913      	ldr	r1, [pc, #76]	; (800ef38 <tcp_listen_closed+0x64>)
 800eeea:	4814      	ldr	r0, [pc, #80]	; (800ef3c <tcp_listen_closed+0x68>)
 800eeec:	f009 fc3c 	bl	8018768 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	7d1b      	ldrb	r3, [r3, #20]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d006      	beq.n	800ef06 <tcp_listen_closed+0x32>
 800eef8:	4b0e      	ldr	r3, [pc, #56]	; (800ef34 <tcp_listen_closed+0x60>)
 800eefa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eefe:	4910      	ldr	r1, [pc, #64]	; (800ef40 <tcp_listen_closed+0x6c>)
 800ef00:	480e      	ldr	r0, [pc, #56]	; (800ef3c <tcp_listen_closed+0x68>)
 800ef02:	f009 fc31 	bl	8018768 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef06:	2301      	movs	r3, #1
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	e00b      	b.n	800ef24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ef0c:	4a0d      	ldr	r2, [pc, #52]	; (800ef44 <tcp_listen_closed+0x70>)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6879      	ldr	r1, [r7, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff ffb1 	bl	800ee80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	3301      	adds	r3, #1
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b03      	cmp	r3, #3
 800ef28:	d9f0      	bls.n	800ef0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ef2a:	bf00      	nop
 800ef2c:	bf00      	nop
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	0801b594 	.word	0x0801b594
 800ef38:	0801b644 	.word	0x0801b644
 800ef3c:	0801b5d8 	.word	0x0801b5d8
 800ef40:	0801b650 	.word	0x0801b650
 800ef44:	0801d5f0 	.word	0x0801d5f0

0800ef48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef48:	b5b0      	push	{r4, r5, r7, lr}
 800ef4a:	b088      	sub	sp, #32
 800ef4c:	af04      	add	r7, sp, #16
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	460b      	mov	r3, r1
 800ef52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <tcp_close_shutdown+0x20>
 800ef5a:	4b63      	ldr	r3, [pc, #396]	; (800f0e8 <tcp_close_shutdown+0x1a0>)
 800ef5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef60:	4962      	ldr	r1, [pc, #392]	; (800f0ec <tcp_close_shutdown+0x1a4>)
 800ef62:	4863      	ldr	r0, [pc, #396]	; (800f0f0 <tcp_close_shutdown+0x1a8>)
 800ef64:	f009 fc00 	bl	8018768 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef68:	78fb      	ldrb	r3, [r7, #3]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d066      	beq.n	800f03c <tcp_close_shutdown+0xf4>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	7d1b      	ldrb	r3, [r3, #20]
 800ef72:	2b04      	cmp	r3, #4
 800ef74:	d003      	beq.n	800ef7e <tcp_close_shutdown+0x36>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	7d1b      	ldrb	r3, [r3, #20]
 800ef7a:	2b07      	cmp	r3, #7
 800ef7c:	d15e      	bne.n	800f03c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d104      	bne.n	800ef90 <tcp_close_shutdown+0x48>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef8e:	d055      	beq.n	800f03c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	8b5b      	ldrh	r3, [r3, #26]
 800ef94:	f003 0310 	and.w	r3, r3, #16
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <tcp_close_shutdown+0x62>
 800ef9c:	4b52      	ldr	r3, [pc, #328]	; (800f0e8 <tcp_close_shutdown+0x1a0>)
 800ef9e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800efa2:	4954      	ldr	r1, [pc, #336]	; (800f0f4 <tcp_close_shutdown+0x1ac>)
 800efa4:	4852      	ldr	r0, [pc, #328]	; (800f0f0 <tcp_close_shutdown+0x1a8>)
 800efa6:	f009 fbdf 	bl	8018768 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800efb2:	687d      	ldr	r5, [r7, #4]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	3304      	adds	r3, #4
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	8ad2      	ldrh	r2, [r2, #22]
 800efbc:	6879      	ldr	r1, [r7, #4]
 800efbe:	8b09      	ldrh	r1, [r1, #24]
 800efc0:	9102      	str	r1, [sp, #8]
 800efc2:	9201      	str	r2, [sp, #4]
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	462b      	mov	r3, r5
 800efc8:	4622      	mov	r2, r4
 800efca:	4601      	mov	r1, r0
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f005 fced 	bl	80149ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f001 face 	bl	8010574 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800efd8:	4b47      	ldr	r3, [pc, #284]	; (800f0f8 <tcp_close_shutdown+0x1b0>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d105      	bne.n	800efee <tcp_close_shutdown+0xa6>
 800efe2:	4b45      	ldr	r3, [pc, #276]	; (800f0f8 <tcp_close_shutdown+0x1b0>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	4a43      	ldr	r2, [pc, #268]	; (800f0f8 <tcp_close_shutdown+0x1b0>)
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	e013      	b.n	800f016 <tcp_close_shutdown+0xce>
 800efee:	4b42      	ldr	r3, [pc, #264]	; (800f0f8 <tcp_close_shutdown+0x1b0>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	e00c      	b.n	800f010 <tcp_close_shutdown+0xc8>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	429a      	cmp	r2, r3
 800effe:	d104      	bne.n	800f00a <tcp_close_shutdown+0xc2>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68da      	ldr	r2, [r3, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	60da      	str	r2, [r3, #12]
 800f008:	e005      	b.n	800f016 <tcp_close_shutdown+0xce>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1ef      	bne.n	800eff6 <tcp_close_shutdown+0xae>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	60da      	str	r2, [r3, #12]
 800f01c:	4b37      	ldr	r3, [pc, #220]	; (800f0fc <tcp_close_shutdown+0x1b4>)
 800f01e:	2201      	movs	r2, #1
 800f020:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f022:	4b37      	ldr	r3, [pc, #220]	; (800f100 <tcp_close_shutdown+0x1b8>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d102      	bne.n	800f032 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f02c:	f003 ff62 	bl	8012ef4 <tcp_trigger_input_pcb_close>
 800f030:	e002      	b.n	800f038 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff fed6 	bl	800ede4 <tcp_free>
      }
      return ERR_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	e050      	b.n	800f0de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7d1b      	ldrb	r3, [r3, #20]
 800f040:	2b02      	cmp	r3, #2
 800f042:	d03b      	beq.n	800f0bc <tcp_close_shutdown+0x174>
 800f044:	2b02      	cmp	r3, #2
 800f046:	dc44      	bgt.n	800f0d2 <tcp_close_shutdown+0x18a>
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <tcp_close_shutdown+0x10a>
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d02a      	beq.n	800f0a6 <tcp_close_shutdown+0x15e>
 800f050:	e03f      	b.n	800f0d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8adb      	ldrh	r3, [r3, #22]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d021      	beq.n	800f09e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f05a:	4b2a      	ldr	r3, [pc, #168]	; (800f104 <tcp_close_shutdown+0x1bc>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	429a      	cmp	r2, r3
 800f062:	d105      	bne.n	800f070 <tcp_close_shutdown+0x128>
 800f064:	4b27      	ldr	r3, [pc, #156]	; (800f104 <tcp_close_shutdown+0x1bc>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	4a26      	ldr	r2, [pc, #152]	; (800f104 <tcp_close_shutdown+0x1bc>)
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	e013      	b.n	800f098 <tcp_close_shutdown+0x150>
 800f070:	4b24      	ldr	r3, [pc, #144]	; (800f104 <tcp_close_shutdown+0x1bc>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	60bb      	str	r3, [r7, #8]
 800f076:	e00c      	b.n	800f092 <tcp_close_shutdown+0x14a>
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d104      	bne.n	800f08c <tcp_close_shutdown+0x144>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	68da      	ldr	r2, [r3, #12]
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	60da      	str	r2, [r3, #12]
 800f08a:	e005      	b.n	800f098 <tcp_close_shutdown+0x150>
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	60bb      	str	r3, [r7, #8]
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1ef      	bne.n	800f078 <tcp_close_shutdown+0x130>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f7ff fea0 	bl	800ede4 <tcp_free>
      break;
 800f0a4:	e01a      	b.n	800f0dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7ff ff14 	bl	800eed4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f0ac:	6879      	ldr	r1, [r7, #4]
 800f0ae:	4816      	ldr	r0, [pc, #88]	; (800f108 <tcp_close_shutdown+0x1c0>)
 800f0b0:	f001 fab0 	bl	8010614 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7ff feb1 	bl	800ee1c <tcp_free_listen>
      break;
 800f0ba:	e00f      	b.n	800f0dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f0bc:	6879      	ldr	r1, [r7, #4]
 800f0be:	480e      	ldr	r0, [pc, #56]	; (800f0f8 <tcp_close_shutdown+0x1b0>)
 800f0c0:	f001 faa8 	bl	8010614 <tcp_pcb_remove>
 800f0c4:	4b0d      	ldr	r3, [pc, #52]	; (800f0fc <tcp_close_shutdown+0x1b4>)
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7ff fe8a 	bl	800ede4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f0d0:	e004      	b.n	800f0dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f81a 	bl	800f10c <tcp_close_shutdown_fin>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	e000      	b.n	800f0de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	0801b594 	.word	0x0801b594
 800f0ec:	0801b668 	.word	0x0801b668
 800f0f0:	0801b5d8 	.word	0x0801b5d8
 800f0f4:	0801b688 	.word	0x0801b688
 800f0f8:	2000db50 	.word	0x2000db50
 800f0fc:	2000db4c 	.word	0x2000db4c
 800f100:	2000db64 	.word	0x2000db64
 800f104:	2000db5c 	.word	0x2000db5c
 800f108:	2000db58 	.word	0x2000db58

0800f10c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <tcp_close_shutdown_fin+0x1c>
 800f11a:	4b2e      	ldr	r3, [pc, #184]	; (800f1d4 <tcp_close_shutdown_fin+0xc8>)
 800f11c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f120:	492d      	ldr	r1, [pc, #180]	; (800f1d8 <tcp_close_shutdown_fin+0xcc>)
 800f122:	482e      	ldr	r0, [pc, #184]	; (800f1dc <tcp_close_shutdown_fin+0xd0>)
 800f124:	f009 fb20 	bl	8018768 <iprintf>

  switch (pcb->state) {
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	7d1b      	ldrb	r3, [r3, #20]
 800f12c:	2b07      	cmp	r3, #7
 800f12e:	d020      	beq.n	800f172 <tcp_close_shutdown_fin+0x66>
 800f130:	2b07      	cmp	r3, #7
 800f132:	dc2b      	bgt.n	800f18c <tcp_close_shutdown_fin+0x80>
 800f134:	2b03      	cmp	r3, #3
 800f136:	d002      	beq.n	800f13e <tcp_close_shutdown_fin+0x32>
 800f138:	2b04      	cmp	r3, #4
 800f13a:	d00d      	beq.n	800f158 <tcp_close_shutdown_fin+0x4c>
 800f13c:	e026      	b.n	800f18c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f004 fd42 	bl	8013bc8 <tcp_send_fin>
 800f144:	4603      	mov	r3, r0
 800f146:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d11f      	bne.n	800f190 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2205      	movs	r2, #5
 800f154:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f156:	e01b      	b.n	800f190 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f004 fd35 	bl	8013bc8 <tcp_send_fin>
 800f15e:	4603      	mov	r3, r0
 800f160:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d114      	bne.n	800f194 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2205      	movs	r2, #5
 800f16e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f170:	e010      	b.n	800f194 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f004 fd28 	bl	8013bc8 <tcp_send_fin>
 800f178:	4603      	mov	r3, r0
 800f17a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d109      	bne.n	800f198 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2209      	movs	r2, #9
 800f188:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f18a:	e005      	b.n	800f198 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	e01c      	b.n	800f1ca <tcp_close_shutdown_fin+0xbe>
      break;
 800f190:	bf00      	nop
 800f192:	e002      	b.n	800f19a <tcp_close_shutdown_fin+0x8e>
      break;
 800f194:	bf00      	nop
 800f196:	e000      	b.n	800f19a <tcp_close_shutdown_fin+0x8e>
      break;
 800f198:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d103      	bne.n	800f1aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f004 fe4e 	bl	8013e44 <tcp_output>
 800f1a8:	e00d      	b.n	800f1c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b2:	d108      	bne.n	800f1c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	8b5b      	ldrh	r3, [r3, #26]
 800f1b8:	f043 0308 	orr.w	r3, r3, #8
 800f1bc:	b29a      	uxth	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	e001      	b.n	800f1ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	0801b594 	.word	0x0801b594
 800f1d8:	0801b644 	.word	0x0801b644
 800f1dc:	0801b5d8 	.word	0x0801b5d8

0800f1e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d109      	bne.n	800f202 <tcp_close+0x22>
 800f1ee:	4b0f      	ldr	r3, [pc, #60]	; (800f22c <tcp_close+0x4c>)
 800f1f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f1f4:	490e      	ldr	r1, [pc, #56]	; (800f230 <tcp_close+0x50>)
 800f1f6:	480f      	ldr	r0, [pc, #60]	; (800f234 <tcp_close+0x54>)
 800f1f8:	f009 fab6 	bl	8018768 <iprintf>
 800f1fc:	f06f 030f 	mvn.w	r3, #15
 800f200:	e00f      	b.n	800f222 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	7d1b      	ldrb	r3, [r3, #20]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d006      	beq.n	800f218 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	8b5b      	ldrh	r3, [r3, #26]
 800f20e:	f043 0310 	orr.w	r3, r3, #16
 800f212:	b29a      	uxth	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f218:	2101      	movs	r1, #1
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff fe94 	bl	800ef48 <tcp_close_shutdown>
 800f220:	4603      	mov	r3, r0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	0801b594 	.word	0x0801b594
 800f230:	0801b6a4 	.word	0x0801b6a4
 800f234:	0801b5d8 	.word	0x0801b5d8

0800f238 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d109      	bne.n	800f25e <tcp_shutdown+0x26>
 800f24a:	4b26      	ldr	r3, [pc, #152]	; (800f2e4 <tcp_shutdown+0xac>)
 800f24c:	f240 2207 	movw	r2, #519	; 0x207
 800f250:	4925      	ldr	r1, [pc, #148]	; (800f2e8 <tcp_shutdown+0xb0>)
 800f252:	4826      	ldr	r0, [pc, #152]	; (800f2ec <tcp_shutdown+0xb4>)
 800f254:	f009 fa88 	bl	8018768 <iprintf>
 800f258:	f06f 030f 	mvn.w	r3, #15
 800f25c:	e03d      	b.n	800f2da <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	7d1b      	ldrb	r3, [r3, #20]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d102      	bne.n	800f26c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f266:	f06f 030a 	mvn.w	r3, #10
 800f26a:	e036      	b.n	800f2da <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d01b      	beq.n	800f2aa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8b5b      	ldrh	r3, [r3, #26]
 800f276:	f043 0310 	orr.w	r3, r3, #16
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d005      	beq.n	800f292 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f286:	2101      	movs	r1, #1
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f7ff fe5d 	bl	800ef48 <tcp_close_shutdown>
 800f28e:	4603      	mov	r3, r0
 800f290:	e023      	b.n	800f2da <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f296:	2b00      	cmp	r3, #0
 800f298:	d007      	beq.n	800f2aa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff fae4 	bl	800e86c <pbuf_free>
      pcb->refused_data = NULL;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d013      	beq.n	800f2d8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	7d1b      	ldrb	r3, [r3, #20]
 800f2b4:	2b04      	cmp	r3, #4
 800f2b6:	dc02      	bgt.n	800f2be <tcp_shutdown+0x86>
 800f2b8:	2b03      	cmp	r3, #3
 800f2ba:	da02      	bge.n	800f2c2 <tcp_shutdown+0x8a>
 800f2bc:	e009      	b.n	800f2d2 <tcp_shutdown+0x9a>
 800f2be:	2b07      	cmp	r3, #7
 800f2c0:	d107      	bne.n	800f2d2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f7ff fe3d 	bl	800ef48 <tcp_close_shutdown>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	e003      	b.n	800f2da <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f2d2:	f06f 030a 	mvn.w	r3, #10
 800f2d6:	e000      	b.n	800f2da <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	0801b594 	.word	0x0801b594
 800f2e8:	0801b6bc 	.word	0x0801b6bc
 800f2ec:	0801b5d8 	.word	0x0801b5d8

0800f2f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b08e      	sub	sp, #56	; 0x38
 800f2f4:	af04      	add	r7, sp, #16
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d107      	bne.n	800f310 <tcp_abandon+0x20>
 800f300:	4b52      	ldr	r3, [pc, #328]	; (800f44c <tcp_abandon+0x15c>)
 800f302:	f240 223d 	movw	r2, #573	; 0x23d
 800f306:	4952      	ldr	r1, [pc, #328]	; (800f450 <tcp_abandon+0x160>)
 800f308:	4852      	ldr	r0, [pc, #328]	; (800f454 <tcp_abandon+0x164>)
 800f30a:	f009 fa2d 	bl	8018768 <iprintf>
 800f30e:	e099      	b.n	800f444 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d106      	bne.n	800f326 <tcp_abandon+0x36>
 800f318:	4b4c      	ldr	r3, [pc, #304]	; (800f44c <tcp_abandon+0x15c>)
 800f31a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f31e:	494e      	ldr	r1, [pc, #312]	; (800f458 <tcp_abandon+0x168>)
 800f320:	484c      	ldr	r0, [pc, #304]	; (800f454 <tcp_abandon+0x164>)
 800f322:	f009 fa21 	bl	8018768 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	7d1b      	ldrb	r3, [r3, #20]
 800f32a:	2b0a      	cmp	r3, #10
 800f32c:	d107      	bne.n	800f33e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f32e:	6879      	ldr	r1, [r7, #4]
 800f330:	484a      	ldr	r0, [pc, #296]	; (800f45c <tcp_abandon+0x16c>)
 800f332:	f001 f96f 	bl	8010614 <tcp_pcb_remove>
    tcp_free(pcb);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff fd54 	bl	800ede4 <tcp_free>
 800f33c:	e082      	b.n	800f444 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f33e:	2300      	movs	r3, #0
 800f340:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f342:	2300      	movs	r3, #0
 800f344:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f34a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f350:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f358:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7d1b      	ldrb	r3, [r3, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d126      	bne.n	800f3b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	8adb      	ldrh	r3, [r3, #22]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d02e      	beq.n	800f3ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f370:	4b3b      	ldr	r3, [pc, #236]	; (800f460 <tcp_abandon+0x170>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	429a      	cmp	r2, r3
 800f378:	d105      	bne.n	800f386 <tcp_abandon+0x96>
 800f37a:	4b39      	ldr	r3, [pc, #228]	; (800f460 <tcp_abandon+0x170>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	4a37      	ldr	r2, [pc, #220]	; (800f460 <tcp_abandon+0x170>)
 800f382:	6013      	str	r3, [r2, #0]
 800f384:	e013      	b.n	800f3ae <tcp_abandon+0xbe>
 800f386:	4b36      	ldr	r3, [pc, #216]	; (800f460 <tcp_abandon+0x170>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	61fb      	str	r3, [r7, #28]
 800f38c:	e00c      	b.n	800f3a8 <tcp_abandon+0xb8>
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	429a      	cmp	r2, r3
 800f396:	d104      	bne.n	800f3a2 <tcp_abandon+0xb2>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	60da      	str	r2, [r3, #12]
 800f3a0:	e005      	b.n	800f3ae <tcp_abandon+0xbe>
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	61fb      	str	r3, [r7, #28]
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d1ef      	bne.n	800f38e <tcp_abandon+0x9e>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	60da      	str	r2, [r3, #12]
 800f3b4:	e00b      	b.n	800f3ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	8adb      	ldrh	r3, [r3, #22]
 800f3be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f3c0:	6879      	ldr	r1, [r7, #4]
 800f3c2:	4828      	ldr	r0, [pc, #160]	; (800f464 <tcp_abandon+0x174>)
 800f3c4:	f001 f926 	bl	8010614 <tcp_pcb_remove>
 800f3c8:	4b27      	ldr	r3, [pc, #156]	; (800f468 <tcp_abandon+0x178>)
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 fdfa 	bl	800ffd4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d004      	beq.n	800f3f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 fdf1 	bl	800ffd4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 fde8 	bl	800ffd4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00e      	beq.n	800f428 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f40a:	6879      	ldr	r1, [r7, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3304      	adds	r3, #4
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	8b12      	ldrh	r2, [r2, #24]
 800f414:	9202      	str	r2, [sp, #8]
 800f416:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f418:	9201      	str	r2, [sp, #4]
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	460b      	mov	r3, r1
 800f41e:	697a      	ldr	r2, [r7, #20]
 800f420:	69b9      	ldr	r1, [r7, #24]
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f005 fac2 	bl	80149ac <tcp_rst>
    }
    last_state = pcb->state;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	7d1b      	ldrb	r3, [r3, #20]
 800f42c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff fcd8 	bl	800ede4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d004      	beq.n	800f444 <tcp_abandon+0x154>
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f06f 010c 	mvn.w	r1, #12
 800f440:	68f8      	ldr	r0, [r7, #12]
 800f442:	4798      	blx	r3
  }
}
 800f444:	3728      	adds	r7, #40	; 0x28
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	0801b594 	.word	0x0801b594
 800f450:	0801b6d8 	.word	0x0801b6d8
 800f454:	0801b5d8 	.word	0x0801b5d8
 800f458:	0801b6f4 	.word	0x0801b6f4
 800f45c:	2000db60 	.word	0x2000db60
 800f460:	2000db5c 	.word	0x2000db5c
 800f464:	2000db50 	.word	0x2000db50
 800f468:	2000db4c 	.word	0x2000db4c

0800f46c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f474:	2101      	movs	r1, #1
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff ff3a 	bl	800f2f0 <tcp_abandon>
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b088      	sub	sp, #32
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f492:	2304      	movs	r3, #4
 800f494:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d101      	bne.n	800f4a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f49c:	4b3e      	ldr	r3, [pc, #248]	; (800f598 <tcp_bind+0x114>)
 800f49e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d109      	bne.n	800f4ba <tcp_bind+0x36>
 800f4a6:	4b3d      	ldr	r3, [pc, #244]	; (800f59c <tcp_bind+0x118>)
 800f4a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f4ac:	493c      	ldr	r1, [pc, #240]	; (800f5a0 <tcp_bind+0x11c>)
 800f4ae:	483d      	ldr	r0, [pc, #244]	; (800f5a4 <tcp_bind+0x120>)
 800f4b0:	f009 f95a 	bl	8018768 <iprintf>
 800f4b4:	f06f 030f 	mvn.w	r3, #15
 800f4b8:	e06a      	b.n	800f590 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	7d1b      	ldrb	r3, [r3, #20]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d009      	beq.n	800f4d6 <tcp_bind+0x52>
 800f4c2:	4b36      	ldr	r3, [pc, #216]	; (800f59c <tcp_bind+0x118>)
 800f4c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f4c8:	4937      	ldr	r1, [pc, #220]	; (800f5a8 <tcp_bind+0x124>)
 800f4ca:	4836      	ldr	r0, [pc, #216]	; (800f5a4 <tcp_bind+0x120>)
 800f4cc:	f009 f94c 	bl	8018768 <iprintf>
 800f4d0:	f06f 0305 	mvn.w	r3, #5
 800f4d4:	e05c      	b.n	800f590 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f4d6:	88fb      	ldrh	r3, [r7, #6]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d109      	bne.n	800f4f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f4dc:	f000 f914 	bl	800f708 <tcp_new_port>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f4e4:	88fb      	ldrh	r3, [r7, #6]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d135      	bne.n	800f556 <tcp_bind+0xd2>
      return ERR_BUF;
 800f4ea:	f06f 0301 	mvn.w	r3, #1
 800f4ee:	e04f      	b.n	800f590 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	61fb      	str	r3, [r7, #28]
 800f4f4:	e02b      	b.n	800f54e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4f6:	4a2d      	ldr	r2, [pc, #180]	; (800f5ac <tcp_bind+0x128>)
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	61bb      	str	r3, [r7, #24]
 800f502:	e01e      	b.n	800f542 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	8adb      	ldrh	r3, [r3, #22]
 800f508:	88fa      	ldrh	r2, [r7, #6]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d116      	bne.n	800f53c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f50e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f510:	2b00      	cmp	r3, #0
 800f512:	d010      	beq.n	800f536 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00c      	beq.n	800f536 <tcp_bind+0xb2>
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d009      	beq.n	800f536 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d005      	beq.n	800f536 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f532:	429a      	cmp	r2, r3
 800f534:	d102      	bne.n	800f53c <tcp_bind+0xb8>
              return ERR_USE;
 800f536:	f06f 0307 	mvn.w	r3, #7
 800f53a:	e029      	b.n	800f590 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	61bb      	str	r3, [r7, #24]
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1dd      	bne.n	800f504 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	3301      	adds	r3, #1
 800f54c:	61fb      	str	r3, [r7, #28]
 800f54e:	69fa      	ldr	r2, [r7, #28]
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	429a      	cmp	r2, r3
 800f554:	dbcf      	blt.n	800f4f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00c      	beq.n	800f576 <tcp_bind+0xf2>
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d008      	beq.n	800f576 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d002      	beq.n	800f570 <tcp_bind+0xec>
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	e000      	b.n	800f572 <tcp_bind+0xee>
 800f570:	2300      	movs	r3, #0
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	88fa      	ldrh	r2, [r7, #6]
 800f57a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f57c:	4b0c      	ldr	r3, [pc, #48]	; (800f5b0 <tcp_bind+0x12c>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	60da      	str	r2, [r3, #12]
 800f584:	4a0a      	ldr	r2, [pc, #40]	; (800f5b0 <tcp_bind+0x12c>)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6013      	str	r3, [r2, #0]
 800f58a:	f005 fbd1 	bl	8014d30 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f58e:	2300      	movs	r3, #0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3720      	adds	r7, #32
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	0801d618 	.word	0x0801d618
 800f59c:	0801b594 	.word	0x0801b594
 800f5a0:	0801b728 	.word	0x0801b728
 800f5a4:	0801b5d8 	.word	0x0801b5d8
 800f5a8:	0801b740 	.word	0x0801b740
 800f5ac:	0801d5f0 	.word	0x0801d5f0
 800f5b0:	2000db5c 	.word	0x2000db5c

0800f5b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <tcp_update_rcv_ann_wnd+0x1c>
 800f5c2:	4b25      	ldr	r3, [pc, #148]	; (800f658 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f5c8:	4924      	ldr	r1, [pc, #144]	; (800f65c <tcp_update_rcv_ann_wnd+0xa8>)
 800f5ca:	4825      	ldr	r0, [pc, #148]	; (800f660 <tcp_update_rcv_ann_wnd+0xac>)
 800f5cc:	f009 f8cc 	bl	8018768 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f5d8:	4413      	add	r3, r2
 800f5da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f5e4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f5e8:	bf28      	it	cs
 800f5ea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f5ee:	b292      	uxth	r2, r2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	db08      	blt.n	800f60c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	e020      	b.n	800f64e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	dd03      	ble.n	800f622 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f620:	e014      	b.n	800f64c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f634:	d306      	bcc.n	800f644 <tcp_update_rcv_ann_wnd+0x90>
 800f636:	4b08      	ldr	r3, [pc, #32]	; (800f658 <tcp_update_rcv_ann_wnd+0xa4>)
 800f638:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f63c:	4909      	ldr	r1, [pc, #36]	; (800f664 <tcp_update_rcv_ann_wnd+0xb0>)
 800f63e:	4808      	ldr	r0, [pc, #32]	; (800f660 <tcp_update_rcv_ann_wnd+0xac>)
 800f640:	f009 f892 	bl	8018768 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	b29a      	uxth	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f64c:	2300      	movs	r3, #0
  }
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	0801b594 	.word	0x0801b594
 800f65c:	0801b7f0 	.word	0x0801b7f0
 800f660:	0801b5d8 	.word	0x0801b5d8
 800f664:	0801b814 	.word	0x0801b814

0800f668 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	460b      	mov	r3, r1
 800f672:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d107      	bne.n	800f68a <tcp_recved+0x22>
 800f67a:	4b1f      	ldr	r3, [pc, #124]	; (800f6f8 <tcp_recved+0x90>)
 800f67c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f680:	491e      	ldr	r1, [pc, #120]	; (800f6fc <tcp_recved+0x94>)
 800f682:	481f      	ldr	r0, [pc, #124]	; (800f700 <tcp_recved+0x98>)
 800f684:	f009 f870 	bl	8018768 <iprintf>
 800f688:	e032      	b.n	800f6f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7d1b      	ldrb	r3, [r3, #20]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d106      	bne.n	800f6a0 <tcp_recved+0x38>
 800f692:	4b19      	ldr	r3, [pc, #100]	; (800f6f8 <tcp_recved+0x90>)
 800f694:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f698:	491a      	ldr	r1, [pc, #104]	; (800f704 <tcp_recved+0x9c>)
 800f69a:	4819      	ldr	r0, [pc, #100]	; (800f700 <tcp_recved+0x98>)
 800f69c:	f009 f864 	bl	8018768 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6a4:	887b      	ldrh	r3, [r7, #2]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f6aa:	89fb      	ldrh	r3, [r7, #14]
 800f6ac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f6b0:	d804      	bhi.n	800f6bc <tcp_recved+0x54>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6b6:	89fa      	ldrh	r2, [r7, #14]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d204      	bcs.n	800f6c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f6c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800f6c4:	e002      	b.n	800f6cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	89fa      	ldrh	r2, [r7, #14]
 800f6ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7ff ff71 	bl	800f5b4 <tcp_update_rcv_ann_wnd>
 800f6d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f6da:	d309      	bcc.n	800f6f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	8b5b      	ldrh	r3, [r3, #26]
 800f6e0:	f043 0302 	orr.w	r3, r3, #2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f004 fbaa 	bl	8013e44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	0801b594 	.word	0x0801b594
 800f6fc:	0801b830 	.word	0x0801b830
 800f700:	0801b5d8 	.word	0x0801b5d8
 800f704:	0801b848 	.word	0x0801b848

0800f708 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f712:	4b1e      	ldr	r3, [pc, #120]	; (800f78c <tcp_new_port+0x84>)
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	3301      	adds	r3, #1
 800f718:	b29a      	uxth	r2, r3
 800f71a:	4b1c      	ldr	r3, [pc, #112]	; (800f78c <tcp_new_port+0x84>)
 800f71c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f71e:	4b1b      	ldr	r3, [pc, #108]	; (800f78c <tcp_new_port+0x84>)
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f726:	4293      	cmp	r3, r2
 800f728:	d103      	bne.n	800f732 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f72a:	4b18      	ldr	r3, [pc, #96]	; (800f78c <tcp_new_port+0x84>)
 800f72c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f730:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f732:	2300      	movs	r3, #0
 800f734:	71fb      	strb	r3, [r7, #7]
 800f736:	e01e      	b.n	800f776 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	4a15      	ldr	r2, [pc, #84]	; (800f790 <tcp_new_port+0x88>)
 800f73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	603b      	str	r3, [r7, #0]
 800f744:	e011      	b.n	800f76a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	8ada      	ldrh	r2, [r3, #22]
 800f74a:	4b10      	ldr	r3, [pc, #64]	; (800f78c <tcp_new_port+0x84>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d108      	bne.n	800f764 <tcp_new_port+0x5c>
        n++;
 800f752:	88bb      	ldrh	r3, [r7, #4]
 800f754:	3301      	adds	r3, #1
 800f756:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f758:	88bb      	ldrh	r3, [r7, #4]
 800f75a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f75e:	d3d8      	bcc.n	800f712 <tcp_new_port+0xa>
          return 0;
 800f760:	2300      	movs	r3, #0
 800f762:	e00d      	b.n	800f780 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	603b      	str	r3, [r7, #0]
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1ea      	bne.n	800f746 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	3301      	adds	r3, #1
 800f774:	71fb      	strb	r3, [r7, #7]
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	2b03      	cmp	r3, #3
 800f77a:	d9dd      	bls.n	800f738 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f77c:	4b03      	ldr	r3, [pc, #12]	; (800f78c <tcp_new_port+0x84>)
 800f77e:	881b      	ldrh	r3, [r3, #0]
}
 800f780:	4618      	mov	r0, r3
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	20000014 	.word	0x20000014
 800f790:	0801d5f0 	.word	0x0801d5f0

0800f794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f794:	b5b0      	push	{r4, r5, r7, lr}
 800f796:	b090      	sub	sp, #64	; 0x40
 800f798:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f7a0:	4b94      	ldr	r3, [pc, #592]	; (800f9f4 <tcp_slowtmr+0x260>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	4a93      	ldr	r2, [pc, #588]	; (800f9f4 <tcp_slowtmr+0x260>)
 800f7a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f7aa:	4b93      	ldr	r3, [pc, #588]	; (800f9f8 <tcp_slowtmr+0x264>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	b2da      	uxtb	r2, r3
 800f7b2:	4b91      	ldr	r3, [pc, #580]	; (800f9f8 <tcp_slowtmr+0x264>)
 800f7b4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f7ba:	4b90      	ldr	r3, [pc, #576]	; (800f9fc <tcp_slowtmr+0x268>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f7c0:	e29d      	b.n	800fcfe <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	7d1b      	ldrb	r3, [r3, #20]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d106      	bne.n	800f7d8 <tcp_slowtmr+0x44>
 800f7ca:	4b8d      	ldr	r3, [pc, #564]	; (800fa00 <tcp_slowtmr+0x26c>)
 800f7cc:	f240 42be 	movw	r2, #1214	; 0x4be
 800f7d0:	498c      	ldr	r1, [pc, #560]	; (800fa04 <tcp_slowtmr+0x270>)
 800f7d2:	488d      	ldr	r0, [pc, #564]	; (800fa08 <tcp_slowtmr+0x274>)
 800f7d4:	f008 ffc8 	bl	8018768 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7da:	7d1b      	ldrb	r3, [r3, #20]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d106      	bne.n	800f7ee <tcp_slowtmr+0x5a>
 800f7e0:	4b87      	ldr	r3, [pc, #540]	; (800fa00 <tcp_slowtmr+0x26c>)
 800f7e2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f7e6:	4989      	ldr	r1, [pc, #548]	; (800fa0c <tcp_slowtmr+0x278>)
 800f7e8:	4887      	ldr	r0, [pc, #540]	; (800fa08 <tcp_slowtmr+0x274>)
 800f7ea:	f008 ffbd 	bl	8018768 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f0:	7d1b      	ldrb	r3, [r3, #20]
 800f7f2:	2b0a      	cmp	r3, #10
 800f7f4:	d106      	bne.n	800f804 <tcp_slowtmr+0x70>
 800f7f6:	4b82      	ldr	r3, [pc, #520]	; (800fa00 <tcp_slowtmr+0x26c>)
 800f7f8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f7fc:	4984      	ldr	r1, [pc, #528]	; (800fa10 <tcp_slowtmr+0x27c>)
 800f7fe:	4882      	ldr	r0, [pc, #520]	; (800fa08 <tcp_slowtmr+0x274>)
 800f800:	f008 ffb2 	bl	8018768 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f806:	7f9a      	ldrb	r2, [r3, #30]
 800f808:	4b7b      	ldr	r3, [pc, #492]	; (800f9f8 <tcp_slowtmr+0x264>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d105      	bne.n	800f81c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f812:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f81a:	e270      	b.n	800fcfe <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f81c:	4b76      	ldr	r3, [pc, #472]	; (800f9f8 <tcp_slowtmr+0x264>)
 800f81e:	781a      	ldrb	r2, [r3, #0]
 800f820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f822:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f82a:	2300      	movs	r3, #0
 800f82c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f832:	7d1b      	ldrb	r3, [r3, #20]
 800f834:	2b02      	cmp	r3, #2
 800f836:	d10a      	bne.n	800f84e <tcp_slowtmr+0xba>
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f83e:	2b05      	cmp	r3, #5
 800f840:	d905      	bls.n	800f84e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f846:	3301      	adds	r3, #1
 800f848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f84c:	e11e      	b.n	800fa8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f854:	2b0b      	cmp	r3, #11
 800f856:	d905      	bls.n	800f864 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f85c:	3301      	adds	r3, #1
 800f85e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f862:	e113      	b.n	800fa8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d075      	beq.n	800f95a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f872:	2b00      	cmp	r3, #0
 800f874:	d006      	beq.n	800f884 <tcp_slowtmr+0xf0>
 800f876:	4b62      	ldr	r3, [pc, #392]	; (800fa00 <tcp_slowtmr+0x26c>)
 800f878:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f87c:	4965      	ldr	r1, [pc, #404]	; (800fa14 <tcp_slowtmr+0x280>)
 800f87e:	4862      	ldr	r0, [pc, #392]	; (800fa08 <tcp_slowtmr+0x274>)
 800f880:	f008 ff72 	bl	8018768 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d106      	bne.n	800f89a <tcp_slowtmr+0x106>
 800f88c:	4b5c      	ldr	r3, [pc, #368]	; (800fa00 <tcp_slowtmr+0x26c>)
 800f88e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f892:	4961      	ldr	r1, [pc, #388]	; (800fa18 <tcp_slowtmr+0x284>)
 800f894:	485c      	ldr	r0, [pc, #368]	; (800fa08 <tcp_slowtmr+0x274>)
 800f896:	f008 ff67 	bl	8018768 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f8a0:	2b0b      	cmp	r3, #11
 800f8a2:	d905      	bls.n	800f8b0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8ae:	e0ed      	b.n	800fa8c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	4a58      	ldr	r2, [pc, #352]	; (800fa1c <tcp_slowtmr+0x288>)
 800f8ba:	5cd3      	ldrb	r3, [r2, r3]
 800f8bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8c4:	7c7a      	ldrb	r2, [r7, #17]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d907      	bls.n	800f8da <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8e0:	7c7a      	ldrb	r2, [r7, #17]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	f200 80d2 	bhi.w	800fa8c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d108      	bne.n	800f908 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f8f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8f8:	f005 f94c 	bl	8014b94 <tcp_zero_window_probe>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d014      	beq.n	800f92c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f902:	2300      	movs	r3, #0
 800f904:	623b      	str	r3, [r7, #32]
 800f906:	e011      	b.n	800f92c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f90e:	4619      	mov	r1, r3
 800f910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f912:	f004 f811 	bl	8013938 <tcp_split_unsent_seg>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d107      	bne.n	800f92c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f91e:	f004 fa91 	bl	8013e44 <tcp_output>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f000 80ac 	beq.w	800fa8c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f942:	2b06      	cmp	r3, #6
 800f944:	f200 80a2 	bhi.w	800fa8c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f94e:	3301      	adds	r3, #1
 800f950:	b2da      	uxtb	r2, r3
 800f952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f954:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f958:	e098      	b.n	800fa8c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f960:	2b00      	cmp	r3, #0
 800f962:	db0f      	blt.n	800f984 <tcp_slowtmr+0x1f0>
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f96a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f96e:	4293      	cmp	r3, r2
 800f970:	d008      	beq.n	800f984 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f974:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f978:	b29b      	uxth	r3, r3
 800f97a:	3301      	adds	r3, #1
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	b21a      	sxth	r2, r3
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f990:	429a      	cmp	r2, r3
 800f992:	db7b      	blt.n	800fa8c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f996:	f004 fd47 	bl	8014428 <tcp_rexmit_rto_prepare>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d007      	beq.n	800f9b0 <tcp_slowtmr+0x21c>
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d171      	bne.n	800fa8c <tcp_slowtmr+0x2f8>
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d06d      	beq.n	800fa8c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	7d1b      	ldrb	r3, [r3, #20]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d03a      	beq.n	800fa2e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9be:	2b0c      	cmp	r3, #12
 800f9c0:	bf28      	it	cs
 800f9c2:	230c      	movcs	r3, #12
 800f9c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f9cc:	10db      	asrs	r3, r3, #3
 800f9ce:	b21b      	sxth	r3, r3
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f9d8:	4413      	add	r3, r2
 800f9da:	7efa      	ldrb	r2, [r7, #27]
 800f9dc:	4910      	ldr	r1, [pc, #64]	; (800fa20 <tcp_slowtmr+0x28c>)
 800f9de:	5c8a      	ldrb	r2, [r1, r2]
 800f9e0:	4093      	lsls	r3, r2
 800f9e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	dc1a      	bgt.n	800fa24 <tcp_slowtmr+0x290>
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	b21a      	sxth	r2, r3
 800f9f2:	e019      	b.n	800fa28 <tcp_slowtmr+0x294>
 800f9f4:	2000db54 	.word	0x2000db54
 800f9f8:	2000434a 	.word	0x2000434a
 800f9fc:	2000db50 	.word	0x2000db50
 800fa00:	0801b594 	.word	0x0801b594
 800fa04:	0801b8d8 	.word	0x0801b8d8
 800fa08:	0801b5d8 	.word	0x0801b5d8
 800fa0c:	0801b904 	.word	0x0801b904
 800fa10:	0801b930 	.word	0x0801b930
 800fa14:	0801b960 	.word	0x0801b960
 800fa18:	0801b994 	.word	0x0801b994
 800fa1c:	0801d5e8 	.word	0x0801d5e8
 800fa20:	0801d5d8 	.word	0x0801d5d8
 800fa24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	2200      	movs	r2, #0
 800fa32:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa40:	4293      	cmp	r3, r2
 800fa42:	bf28      	it	cs
 800fa44:	4613      	movcs	r3, r2
 800fa46:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fa48:	8a7b      	ldrh	r3, [r7, #18]
 800fa4a:	085b      	lsrs	r3, r3, #1
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	b29b      	uxth	r3, r3
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d206      	bcs.n	800fa74 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa6a:	005b      	lsls	r3, r3, #1
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa80:	2200      	movs	r2, #0
 800fa82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fa86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa88:	f004 fd3e 	bl	8014508 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	7d1b      	ldrb	r3, [r3, #20]
 800fa90:	2b06      	cmp	r3, #6
 800fa92:	d111      	bne.n	800fab8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa96:	8b5b      	ldrh	r3, [r3, #26]
 800fa98:	f003 0310 	and.w	r3, r3, #16
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00b      	beq.n	800fab8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faa0:	4b9c      	ldr	r3, [pc, #624]	; (800fd14 <tcp_slowtmr+0x580>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	2b28      	cmp	r3, #40	; 0x28
 800faac:	d904      	bls.n	800fab8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800faae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fab2:	3301      	adds	r3, #1
 800fab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	7a5b      	ldrb	r3, [r3, #9]
 800fabc:	f003 0308 	and.w	r3, r3, #8
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d04a      	beq.n	800fb5a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fac8:	2b04      	cmp	r3, #4
 800faca:	d003      	beq.n	800fad4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fad0:	2b07      	cmp	r3, #7
 800fad2:	d142      	bne.n	800fb5a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fad4:	4b8f      	ldr	r3, [pc, #572]	; (800fd14 <tcp_slowtmr+0x580>)
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	6a1b      	ldr	r3, [r3, #32]
 800fadc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fae4:	4b8c      	ldr	r3, [pc, #560]	; (800fd18 <tcp_slowtmr+0x584>)
 800fae6:	440b      	add	r3, r1
 800fae8:	498c      	ldr	r1, [pc, #560]	; (800fd1c <tcp_slowtmr+0x588>)
 800faea:	fba1 1303 	umull	r1, r3, r1, r3
 800faee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d90a      	bls.n	800fb0a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800faf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faf8:	3301      	adds	r3, #1
 800fafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fafe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb02:	3301      	adds	r3, #1
 800fb04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb08:	e027      	b.n	800fb5a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb0a:	4b82      	ldr	r3, [pc, #520]	; (800fd14 <tcp_slowtmr+0x580>)
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	6a1b      	ldr	r3, [r3, #32]
 800fb12:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb16:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb20:	4618      	mov	r0, r3
 800fb22:	4b7f      	ldr	r3, [pc, #508]	; (800fd20 <tcp_slowtmr+0x58c>)
 800fb24:	fb03 f300 	mul.w	r3, r3, r0
 800fb28:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fb2a:	497c      	ldr	r1, [pc, #496]	; (800fd1c <tcp_slowtmr+0x588>)
 800fb2c:	fba1 1303 	umull	r1, r3, r1, r3
 800fb30:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d911      	bls.n	800fb5a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fb36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb38:	f004 ffec 	bl	8014b14 <tcp_keepalive>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fb42:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d107      	bne.n	800fb5a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb50:	3301      	adds	r3, #1
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d011      	beq.n	800fb86 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fb62:	4b6c      	ldr	r3, [pc, #432]	; (800fd14 <tcp_slowtmr+0x580>)
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	1ad2      	subs	r2, r2, r3
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb72:	4619      	mov	r1, r3
 800fb74:	460b      	mov	r3, r1
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	440b      	add	r3, r1
 800fb7a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d302      	bcc.n	800fb86 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb82:	f000 feab 	bl	80108dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	7d1b      	ldrb	r3, [r3, #20]
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d10b      	bne.n	800fba6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb8e:	4b61      	ldr	r3, [pc, #388]	; (800fd14 <tcp_slowtmr+0x580>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	2b28      	cmp	r3, #40	; 0x28
 800fb9a:	d904      	bls.n	800fba6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fba0:	3301      	adds	r3, #1
 800fba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba8:	7d1b      	ldrb	r3, [r3, #20]
 800fbaa:	2b09      	cmp	r3, #9
 800fbac:	d10b      	bne.n	800fbc6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbae:	4b59      	ldr	r3, [pc, #356]	; (800fd14 <tcp_slowtmr+0x580>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb4:	6a1b      	ldr	r3, [r3, #32]
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	2bf0      	cmp	r3, #240	; 0xf0
 800fbba:	d904      	bls.n	800fbc6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fbc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d060      	beq.n	800fc90 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbd4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fbd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbd8:	f000 fccc 	bl	8010574 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d010      	beq.n	800fc04 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fbe2:	4b50      	ldr	r3, [pc, #320]	; (800fd24 <tcp_slowtmr+0x590>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d106      	bne.n	800fbfa <tcp_slowtmr+0x466>
 800fbec:	4b4e      	ldr	r3, [pc, #312]	; (800fd28 <tcp_slowtmr+0x594>)
 800fbee:	f240 526d 	movw	r2, #1389	; 0x56d
 800fbf2:	494e      	ldr	r1, [pc, #312]	; (800fd2c <tcp_slowtmr+0x598>)
 800fbf4:	484e      	ldr	r0, [pc, #312]	; (800fd30 <tcp_slowtmr+0x59c>)
 800fbf6:	f008 fdb7 	bl	8018768 <iprintf>
        prev->next = pcb->next;
 800fbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfc:	68da      	ldr	r2, [r3, #12]
 800fbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc00:	60da      	str	r2, [r3, #12]
 800fc02:	e00f      	b.n	800fc24 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fc04:	4b47      	ldr	r3, [pc, #284]	; (800fd24 <tcp_slowtmr+0x590>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d006      	beq.n	800fc1c <tcp_slowtmr+0x488>
 800fc0e:	4b46      	ldr	r3, [pc, #280]	; (800fd28 <tcp_slowtmr+0x594>)
 800fc10:	f240 5271 	movw	r2, #1393	; 0x571
 800fc14:	4947      	ldr	r1, [pc, #284]	; (800fd34 <tcp_slowtmr+0x5a0>)
 800fc16:	4846      	ldr	r0, [pc, #280]	; (800fd30 <tcp_slowtmr+0x59c>)
 800fc18:	f008 fda6 	bl	8018768 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	4a40      	ldr	r2, [pc, #256]	; (800fd24 <tcp_slowtmr+0x590>)
 800fc22:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fc24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d013      	beq.n	800fc54 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc32:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fc34:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	3304      	adds	r3, #4
 800fc3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc3c:	8ad2      	ldrh	r2, [r2, #22]
 800fc3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc40:	8b09      	ldrh	r1, [r1, #24]
 800fc42:	9102      	str	r1, [sp, #8]
 800fc44:	9201      	str	r2, [sp, #4]
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	462b      	mov	r3, r5
 800fc4a:	4622      	mov	r2, r4
 800fc4c:	4601      	mov	r1, r0
 800fc4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc50:	f004 feac 	bl	80149ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc56:	691b      	ldr	r3, [r3, #16]
 800fc58:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5c:	7d1b      	ldrb	r3, [r3, #20]
 800fc5e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc62:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc6a:	6838      	ldr	r0, [r7, #0]
 800fc6c:	f7ff f8ba 	bl	800ede4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fc70:	4b31      	ldr	r3, [pc, #196]	; (800fd38 <tcp_slowtmr+0x5a4>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d004      	beq.n	800fc86 <tcp_slowtmr+0x4f2>
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f06f 010c 	mvn.w	r1, #12
 800fc82:	68b8      	ldr	r0, [r7, #8]
 800fc84:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fc86:	4b2c      	ldr	r3, [pc, #176]	; (800fd38 <tcp_slowtmr+0x5a4>)
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d037      	beq.n	800fcfe <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fc8e:	e592      	b.n	800f7b6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9c:	7f1b      	ldrb	r3, [r3, #28]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	b2da      	uxtb	r2, r3
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca8:	7f1a      	ldrb	r2, [r3, #28]
 800fcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcac:	7f5b      	ldrb	r3, [r3, #29]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d325      	bcc.n	800fcfe <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fcb8:	4b1f      	ldr	r3, [pc, #124]	; (800fd38 <tcp_slowtmr+0x5a4>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00b      	beq.n	800fce0 <tcp_slowtmr+0x54c>
 800fcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcd0:	6912      	ldr	r2, [r2, #16]
 800fcd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcd4:	4610      	mov	r0, r2
 800fcd6:	4798      	blx	r3
 800fcd8:	4603      	mov	r3, r0
 800fcda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fcde:	e002      	b.n	800fce6 <tcp_slowtmr+0x552>
 800fce0:	2300      	movs	r3, #0
 800fce2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fce6:	4b14      	ldr	r3, [pc, #80]	; (800fd38 <tcp_slowtmr+0x5a4>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d000      	beq.n	800fcf0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fcee:	e562      	b.n	800f7b6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fcf0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d102      	bne.n	800fcfe <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fcf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcfa:	f004 f8a3 	bl	8013e44 <tcp_output>
  while (pcb != NULL) {
 800fcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f47f ad5e 	bne.w	800f7c2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fd06:	2300      	movs	r3, #0
 800fd08:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fd0a:	4b0c      	ldr	r3, [pc, #48]	; (800fd3c <tcp_slowtmr+0x5a8>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fd10:	e069      	b.n	800fde6 <tcp_slowtmr+0x652>
 800fd12:	bf00      	nop
 800fd14:	2000db54 	.word	0x2000db54
 800fd18:	000a4cb8 	.word	0x000a4cb8
 800fd1c:	10624dd3 	.word	0x10624dd3
 800fd20:	000124f8 	.word	0x000124f8
 800fd24:	2000db50 	.word	0x2000db50
 800fd28:	0801b594 	.word	0x0801b594
 800fd2c:	0801b9cc 	.word	0x0801b9cc
 800fd30:	0801b5d8 	.word	0x0801b5d8
 800fd34:	0801b9f8 	.word	0x0801b9f8
 800fd38:	2000db4c 	.word	0x2000db4c
 800fd3c:	2000db60 	.word	0x2000db60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	7d1b      	ldrb	r3, [r3, #20]
 800fd44:	2b0a      	cmp	r3, #10
 800fd46:	d006      	beq.n	800fd56 <tcp_slowtmr+0x5c2>
 800fd48:	4b2b      	ldr	r3, [pc, #172]	; (800fdf8 <tcp_slowtmr+0x664>)
 800fd4a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fd4e:	492b      	ldr	r1, [pc, #172]	; (800fdfc <tcp_slowtmr+0x668>)
 800fd50:	482b      	ldr	r0, [pc, #172]	; (800fe00 <tcp_slowtmr+0x66c>)
 800fd52:	f008 fd09 	bl	8018768 <iprintf>
    pcb_remove = 0;
 800fd56:	2300      	movs	r3, #0
 800fd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd5c:	4b29      	ldr	r3, [pc, #164]	; (800fe04 <tcp_slowtmr+0x670>)
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	6a1b      	ldr	r3, [r3, #32]
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	2bf0      	cmp	r3, #240	; 0xf0
 800fd68:	d904      	bls.n	800fd74 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd6e:	3301      	adds	r3, #1
 800fd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d02f      	beq.n	800fddc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fd7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd7e:	f000 fbf9 	bl	8010574 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d010      	beq.n	800fdaa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fd88:	4b1f      	ldr	r3, [pc, #124]	; (800fe08 <tcp_slowtmr+0x674>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d106      	bne.n	800fda0 <tcp_slowtmr+0x60c>
 800fd92:	4b19      	ldr	r3, [pc, #100]	; (800fdf8 <tcp_slowtmr+0x664>)
 800fd94:	f240 52af 	movw	r2, #1455	; 0x5af
 800fd98:	491c      	ldr	r1, [pc, #112]	; (800fe0c <tcp_slowtmr+0x678>)
 800fd9a:	4819      	ldr	r0, [pc, #100]	; (800fe00 <tcp_slowtmr+0x66c>)
 800fd9c:	f008 fce4 	bl	8018768 <iprintf>
        prev->next = pcb->next;
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	68da      	ldr	r2, [r3, #12]
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	60da      	str	r2, [r3, #12]
 800fda8:	e00f      	b.n	800fdca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fdaa:	4b17      	ldr	r3, [pc, #92]	; (800fe08 <tcp_slowtmr+0x674>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d006      	beq.n	800fdc2 <tcp_slowtmr+0x62e>
 800fdb4:	4b10      	ldr	r3, [pc, #64]	; (800fdf8 <tcp_slowtmr+0x664>)
 800fdb6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fdba:	4915      	ldr	r1, [pc, #84]	; (800fe10 <tcp_slowtmr+0x67c>)
 800fdbc:	4810      	ldr	r0, [pc, #64]	; (800fe00 <tcp_slowtmr+0x66c>)
 800fdbe:	f008 fcd3 	bl	8018768 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	4a10      	ldr	r2, [pc, #64]	; (800fe08 <tcp_slowtmr+0x674>)
 800fdc8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fdd4:	69f8      	ldr	r0, [r7, #28]
 800fdd6:	f7ff f805 	bl	800ede4 <tcp_free>
 800fdda:	e004      	b.n	800fde6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1a9      	bne.n	800fd40 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fdec:	bf00      	nop
 800fdee:	bf00      	nop
 800fdf0:	3730      	adds	r7, #48	; 0x30
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bdb0      	pop	{r4, r5, r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	0801b594 	.word	0x0801b594
 800fdfc:	0801ba24 	.word	0x0801ba24
 800fe00:	0801b5d8 	.word	0x0801b5d8
 800fe04:	2000db54 	.word	0x2000db54
 800fe08:	2000db60 	.word	0x2000db60
 800fe0c:	0801ba54 	.word	0x0801ba54
 800fe10:	0801ba7c 	.word	0x0801ba7c

0800fe14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fe1a:	4b2d      	ldr	r3, [pc, #180]	; (800fed0 <tcp_fasttmr+0xbc>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	3301      	adds	r3, #1
 800fe20:	b2da      	uxtb	r2, r3
 800fe22:	4b2b      	ldr	r3, [pc, #172]	; (800fed0 <tcp_fasttmr+0xbc>)
 800fe24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fe26:	4b2b      	ldr	r3, [pc, #172]	; (800fed4 <tcp_fasttmr+0xc0>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fe2c:	e048      	b.n	800fec0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	7f9a      	ldrb	r2, [r3, #30]
 800fe32:	4b27      	ldr	r3, [pc, #156]	; (800fed0 <tcp_fasttmr+0xbc>)
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d03f      	beq.n	800feba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fe3a:	4b25      	ldr	r3, [pc, #148]	; (800fed0 <tcp_fasttmr+0xbc>)
 800fe3c:	781a      	ldrb	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	8b5b      	ldrh	r3, [r3, #26]
 800fe46:	f003 0301 	and.w	r3, r3, #1
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d010      	beq.n	800fe70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	8b5b      	ldrh	r3, [r3, #26]
 800fe52:	f043 0302 	orr.w	r3, r3, #2
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f003 fff1 	bl	8013e44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	8b5b      	ldrh	r3, [r3, #26]
 800fe66:	f023 0303 	bic.w	r3, r3, #3
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	8b5b      	ldrh	r3, [r3, #26]
 800fe74:	f003 0308 	and.w	r3, r3, #8
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d009      	beq.n	800fe90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	8b5b      	ldrh	r3, [r3, #26]
 800fe80:	f023 0308 	bic.w	r3, r3, #8
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff f93e 	bl	800f10c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00a      	beq.n	800feb4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fe9e:	4b0e      	ldr	r3, [pc, #56]	; (800fed8 <tcp_fasttmr+0xc4>)
 800fea0:	2200      	movs	r2, #0
 800fea2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f819 	bl	800fedc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800feaa:	4b0b      	ldr	r3, [pc, #44]	; (800fed8 <tcp_fasttmr+0xc4>)
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d000      	beq.n	800feb4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800feb2:	e7b8      	b.n	800fe26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	607b      	str	r3, [r7, #4]
 800feb8:	e002      	b.n	800fec0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1b3      	bne.n	800fe2e <tcp_fasttmr+0x1a>
    }
  }
}
 800fec6:	bf00      	nop
 800fec8:	bf00      	nop
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	2000434a 	.word	0x2000434a
 800fed4:	2000db50 	.word	0x2000db50
 800fed8:	2000db4c 	.word	0x2000db4c

0800fedc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fedc:	b590      	push	{r4, r7, lr}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d109      	bne.n	800fefe <tcp_process_refused_data+0x22>
 800feea:	4b37      	ldr	r3, [pc, #220]	; (800ffc8 <tcp_process_refused_data+0xec>)
 800feec:	f240 6209 	movw	r2, #1545	; 0x609
 800fef0:	4936      	ldr	r1, [pc, #216]	; (800ffcc <tcp_process_refused_data+0xf0>)
 800fef2:	4837      	ldr	r0, [pc, #220]	; (800ffd0 <tcp_process_refused_data+0xf4>)
 800fef4:	f008 fc38 	bl	8018768 <iprintf>
 800fef8:	f06f 030f 	mvn.w	r3, #15
 800fefc:	e060      	b.n	800ffc0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff02:	7b5b      	ldrb	r3, [r3, #13]
 800ff04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00b      	beq.n	800ff34 <tcp_process_refused_data+0x58>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6918      	ldr	r0, [r3, #16]
 800ff26:	2300      	movs	r3, #0
 800ff28:	68ba      	ldr	r2, [r7, #8]
 800ff2a:	6879      	ldr	r1, [r7, #4]
 800ff2c:	47a0      	blx	r4
 800ff2e:	4603      	mov	r3, r0
 800ff30:	73fb      	strb	r3, [r7, #15]
 800ff32:	e007      	b.n	800ff44 <tcp_process_refused_data+0x68>
 800ff34:	2300      	movs	r3, #0
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	6879      	ldr	r1, [r7, #4]
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	f000 f8a4 	bl	8010088 <tcp_recv_null>
 800ff40:	4603      	mov	r3, r0
 800ff42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d12a      	bne.n	800ffa2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ff4c:	7bbb      	ldrb	r3, [r7, #14]
 800ff4e:	f003 0320 	and.w	r3, r3, #32
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d033      	beq.n	800ffbe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ff5e:	d005      	beq.n	800ff6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff64:	3301      	adds	r3, #1
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d00b      	beq.n	800ff8e <tcp_process_refused_data+0xb2>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6918      	ldr	r0, [r3, #16]
 800ff80:	2300      	movs	r3, #0
 800ff82:	2200      	movs	r2, #0
 800ff84:	6879      	ldr	r1, [r7, #4]
 800ff86:	47a0      	blx	r4
 800ff88:	4603      	mov	r3, r0
 800ff8a:	73fb      	strb	r3, [r7, #15]
 800ff8c:	e001      	b.n	800ff92 <tcp_process_refused_data+0xb6>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ff92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff96:	f113 0f0d 	cmn.w	r3, #13
 800ff9a:	d110      	bne.n	800ffbe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ff9c:	f06f 030c 	mvn.w	r3, #12
 800ffa0:	e00e      	b.n	800ffc0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ffa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffa6:	f113 0f0d 	cmn.w	r3, #13
 800ffaa:	d102      	bne.n	800ffb2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ffac:	f06f 030c 	mvn.w	r3, #12
 800ffb0:	e006      	b.n	800ffc0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ffb8:	f06f 0304 	mvn.w	r3, #4
 800ffbc:	e000      	b.n	800ffc0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd90      	pop	{r4, r7, pc}
 800ffc8:	0801b594 	.word	0x0801b594
 800ffcc:	0801baa4 	.word	0x0801baa4
 800ffd0:	0801b5d8 	.word	0x0801b5d8

0800ffd4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ffdc:	e007      	b.n	800ffee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 f80a 	bl	800fffe <tcp_seg_free>
    seg = next;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1f4      	bne.n	800ffde <tcp_segs_free+0xa>
  }
}
 800fff4:	bf00      	nop
 800fff6:	bf00      	nop
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b082      	sub	sp, #8
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00c      	beq.n	8010026 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d004      	beq.n	801001e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	4618      	mov	r0, r3
 801001a:	f7fe fc27 	bl	800e86c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	2003      	movs	r0, #3
 8010022:	f7fd fd4d 	bl	800dac0 <memp_free>
  }
}
 8010026:	bf00      	nop
 8010028:	3708      	adds	r7, #8
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
	...

08010030 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d106      	bne.n	801004c <tcp_seg_copy+0x1c>
 801003e:	4b0f      	ldr	r3, [pc, #60]	; (801007c <tcp_seg_copy+0x4c>)
 8010040:	f240 6282 	movw	r2, #1666	; 0x682
 8010044:	490e      	ldr	r1, [pc, #56]	; (8010080 <tcp_seg_copy+0x50>)
 8010046:	480f      	ldr	r0, [pc, #60]	; (8010084 <tcp_seg_copy+0x54>)
 8010048:	f008 fb8e 	bl	8018768 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801004c:	2003      	movs	r0, #3
 801004e:	f7fd fce5 	bl	800da1c <memp_malloc>
 8010052:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d101      	bne.n	801005e <tcp_seg_copy+0x2e>
    return NULL;
 801005a:	2300      	movs	r3, #0
 801005c:	e00a      	b.n	8010074 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801005e:	2210      	movs	r2, #16
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f008 faa6 	bl	80185b4 <memcpy>
  pbuf_ref(cseg->p);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	f7fe fca3 	bl	800e9b8 <pbuf_ref>
  return cseg;
 8010072:	68fb      	ldr	r3, [r7, #12]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0801b594 	.word	0x0801b594
 8010080:	0801bae8 	.word	0x0801bae8
 8010084:	0801b5d8 	.word	0x0801b5d8

08010088 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d109      	bne.n	80100b0 <tcp_recv_null+0x28>
 801009c:	4b12      	ldr	r3, [pc, #72]	; (80100e8 <tcp_recv_null+0x60>)
 801009e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80100a2:	4912      	ldr	r1, [pc, #72]	; (80100ec <tcp_recv_null+0x64>)
 80100a4:	4812      	ldr	r0, [pc, #72]	; (80100f0 <tcp_recv_null+0x68>)
 80100a6:	f008 fb5f 	bl	8018768 <iprintf>
 80100aa:	f06f 030f 	mvn.w	r3, #15
 80100ae:	e016      	b.n	80100de <tcp_recv_null+0x56>

  if (p != NULL) {
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d009      	beq.n	80100ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	891b      	ldrh	r3, [r3, #8]
 80100ba:	4619      	mov	r1, r3
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f7ff fad3 	bl	800f668 <tcp_recved>
    pbuf_free(p);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7fe fbd2 	bl	800e86c <pbuf_free>
 80100c8:	e008      	b.n	80100dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80100ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d104      	bne.n	80100dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80100d2:	68b8      	ldr	r0, [r7, #8]
 80100d4:	f7ff f884 	bl	800f1e0 <tcp_close>
 80100d8:	4603      	mov	r3, r0
 80100da:	e000      	b.n	80100de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	0801b594 	.word	0x0801b594
 80100ec:	0801bb04 	.word	0x0801bb04
 80100f0:	0801b5d8 	.word	0x0801b5d8

080100f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b086      	sub	sp, #24
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80100fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010102:	2b00      	cmp	r3, #0
 8010104:	db01      	blt.n	801010a <tcp_kill_prio+0x16>
 8010106:	79fb      	ldrb	r3, [r7, #7]
 8010108:	e000      	b.n	801010c <tcp_kill_prio+0x18>
 801010a:	237f      	movs	r3, #127	; 0x7f
 801010c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801010e:	7afb      	ldrb	r3, [r7, #11]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d034      	beq.n	801017e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010114:	7afb      	ldrb	r3, [r7, #11]
 8010116:	3b01      	subs	r3, #1
 8010118:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801011a:	2300      	movs	r3, #0
 801011c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801011e:	2300      	movs	r3, #0
 8010120:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010122:	4b19      	ldr	r3, [pc, #100]	; (8010188 <tcp_kill_prio+0x94>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	617b      	str	r3, [r7, #20]
 8010128:	e01f      	b.n	801016a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	7d5b      	ldrb	r3, [r3, #21]
 801012e:	7afa      	ldrb	r2, [r7, #11]
 8010130:	429a      	cmp	r2, r3
 8010132:	d80c      	bhi.n	801014e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010138:	7afa      	ldrb	r2, [r7, #11]
 801013a:	429a      	cmp	r2, r3
 801013c:	d112      	bne.n	8010164 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801013e:	4b13      	ldr	r3, [pc, #76]	; (801018c <tcp_kill_prio+0x98>)
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	6a1b      	ldr	r3, [r3, #32]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	429a      	cmp	r2, r3
 801014c:	d80a      	bhi.n	8010164 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801014e:	4b0f      	ldr	r3, [pc, #60]	; (801018c <tcp_kill_prio+0x98>)
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	6a1b      	ldr	r3, [r3, #32]
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	7d5b      	ldrb	r3, [r3, #21]
 8010162:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	617b      	str	r3, [r7, #20]
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1dc      	bne.n	801012a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d004      	beq.n	8010180 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010176:	6938      	ldr	r0, [r7, #16]
 8010178:	f7ff f978 	bl	800f46c <tcp_abort>
 801017c:	e000      	b.n	8010180 <tcp_kill_prio+0x8c>
    return;
 801017e:	bf00      	nop
  }
}
 8010180:	3718      	adds	r7, #24
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	2000db50 	.word	0x2000db50
 801018c:	2000db54 	.word	0x2000db54

08010190 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	2b08      	cmp	r3, #8
 801019e:	d009      	beq.n	80101b4 <tcp_kill_state+0x24>
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	2b09      	cmp	r3, #9
 80101a4:	d006      	beq.n	80101b4 <tcp_kill_state+0x24>
 80101a6:	4b1a      	ldr	r3, [pc, #104]	; (8010210 <tcp_kill_state+0x80>)
 80101a8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80101ac:	4919      	ldr	r1, [pc, #100]	; (8010214 <tcp_kill_state+0x84>)
 80101ae:	481a      	ldr	r0, [pc, #104]	; (8010218 <tcp_kill_state+0x88>)
 80101b0:	f008 fada 	bl	8018768 <iprintf>

  inactivity = 0;
 80101b4:	2300      	movs	r3, #0
 80101b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80101b8:	2300      	movs	r3, #0
 80101ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101bc:	4b17      	ldr	r3, [pc, #92]	; (801021c <tcp_kill_state+0x8c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	617b      	str	r3, [r7, #20]
 80101c2:	e017      	b.n	80101f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	7d1b      	ldrb	r3, [r3, #20]
 80101c8:	79fa      	ldrb	r2, [r7, #7]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d10f      	bne.n	80101ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80101ce:	4b14      	ldr	r3, [pc, #80]	; (8010220 <tcp_kill_state+0x90>)
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	6a1b      	ldr	r3, [r3, #32]
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d807      	bhi.n	80101ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80101de:	4b10      	ldr	r3, [pc, #64]	; (8010220 <tcp_kill_state+0x90>)
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	6a1b      	ldr	r3, [r3, #32]
 80101e6:	1ad3      	subs	r3, r2, r3
 80101e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	617b      	str	r3, [r7, #20]
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d1e4      	bne.n	80101c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d003      	beq.n	8010208 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010200:	2100      	movs	r1, #0
 8010202:	6938      	ldr	r0, [r7, #16]
 8010204:	f7ff f874 	bl	800f2f0 <tcp_abandon>
  }
}
 8010208:	bf00      	nop
 801020a:	3718      	adds	r7, #24
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	0801b594 	.word	0x0801b594
 8010214:	0801bb20 	.word	0x0801bb20
 8010218:	0801b5d8 	.word	0x0801b5d8
 801021c:	2000db50 	.word	0x2000db50
 8010220:	2000db54 	.word	0x2000db54

08010224 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801022e:	2300      	movs	r3, #0
 8010230:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010232:	4b12      	ldr	r3, [pc, #72]	; (801027c <tcp_kill_timewait+0x58>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	60fb      	str	r3, [r7, #12]
 8010238:	e012      	b.n	8010260 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801023a:	4b11      	ldr	r3, [pc, #68]	; (8010280 <tcp_kill_timewait+0x5c>)
 801023c:	681a      	ldr	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	429a      	cmp	r2, r3
 8010248:	d807      	bhi.n	801025a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801024a:	4b0d      	ldr	r3, [pc, #52]	; (8010280 <tcp_kill_timewait+0x5c>)
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6a1b      	ldr	r3, [r3, #32]
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1e9      	bne.n	801023a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d002      	beq.n	8010272 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801026c:	68b8      	ldr	r0, [r7, #8]
 801026e:	f7ff f8fd 	bl	800f46c <tcp_abort>
  }
}
 8010272:	bf00      	nop
 8010274:	3710      	adds	r7, #16
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	2000db60 	.word	0x2000db60
 8010280:	2000db54 	.word	0x2000db54

08010284 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801028a:	4b10      	ldr	r3, [pc, #64]	; (80102cc <tcp_handle_closepend+0x48>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010290:	e014      	b.n	80102bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8b5b      	ldrh	r3, [r3, #26]
 801029c:	f003 0308 	and.w	r3, r3, #8
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	8b5b      	ldrh	r3, [r3, #26]
 80102a8:	f023 0308 	bic.w	r3, r3, #8
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7fe ff2a 	bl	800f10c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e7      	bne.n	8010292 <tcp_handle_closepend+0xe>
  }
}
 80102c2:	bf00      	nop
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	2000db50 	.word	0x2000db50

080102d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102da:	2001      	movs	r0, #1
 80102dc:	f7fd fb9e 	bl	800da1c <memp_malloc>
 80102e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d126      	bne.n	8010336 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80102e8:	f7ff ffcc 	bl	8010284 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80102ec:	f7ff ff9a 	bl	8010224 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102f0:	2001      	movs	r0, #1
 80102f2:	f7fd fb93 	bl	800da1c <memp_malloc>
 80102f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d11b      	bne.n	8010336 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80102fe:	2009      	movs	r0, #9
 8010300:	f7ff ff46 	bl	8010190 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010304:	2001      	movs	r0, #1
 8010306:	f7fd fb89 	bl	800da1c <memp_malloc>
 801030a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d111      	bne.n	8010336 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010312:	2008      	movs	r0, #8
 8010314:	f7ff ff3c 	bl	8010190 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010318:	2001      	movs	r0, #1
 801031a:	f7fd fb7f 	bl	800da1c <memp_malloc>
 801031e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d107      	bne.n	8010336 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010326:	79fb      	ldrb	r3, [r7, #7]
 8010328:	4618      	mov	r0, r3
 801032a:	f7ff fee3 	bl	80100f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801032e:	2001      	movs	r0, #1
 8010330:	f7fd fb74 	bl	800da1c <memp_malloc>
 8010334:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d03f      	beq.n	80103bc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801033c:	229c      	movs	r2, #156	; 0x9c
 801033e:	2100      	movs	r1, #0
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f008 f95f 	bl	8018604 <memset>
    pcb->prio = prio;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	79fa      	ldrb	r2, [r7, #7]
 801034a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010352:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801035c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	22ff      	movs	r2, #255	; 0xff
 801036a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010372:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2206      	movs	r2, #6
 8010378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2206      	movs	r2, #6
 8010380:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010388:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2201      	movs	r2, #1
 801038e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010392:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <tcp_alloc+0xf8>)
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801039a:	4b0c      	ldr	r3, [pc, #48]	; (80103cc <tcp_alloc+0xfc>)
 801039c:	781a      	ldrb	r2, [r3, #0]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80103a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	4a08      	ldr	r2, [pc, #32]	; (80103d0 <tcp_alloc+0x100>)
 80103b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	4a07      	ldr	r2, [pc, #28]	; (80103d4 <tcp_alloc+0x104>)
 80103b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80103bc:	68fb      	ldr	r3, [r7, #12]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	2000db54 	.word	0x2000db54
 80103cc:	2000434a 	.word	0x2000434a
 80103d0:	08010089 	.word	0x08010089
 80103d4:	006ddd00 	.word	0x006ddd00

080103d8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4603      	mov	r3, r0
 80103e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80103e2:	2040      	movs	r0, #64	; 0x40
 80103e4:	f7ff ff74 	bl	80102d0 <tcp_alloc>
 80103e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80103ea:	68fb      	ldr	r3, [r7, #12]
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	683a      	ldr	r2, [r7, #0]
 8010408:	611a      	str	r2, [r3, #16]
  }
}
 801040a:	bf00      	nop
 801040c:	370c      	adds	r7, #12
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr
	...

08010418 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00e      	beq.n	8010446 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d106      	bne.n	801043e <tcp_recv+0x26>
 8010430:	4b07      	ldr	r3, [pc, #28]	; (8010450 <tcp_recv+0x38>)
 8010432:	f240 72df 	movw	r2, #2015	; 0x7df
 8010436:	4907      	ldr	r1, [pc, #28]	; (8010454 <tcp_recv+0x3c>)
 8010438:	4807      	ldr	r0, [pc, #28]	; (8010458 <tcp_recv+0x40>)
 801043a:	f008 f995 	bl	8018768 <iprintf>
    pcb->recv = recv;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	683a      	ldr	r2, [r7, #0]
 8010442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010446:	bf00      	nop
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	0801b594 	.word	0x0801b594
 8010454:	0801bb30 	.word	0x0801bb30
 8010458:	0801b5d8 	.word	0x0801b5d8

0801045c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00e      	beq.n	801048a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	7d1b      	ldrb	r3, [r3, #20]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d106      	bne.n	8010482 <tcp_sent+0x26>
 8010474:	4b07      	ldr	r3, [pc, #28]	; (8010494 <tcp_sent+0x38>)
 8010476:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801047a:	4907      	ldr	r1, [pc, #28]	; (8010498 <tcp_sent+0x3c>)
 801047c:	4807      	ldr	r0, [pc, #28]	; (801049c <tcp_sent+0x40>)
 801047e:	f008 f973 	bl	8018768 <iprintf>
    pcb->sent = sent;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	683a      	ldr	r2, [r7, #0]
 8010486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801048a:	bf00      	nop
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	0801b594 	.word	0x0801b594
 8010498:	0801bb58 	.word	0x0801bb58
 801049c:	0801b5d8 	.word	0x0801b5d8

080104a0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00e      	beq.n	80104ce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	7d1b      	ldrb	r3, [r3, #20]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d106      	bne.n	80104c6 <tcp_err+0x26>
 80104b8:	4b07      	ldr	r3, [pc, #28]	; (80104d8 <tcp_err+0x38>)
 80104ba:	f640 020d 	movw	r2, #2061	; 0x80d
 80104be:	4907      	ldr	r1, [pc, #28]	; (80104dc <tcp_err+0x3c>)
 80104c0:	4807      	ldr	r0, [pc, #28]	; (80104e0 <tcp_err+0x40>)
 80104c2:	f008 f951 	bl	8018768 <iprintf>
    pcb->errf = err;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	683a      	ldr	r2, [r7, #0]
 80104ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80104ce:	bf00      	nop
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	0801b594 	.word	0x0801b594
 80104dc:	0801bb80 	.word	0x0801bb80
 80104e0:	0801b5d8 	.word	0x0801b5d8

080104e4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d008      	beq.n	8010506 <tcp_accept+0x22>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7d1b      	ldrb	r3, [r3, #20]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d104      	bne.n	8010506 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	619a      	str	r2, [r3, #24]
  }
}
 8010506:	bf00      	nop
 8010508:	3714      	adds	r7, #20
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
	...

08010514 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	4613      	mov	r3, r2
 8010520:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d107      	bne.n	8010538 <tcp_poll+0x24>
 8010528:	4b0e      	ldr	r3, [pc, #56]	; (8010564 <tcp_poll+0x50>)
 801052a:	f640 023d 	movw	r2, #2109	; 0x83d
 801052e:	490e      	ldr	r1, [pc, #56]	; (8010568 <tcp_poll+0x54>)
 8010530:	480e      	ldr	r0, [pc, #56]	; (801056c <tcp_poll+0x58>)
 8010532:	f008 f919 	bl	8018768 <iprintf>
 8010536:	e011      	b.n	801055c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	7d1b      	ldrb	r3, [r3, #20]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d106      	bne.n	801054e <tcp_poll+0x3a>
 8010540:	4b08      	ldr	r3, [pc, #32]	; (8010564 <tcp_poll+0x50>)
 8010542:	f640 023e 	movw	r2, #2110	; 0x83e
 8010546:	490a      	ldr	r1, [pc, #40]	; (8010570 <tcp_poll+0x5c>)
 8010548:	4808      	ldr	r0, [pc, #32]	; (801056c <tcp_poll+0x58>)
 801054a:	f008 f90d 	bl	8018768 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	68ba      	ldr	r2, [r7, #8]
 8010552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	79fa      	ldrb	r2, [r7, #7]
 801055a:	775a      	strb	r2, [r3, #29]
}
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	0801b594 	.word	0x0801b594
 8010568:	0801bba8 	.word	0x0801bba8
 801056c:	0801b5d8 	.word	0x0801b5d8
 8010570:	0801bbc0 	.word	0x0801bbc0

08010574 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d107      	bne.n	8010592 <tcp_pcb_purge+0x1e>
 8010582:	4b21      	ldr	r3, [pc, #132]	; (8010608 <tcp_pcb_purge+0x94>)
 8010584:	f640 0251 	movw	r2, #2129	; 0x851
 8010588:	4920      	ldr	r1, [pc, #128]	; (801060c <tcp_pcb_purge+0x98>)
 801058a:	4821      	ldr	r0, [pc, #132]	; (8010610 <tcp_pcb_purge+0x9c>)
 801058c:	f008 f8ec 	bl	8018768 <iprintf>
 8010590:	e037      	b.n	8010602 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	7d1b      	ldrb	r3, [r3, #20]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d033      	beq.n	8010602 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801059e:	2b0a      	cmp	r3, #10
 80105a0:	d02f      	beq.n	8010602 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d02b      	beq.n	8010602 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d007      	beq.n	80105c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe f958 	bl	800e86c <pbuf_free>
      pcb->refused_data = NULL;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f986 	bl	80108dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105d6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff fcf9 	bl	800ffd4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7ff fcf4 	bl	800ffd4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2200      	movs	r2, #0
 80105f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	0801b594 	.word	0x0801b594
 801060c:	0801bbe0 	.word	0x0801bbe0
 8010610:	0801b5d8 	.word	0x0801b5d8

08010614 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d106      	bne.n	8010632 <tcp_pcb_remove+0x1e>
 8010624:	4b3e      	ldr	r3, [pc, #248]	; (8010720 <tcp_pcb_remove+0x10c>)
 8010626:	f640 0283 	movw	r2, #2179	; 0x883
 801062a:	493e      	ldr	r1, [pc, #248]	; (8010724 <tcp_pcb_remove+0x110>)
 801062c:	483e      	ldr	r0, [pc, #248]	; (8010728 <tcp_pcb_remove+0x114>)
 801062e:	f008 f89b 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d106      	bne.n	8010646 <tcp_pcb_remove+0x32>
 8010638:	4b39      	ldr	r3, [pc, #228]	; (8010720 <tcp_pcb_remove+0x10c>)
 801063a:	f640 0284 	movw	r2, #2180	; 0x884
 801063e:	493b      	ldr	r1, [pc, #236]	; (801072c <tcp_pcb_remove+0x118>)
 8010640:	4839      	ldr	r0, [pc, #228]	; (8010728 <tcp_pcb_remove+0x114>)
 8010642:	f008 f891 	bl	8018768 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	683a      	ldr	r2, [r7, #0]
 801064c:	429a      	cmp	r2, r3
 801064e:	d105      	bne.n	801065c <tcp_pcb_remove+0x48>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	68da      	ldr	r2, [r3, #12]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	e013      	b.n	8010684 <tcp_pcb_remove+0x70>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	60fb      	str	r3, [r7, #12]
 8010662:	e00c      	b.n	801067e <tcp_pcb_remove+0x6a>
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	683a      	ldr	r2, [r7, #0]
 801066a:	429a      	cmp	r2, r3
 801066c:	d104      	bne.n	8010678 <tcp_pcb_remove+0x64>
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	68da      	ldr	r2, [r3, #12]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	60da      	str	r2, [r3, #12]
 8010676:	e005      	b.n	8010684 <tcp_pcb_remove+0x70>
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	60fb      	str	r3, [r7, #12]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1ef      	bne.n	8010664 <tcp_pcb_remove+0x50>
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	2200      	movs	r2, #0
 8010688:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801068a:	6838      	ldr	r0, [r7, #0]
 801068c:	f7ff ff72 	bl	8010574 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	7d1b      	ldrb	r3, [r3, #20]
 8010694:	2b0a      	cmp	r3, #10
 8010696:	d013      	beq.n	80106c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801069c:	2b01      	cmp	r3, #1
 801069e:	d00f      	beq.n	80106c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	8b5b      	ldrh	r3, [r3, #26]
 80106a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d009      	beq.n	80106c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	8b5b      	ldrh	r3, [r3, #26]
 80106b0:	f043 0302 	orr.w	r3, r3, #2
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80106ba:	6838      	ldr	r0, [r7, #0]
 80106bc:	f003 fbc2 	bl	8013e44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	7d1b      	ldrb	r3, [r3, #20]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d020      	beq.n	801070a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d006      	beq.n	80106de <tcp_pcb_remove+0xca>
 80106d0:	4b13      	ldr	r3, [pc, #76]	; (8010720 <tcp_pcb_remove+0x10c>)
 80106d2:	f640 0293 	movw	r2, #2195	; 0x893
 80106d6:	4916      	ldr	r1, [pc, #88]	; (8010730 <tcp_pcb_remove+0x11c>)
 80106d8:	4813      	ldr	r0, [pc, #76]	; (8010728 <tcp_pcb_remove+0x114>)
 80106da:	f008 f845 	bl	8018768 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d006      	beq.n	80106f4 <tcp_pcb_remove+0xe0>
 80106e6:	4b0e      	ldr	r3, [pc, #56]	; (8010720 <tcp_pcb_remove+0x10c>)
 80106e8:	f640 0294 	movw	r2, #2196	; 0x894
 80106ec:	4911      	ldr	r1, [pc, #68]	; (8010734 <tcp_pcb_remove+0x120>)
 80106ee:	480e      	ldr	r0, [pc, #56]	; (8010728 <tcp_pcb_remove+0x114>)
 80106f0:	f008 f83a 	bl	8018768 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d006      	beq.n	801070a <tcp_pcb_remove+0xf6>
 80106fc:	4b08      	ldr	r3, [pc, #32]	; (8010720 <tcp_pcb_remove+0x10c>)
 80106fe:	f640 0296 	movw	r2, #2198	; 0x896
 8010702:	490d      	ldr	r1, [pc, #52]	; (8010738 <tcp_pcb_remove+0x124>)
 8010704:	4808      	ldr	r0, [pc, #32]	; (8010728 <tcp_pcb_remove+0x114>)
 8010706:	f008 f82f 	bl	8018768 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	2200      	movs	r2, #0
 801070e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2200      	movs	r2, #0
 8010714:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	0801b594 	.word	0x0801b594
 8010724:	0801bbfc 	.word	0x0801bbfc
 8010728:	0801b5d8 	.word	0x0801b5d8
 801072c:	0801bc18 	.word	0x0801bc18
 8010730:	0801bc38 	.word	0x0801bc38
 8010734:	0801bc50 	.word	0x0801bc50
 8010738:	0801bc6c 	.word	0x0801bc6c

0801073c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d106      	bne.n	8010758 <tcp_next_iss+0x1c>
 801074a:	4b0a      	ldr	r3, [pc, #40]	; (8010774 <tcp_next_iss+0x38>)
 801074c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010750:	4909      	ldr	r1, [pc, #36]	; (8010778 <tcp_next_iss+0x3c>)
 8010752:	480a      	ldr	r0, [pc, #40]	; (801077c <tcp_next_iss+0x40>)
 8010754:	f008 f808 	bl	8018768 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010758:	4b09      	ldr	r3, [pc, #36]	; (8010780 <tcp_next_iss+0x44>)
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	4b09      	ldr	r3, [pc, #36]	; (8010784 <tcp_next_iss+0x48>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4413      	add	r3, r2
 8010762:	4a07      	ldr	r2, [pc, #28]	; (8010780 <tcp_next_iss+0x44>)
 8010764:	6013      	str	r3, [r2, #0]
  return iss;
 8010766:	4b06      	ldr	r3, [pc, #24]	; (8010780 <tcp_next_iss+0x44>)
 8010768:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801076a:	4618      	mov	r0, r3
 801076c:	3708      	adds	r7, #8
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	0801b594 	.word	0x0801b594
 8010778:	0801bc84 	.word	0x0801bc84
 801077c:	0801b5d8 	.word	0x0801b5d8
 8010780:	20000018 	.word	0x20000018
 8010784:	2000db54 	.word	0x2000db54

08010788 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	4603      	mov	r3, r0
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
 8010794:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d106      	bne.n	80107aa <tcp_eff_send_mss_netif+0x22>
 801079c:	4b14      	ldr	r3, [pc, #80]	; (80107f0 <tcp_eff_send_mss_netif+0x68>)
 801079e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80107a2:	4914      	ldr	r1, [pc, #80]	; (80107f4 <tcp_eff_send_mss_netif+0x6c>)
 80107a4:	4814      	ldr	r0, [pc, #80]	; (80107f8 <tcp_eff_send_mss_netif+0x70>)
 80107a6:	f007 ffdf 	bl	8018768 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d101      	bne.n	80107b4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80107b0:	89fb      	ldrh	r3, [r7, #14]
 80107b2:	e019      	b.n	80107e8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80107b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80107ba:	8afb      	ldrh	r3, [r7, #22]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d012      	beq.n	80107e6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80107c0:	2328      	movs	r3, #40	; 0x28
 80107c2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80107c4:	8afa      	ldrh	r2, [r7, #22]
 80107c6:	8abb      	ldrh	r3, [r7, #20]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d904      	bls.n	80107d6 <tcp_eff_send_mss_netif+0x4e>
 80107cc:	8afa      	ldrh	r2, [r7, #22]
 80107ce:	8abb      	ldrh	r3, [r7, #20]
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	e000      	b.n	80107d8 <tcp_eff_send_mss_netif+0x50>
 80107d6:	2300      	movs	r3, #0
 80107d8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80107da:	8a7a      	ldrh	r2, [r7, #18]
 80107dc:	89fb      	ldrh	r3, [r7, #14]
 80107de:	4293      	cmp	r3, r2
 80107e0:	bf28      	it	cs
 80107e2:	4613      	movcs	r3, r2
 80107e4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80107e6:	89fb      	ldrh	r3, [r7, #14]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3718      	adds	r7, #24
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	0801b594 	.word	0x0801b594
 80107f4:	0801bca0 	.word	0x0801bca0
 80107f8:	0801b5d8 	.word	0x0801b5d8

080107fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d119      	bne.n	8010844 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010810:	4b10      	ldr	r3, [pc, #64]	; (8010854 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010812:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010816:	4910      	ldr	r1, [pc, #64]	; (8010858 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010818:	4810      	ldr	r0, [pc, #64]	; (801085c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801081a:	f007 ffa5 	bl	8018768 <iprintf>

  while (pcb != NULL) {
 801081e:	e011      	b.n	8010844 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	429a      	cmp	r2, r3
 801082a:	d108      	bne.n	801083e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7fe fe1a 	bl	800f46c <tcp_abort>
      pcb = next;
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	60fb      	str	r3, [r7, #12]
 801083c:	e002      	b.n	8010844 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1ea      	bne.n	8010820 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801084a:	bf00      	nop
 801084c:	bf00      	nop
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	0801b594 	.word	0x0801b594
 8010858:	0801bcc8 	.word	0x0801bcc8
 801085c:	0801b5d8 	.word	0x0801b5d8

08010860 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d02a      	beq.n	80108c6 <tcp_netif_ip_addr_changed+0x66>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d026      	beq.n	80108c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010878:	4b15      	ldr	r3, [pc, #84]	; (80108d0 <tcp_netif_ip_addr_changed+0x70>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4619      	mov	r1, r3
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f7ff ffbc 	bl	80107fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010884:	4b13      	ldr	r3, [pc, #76]	; (80108d4 <tcp_netif_ip_addr_changed+0x74>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4619      	mov	r1, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff ffb6 	bl	80107fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d017      	beq.n	80108c6 <tcp_netif_ip_addr_changed+0x66>
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d013      	beq.n	80108c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801089e:	4b0e      	ldr	r3, [pc, #56]	; (80108d8 <tcp_netif_ip_addr_changed+0x78>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	e00c      	b.n	80108c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d103      	bne.n	80108ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	60fb      	str	r3, [r7, #12]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1ef      	bne.n	80108a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80108c6:	bf00      	nop
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	2000db50 	.word	0x2000db50
 80108d4:	2000db5c 	.word	0x2000db5c
 80108d8:	2000db58 	.word	0x2000db58

080108dc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d007      	beq.n	80108fc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7ff fb6f 	bl	800ffd4 <tcp_segs_free>
    pcb->ooseq = NULL;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010904:	b590      	push	{r4, r7, lr}
 8010906:	b08d      	sub	sp, #52	; 0x34
 8010908:	af04      	add	r7, sp, #16
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d105      	bne.n	8010920 <tcp_input+0x1c>
 8010914:	4b9b      	ldr	r3, [pc, #620]	; (8010b84 <tcp_input+0x280>)
 8010916:	2283      	movs	r2, #131	; 0x83
 8010918:	499b      	ldr	r1, [pc, #620]	; (8010b88 <tcp_input+0x284>)
 801091a:	489c      	ldr	r0, [pc, #624]	; (8010b8c <tcp_input+0x288>)
 801091c:	f007 ff24 	bl	8018768 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	4a9a      	ldr	r2, [pc, #616]	; (8010b90 <tcp_input+0x28c>)
 8010926:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	895b      	ldrh	r3, [r3, #10]
 801092c:	2b13      	cmp	r3, #19
 801092e:	f240 83c4 	bls.w	80110ba <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010932:	4b98      	ldr	r3, [pc, #608]	; (8010b94 <tcp_input+0x290>)
 8010934:	695b      	ldr	r3, [r3, #20]
 8010936:	4a97      	ldr	r2, [pc, #604]	; (8010b94 <tcp_input+0x290>)
 8010938:	6812      	ldr	r2, [r2, #0]
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f006 fbcb 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	f040 83ba 	bne.w	80110be <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801094a:	4b92      	ldr	r3, [pc, #584]	; (8010b94 <tcp_input+0x290>)
 801094c:	695b      	ldr	r3, [r3, #20]
 801094e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010952:	2be0      	cmp	r3, #224	; 0xe0
 8010954:	f000 83b3 	beq.w	80110be <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010958:	4b8d      	ldr	r3, [pc, #564]	; (8010b90 <tcp_input+0x28c>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	899b      	ldrh	r3, [r3, #12]
 801095e:	b29b      	uxth	r3, r3
 8010960:	4618      	mov	r0, r3
 8010962:	f7fc fba5 	bl	800d0b0 <lwip_htons>
 8010966:	4603      	mov	r3, r0
 8010968:	0b1b      	lsrs	r3, r3, #12
 801096a:	b29b      	uxth	r3, r3
 801096c:	b2db      	uxtb	r3, r3
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010972:	7cbb      	ldrb	r3, [r7, #18]
 8010974:	2b13      	cmp	r3, #19
 8010976:	f240 83a4 	bls.w	80110c2 <tcp_input+0x7be>
 801097a:	7cbb      	ldrb	r3, [r7, #18]
 801097c:	b29a      	uxth	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	891b      	ldrh	r3, [r3, #8]
 8010982:	429a      	cmp	r2, r3
 8010984:	f200 839d 	bhi.w	80110c2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010988:	7cbb      	ldrb	r3, [r7, #18]
 801098a:	b29b      	uxth	r3, r3
 801098c:	3b14      	subs	r3, #20
 801098e:	b29a      	uxth	r2, r3
 8010990:	4b81      	ldr	r3, [pc, #516]	; (8010b98 <tcp_input+0x294>)
 8010992:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010994:	4b81      	ldr	r3, [pc, #516]	; (8010b9c <tcp_input+0x298>)
 8010996:	2200      	movs	r2, #0
 8010998:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	895a      	ldrh	r2, [r3, #10]
 801099e:	7cbb      	ldrb	r3, [r7, #18]
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d309      	bcc.n	80109ba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80109a6:	4b7c      	ldr	r3, [pc, #496]	; (8010b98 <tcp_input+0x294>)
 80109a8:	881a      	ldrh	r2, [r3, #0]
 80109aa:	4b7d      	ldr	r3, [pc, #500]	; (8010ba0 <tcp_input+0x29c>)
 80109ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80109ae:	7cbb      	ldrb	r3, [r7, #18]
 80109b0:	4619      	mov	r1, r3
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fd fea2 	bl	800e6fc <pbuf_remove_header>
 80109b8:	e04e      	b.n	8010a58 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d105      	bne.n	80109ce <tcp_input+0xca>
 80109c2:	4b70      	ldr	r3, [pc, #448]	; (8010b84 <tcp_input+0x280>)
 80109c4:	22c2      	movs	r2, #194	; 0xc2
 80109c6:	4977      	ldr	r1, [pc, #476]	; (8010ba4 <tcp_input+0x2a0>)
 80109c8:	4870      	ldr	r0, [pc, #448]	; (8010b8c <tcp_input+0x288>)
 80109ca:	f007 fecd 	bl	8018768 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80109ce:	2114      	movs	r1, #20
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7fd fe93 	bl	800e6fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	895a      	ldrh	r2, [r3, #10]
 80109da:	4b71      	ldr	r3, [pc, #452]	; (8010ba0 <tcp_input+0x29c>)
 80109dc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80109de:	4b6e      	ldr	r3, [pc, #440]	; (8010b98 <tcp_input+0x294>)
 80109e0:	881a      	ldrh	r2, [r3, #0]
 80109e2:	4b6f      	ldr	r3, [pc, #444]	; (8010ba0 <tcp_input+0x29c>)
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	1ad3      	subs	r3, r2, r3
 80109e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80109ea:	4b6d      	ldr	r3, [pc, #436]	; (8010ba0 <tcp_input+0x29c>)
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	4619      	mov	r1, r3
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7fd fe83 	bl	800e6fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	895b      	ldrh	r3, [r3, #10]
 80109fc:	8a3a      	ldrh	r2, [r7, #16]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	f200 8361 	bhi.w	80110c6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	4a64      	ldr	r2, [pc, #400]	; (8010b9c <tcp_input+0x298>)
 8010a0c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	8a3a      	ldrh	r2, [r7, #16]
 8010a14:	4611      	mov	r1, r2
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fd fe70 	bl	800e6fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	891a      	ldrh	r2, [r3, #8]
 8010a20:	8a3b      	ldrh	r3, [r7, #16]
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	895b      	ldrh	r3, [r3, #10]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d005      	beq.n	8010a3e <tcp_input+0x13a>
 8010a32:	4b54      	ldr	r3, [pc, #336]	; (8010b84 <tcp_input+0x280>)
 8010a34:	22df      	movs	r2, #223	; 0xdf
 8010a36:	495c      	ldr	r1, [pc, #368]	; (8010ba8 <tcp_input+0x2a4>)
 8010a38:	4854      	ldr	r0, [pc, #336]	; (8010b8c <tcp_input+0x288>)
 8010a3a:	f007 fe95 	bl	8018768 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	891a      	ldrh	r2, [r3, #8]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	891b      	ldrh	r3, [r3, #8]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d005      	beq.n	8010a58 <tcp_input+0x154>
 8010a4c:	4b4d      	ldr	r3, [pc, #308]	; (8010b84 <tcp_input+0x280>)
 8010a4e:	22e0      	movs	r2, #224	; 0xe0
 8010a50:	4956      	ldr	r1, [pc, #344]	; (8010bac <tcp_input+0x2a8>)
 8010a52:	484e      	ldr	r0, [pc, #312]	; (8010b8c <tcp_input+0x288>)
 8010a54:	f007 fe88 	bl	8018768 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010a58:	4b4d      	ldr	r3, [pc, #308]	; (8010b90 <tcp_input+0x28c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	4a4b      	ldr	r2, [pc, #300]	; (8010b90 <tcp_input+0x28c>)
 8010a62:	6814      	ldr	r4, [r2, #0]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fc fb23 	bl	800d0b0 <lwip_htons>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010a6e:	4b48      	ldr	r3, [pc, #288]	; (8010b90 <tcp_input+0x28c>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	885b      	ldrh	r3, [r3, #2]
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	4a46      	ldr	r2, [pc, #280]	; (8010b90 <tcp_input+0x28c>)
 8010a78:	6814      	ldr	r4, [r2, #0]
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7fc fb18 	bl	800d0b0 <lwip_htons>
 8010a80:	4603      	mov	r3, r0
 8010a82:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010a84:	4b42      	ldr	r3, [pc, #264]	; (8010b90 <tcp_input+0x28c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	4a41      	ldr	r2, [pc, #260]	; (8010b90 <tcp_input+0x28c>)
 8010a8c:	6814      	ldr	r4, [r2, #0]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fc fb23 	bl	800d0da <lwip_htonl>
 8010a94:	4603      	mov	r3, r0
 8010a96:	6063      	str	r3, [r4, #4]
 8010a98:	6863      	ldr	r3, [r4, #4]
 8010a9a:	4a45      	ldr	r2, [pc, #276]	; (8010bb0 <tcp_input+0x2ac>)
 8010a9c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010a9e:	4b3c      	ldr	r3, [pc, #240]	; (8010b90 <tcp_input+0x28c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	689b      	ldr	r3, [r3, #8]
 8010aa4:	4a3a      	ldr	r2, [pc, #232]	; (8010b90 <tcp_input+0x28c>)
 8010aa6:	6814      	ldr	r4, [r2, #0]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fc fb16 	bl	800d0da <lwip_htonl>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	60a3      	str	r3, [r4, #8]
 8010ab2:	68a3      	ldr	r3, [r4, #8]
 8010ab4:	4a3f      	ldr	r2, [pc, #252]	; (8010bb4 <tcp_input+0x2b0>)
 8010ab6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010ab8:	4b35      	ldr	r3, [pc, #212]	; (8010b90 <tcp_input+0x28c>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	89db      	ldrh	r3, [r3, #14]
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	4a33      	ldr	r2, [pc, #204]	; (8010b90 <tcp_input+0x28c>)
 8010ac2:	6814      	ldr	r4, [r2, #0]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fc faf3 	bl	800d0b0 <lwip_htons>
 8010aca:	4603      	mov	r3, r0
 8010acc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010ace:	4b30      	ldr	r3, [pc, #192]	; (8010b90 <tcp_input+0x28c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	899b      	ldrh	r3, [r3, #12]
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fc faea 	bl	800d0b0 <lwip_htons>
 8010adc:	4603      	mov	r3, r0
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	4b34      	ldr	r3, [pc, #208]	; (8010bb8 <tcp_input+0x2b4>)
 8010ae8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	891a      	ldrh	r2, [r3, #8]
 8010aee:	4b33      	ldr	r3, [pc, #204]	; (8010bbc <tcp_input+0x2b8>)
 8010af0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010af2:	4b31      	ldr	r3, [pc, #196]	; (8010bb8 <tcp_input+0x2b4>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	f003 0303 	and.w	r3, r3, #3
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00c      	beq.n	8010b18 <tcp_input+0x214>
    tcplen++;
 8010afe:	4b2f      	ldr	r3, [pc, #188]	; (8010bbc <tcp_input+0x2b8>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	3301      	adds	r3, #1
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	4b2d      	ldr	r3, [pc, #180]	; (8010bbc <tcp_input+0x2b8>)
 8010b08:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	891a      	ldrh	r2, [r3, #8]
 8010b0e:	4b2b      	ldr	r3, [pc, #172]	; (8010bbc <tcp_input+0x2b8>)
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	f200 82d9 	bhi.w	80110ca <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b1c:	4b28      	ldr	r3, [pc, #160]	; (8010bc0 <tcp_input+0x2bc>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	61fb      	str	r3, [r7, #28]
 8010b22:	e09d      	b.n	8010c60 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	7d1b      	ldrb	r3, [r3, #20]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d105      	bne.n	8010b38 <tcp_input+0x234>
 8010b2c:	4b15      	ldr	r3, [pc, #84]	; (8010b84 <tcp_input+0x280>)
 8010b2e:	22fb      	movs	r2, #251	; 0xfb
 8010b30:	4924      	ldr	r1, [pc, #144]	; (8010bc4 <tcp_input+0x2c0>)
 8010b32:	4816      	ldr	r0, [pc, #88]	; (8010b8c <tcp_input+0x288>)
 8010b34:	f007 fe18 	bl	8018768 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	7d1b      	ldrb	r3, [r3, #20]
 8010b3c:	2b0a      	cmp	r3, #10
 8010b3e:	d105      	bne.n	8010b4c <tcp_input+0x248>
 8010b40:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <tcp_input+0x280>)
 8010b42:	22fc      	movs	r2, #252	; 0xfc
 8010b44:	4920      	ldr	r1, [pc, #128]	; (8010bc8 <tcp_input+0x2c4>)
 8010b46:	4811      	ldr	r0, [pc, #68]	; (8010b8c <tcp_input+0x288>)
 8010b48:	f007 fe0e 	bl	8018768 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	7d1b      	ldrb	r3, [r3, #20]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d105      	bne.n	8010b60 <tcp_input+0x25c>
 8010b54:	4b0b      	ldr	r3, [pc, #44]	; (8010b84 <tcp_input+0x280>)
 8010b56:	22fd      	movs	r2, #253	; 0xfd
 8010b58:	491c      	ldr	r1, [pc, #112]	; (8010bcc <tcp_input+0x2c8>)
 8010b5a:	480c      	ldr	r0, [pc, #48]	; (8010b8c <tcp_input+0x288>)
 8010b5c:	f007 fe04 	bl	8018768 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	7a1b      	ldrb	r3, [r3, #8]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d033      	beq.n	8010bd0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	7a1a      	ldrb	r2, [r3, #8]
 8010b6c:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <tcp_input+0x290>)
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b74:	3301      	adds	r3, #1
 8010b76:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d029      	beq.n	8010bd0 <tcp_input+0x2cc>
      prev = pcb;
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	61bb      	str	r3, [r7, #24]
      continue;
 8010b80:	e06b      	b.n	8010c5a <tcp_input+0x356>
 8010b82:	bf00      	nop
 8010b84:	0801bcfc 	.word	0x0801bcfc
 8010b88:	0801bd30 	.word	0x0801bd30
 8010b8c:	0801bd48 	.word	0x0801bd48
 8010b90:	2000435c 	.word	0x2000435c
 8010b94:	2000a43c 	.word	0x2000a43c
 8010b98:	20004360 	.word	0x20004360
 8010b9c:	20004364 	.word	0x20004364
 8010ba0:	20004362 	.word	0x20004362
 8010ba4:	0801bd70 	.word	0x0801bd70
 8010ba8:	0801bd80 	.word	0x0801bd80
 8010bac:	0801bd8c 	.word	0x0801bd8c
 8010bb0:	2000436c 	.word	0x2000436c
 8010bb4:	20004370 	.word	0x20004370
 8010bb8:	20004378 	.word	0x20004378
 8010bbc:	20004376 	.word	0x20004376
 8010bc0:	2000db50 	.word	0x2000db50
 8010bc4:	0801bdac 	.word	0x0801bdac
 8010bc8:	0801bdd4 	.word	0x0801bdd4
 8010bcc:	0801be00 	.word	0x0801be00
    }

    if (pcb->remote_port == tcphdr->src &&
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	8b1a      	ldrh	r2, [r3, #24]
 8010bd4:	4b94      	ldr	r3, [pc, #592]	; (8010e28 <tcp_input+0x524>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	881b      	ldrh	r3, [r3, #0]
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d13a      	bne.n	8010c56 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	8ada      	ldrh	r2, [r3, #22]
 8010be4:	4b90      	ldr	r3, [pc, #576]	; (8010e28 <tcp_input+0x524>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	885b      	ldrh	r3, [r3, #2]
 8010bea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d132      	bne.n	8010c56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	685a      	ldr	r2, [r3, #4]
 8010bf4:	4b8d      	ldr	r3, [pc, #564]	; (8010e2c <tcp_input+0x528>)
 8010bf6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d12c      	bne.n	8010c56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	4b8a      	ldr	r3, [pc, #552]	; (8010e2c <tcp_input+0x528>)
 8010c02:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d126      	bne.n	8010c56 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	69fa      	ldr	r2, [r7, #28]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d106      	bne.n	8010c20 <tcp_input+0x31c>
 8010c12:	4b87      	ldr	r3, [pc, #540]	; (8010e30 <tcp_input+0x52c>)
 8010c14:	f240 120d 	movw	r2, #269	; 0x10d
 8010c18:	4986      	ldr	r1, [pc, #536]	; (8010e34 <tcp_input+0x530>)
 8010c1a:	4887      	ldr	r0, [pc, #540]	; (8010e38 <tcp_input+0x534>)
 8010c1c:	f007 fda4 	bl	8018768 <iprintf>
      if (prev != NULL) {
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d00a      	beq.n	8010c3c <tcp_input+0x338>
        prev->next = pcb->next;
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	68da      	ldr	r2, [r3, #12]
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010c2e:	4b83      	ldr	r3, [pc, #524]	; (8010e3c <tcp_input+0x538>)
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010c36:	4a81      	ldr	r2, [pc, #516]	; (8010e3c <tcp_input+0x538>)
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	69fa      	ldr	r2, [r7, #28]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d111      	bne.n	8010c6a <tcp_input+0x366>
 8010c46:	4b7a      	ldr	r3, [pc, #488]	; (8010e30 <tcp_input+0x52c>)
 8010c48:	f240 1215 	movw	r2, #277	; 0x115
 8010c4c:	497c      	ldr	r1, [pc, #496]	; (8010e40 <tcp_input+0x53c>)
 8010c4e:	487a      	ldr	r0, [pc, #488]	; (8010e38 <tcp_input+0x534>)
 8010c50:	f007 fd8a 	bl	8018768 <iprintf>
      break;
 8010c54:	e009      	b.n	8010c6a <tcp_input+0x366>
    }
    prev = pcb;
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	61fb      	str	r3, [r7, #28]
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f47f af5e 	bne.w	8010b24 <tcp_input+0x220>
 8010c68:	e000      	b.n	8010c6c <tcp_input+0x368>
      break;
 8010c6a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f040 8095 	bne.w	8010d9e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c74:	4b73      	ldr	r3, [pc, #460]	; (8010e44 <tcp_input+0x540>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	61fb      	str	r3, [r7, #28]
 8010c7a:	e03f      	b.n	8010cfc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	7d1b      	ldrb	r3, [r3, #20]
 8010c80:	2b0a      	cmp	r3, #10
 8010c82:	d006      	beq.n	8010c92 <tcp_input+0x38e>
 8010c84:	4b6a      	ldr	r3, [pc, #424]	; (8010e30 <tcp_input+0x52c>)
 8010c86:	f240 121f 	movw	r2, #287	; 0x11f
 8010c8a:	496f      	ldr	r1, [pc, #444]	; (8010e48 <tcp_input+0x544>)
 8010c8c:	486a      	ldr	r0, [pc, #424]	; (8010e38 <tcp_input+0x534>)
 8010c8e:	f007 fd6b 	bl	8018768 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	7a1b      	ldrb	r3, [r3, #8]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d009      	beq.n	8010cae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	7a1a      	ldrb	r2, [r3, #8]
 8010c9e:	4b63      	ldr	r3, [pc, #396]	; (8010e2c <tcp_input+0x528>)
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d122      	bne.n	8010cf4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	8b1a      	ldrh	r2, [r3, #24]
 8010cb2:	4b5d      	ldr	r3, [pc, #372]	; (8010e28 <tcp_input+0x524>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	881b      	ldrh	r3, [r3, #0]
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d11b      	bne.n	8010cf6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	8ada      	ldrh	r2, [r3, #22]
 8010cc2:	4b59      	ldr	r3, [pc, #356]	; (8010e28 <tcp_input+0x524>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	885b      	ldrh	r3, [r3, #2]
 8010cc8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d113      	bne.n	8010cf6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010cce:	69fb      	ldr	r3, [r7, #28]
 8010cd0:	685a      	ldr	r2, [r3, #4]
 8010cd2:	4b56      	ldr	r3, [pc, #344]	; (8010e2c <tcp_input+0x528>)
 8010cd4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d10d      	bne.n	8010cf6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	4b53      	ldr	r3, [pc, #332]	; (8010e2c <tcp_input+0x528>)
 8010ce0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d107      	bne.n	8010cf6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010ce6:	69f8      	ldr	r0, [r7, #28]
 8010ce8:	f000 fb54 	bl	8011394 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f7fd fdbd 	bl	800e86c <pbuf_free>
        return;
 8010cf2:	e1f0      	b.n	80110d6 <tcp_input+0x7d2>
        continue;
 8010cf4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	61fb      	str	r3, [r7, #28]
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1bc      	bne.n	8010c7c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010d02:	2300      	movs	r3, #0
 8010d04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d06:	4b51      	ldr	r3, [pc, #324]	; (8010e4c <tcp_input+0x548>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	617b      	str	r3, [r7, #20]
 8010d0c:	e02a      	b.n	8010d64 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	7a1b      	ldrb	r3, [r3, #8]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00c      	beq.n	8010d30 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	7a1a      	ldrb	r2, [r3, #8]
 8010d1a:	4b44      	ldr	r3, [pc, #272]	; (8010e2c <tcp_input+0x528>)
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d22:	3301      	adds	r3, #1
 8010d24:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d002      	beq.n	8010d30 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	61bb      	str	r3, [r7, #24]
        continue;
 8010d2e:	e016      	b.n	8010d5e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	8ada      	ldrh	r2, [r3, #22]
 8010d34:	4b3c      	ldr	r3, [pc, #240]	; (8010e28 <tcp_input+0x524>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	885b      	ldrh	r3, [r3, #2]
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d10c      	bne.n	8010d5a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	4b39      	ldr	r3, [pc, #228]	; (8010e2c <tcp_input+0x528>)
 8010d46:	695b      	ldr	r3, [r3, #20]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d00f      	beq.n	8010d6c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00d      	beq.n	8010d6e <tcp_input+0x46a>
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d009      	beq.n	8010d6e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	617b      	str	r3, [r7, #20]
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1d1      	bne.n	8010d0e <tcp_input+0x40a>
 8010d6a:	e000      	b.n	8010d6e <tcp_input+0x46a>
            break;
 8010d6c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d014      	beq.n	8010d9e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00a      	beq.n	8010d90 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	68da      	ldr	r2, [r3, #12]
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010d82:	4b32      	ldr	r3, [pc, #200]	; (8010e4c <tcp_input+0x548>)
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010d8a:	4a30      	ldr	r2, [pc, #192]	; (8010e4c <tcp_input+0x548>)
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010d90:	6978      	ldr	r0, [r7, #20]
 8010d92:	f000 fa01 	bl	8011198 <tcp_listen_input>
      }
      pbuf_free(p);
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7fd fd68 	bl	800e86c <pbuf_free>
      return;
 8010d9c:	e19b      	b.n	80110d6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 8160 	beq.w	8011066 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010da6:	4b2a      	ldr	r3, [pc, #168]	; (8010e50 <tcp_input+0x54c>)
 8010da8:	2200      	movs	r2, #0
 8010daa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	891a      	ldrh	r2, [r3, #8]
 8010db0:	4b27      	ldr	r3, [pc, #156]	; (8010e50 <tcp_input+0x54c>)
 8010db2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010db4:	4a26      	ldr	r2, [pc, #152]	; (8010e50 <tcp_input+0x54c>)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010dba:	4b1b      	ldr	r3, [pc, #108]	; (8010e28 <tcp_input+0x524>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a24      	ldr	r2, [pc, #144]	; (8010e50 <tcp_input+0x54c>)
 8010dc0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010dc2:	4b24      	ldr	r3, [pc, #144]	; (8010e54 <tcp_input+0x550>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010dc8:	4b23      	ldr	r3, [pc, #140]	; (8010e58 <tcp_input+0x554>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010dce:	4b23      	ldr	r3, [pc, #140]	; (8010e5c <tcp_input+0x558>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010dd4:	4b22      	ldr	r3, [pc, #136]	; (8010e60 <tcp_input+0x55c>)
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	f003 0308 	and.w	r3, r3, #8
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d006      	beq.n	8010dee <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	7b5b      	ldrb	r3, [r3, #13]
 8010de4:	f043 0301 	orr.w	r3, r3, #1
 8010de8:	b2da      	uxtb	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d038      	beq.n	8010e68 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010df6:	69f8      	ldr	r0, [r7, #28]
 8010df8:	f7ff f870 	bl	800fedc <tcp_process_refused_data>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	f113 0f0d 	cmn.w	r3, #13
 8010e02:	d007      	beq.n	8010e14 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d02d      	beq.n	8010e68 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010e0c:	4b15      	ldr	r3, [pc, #84]	; (8010e64 <tcp_input+0x560>)
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d029      	beq.n	8010e68 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f040 8104 	bne.w	8011026 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010e1e:	69f8      	ldr	r0, [r7, #28]
 8010e20:	f003 fe16 	bl	8014a50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010e24:	e0ff      	b.n	8011026 <tcp_input+0x722>
 8010e26:	bf00      	nop
 8010e28:	2000435c 	.word	0x2000435c
 8010e2c:	2000a43c 	.word	0x2000a43c
 8010e30:	0801bcfc 	.word	0x0801bcfc
 8010e34:	0801be28 	.word	0x0801be28
 8010e38:	0801bd48 	.word	0x0801bd48
 8010e3c:	2000db50 	.word	0x2000db50
 8010e40:	0801be54 	.word	0x0801be54
 8010e44:	2000db60 	.word	0x2000db60
 8010e48:	0801be80 	.word	0x0801be80
 8010e4c:	2000db58 	.word	0x2000db58
 8010e50:	2000434c 	.word	0x2000434c
 8010e54:	2000437c 	.word	0x2000437c
 8010e58:	20004379 	.word	0x20004379
 8010e5c:	20004374 	.word	0x20004374
 8010e60:	20004378 	.word	0x20004378
 8010e64:	20004376 	.word	0x20004376
      }
    }
    tcp_input_pcb = pcb;
 8010e68:	4a9c      	ldr	r2, [pc, #624]	; (80110dc <tcp_input+0x7d8>)
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010e6e:	69f8      	ldr	r0, [r7, #28]
 8010e70:	f000 fb0a 	bl	8011488 <tcp_process>
 8010e74:	4603      	mov	r3, r0
 8010e76:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010e78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e7c:	f113 0f0d 	cmn.w	r3, #13
 8010e80:	f000 80d3 	beq.w	801102a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010e84:	4b96      	ldr	r3, [pc, #600]	; (80110e0 <tcp_input+0x7dc>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	f003 0308 	and.w	r3, r3, #8
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d015      	beq.n	8010ebc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d008      	beq.n	8010eac <tcp_input+0x5a8>
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ea0:	69fa      	ldr	r2, [r7, #28]
 8010ea2:	6912      	ldr	r2, [r2, #16]
 8010ea4:	f06f 010d 	mvn.w	r1, #13
 8010ea8:	4610      	mov	r0, r2
 8010eaa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010eac:	69f9      	ldr	r1, [r7, #28]
 8010eae:	488d      	ldr	r0, [pc, #564]	; (80110e4 <tcp_input+0x7e0>)
 8010eb0:	f7ff fbb0 	bl	8010614 <tcp_pcb_remove>
        tcp_free(pcb);
 8010eb4:	69f8      	ldr	r0, [r7, #28]
 8010eb6:	f7fd ff95 	bl	800ede4 <tcp_free>
 8010eba:	e0c1      	b.n	8011040 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010ec0:	4b89      	ldr	r3, [pc, #548]	; (80110e8 <tcp_input+0x7e4>)
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d01d      	beq.n	8010f04 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010ec8:	4b87      	ldr	r3, [pc, #540]	; (80110e8 <tcp_input+0x7e4>)
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00a      	beq.n	8010eee <tcp_input+0x5ea>
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ede:	69fa      	ldr	r2, [r7, #28]
 8010ee0:	6910      	ldr	r0, [r2, #16]
 8010ee2:	89fa      	ldrh	r2, [r7, #14]
 8010ee4:	69f9      	ldr	r1, [r7, #28]
 8010ee6:	4798      	blx	r3
 8010ee8:	4603      	mov	r3, r0
 8010eea:	74fb      	strb	r3, [r7, #19]
 8010eec:	e001      	b.n	8010ef2 <tcp_input+0x5ee>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010ef2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ef6:	f113 0f0d 	cmn.w	r3, #13
 8010efa:	f000 8098 	beq.w	801102e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010efe:	4b7a      	ldr	r3, [pc, #488]	; (80110e8 <tcp_input+0x7e4>)
 8010f00:	2200      	movs	r2, #0
 8010f02:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010f04:	69f8      	ldr	r0, [r7, #28]
 8010f06:	f000 f907 	bl	8011118 <tcp_input_delayed_close>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f040 8090 	bne.w	8011032 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010f12:	4b76      	ldr	r3, [pc, #472]	; (80110ec <tcp_input+0x7e8>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d041      	beq.n	8010f9e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d006      	beq.n	8010f30 <tcp_input+0x62c>
 8010f22:	4b73      	ldr	r3, [pc, #460]	; (80110f0 <tcp_input+0x7ec>)
 8010f24:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010f28:	4972      	ldr	r1, [pc, #456]	; (80110f4 <tcp_input+0x7f0>)
 8010f2a:	4873      	ldr	r0, [pc, #460]	; (80110f8 <tcp_input+0x7f4>)
 8010f2c:	f007 fc1c 	bl	8018768 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	8b5b      	ldrh	r3, [r3, #26]
 8010f34:	f003 0310 	and.w	r3, r3, #16
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d008      	beq.n	8010f4e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010f3c:	4b6b      	ldr	r3, [pc, #428]	; (80110ec <tcp_input+0x7e8>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fd fc93 	bl	800e86c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010f46:	69f8      	ldr	r0, [r7, #28]
 8010f48:	f7fe fa90 	bl	800f46c <tcp_abort>
            goto aborted;
 8010f4c:	e078      	b.n	8011040 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00c      	beq.n	8010f72 <tcp_input+0x66e>
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	6918      	ldr	r0, [r3, #16]
 8010f62:	4b62      	ldr	r3, [pc, #392]	; (80110ec <tcp_input+0x7e8>)
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	2300      	movs	r3, #0
 8010f68:	69f9      	ldr	r1, [r7, #28]
 8010f6a:	47a0      	blx	r4
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	74fb      	strb	r3, [r7, #19]
 8010f70:	e008      	b.n	8010f84 <tcp_input+0x680>
 8010f72:	4b5e      	ldr	r3, [pc, #376]	; (80110ec <tcp_input+0x7e8>)
 8010f74:	681a      	ldr	r2, [r3, #0]
 8010f76:	2300      	movs	r3, #0
 8010f78:	69f9      	ldr	r1, [r7, #28]
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	f7ff f884 	bl	8010088 <tcp_recv_null>
 8010f80:	4603      	mov	r3, r0
 8010f82:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f88:	f113 0f0d 	cmn.w	r3, #13
 8010f8c:	d053      	beq.n	8011036 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010f8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010f96:	4b55      	ldr	r3, [pc, #340]	; (80110ec <tcp_input+0x7e8>)
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010f9e:	4b50      	ldr	r3, [pc, #320]	; (80110e0 <tcp_input+0x7dc>)
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	f003 0320 	and.w	r3, r3, #32
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d030      	beq.n	801100c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d009      	beq.n	8010fc6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fb6:	7b5a      	ldrb	r2, [r3, #13]
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fbc:	f042 0220 	orr.w	r2, r2, #32
 8010fc0:	b2d2      	uxtb	r2, r2
 8010fc2:	735a      	strb	r2, [r3, #13]
 8010fc4:	e022      	b.n	801100c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010fce:	d005      	beq.n	8010fdc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00b      	beq.n	8010ffe <tcp_input+0x6fa>
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	6918      	ldr	r0, [r3, #16]
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	69f9      	ldr	r1, [r7, #28]
 8010ff6:	47a0      	blx	r4
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	74fb      	strb	r3, [r7, #19]
 8010ffc:	e001      	b.n	8011002 <tcp_input+0x6fe>
 8010ffe:	2300      	movs	r3, #0
 8011000:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011002:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011006:	f113 0f0d 	cmn.w	r3, #13
 801100a:	d016      	beq.n	801103a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801100c:	4b33      	ldr	r3, [pc, #204]	; (80110dc <tcp_input+0x7d8>)
 801100e:	2200      	movs	r2, #0
 8011010:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011012:	69f8      	ldr	r0, [r7, #28]
 8011014:	f000 f880 	bl	8011118 <tcp_input_delayed_close>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d10f      	bne.n	801103e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801101e:	69f8      	ldr	r0, [r7, #28]
 8011020:	f002 ff10 	bl	8013e44 <tcp_output>
 8011024:	e00c      	b.n	8011040 <tcp_input+0x73c>
        goto aborted;
 8011026:	bf00      	nop
 8011028:	e00a      	b.n	8011040 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801102a:	bf00      	nop
 801102c:	e008      	b.n	8011040 <tcp_input+0x73c>
              goto aborted;
 801102e:	bf00      	nop
 8011030:	e006      	b.n	8011040 <tcp_input+0x73c>
          goto aborted;
 8011032:	bf00      	nop
 8011034:	e004      	b.n	8011040 <tcp_input+0x73c>
            goto aborted;
 8011036:	bf00      	nop
 8011038:	e002      	b.n	8011040 <tcp_input+0x73c>
              goto aborted;
 801103a:	bf00      	nop
 801103c:	e000      	b.n	8011040 <tcp_input+0x73c>
          goto aborted;
 801103e:	bf00      	nop
    tcp_input_pcb = NULL;
 8011040:	4b26      	ldr	r3, [pc, #152]	; (80110dc <tcp_input+0x7d8>)
 8011042:	2200      	movs	r2, #0
 8011044:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011046:	4b29      	ldr	r3, [pc, #164]	; (80110ec <tcp_input+0x7e8>)
 8011048:	2200      	movs	r2, #0
 801104a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801104c:	4b2b      	ldr	r3, [pc, #172]	; (80110fc <tcp_input+0x7f8>)
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d03f      	beq.n	80110d4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011054:	4b29      	ldr	r3, [pc, #164]	; (80110fc <tcp_input+0x7f8>)
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	4618      	mov	r0, r3
 801105a:	f7fd fc07 	bl	800e86c <pbuf_free>
      inseg.p = NULL;
 801105e:	4b27      	ldr	r3, [pc, #156]	; (80110fc <tcp_input+0x7f8>)
 8011060:	2200      	movs	r2, #0
 8011062:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011064:	e036      	b.n	80110d4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011066:	4b26      	ldr	r3, [pc, #152]	; (8011100 <tcp_input+0x7fc>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	899b      	ldrh	r3, [r3, #12]
 801106c:	b29b      	uxth	r3, r3
 801106e:	4618      	mov	r0, r3
 8011070:	f7fc f81e 	bl	800d0b0 <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 0304 	and.w	r3, r3, #4
 801107c:	2b00      	cmp	r3, #0
 801107e:	d118      	bne.n	80110b2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011080:	4b20      	ldr	r3, [pc, #128]	; (8011104 <tcp_input+0x800>)
 8011082:	6819      	ldr	r1, [r3, #0]
 8011084:	4b20      	ldr	r3, [pc, #128]	; (8011108 <tcp_input+0x804>)
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	461a      	mov	r2, r3
 801108a:	4b20      	ldr	r3, [pc, #128]	; (801110c <tcp_input+0x808>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011090:	4b1b      	ldr	r3, [pc, #108]	; (8011100 <tcp_input+0x7fc>)
 8011092:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011094:	885b      	ldrh	r3, [r3, #2]
 8011096:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011098:	4a19      	ldr	r2, [pc, #100]	; (8011100 <tcp_input+0x7fc>)
 801109a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801109c:	8812      	ldrh	r2, [r2, #0]
 801109e:	b292      	uxth	r2, r2
 80110a0:	9202      	str	r2, [sp, #8]
 80110a2:	9301      	str	r3, [sp, #4]
 80110a4:	4b1a      	ldr	r3, [pc, #104]	; (8011110 <tcp_input+0x80c>)
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	4b1a      	ldr	r3, [pc, #104]	; (8011114 <tcp_input+0x810>)
 80110aa:	4602      	mov	r2, r0
 80110ac:	2000      	movs	r0, #0
 80110ae:	f003 fc7d 	bl	80149ac <tcp_rst>
    pbuf_free(p);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f7fd fbda 	bl	800e86c <pbuf_free>
  return;
 80110b8:	e00c      	b.n	80110d4 <tcp_input+0x7d0>
    goto dropped;
 80110ba:	bf00      	nop
 80110bc:	e006      	b.n	80110cc <tcp_input+0x7c8>
    goto dropped;
 80110be:	bf00      	nop
 80110c0:	e004      	b.n	80110cc <tcp_input+0x7c8>
    goto dropped;
 80110c2:	bf00      	nop
 80110c4:	e002      	b.n	80110cc <tcp_input+0x7c8>
      goto dropped;
 80110c6:	bf00      	nop
 80110c8:	e000      	b.n	80110cc <tcp_input+0x7c8>
      goto dropped;
 80110ca:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f7fd fbcd 	bl	800e86c <pbuf_free>
 80110d2:	e000      	b.n	80110d6 <tcp_input+0x7d2>
  return;
 80110d4:	bf00      	nop
}
 80110d6:	3724      	adds	r7, #36	; 0x24
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd90      	pop	{r4, r7, pc}
 80110dc:	2000db64 	.word	0x2000db64
 80110e0:	20004379 	.word	0x20004379
 80110e4:	2000db50 	.word	0x2000db50
 80110e8:	20004374 	.word	0x20004374
 80110ec:	2000437c 	.word	0x2000437c
 80110f0:	0801bcfc 	.word	0x0801bcfc
 80110f4:	0801beb0 	.word	0x0801beb0
 80110f8:	0801bd48 	.word	0x0801bd48
 80110fc:	2000434c 	.word	0x2000434c
 8011100:	2000435c 	.word	0x2000435c
 8011104:	20004370 	.word	0x20004370
 8011108:	20004376 	.word	0x20004376
 801110c:	2000436c 	.word	0x2000436c
 8011110:	2000a44c 	.word	0x2000a44c
 8011114:	2000a450 	.word	0x2000a450

08011118 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d106      	bne.n	8011134 <tcp_input_delayed_close+0x1c>
 8011126:	4b17      	ldr	r3, [pc, #92]	; (8011184 <tcp_input_delayed_close+0x6c>)
 8011128:	f240 225a 	movw	r2, #602	; 0x25a
 801112c:	4916      	ldr	r1, [pc, #88]	; (8011188 <tcp_input_delayed_close+0x70>)
 801112e:	4817      	ldr	r0, [pc, #92]	; (801118c <tcp_input_delayed_close+0x74>)
 8011130:	f007 fb1a 	bl	8018768 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011134:	4b16      	ldr	r3, [pc, #88]	; (8011190 <tcp_input_delayed_close+0x78>)
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	f003 0310 	and.w	r3, r3, #16
 801113c:	2b00      	cmp	r3, #0
 801113e:	d01c      	beq.n	801117a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	8b5b      	ldrh	r3, [r3, #26]
 8011144:	f003 0310 	and.w	r3, r3, #16
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10d      	bne.n	8011168 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011152:	2b00      	cmp	r3, #0
 8011154:	d008      	beq.n	8011168 <tcp_input_delayed_close+0x50>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	6912      	ldr	r2, [r2, #16]
 8011160:	f06f 010e 	mvn.w	r1, #14
 8011164:	4610      	mov	r0, r2
 8011166:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011168:	6879      	ldr	r1, [r7, #4]
 801116a:	480a      	ldr	r0, [pc, #40]	; (8011194 <tcp_input_delayed_close+0x7c>)
 801116c:	f7ff fa52 	bl	8010614 <tcp_pcb_remove>
    tcp_free(pcb);
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7fd fe37 	bl	800ede4 <tcp_free>
    return 1;
 8011176:	2301      	movs	r3, #1
 8011178:	e000      	b.n	801117c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	0801bcfc 	.word	0x0801bcfc
 8011188:	0801becc 	.word	0x0801becc
 801118c:	0801bd48 	.word	0x0801bd48
 8011190:	20004379 	.word	0x20004379
 8011194:	2000db50 	.word	0x2000db50

08011198 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011198:	b590      	push	{r4, r7, lr}
 801119a:	b08b      	sub	sp, #44	; 0x2c
 801119c:	af04      	add	r7, sp, #16
 801119e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80111a0:	4b6f      	ldr	r3, [pc, #444]	; (8011360 <tcp_listen_input+0x1c8>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f003 0304 	and.w	r3, r3, #4
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f040 80d2 	bne.w	8011352 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d106      	bne.n	80111c2 <tcp_listen_input+0x2a>
 80111b4:	4b6b      	ldr	r3, [pc, #428]	; (8011364 <tcp_listen_input+0x1cc>)
 80111b6:	f240 2281 	movw	r2, #641	; 0x281
 80111ba:	496b      	ldr	r1, [pc, #428]	; (8011368 <tcp_listen_input+0x1d0>)
 80111bc:	486b      	ldr	r0, [pc, #428]	; (801136c <tcp_listen_input+0x1d4>)
 80111be:	f007 fad3 	bl	8018768 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80111c2:	4b67      	ldr	r3, [pc, #412]	; (8011360 <tcp_listen_input+0x1c8>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	f003 0310 	and.w	r3, r3, #16
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d019      	beq.n	8011202 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111ce:	4b68      	ldr	r3, [pc, #416]	; (8011370 <tcp_listen_input+0x1d8>)
 80111d0:	6819      	ldr	r1, [r3, #0]
 80111d2:	4b68      	ldr	r3, [pc, #416]	; (8011374 <tcp_listen_input+0x1dc>)
 80111d4:	881b      	ldrh	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	4b67      	ldr	r3, [pc, #412]	; (8011378 <tcp_listen_input+0x1e0>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111de:	4b67      	ldr	r3, [pc, #412]	; (801137c <tcp_listen_input+0x1e4>)
 80111e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111e2:	885b      	ldrh	r3, [r3, #2]
 80111e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111e6:	4a65      	ldr	r2, [pc, #404]	; (801137c <tcp_listen_input+0x1e4>)
 80111e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111ea:	8812      	ldrh	r2, [r2, #0]
 80111ec:	b292      	uxth	r2, r2
 80111ee:	9202      	str	r2, [sp, #8]
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	4b63      	ldr	r3, [pc, #396]	; (8011380 <tcp_listen_input+0x1e8>)
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	4b63      	ldr	r3, [pc, #396]	; (8011384 <tcp_listen_input+0x1ec>)
 80111f8:	4602      	mov	r2, r0
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f003 fbd6 	bl	80149ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011200:	e0a9      	b.n	8011356 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011202:	4b57      	ldr	r3, [pc, #348]	; (8011360 <tcp_listen_input+0x1c8>)
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	f003 0302 	and.w	r3, r3, #2
 801120a:	2b00      	cmp	r3, #0
 801120c:	f000 80a3 	beq.w	8011356 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	7d5b      	ldrb	r3, [r3, #21]
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff f85b 	bl	80102d0 <tcp_alloc>
 801121a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d111      	bne.n	8011246 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	699b      	ldr	r3, [r3, #24]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00a      	beq.n	8011240 <tcp_listen_input+0xa8>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	699b      	ldr	r3, [r3, #24]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	6910      	ldr	r0, [r2, #16]
 8011232:	f04f 32ff 	mov.w	r2, #4294967295
 8011236:	2100      	movs	r1, #0
 8011238:	4798      	blx	r3
 801123a:	4603      	mov	r3, r0
 801123c:	73bb      	strb	r3, [r7, #14]
      return;
 801123e:	e08b      	b.n	8011358 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011240:	23f0      	movs	r3, #240	; 0xf0
 8011242:	73bb      	strb	r3, [r7, #14]
      return;
 8011244:	e088      	b.n	8011358 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011246:	4b50      	ldr	r3, [pc, #320]	; (8011388 <tcp_listen_input+0x1f0>)
 8011248:	695a      	ldr	r2, [r3, #20]
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801124e:	4b4e      	ldr	r3, [pc, #312]	; (8011388 <tcp_listen_input+0x1f0>)
 8011250:	691a      	ldr	r2, [r3, #16]
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	8ada      	ldrh	r2, [r3, #22]
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801125e:	4b47      	ldr	r3, [pc, #284]	; (801137c <tcp_listen_input+0x1e4>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	881b      	ldrh	r3, [r3, #0]
 8011264:	b29a      	uxth	r2, r3
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	2203      	movs	r2, #3
 801126e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011270:	4b41      	ldr	r3, [pc, #260]	; (8011378 <tcp_listen_input+0x1e0>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011282:	6978      	ldr	r0, [r7, #20]
 8011284:	f7ff fa5a 	bl	801073c <tcp_next_iss>
 8011288:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	693a      	ldr	r2, [r7, #16]
 801128e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	693a      	ldr	r2, [r7, #16]
 8011294:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	693a      	ldr	r2, [r7, #16]
 801129a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	693a      	ldr	r2, [r7, #16]
 80112a0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80112a2:	4b35      	ldr	r3, [pc, #212]	; (8011378 <tcp_listen_input+0x1e0>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	1e5a      	subs	r2, r3, #1
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	691a      	ldr	r2, [r3, #16]
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	7a5b      	ldrb	r3, [r3, #9]
 80112be:	f003 030c 	and.w	r3, r3, #12
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	7a1a      	ldrb	r2, [r3, #8]
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80112d0:	4b2e      	ldr	r3, [pc, #184]	; (801138c <tcp_listen_input+0x1f4>)
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	60da      	str	r2, [r3, #12]
 80112d8:	4a2c      	ldr	r2, [pc, #176]	; (801138c <tcp_listen_input+0x1f4>)
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	f003 fd27 	bl	8014d30 <tcp_timer_needed>
 80112e2:	4b2b      	ldr	r3, [pc, #172]	; (8011390 <tcp_listen_input+0x1f8>)
 80112e4:	2201      	movs	r2, #1
 80112e6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80112e8:	6978      	ldr	r0, [r7, #20]
 80112ea:	f001 fd8d 	bl	8012e08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80112ee:	4b23      	ldr	r3, [pc, #140]	; (801137c <tcp_listen_input+0x1e4>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	89db      	ldrh	r3, [r3, #14]
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	3304      	adds	r3, #4
 8011310:	4618      	mov	r0, r3
 8011312:	f005 fc4b 	bl	8016bac <ip4_route>
 8011316:	4601      	mov	r1, r0
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	3304      	adds	r3, #4
 801131c:	461a      	mov	r2, r3
 801131e:	4620      	mov	r0, r4
 8011320:	f7ff fa32 	bl	8010788 <tcp_eff_send_mss_netif>
 8011324:	4603      	mov	r3, r0
 8011326:	461a      	mov	r2, r3
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801132c:	2112      	movs	r1, #18
 801132e:	6978      	ldr	r0, [r7, #20]
 8011330:	f002 fc9a 	bl	8013c68 <tcp_enqueue_flags>
 8011334:	4603      	mov	r3, r0
 8011336:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d004      	beq.n	801134a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011340:	2100      	movs	r1, #0
 8011342:	6978      	ldr	r0, [r7, #20]
 8011344:	f7fd ffd4 	bl	800f2f0 <tcp_abandon>
      return;
 8011348:	e006      	b.n	8011358 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801134a:	6978      	ldr	r0, [r7, #20]
 801134c:	f002 fd7a 	bl	8013e44 <tcp_output>
  return;
 8011350:	e001      	b.n	8011356 <tcp_listen_input+0x1be>
    return;
 8011352:	bf00      	nop
 8011354:	e000      	b.n	8011358 <tcp_listen_input+0x1c0>
  return;
 8011356:	bf00      	nop
}
 8011358:	371c      	adds	r7, #28
 801135a:	46bd      	mov	sp, r7
 801135c:	bd90      	pop	{r4, r7, pc}
 801135e:	bf00      	nop
 8011360:	20004378 	.word	0x20004378
 8011364:	0801bcfc 	.word	0x0801bcfc
 8011368:	0801bef4 	.word	0x0801bef4
 801136c:	0801bd48 	.word	0x0801bd48
 8011370:	20004370 	.word	0x20004370
 8011374:	20004376 	.word	0x20004376
 8011378:	2000436c 	.word	0x2000436c
 801137c:	2000435c 	.word	0x2000435c
 8011380:	2000a44c 	.word	0x2000a44c
 8011384:	2000a450 	.word	0x2000a450
 8011388:	2000a43c 	.word	0x2000a43c
 801138c:	2000db50 	.word	0x2000db50
 8011390:	2000db4c 	.word	0x2000db4c

08011394 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af04      	add	r7, sp, #16
 801139a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801139c:	4b2f      	ldr	r3, [pc, #188]	; (801145c <tcp_timewait_input+0xc8>)
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 0304 	and.w	r3, r3, #4
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d153      	bne.n	8011450 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <tcp_timewait_input+0x28>
 80113ae:	4b2c      	ldr	r3, [pc, #176]	; (8011460 <tcp_timewait_input+0xcc>)
 80113b0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80113b4:	492b      	ldr	r1, [pc, #172]	; (8011464 <tcp_timewait_input+0xd0>)
 80113b6:	482c      	ldr	r0, [pc, #176]	; (8011468 <tcp_timewait_input+0xd4>)
 80113b8:	f007 f9d6 	bl	8018768 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80113bc:	4b27      	ldr	r3, [pc, #156]	; (801145c <tcp_timewait_input+0xc8>)
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	f003 0302 	and.w	r3, r3, #2
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d02a      	beq.n	801141e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80113c8:	4b28      	ldr	r3, [pc, #160]	; (801146c <tcp_timewait_input+0xd8>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	db2d      	blt.n	8011432 <tcp_timewait_input+0x9e>
 80113d6:	4b25      	ldr	r3, [pc, #148]	; (801146c <tcp_timewait_input+0xd8>)
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113de:	6879      	ldr	r1, [r7, #4]
 80113e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113e2:	440b      	add	r3, r1
 80113e4:	1ad3      	subs	r3, r2, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	dc23      	bgt.n	8011432 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113ea:	4b21      	ldr	r3, [pc, #132]	; (8011470 <tcp_timewait_input+0xdc>)
 80113ec:	6819      	ldr	r1, [r3, #0]
 80113ee:	4b21      	ldr	r3, [pc, #132]	; (8011474 <tcp_timewait_input+0xe0>)
 80113f0:	881b      	ldrh	r3, [r3, #0]
 80113f2:	461a      	mov	r2, r3
 80113f4:	4b1d      	ldr	r3, [pc, #116]	; (801146c <tcp_timewait_input+0xd8>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113fa:	4b1f      	ldr	r3, [pc, #124]	; (8011478 <tcp_timewait_input+0xe4>)
 80113fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113fe:	885b      	ldrh	r3, [r3, #2]
 8011400:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011402:	4a1d      	ldr	r2, [pc, #116]	; (8011478 <tcp_timewait_input+0xe4>)
 8011404:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011406:	8812      	ldrh	r2, [r2, #0]
 8011408:	b292      	uxth	r2, r2
 801140a:	9202      	str	r2, [sp, #8]
 801140c:	9301      	str	r3, [sp, #4]
 801140e:	4b1b      	ldr	r3, [pc, #108]	; (801147c <tcp_timewait_input+0xe8>)
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	4b1b      	ldr	r3, [pc, #108]	; (8011480 <tcp_timewait_input+0xec>)
 8011414:	4602      	mov	r2, r0
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f003 fac8 	bl	80149ac <tcp_rst>
      return;
 801141c:	e01b      	b.n	8011456 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801141e:	4b0f      	ldr	r3, [pc, #60]	; (801145c <tcp_timewait_input+0xc8>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	2b00      	cmp	r3, #0
 8011428:	d003      	beq.n	8011432 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801142a:	4b16      	ldr	r3, [pc, #88]	; (8011484 <tcp_timewait_input+0xf0>)
 801142c:	681a      	ldr	r2, [r3, #0]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011432:	4b10      	ldr	r3, [pc, #64]	; (8011474 <tcp_timewait_input+0xe0>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00c      	beq.n	8011454 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8b5b      	ldrh	r3, [r3, #26]
 801143e:	f043 0302 	orr.w	r3, r3, #2
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f002 fcfb 	bl	8013e44 <tcp_output>
  }
  return;
 801144e:	e001      	b.n	8011454 <tcp_timewait_input+0xc0>
    return;
 8011450:	bf00      	nop
 8011452:	e000      	b.n	8011456 <tcp_timewait_input+0xc2>
  return;
 8011454:	bf00      	nop
}
 8011456:	3708      	adds	r7, #8
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	20004378 	.word	0x20004378
 8011460:	0801bcfc 	.word	0x0801bcfc
 8011464:	0801bf14 	.word	0x0801bf14
 8011468:	0801bd48 	.word	0x0801bd48
 801146c:	2000436c 	.word	0x2000436c
 8011470:	20004370 	.word	0x20004370
 8011474:	20004376 	.word	0x20004376
 8011478:	2000435c 	.word	0x2000435c
 801147c:	2000a44c 	.word	0x2000a44c
 8011480:	2000a450 	.word	0x2000a450
 8011484:	2000db54 	.word	0x2000db54

08011488 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011488:	b590      	push	{r4, r7, lr}
 801148a:	b08d      	sub	sp, #52	; 0x34
 801148c:	af04      	add	r7, sp, #16
 801148e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011490:	2300      	movs	r3, #0
 8011492:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011494:	2300      	movs	r3, #0
 8011496:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <tcp_process+0x24>
 801149e:	4ba5      	ldr	r3, [pc, #660]	; (8011734 <tcp_process+0x2ac>)
 80114a0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80114a4:	49a4      	ldr	r1, [pc, #656]	; (8011738 <tcp_process+0x2b0>)
 80114a6:	48a5      	ldr	r0, [pc, #660]	; (801173c <tcp_process+0x2b4>)
 80114a8:	f007 f95e 	bl	8018768 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80114ac:	4ba4      	ldr	r3, [pc, #656]	; (8011740 <tcp_process+0x2b8>)
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	f003 0304 	and.w	r3, r3, #4
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d04e      	beq.n	8011556 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	7d1b      	ldrb	r3, [r3, #20]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d108      	bne.n	80114d2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114c4:	4b9f      	ldr	r3, [pc, #636]	; (8011744 <tcp_process+0x2bc>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d123      	bne.n	8011514 <tcp_process+0x8c>
        acceptable = 1;
 80114cc:	2301      	movs	r3, #1
 80114ce:	76fb      	strb	r3, [r7, #27]
 80114d0:	e020      	b.n	8011514 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114d6:	4b9c      	ldr	r3, [pc, #624]	; (8011748 <tcp_process+0x2c0>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d102      	bne.n	80114e4 <tcp_process+0x5c>
        acceptable = 1;
 80114de:	2301      	movs	r3, #1
 80114e0:	76fb      	strb	r3, [r7, #27]
 80114e2:	e017      	b.n	8011514 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80114e4:	4b98      	ldr	r3, [pc, #608]	; (8011748 <tcp_process+0x2c0>)
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	db10      	blt.n	8011514 <tcp_process+0x8c>
 80114f2:	4b95      	ldr	r3, [pc, #596]	; (8011748 <tcp_process+0x2c0>)
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114fa:	6879      	ldr	r1, [r7, #4]
 80114fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114fe:	440b      	add	r3, r1
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	2b00      	cmp	r3, #0
 8011504:	dc06      	bgt.n	8011514 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	8b5b      	ldrh	r3, [r3, #26]
 801150a:	f043 0302 	orr.w	r3, r3, #2
 801150e:	b29a      	uxth	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011514:	7efb      	ldrb	r3, [r7, #27]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d01b      	beq.n	8011552 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	7d1b      	ldrb	r3, [r3, #20]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d106      	bne.n	8011530 <tcp_process+0xa8>
 8011522:	4b84      	ldr	r3, [pc, #528]	; (8011734 <tcp_process+0x2ac>)
 8011524:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011528:	4988      	ldr	r1, [pc, #544]	; (801174c <tcp_process+0x2c4>)
 801152a:	4884      	ldr	r0, [pc, #528]	; (801173c <tcp_process+0x2b4>)
 801152c:	f007 f91c 	bl	8018768 <iprintf>
      recv_flags |= TF_RESET;
 8011530:	4b87      	ldr	r3, [pc, #540]	; (8011750 <tcp_process+0x2c8>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	f043 0308 	orr.w	r3, r3, #8
 8011538:	b2da      	uxtb	r2, r3
 801153a:	4b85      	ldr	r3, [pc, #532]	; (8011750 <tcp_process+0x2c8>)
 801153c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	8b5b      	ldrh	r3, [r3, #26]
 8011542:	f023 0301 	bic.w	r3, r3, #1
 8011546:	b29a      	uxth	r2, r3
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801154c:	f06f 030d 	mvn.w	r3, #13
 8011550:	e37a      	b.n	8011c48 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011552:	2300      	movs	r3, #0
 8011554:	e378      	b.n	8011c48 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011556:	4b7a      	ldr	r3, [pc, #488]	; (8011740 <tcp_process+0x2b8>)
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	f003 0302 	and.w	r3, r3, #2
 801155e:	2b00      	cmp	r3, #0
 8011560:	d010      	beq.n	8011584 <tcp_process+0xfc>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	7d1b      	ldrb	r3, [r3, #20]
 8011566:	2b02      	cmp	r3, #2
 8011568:	d00c      	beq.n	8011584 <tcp_process+0xfc>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	7d1b      	ldrb	r3, [r3, #20]
 801156e:	2b03      	cmp	r3, #3
 8011570:	d008      	beq.n	8011584 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	8b5b      	ldrh	r3, [r3, #26]
 8011576:	f043 0302 	orr.w	r3, r3, #2
 801157a:	b29a      	uxth	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011580:	2300      	movs	r3, #0
 8011582:	e361      	b.n	8011c48 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	8b5b      	ldrh	r3, [r3, #26]
 8011588:	f003 0310 	and.w	r3, r3, #16
 801158c:	2b00      	cmp	r3, #0
 801158e:	d103      	bne.n	8011598 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011590:	4b70      	ldr	r3, [pc, #448]	; (8011754 <tcp_process+0x2cc>)
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2200      	movs	r2, #0
 801159c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f001 fc2d 	bl	8012e08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	7d1b      	ldrb	r3, [r3, #20]
 80115b2:	3b02      	subs	r3, #2
 80115b4:	2b07      	cmp	r3, #7
 80115b6:	f200 8337 	bhi.w	8011c28 <tcp_process+0x7a0>
 80115ba:	a201      	add	r2, pc, #4	; (adr r2, 80115c0 <tcp_process+0x138>)
 80115bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c0:	080115e1 	.word	0x080115e1
 80115c4:	08011811 	.word	0x08011811
 80115c8:	08011989 	.word	0x08011989
 80115cc:	080119b3 	.word	0x080119b3
 80115d0:	08011ad7 	.word	0x08011ad7
 80115d4:	08011989 	.word	0x08011989
 80115d8:	08011b63 	.word	0x08011b63
 80115dc:	08011bf3 	.word	0x08011bf3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80115e0:	4b57      	ldr	r3, [pc, #348]	; (8011740 <tcp_process+0x2b8>)
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	f003 0310 	and.w	r3, r3, #16
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f000 80e4 	beq.w	80117b6 <tcp_process+0x32e>
 80115ee:	4b54      	ldr	r3, [pc, #336]	; (8011740 <tcp_process+0x2b8>)
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	f003 0302 	and.w	r3, r3, #2
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 80dd 	beq.w	80117b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011600:	1c5a      	adds	r2, r3, #1
 8011602:	4b50      	ldr	r3, [pc, #320]	; (8011744 <tcp_process+0x2bc>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	429a      	cmp	r2, r3
 8011608:	f040 80d5 	bne.w	80117b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801160c:	4b4e      	ldr	r3, [pc, #312]	; (8011748 <tcp_process+0x2c0>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801161e:	4b49      	ldr	r3, [pc, #292]	; (8011744 <tcp_process+0x2bc>)
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011626:	4b4c      	ldr	r3, [pc, #304]	; (8011758 <tcp_process+0x2d0>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	89db      	ldrh	r3, [r3, #14]
 801162c:	b29a      	uxth	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011640:	4b41      	ldr	r3, [pc, #260]	; (8011748 <tcp_process+0x2c0>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	1e5a      	subs	r2, r3, #1
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2204      	movs	r2, #4
 801164e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	3304      	adds	r3, #4
 8011658:	4618      	mov	r0, r3
 801165a:	f005 faa7 	bl	8016bac <ip4_route>
 801165e:	4601      	mov	r1, r0
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	3304      	adds	r3, #4
 8011664:	461a      	mov	r2, r3
 8011666:	4620      	mov	r0, r4
 8011668:	f7ff f88e 	bl	8010788 <tcp_eff_send_mss_netif>
 801166c:	4603      	mov	r3, r0
 801166e:	461a      	mov	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011678:	009a      	lsls	r2, r3, #2
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	f241 111c 	movw	r1, #4380	; 0x111c
 8011684:	428b      	cmp	r3, r1
 8011686:	bf38      	it	cc
 8011688:	460b      	movcc	r3, r1
 801168a:	429a      	cmp	r2, r3
 801168c:	d204      	bcs.n	8011698 <tcp_process+0x210>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	b29b      	uxth	r3, r3
 8011696:	e00d      	b.n	80116b4 <tcp_process+0x22c>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	f241 121c 	movw	r2, #4380	; 0x111c
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d904      	bls.n	80116b0 <tcp_process+0x228>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	e001      	b.n	80116b4 <tcp_process+0x22c>
 80116b0:	f241 131c 	movw	r3, #4380	; 0x111c
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d106      	bne.n	80116d2 <tcp_process+0x24a>
 80116c4:	4b1b      	ldr	r3, [pc, #108]	; (8011734 <tcp_process+0x2ac>)
 80116c6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80116ca:	4924      	ldr	r1, [pc, #144]	; (801175c <tcp_process+0x2d4>)
 80116cc:	481b      	ldr	r0, [pc, #108]	; (801173c <tcp_process+0x2b4>)
 80116ce:	f007 f84b 	bl	8018768 <iprintf>
        --pcb->snd_queuelen;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116d8:	3b01      	subs	r3, #1
 80116da:	b29a      	uxth	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d111      	bne.n	8011712 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d106      	bne.n	8011708 <tcp_process+0x280>
 80116fa:	4b0e      	ldr	r3, [pc, #56]	; (8011734 <tcp_process+0x2ac>)
 80116fc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011700:	4917      	ldr	r1, [pc, #92]	; (8011760 <tcp_process+0x2d8>)
 8011702:	480e      	ldr	r0, [pc, #56]	; (801173c <tcp_process+0x2b4>)
 8011704:	f007 f830 	bl	8018768 <iprintf>
          pcb->unsent = rseg->next;
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	66da      	str	r2, [r3, #108]	; 0x6c
 8011710:	e003      	b.n	801171a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801171a:	69f8      	ldr	r0, [r7, #28]
 801171c:	f7fe fc6f 	bl	800fffe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011724:	2b00      	cmp	r3, #0
 8011726:	d11d      	bne.n	8011764 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801172e:	861a      	strh	r2, [r3, #48]	; 0x30
 8011730:	e01f      	b.n	8011772 <tcp_process+0x2ea>
 8011732:	bf00      	nop
 8011734:	0801bcfc 	.word	0x0801bcfc
 8011738:	0801bf34 	.word	0x0801bf34
 801173c:	0801bd48 	.word	0x0801bd48
 8011740:	20004378 	.word	0x20004378
 8011744:	20004370 	.word	0x20004370
 8011748:	2000436c 	.word	0x2000436c
 801174c:	0801bf50 	.word	0x0801bf50
 8011750:	20004379 	.word	0x20004379
 8011754:	2000db54 	.word	0x2000db54
 8011758:	2000435c 	.word	0x2000435c
 801175c:	0801bf70 	.word	0x0801bf70
 8011760:	0801bf88 	.word	0x0801bf88
        } else {
          pcb->rtime = 0;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2200      	movs	r2, #0
 801176e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011778:	2b00      	cmp	r3, #0
 801177a:	d00a      	beq.n	8011792 <tcp_process+0x30a>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	6910      	ldr	r0, [r2, #16]
 8011786:	2200      	movs	r2, #0
 8011788:	6879      	ldr	r1, [r7, #4]
 801178a:	4798      	blx	r3
 801178c:	4603      	mov	r3, r0
 801178e:	76bb      	strb	r3, [r7, #26]
 8011790:	e001      	b.n	8011796 <tcp_process+0x30e>
 8011792:	2300      	movs	r3, #0
 8011794:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011796:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801179a:	f113 0f0d 	cmn.w	r3, #13
 801179e:	d102      	bne.n	80117a6 <tcp_process+0x31e>
          return ERR_ABRT;
 80117a0:	f06f 030c 	mvn.w	r3, #12
 80117a4:	e250      	b.n	8011c48 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	8b5b      	ldrh	r3, [r3, #26]
 80117aa:	f043 0302 	orr.w	r3, r3, #2
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80117b4:	e23a      	b.n	8011c2c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80117b6:	4b9d      	ldr	r3, [pc, #628]	; (8011a2c <tcp_process+0x5a4>)
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	f003 0310 	and.w	r3, r3, #16
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 8234 	beq.w	8011c2c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117c4:	4b9a      	ldr	r3, [pc, #616]	; (8011a30 <tcp_process+0x5a8>)
 80117c6:	6819      	ldr	r1, [r3, #0]
 80117c8:	4b9a      	ldr	r3, [pc, #616]	; (8011a34 <tcp_process+0x5ac>)
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	461a      	mov	r2, r3
 80117ce:	4b9a      	ldr	r3, [pc, #616]	; (8011a38 <tcp_process+0x5b0>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117d4:	4b99      	ldr	r3, [pc, #612]	; (8011a3c <tcp_process+0x5b4>)
 80117d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117d8:	885b      	ldrh	r3, [r3, #2]
 80117da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117dc:	4a97      	ldr	r2, [pc, #604]	; (8011a3c <tcp_process+0x5b4>)
 80117de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117e0:	8812      	ldrh	r2, [r2, #0]
 80117e2:	b292      	uxth	r2, r2
 80117e4:	9202      	str	r2, [sp, #8]
 80117e6:	9301      	str	r3, [sp, #4]
 80117e8:	4b95      	ldr	r3, [pc, #596]	; (8011a40 <tcp_process+0x5b8>)
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	4b95      	ldr	r3, [pc, #596]	; (8011a44 <tcp_process+0x5bc>)
 80117ee:	4602      	mov	r2, r0
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f003 f8db 	bl	80149ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117fc:	2b05      	cmp	r3, #5
 80117fe:	f200 8215 	bhi.w	8011c2c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f002 fea5 	bl	8014558 <tcp_rexmit_rto>
      break;
 801180e:	e20d      	b.n	8011c2c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011810:	4b86      	ldr	r3, [pc, #536]	; (8011a2c <tcp_process+0x5a4>)
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	f003 0310 	and.w	r3, r3, #16
 8011818:	2b00      	cmp	r3, #0
 801181a:	f000 80a1 	beq.w	8011960 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801181e:	4b84      	ldr	r3, [pc, #528]	; (8011a30 <tcp_process+0x5a8>)
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011826:	1ad3      	subs	r3, r2, r3
 8011828:	3b01      	subs	r3, #1
 801182a:	2b00      	cmp	r3, #0
 801182c:	db7e      	blt.n	801192c <tcp_process+0x4a4>
 801182e:	4b80      	ldr	r3, [pc, #512]	; (8011a30 <tcp_process+0x5a8>)
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	2b00      	cmp	r3, #0
 801183a:	dc77      	bgt.n	801192c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2204      	movs	r2, #4
 8011840:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011846:	2b00      	cmp	r3, #0
 8011848:	d102      	bne.n	8011850 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801184a:	23fa      	movs	r3, #250	; 0xfa
 801184c:	76bb      	strb	r3, [r7, #26]
 801184e:	e01d      	b.n	801188c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011854:	699b      	ldr	r3, [r3, #24]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d106      	bne.n	8011868 <tcp_process+0x3e0>
 801185a:	4b7b      	ldr	r3, [pc, #492]	; (8011a48 <tcp_process+0x5c0>)
 801185c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011860:	497a      	ldr	r1, [pc, #488]	; (8011a4c <tcp_process+0x5c4>)
 8011862:	487b      	ldr	r0, [pc, #492]	; (8011a50 <tcp_process+0x5c8>)
 8011864:	f006 ff80 	bl	8018768 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801186c:	699b      	ldr	r3, [r3, #24]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d00a      	beq.n	8011888 <tcp_process+0x400>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011876:	699b      	ldr	r3, [r3, #24]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	6910      	ldr	r0, [r2, #16]
 801187c:	2200      	movs	r2, #0
 801187e:	6879      	ldr	r1, [r7, #4]
 8011880:	4798      	blx	r3
 8011882:	4603      	mov	r3, r0
 8011884:	76bb      	strb	r3, [r7, #26]
 8011886:	e001      	b.n	801188c <tcp_process+0x404>
 8011888:	23f0      	movs	r3, #240	; 0xf0
 801188a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801188c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00a      	beq.n	80118aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011894:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011898:	f113 0f0d 	cmn.w	r3, #13
 801189c:	d002      	beq.n	80118a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7fd fde4 	bl	800f46c <tcp_abort>
            }
            return ERR_ABRT;
 80118a4:	f06f 030c 	mvn.w	r3, #12
 80118a8:	e1ce      	b.n	8011c48 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 fae0 	bl	8011e70 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80118b0:	4b68      	ldr	r3, [pc, #416]	; (8011a54 <tcp_process+0x5cc>)
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d005      	beq.n	80118c4 <tcp_process+0x43c>
            recv_acked--;
 80118b8:	4b66      	ldr	r3, [pc, #408]	; (8011a54 <tcp_process+0x5cc>)
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	3b01      	subs	r3, #1
 80118be:	b29a      	uxth	r2, r3
 80118c0:	4b64      	ldr	r3, [pc, #400]	; (8011a54 <tcp_process+0x5cc>)
 80118c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118c8:	009a      	lsls	r2, r3, #2
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ce:	005b      	lsls	r3, r3, #1
 80118d0:	f241 111c 	movw	r1, #4380	; 0x111c
 80118d4:	428b      	cmp	r3, r1
 80118d6:	bf38      	it	cc
 80118d8:	460b      	movcc	r3, r1
 80118da:	429a      	cmp	r2, r3
 80118dc:	d204      	bcs.n	80118e8 <tcp_process+0x460>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	e00d      	b.n	8011904 <tcp_process+0x47c>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ec:	005b      	lsls	r3, r3, #1
 80118ee:	f241 121c 	movw	r2, #4380	; 0x111c
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d904      	bls.n	8011900 <tcp_process+0x478>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	e001      	b.n	8011904 <tcp_process+0x47c>
 8011900:	f241 131c 	movw	r3, #4380	; 0x111c
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801190a:	4b53      	ldr	r3, [pc, #332]	; (8011a58 <tcp_process+0x5d0>)
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	f003 0320 	and.w	r3, r3, #32
 8011912:	2b00      	cmp	r3, #0
 8011914:	d037      	beq.n	8011986 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	8b5b      	ldrh	r3, [r3, #26]
 801191a:	f043 0302 	orr.w	r3, r3, #2
 801191e:	b29a      	uxth	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2207      	movs	r2, #7
 8011928:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801192a:	e02c      	b.n	8011986 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801192c:	4b40      	ldr	r3, [pc, #256]	; (8011a30 <tcp_process+0x5a8>)
 801192e:	6819      	ldr	r1, [r3, #0]
 8011930:	4b40      	ldr	r3, [pc, #256]	; (8011a34 <tcp_process+0x5ac>)
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	461a      	mov	r2, r3
 8011936:	4b40      	ldr	r3, [pc, #256]	; (8011a38 <tcp_process+0x5b0>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801193c:	4b3f      	ldr	r3, [pc, #252]	; (8011a3c <tcp_process+0x5b4>)
 801193e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011940:	885b      	ldrh	r3, [r3, #2]
 8011942:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011944:	4a3d      	ldr	r2, [pc, #244]	; (8011a3c <tcp_process+0x5b4>)
 8011946:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011948:	8812      	ldrh	r2, [r2, #0]
 801194a:	b292      	uxth	r2, r2
 801194c:	9202      	str	r2, [sp, #8]
 801194e:	9301      	str	r3, [sp, #4]
 8011950:	4b3b      	ldr	r3, [pc, #236]	; (8011a40 <tcp_process+0x5b8>)
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	4b3b      	ldr	r3, [pc, #236]	; (8011a44 <tcp_process+0x5bc>)
 8011956:	4602      	mov	r2, r0
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f003 f827 	bl	80149ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801195e:	e167      	b.n	8011c30 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011960:	4b32      	ldr	r3, [pc, #200]	; (8011a2c <tcp_process+0x5a4>)
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	f003 0302 	and.w	r3, r3, #2
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 8161 	beq.w	8011c30 <tcp_process+0x7a8>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011972:	1e5a      	subs	r2, r3, #1
 8011974:	4b30      	ldr	r3, [pc, #192]	; (8011a38 <tcp_process+0x5b0>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	429a      	cmp	r2, r3
 801197a:	f040 8159 	bne.w	8011c30 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f002 fe0c 	bl	801459c <tcp_rexmit>
      break;
 8011984:	e154      	b.n	8011c30 <tcp_process+0x7a8>
 8011986:	e153      	b.n	8011c30 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 fa71 	bl	8011e70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801198e:	4b32      	ldr	r3, [pc, #200]	; (8011a58 <tcp_process+0x5d0>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	f003 0320 	and.w	r3, r3, #32
 8011996:	2b00      	cmp	r3, #0
 8011998:	f000 814c 	beq.w	8011c34 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	8b5b      	ldrh	r3, [r3, #26]
 80119a0:	f043 0302 	orr.w	r3, r3, #2
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2207      	movs	r2, #7
 80119ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119b0:	e140      	b.n	8011c34 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fa5c 	bl	8011e70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80119b8:	4b27      	ldr	r3, [pc, #156]	; (8011a58 <tcp_process+0x5d0>)
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	f003 0320 	and.w	r3, r3, #32
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d071      	beq.n	8011aa8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119c4:	4b19      	ldr	r3, [pc, #100]	; (8011a2c <tcp_process+0x5a4>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	f003 0310 	and.w	r3, r3, #16
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d060      	beq.n	8011a92 <tcp_process+0x60a>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119d4:	4b16      	ldr	r3, [pc, #88]	; (8011a30 <tcp_process+0x5a8>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d15a      	bne.n	8011a92 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d156      	bne.n	8011a92 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	8b5b      	ldrh	r3, [r3, #26]
 80119e8:	f043 0302 	orr.w	r3, r3, #2
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7fe fdbe 	bl	8010574 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80119f8:	4b18      	ldr	r3, [pc, #96]	; (8011a5c <tcp_process+0x5d4>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d105      	bne.n	8011a0e <tcp_process+0x586>
 8011a02:	4b16      	ldr	r3, [pc, #88]	; (8011a5c <tcp_process+0x5d4>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	4a14      	ldr	r2, [pc, #80]	; (8011a5c <tcp_process+0x5d4>)
 8011a0a:	6013      	str	r3, [r2, #0]
 8011a0c:	e02e      	b.n	8011a6c <tcp_process+0x5e4>
 8011a0e:	4b13      	ldr	r3, [pc, #76]	; (8011a5c <tcp_process+0x5d4>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	617b      	str	r3, [r7, #20]
 8011a14:	e027      	b.n	8011a66 <tcp_process+0x5de>
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d11f      	bne.n	8011a60 <tcp_process+0x5d8>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	68da      	ldr	r2, [r3, #12]
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	60da      	str	r2, [r3, #12]
 8011a28:	e020      	b.n	8011a6c <tcp_process+0x5e4>
 8011a2a:	bf00      	nop
 8011a2c:	20004378 	.word	0x20004378
 8011a30:	20004370 	.word	0x20004370
 8011a34:	20004376 	.word	0x20004376
 8011a38:	2000436c 	.word	0x2000436c
 8011a3c:	2000435c 	.word	0x2000435c
 8011a40:	2000a44c 	.word	0x2000a44c
 8011a44:	2000a450 	.word	0x2000a450
 8011a48:	0801bcfc 	.word	0x0801bcfc
 8011a4c:	0801bf9c 	.word	0x0801bf9c
 8011a50:	0801bd48 	.word	0x0801bd48
 8011a54:	20004374 	.word	0x20004374
 8011a58:	20004379 	.word	0x20004379
 8011a5c:	2000db50 	.word	0x2000db50
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	617b      	str	r3, [r7, #20]
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1d4      	bne.n	8011a16 <tcp_process+0x58e>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	60da      	str	r2, [r3, #12]
 8011a72:	4b77      	ldr	r3, [pc, #476]	; (8011c50 <tcp_process+0x7c8>)
 8011a74:	2201      	movs	r2, #1
 8011a76:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	220a      	movs	r2, #10
 8011a7c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011a7e:	4b75      	ldr	r3, [pc, #468]	; (8011c54 <tcp_process+0x7cc>)
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	60da      	str	r2, [r3, #12]
 8011a86:	4a73      	ldr	r2, [pc, #460]	; (8011c54 <tcp_process+0x7cc>)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6013      	str	r3, [r2, #0]
 8011a8c:	f003 f950 	bl	8014d30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011a90:	e0d2      	b.n	8011c38 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	8b5b      	ldrh	r3, [r3, #26]
 8011a96:	f043 0302 	orr.w	r3, r3, #2
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2208      	movs	r2, #8
 8011aa4:	751a      	strb	r2, [r3, #20]
      break;
 8011aa6:	e0c7      	b.n	8011c38 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011aa8:	4b6b      	ldr	r3, [pc, #428]	; (8011c58 <tcp_process+0x7d0>)
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	f003 0310 	and.w	r3, r3, #16
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f000 80c1 	beq.w	8011c38 <tcp_process+0x7b0>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011aba:	4b68      	ldr	r3, [pc, #416]	; (8011c5c <tcp_process+0x7d4>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	f040 80ba 	bne.w	8011c38 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f040 80b5 	bne.w	8011c38 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2206      	movs	r2, #6
 8011ad2:	751a      	strb	r2, [r3, #20]
      break;
 8011ad4:	e0b0      	b.n	8011c38 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 f9ca 	bl	8011e70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011adc:	4b60      	ldr	r3, [pc, #384]	; (8011c60 <tcp_process+0x7d8>)
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	f003 0320 	and.w	r3, r3, #32
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	f000 80a9 	beq.w	8011c3c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	8b5b      	ldrh	r3, [r3, #26]
 8011aee:	f043 0302 	orr.w	r3, r3, #2
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7fe fd3b 	bl	8010574 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011afe:	4b59      	ldr	r3, [pc, #356]	; (8011c64 <tcp_process+0x7dc>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d105      	bne.n	8011b14 <tcp_process+0x68c>
 8011b08:	4b56      	ldr	r3, [pc, #344]	; (8011c64 <tcp_process+0x7dc>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	68db      	ldr	r3, [r3, #12]
 8011b0e:	4a55      	ldr	r2, [pc, #340]	; (8011c64 <tcp_process+0x7dc>)
 8011b10:	6013      	str	r3, [r2, #0]
 8011b12:	e013      	b.n	8011b3c <tcp_process+0x6b4>
 8011b14:	4b53      	ldr	r3, [pc, #332]	; (8011c64 <tcp_process+0x7dc>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	613b      	str	r3, [r7, #16]
 8011b1a:	e00c      	b.n	8011b36 <tcp_process+0x6ae>
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d104      	bne.n	8011b30 <tcp_process+0x6a8>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	68da      	ldr	r2, [r3, #12]
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	60da      	str	r2, [r3, #12]
 8011b2e:	e005      	b.n	8011b3c <tcp_process+0x6b4>
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	613b      	str	r3, [r7, #16]
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1ef      	bne.n	8011b1c <tcp_process+0x694>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	60da      	str	r2, [r3, #12]
 8011b42:	4b43      	ldr	r3, [pc, #268]	; (8011c50 <tcp_process+0x7c8>)
 8011b44:	2201      	movs	r2, #1
 8011b46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	220a      	movs	r2, #10
 8011b4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b4e:	4b41      	ldr	r3, [pc, #260]	; (8011c54 <tcp_process+0x7cc>)
 8011b50:	681a      	ldr	r2, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	60da      	str	r2, [r3, #12]
 8011b56:	4a3f      	ldr	r2, [pc, #252]	; (8011c54 <tcp_process+0x7cc>)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6013      	str	r3, [r2, #0]
 8011b5c:	f003 f8e8 	bl	8014d30 <tcp_timer_needed>
      }
      break;
 8011b60:	e06c      	b.n	8011c3c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 f984 	bl	8011e70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b68:	4b3b      	ldr	r3, [pc, #236]	; (8011c58 <tcp_process+0x7d0>)
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	f003 0310 	and.w	r3, r3, #16
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d065      	beq.n	8011c40 <tcp_process+0x7b8>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b78:	4b38      	ldr	r3, [pc, #224]	; (8011c5c <tcp_process+0x7d4>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d15f      	bne.n	8011c40 <tcp_process+0x7b8>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d15b      	bne.n	8011c40 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7fe fcf3 	bl	8010574 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011b8e:	4b35      	ldr	r3, [pc, #212]	; (8011c64 <tcp_process+0x7dc>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d105      	bne.n	8011ba4 <tcp_process+0x71c>
 8011b98:	4b32      	ldr	r3, [pc, #200]	; (8011c64 <tcp_process+0x7dc>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	4a31      	ldr	r2, [pc, #196]	; (8011c64 <tcp_process+0x7dc>)
 8011ba0:	6013      	str	r3, [r2, #0]
 8011ba2:	e013      	b.n	8011bcc <tcp_process+0x744>
 8011ba4:	4b2f      	ldr	r3, [pc, #188]	; (8011c64 <tcp_process+0x7dc>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	60fb      	str	r3, [r7, #12]
 8011baa:	e00c      	b.n	8011bc6 <tcp_process+0x73e>
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d104      	bne.n	8011bc0 <tcp_process+0x738>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	68da      	ldr	r2, [r3, #12]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	60da      	str	r2, [r3, #12]
 8011bbe:	e005      	b.n	8011bcc <tcp_process+0x744>
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	60fb      	str	r3, [r7, #12]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1ef      	bne.n	8011bac <tcp_process+0x724>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	60da      	str	r2, [r3, #12]
 8011bd2:	4b1f      	ldr	r3, [pc, #124]	; (8011c50 <tcp_process+0x7c8>)
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	220a      	movs	r2, #10
 8011bdc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011bde:	4b1d      	ldr	r3, [pc, #116]	; (8011c54 <tcp_process+0x7cc>)
 8011be0:	681a      	ldr	r2, [r3, #0]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	60da      	str	r2, [r3, #12]
 8011be6:	4a1b      	ldr	r2, [pc, #108]	; (8011c54 <tcp_process+0x7cc>)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6013      	str	r3, [r2, #0]
 8011bec:	f003 f8a0 	bl	8014d30 <tcp_timer_needed>
      }
      break;
 8011bf0:	e026      	b.n	8011c40 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f000 f93c 	bl	8011e70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011bf8:	4b17      	ldr	r3, [pc, #92]	; (8011c58 <tcp_process+0x7d0>)
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	f003 0310 	and.w	r3, r3, #16
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d01f      	beq.n	8011c44 <tcp_process+0x7bc>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c08:	4b14      	ldr	r3, [pc, #80]	; (8011c5c <tcp_process+0x7d4>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d119      	bne.n	8011c44 <tcp_process+0x7bc>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d115      	bne.n	8011c44 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011c18:	4b11      	ldr	r3, [pc, #68]	; (8011c60 <tcp_process+0x7d8>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	f043 0310 	orr.w	r3, r3, #16
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	4b0f      	ldr	r3, [pc, #60]	; (8011c60 <tcp_process+0x7d8>)
 8011c24:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011c26:	e00d      	b.n	8011c44 <tcp_process+0x7bc>
    default:
      break;
 8011c28:	bf00      	nop
 8011c2a:	e00c      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c2c:	bf00      	nop
 8011c2e:	e00a      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c30:	bf00      	nop
 8011c32:	e008      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c34:	bf00      	nop
 8011c36:	e006      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c38:	bf00      	nop
 8011c3a:	e004      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c3c:	bf00      	nop
 8011c3e:	e002      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c40:	bf00      	nop
 8011c42:	e000      	b.n	8011c46 <tcp_process+0x7be>
      break;
 8011c44:	bf00      	nop
  }
  return ERR_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3724      	adds	r7, #36	; 0x24
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd90      	pop	{r4, r7, pc}
 8011c50:	2000db4c 	.word	0x2000db4c
 8011c54:	2000db60 	.word	0x2000db60
 8011c58:	20004378 	.word	0x20004378
 8011c5c:	20004370 	.word	0x20004370
 8011c60:	20004379 	.word	0x20004379
 8011c64:	2000db50 	.word	0x2000db50

08011c68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011c68:	b590      	push	{r4, r7, lr}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d106      	bne.n	8011c86 <tcp_oos_insert_segment+0x1e>
 8011c78:	4b3b      	ldr	r3, [pc, #236]	; (8011d68 <tcp_oos_insert_segment+0x100>)
 8011c7a:	f240 421f 	movw	r2, #1055	; 0x41f
 8011c7e:	493b      	ldr	r1, [pc, #236]	; (8011d6c <tcp_oos_insert_segment+0x104>)
 8011c80:	483b      	ldr	r0, [pc, #236]	; (8011d70 <tcp_oos_insert_segment+0x108>)
 8011c82:	f006 fd71 	bl	8018768 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	899b      	ldrh	r3, [r3, #12]
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fb fa0e 	bl	800d0b0 <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	f003 0301 	and.w	r3, r3, #1
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d028      	beq.n	8011cf2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011ca0:	6838      	ldr	r0, [r7, #0]
 8011ca2:	f7fe f997 	bl	800ffd4 <tcp_segs_free>
    next = NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	603b      	str	r3, [r7, #0]
 8011caa:	e056      	b.n	8011d5a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	899b      	ldrh	r3, [r3, #12]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7fb f9fb 	bl	800d0b0 <lwip_htons>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	f003 0301 	and.w	r3, r3, #1
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00d      	beq.n	8011ce2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	899b      	ldrh	r3, [r3, #12]
 8011ccc:	b29c      	uxth	r4, r3
 8011cce:	2001      	movs	r0, #1
 8011cd0:	f7fb f9ee 	bl	800d0b0 <lwip_htons>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	4322      	orrs	r2, r4
 8011cde:	b292      	uxth	r2, r2
 8011ce0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011cec:	68f8      	ldr	r0, [r7, #12]
 8011cee:	f7fe f986 	bl	800fffe <tcp_seg_free>
    while (next &&
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00e      	beq.n	8011d16 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	891b      	ldrh	r3, [r3, #8]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4b1d      	ldr	r3, [pc, #116]	; (8011d74 <tcp_oos_insert_segment+0x10c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	441a      	add	r2, r3
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	8909      	ldrh	r1, [r1, #8]
 8011d0e:	440b      	add	r3, r1
 8011d10:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	daca      	bge.n	8011cac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d01e      	beq.n	8011d5a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	891b      	ldrh	r3, [r3, #8]
 8011d20:	461a      	mov	r2, r3
 8011d22:	4b14      	ldr	r3, [pc, #80]	; (8011d74 <tcp_oos_insert_segment+0x10c>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	441a      	add	r2, r3
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	dd12      	ble.n	8011d5a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	4b0d      	ldr	r3, [pc, #52]	; (8011d74 <tcp_oos_insert_segment+0x10c>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	685a      	ldr	r2, [r3, #4]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	891b      	ldrh	r3, [r3, #8]
 8011d52:	4619      	mov	r1, r3
 8011d54:	4610      	mov	r0, r2
 8011d56:	f7fc fbd1 	bl	800e4fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	683a      	ldr	r2, [r7, #0]
 8011d5e:	601a      	str	r2, [r3, #0]
}
 8011d60:	bf00      	nop
 8011d62:	3714      	adds	r7, #20
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd90      	pop	{r4, r7, pc}
 8011d68:	0801bcfc 	.word	0x0801bcfc
 8011d6c:	0801bfbc 	.word	0x0801bfbc
 8011d70:	0801bd48 	.word	0x0801bd48
 8011d74:	2000436c 	.word	0x2000436c

08011d78 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011d78:	b5b0      	push	{r4, r5, r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011d86:	e03e      	b.n	8011e06 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fc fdf6 	bl	800e988 <pbuf_clen>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011da6:	8a7a      	ldrh	r2, [r7, #18]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d906      	bls.n	8011dba <tcp_free_acked_segments+0x42>
 8011dac:	4b2a      	ldr	r3, [pc, #168]	; (8011e58 <tcp_free_acked_segments+0xe0>)
 8011dae:	f240 4257 	movw	r2, #1111	; 0x457
 8011db2:	492a      	ldr	r1, [pc, #168]	; (8011e5c <tcp_free_acked_segments+0xe4>)
 8011db4:	482a      	ldr	r0, [pc, #168]	; (8011e60 <tcp_free_acked_segments+0xe8>)
 8011db6:	f006 fcd7 	bl	8018768 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011dc0:	8a7b      	ldrh	r3, [r7, #18]
 8011dc2:	1ad3      	subs	r3, r2, r3
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	891a      	ldrh	r2, [r3, #8]
 8011dd0:	4b24      	ldr	r3, [pc, #144]	; (8011e64 <tcp_free_acked_segments+0xec>)
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29a      	uxth	r2, r3
 8011dd8:	4b22      	ldr	r3, [pc, #136]	; (8011e64 <tcp_free_acked_segments+0xec>)
 8011dda:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011ddc:	6978      	ldr	r0, [r7, #20]
 8011dde:	f7fe f90e 	bl	800fffe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00c      	beq.n	8011e06 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d109      	bne.n	8011e06 <tcp_free_acked_segments+0x8e>
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d106      	bne.n	8011e06 <tcp_free_acked_segments+0x8e>
 8011df8:	4b17      	ldr	r3, [pc, #92]	; (8011e58 <tcp_free_acked_segments+0xe0>)
 8011dfa:	f240 4261 	movw	r2, #1121	; 0x461
 8011dfe:	491a      	ldr	r1, [pc, #104]	; (8011e68 <tcp_free_acked_segments+0xf0>)
 8011e00:	4817      	ldr	r0, [pc, #92]	; (8011e60 <tcp_free_acked_segments+0xe8>)
 8011e02:	f006 fcb1 	bl	8018768 <iprintf>
  while (seg_list != NULL &&
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d020      	beq.n	8011e4e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fb f961 	bl	800d0da <lwip_htonl>
 8011e18:	4604      	mov	r4, r0
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	891b      	ldrh	r3, [r3, #8]
 8011e1e:	461d      	mov	r5, r3
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	68db      	ldr	r3, [r3, #12]
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7fb f941 	bl	800d0b0 <lwip_htons>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	f003 0303 	and.w	r3, r3, #3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d001      	beq.n	8011e3e <tcp_free_acked_segments+0xc6>
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	e000      	b.n	8011e40 <tcp_free_acked_segments+0xc8>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	442b      	add	r3, r5
 8011e42:	18e2      	adds	r2, r4, r3
 8011e44:	4b09      	ldr	r3, [pc, #36]	; (8011e6c <tcp_free_acked_segments+0xf4>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	dd9c      	ble.n	8011d88 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011e4e:	68bb      	ldr	r3, [r7, #8]
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3718      	adds	r7, #24
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bdb0      	pop	{r4, r5, r7, pc}
 8011e58:	0801bcfc 	.word	0x0801bcfc
 8011e5c:	0801bfe4 	.word	0x0801bfe4
 8011e60:	0801bd48 	.word	0x0801bd48
 8011e64:	20004374 	.word	0x20004374
 8011e68:	0801c00c 	.word	0x0801c00c
 8011e6c:	20004370 	.word	0x20004370

08011e70 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011e70:	b5b0      	push	{r4, r5, r7, lr}
 8011e72:	b094      	sub	sp, #80	; 0x50
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d106      	bne.n	8011e90 <tcp_receive+0x20>
 8011e82:	4ba6      	ldr	r3, [pc, #664]	; (801211c <tcp_receive+0x2ac>)
 8011e84:	f240 427b 	movw	r2, #1147	; 0x47b
 8011e88:	49a5      	ldr	r1, [pc, #660]	; (8012120 <tcp_receive+0x2b0>)
 8011e8a:	48a6      	ldr	r0, [pc, #664]	; (8012124 <tcp_receive+0x2b4>)
 8011e8c:	f006 fc6c 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	7d1b      	ldrb	r3, [r3, #20]
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	d806      	bhi.n	8011ea6 <tcp_receive+0x36>
 8011e98:	4ba0      	ldr	r3, [pc, #640]	; (801211c <tcp_receive+0x2ac>)
 8011e9a:	f240 427c 	movw	r2, #1148	; 0x47c
 8011e9e:	49a2      	ldr	r1, [pc, #648]	; (8012128 <tcp_receive+0x2b8>)
 8011ea0:	48a0      	ldr	r0, [pc, #640]	; (8012124 <tcp_receive+0x2b4>)
 8011ea2:	f006 fc61 	bl	8018768 <iprintf>

  if (flags & TCP_ACK) {
 8011ea6:	4ba1      	ldr	r3, [pc, #644]	; (801212c <tcp_receive+0x2bc>)
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	f003 0310 	and.w	r3, r3, #16
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 8263 	beq.w	801237a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011eba:	461a      	mov	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec0:	4413      	add	r3, r2
 8011ec2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ec8:	4b99      	ldr	r3, [pc, #612]	; (8012130 <tcp_receive+0x2c0>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	db1b      	blt.n	8011f0a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ed6:	4b96      	ldr	r3, [pc, #600]	; (8012130 <tcp_receive+0x2c0>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d106      	bne.n	8011eec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011ee2:	4b94      	ldr	r3, [pc, #592]	; (8012134 <tcp_receive+0x2c4>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	db0e      	blt.n	8011f0a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011ef0:	4b90      	ldr	r3, [pc, #576]	; (8012134 <tcp_receive+0x2c4>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d125      	bne.n	8011f44 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011ef8:	4b8f      	ldr	r3, [pc, #572]	; (8012138 <tcp_receive+0x2c8>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	89db      	ldrh	r3, [r3, #14]
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d91c      	bls.n	8011f44 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011f0a:	4b8b      	ldr	r3, [pc, #556]	; (8012138 <tcp_receive+0x2c8>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	89db      	ldrh	r3, [r3, #14]
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d205      	bcs.n	8011f34 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011f34:	4b7e      	ldr	r3, [pc, #504]	; (8012130 <tcp_receive+0x2c0>)
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011f3c:	4b7d      	ldr	r3, [pc, #500]	; (8012134 <tcp_receive+0x2c4>)
 8011f3e:	681a      	ldr	r2, [r3, #0]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011f44:	4b7b      	ldr	r3, [pc, #492]	; (8012134 <tcp_receive+0x2c4>)
 8011f46:	681a      	ldr	r2, [r3, #0]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	dc58      	bgt.n	8012004 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011f52:	4b7a      	ldr	r3, [pc, #488]	; (801213c <tcp_receive+0x2cc>)
 8011f54:	881b      	ldrh	r3, [r3, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d14b      	bne.n	8011ff2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011f64:	4413      	add	r3, r2
 8011f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d142      	bne.n	8011ff2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	db3d      	blt.n	8011ff2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f7a:	4b6e      	ldr	r3, [pc, #440]	; (8012134 <tcp_receive+0x2c4>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d137      	bne.n	8011ff2 <tcp_receive+0x182>
              found_dupack = 1;
 8011f82:	2301      	movs	r3, #1
 8011f84:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f8c:	2bff      	cmp	r3, #255	; 0xff
 8011f8e:	d007      	beq.n	8011fa0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f96:	3301      	adds	r3, #1
 8011f98:	b2da      	uxtb	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fa6:	2b03      	cmp	r3, #3
 8011fa8:	d91b      	bls.n	8011fe2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fb4:	4413      	add	r3, r2
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d30a      	bcc.n	8011fd8 <tcp_receive+0x168>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fcc:	4413      	add	r3, r2
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fd6:	e004      	b.n	8011fe2 <tcp_receive+0x172>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d902      	bls.n	8011ff2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f002 fb41 	bl	8014674 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f040 8160 	bne.w	80122ba <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012002:	e15a      	b.n	80122ba <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012004:	4b4b      	ldr	r3, [pc, #300]	; (8012134 <tcp_receive+0x2c4>)
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	3b01      	subs	r3, #1
 8012010:	2b00      	cmp	r3, #0
 8012012:	f2c0 814d 	blt.w	80122b0 <tcp_receive+0x440>
 8012016:	4b47      	ldr	r3, [pc, #284]	; (8012134 <tcp_receive+0x2c4>)
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	f300 8145 	bgt.w	80122b0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	8b5b      	ldrh	r3, [r3, #26]
 801202a:	f003 0304 	and.w	r3, r3, #4
 801202e:	2b00      	cmp	r3, #0
 8012030:	d010      	beq.n	8012054 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	8b5b      	ldrh	r3, [r3, #26]
 8012036:	f023 0304 	bic.w	r3, r3, #4
 801203a:	b29a      	uxth	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012062:	10db      	asrs	r3, r3, #3
 8012064:	b21b      	sxth	r3, r3
 8012066:	b29a      	uxth	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801206e:	b29b      	uxth	r3, r3
 8012070:	4413      	add	r3, r2
 8012072:	b29b      	uxth	r3, r3
 8012074:	b21a      	sxth	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801207c:	4b2d      	ldr	r3, [pc, #180]	; (8012134 <tcp_receive+0x2c4>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	b29a      	uxth	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012086:	b29b      	uxth	r3, r3
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012094:	4b27      	ldr	r3, [pc, #156]	; (8012134 <tcp_receive+0x2c4>)
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7d1b      	ldrb	r3, [r3, #20]
 80120a0:	2b03      	cmp	r3, #3
 80120a2:	f240 8096 	bls.w	80121d2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d244      	bcs.n	8012140 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	8b5b      	ldrh	r3, [r3, #26]
 80120ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d001      	beq.n	80120c6 <tcp_receive+0x256>
 80120c2:	2301      	movs	r3, #1
 80120c4:	e000      	b.n	80120c8 <tcp_receive+0x258>
 80120c6:	2302      	movs	r3, #2
 80120c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80120cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120d6:	fb12 f303 	smulbb	r3, r2, r3
 80120da:	b29b      	uxth	r3, r3
 80120dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120de:	4293      	cmp	r3, r2
 80120e0:	bf28      	it	cs
 80120e2:	4613      	movcs	r3, r2
 80120e4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120ee:	4413      	add	r3, r2
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d309      	bcc.n	8012110 <tcp_receive+0x2a0>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012102:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012104:	4413      	add	r3, r2
 8012106:	b29a      	uxth	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801210e:	e060      	b.n	80121d2 <tcp_receive+0x362>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801211a:	e05a      	b.n	80121d2 <tcp_receive+0x362>
 801211c:	0801bcfc 	.word	0x0801bcfc
 8012120:	0801c02c 	.word	0x0801c02c
 8012124:	0801bd48 	.word	0x0801bd48
 8012128:	0801c048 	.word	0x0801c048
 801212c:	20004378 	.word	0x20004378
 8012130:	2000436c 	.word	0x2000436c
 8012134:	20004370 	.word	0x20004370
 8012138:	2000435c 	.word	0x2000435c
 801213c:	20004376 	.word	0x20004376
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012148:	4413      	add	r3, r2
 801214a:	b29a      	uxth	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012152:	429a      	cmp	r2, r3
 8012154:	d309      	bcc.n	801216a <tcp_receive+0x2fa>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801215c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801215e:	4413      	add	r3, r2
 8012160:	b29a      	uxth	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012168:	e004      	b.n	8012174 <tcp_receive+0x304>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012170:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012180:	429a      	cmp	r2, r3
 8012182:	d326      	bcc.n	80121d2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012190:	1ad3      	subs	r3, r2, r3
 8012192:	b29a      	uxth	r2, r3
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121a4:	4413      	add	r3, r2
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d30a      	bcc.n	80121c8 <tcp_receive+0x358>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121bc:	4413      	add	r3, r2
 80121be:	b29a      	uxth	r2, r3
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80121c6:	e004      	b.n	80121d2 <tcp_receive+0x362>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121da:	4a98      	ldr	r2, [pc, #608]	; (801243c <tcp_receive+0x5cc>)
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff fdcb 	bl	8011d78 <tcp_free_acked_segments>
 80121e2:	4602      	mov	r2, r0
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121f0:	4a93      	ldr	r2, [pc, #588]	; (8012440 <tcp_receive+0x5d0>)
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f7ff fdc0 	bl	8011d78 <tcp_free_acked_segments>
 80121f8:	4602      	mov	r2, r0
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012202:	2b00      	cmp	r3, #0
 8012204:	d104      	bne.n	8012210 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801220c:	861a      	strh	r2, [r3, #48]	; 0x30
 801220e:	e002      	b.n	8012216 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2200      	movs	r2, #0
 801221a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012220:	2b00      	cmp	r3, #0
 8012222:	d103      	bne.n	801222c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012232:	4b84      	ldr	r3, [pc, #528]	; (8012444 <tcp_receive+0x5d4>)
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	4413      	add	r3, r2
 8012238:	b29a      	uxth	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	8b5b      	ldrh	r3, [r3, #26]
 8012244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012248:	2b00      	cmp	r3, #0
 801224a:	d035      	beq.n	80122b8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012250:	2b00      	cmp	r3, #0
 8012252:	d118      	bne.n	8012286 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012258:	2b00      	cmp	r3, #0
 801225a:	d00c      	beq.n	8012276 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	f7fa ff36 	bl	800d0da <lwip_htonl>
 801226e:	4603      	mov	r3, r0
 8012270:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012272:	2b00      	cmp	r3, #0
 8012274:	dc20      	bgt.n	80122b8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	8b5b      	ldrh	r3, [r3, #26]
 801227a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801227e:	b29a      	uxth	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012284:	e018      	b.n	80122b8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	4618      	mov	r0, r3
 8012294:	f7fa ff21 	bl	800d0da <lwip_htonl>
 8012298:	4603      	mov	r3, r0
 801229a:	1ae3      	subs	r3, r4, r3
 801229c:	2b00      	cmp	r3, #0
 801229e:	dc0b      	bgt.n	80122b8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	8b5b      	ldrh	r3, [r3, #26]
 80122a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122ae:	e003      	b.n	80122b8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f002 fbcd 	bl	8014a50 <tcp_send_empty_ack>
 80122b6:	e000      	b.n	80122ba <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122b8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d05b      	beq.n	801237a <tcp_receive+0x50a>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122c6:	4b60      	ldr	r3, [pc, #384]	; (8012448 <tcp_receive+0x5d8>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	1ad3      	subs	r3, r2, r3
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	da54      	bge.n	801237a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80122d0:	4b5e      	ldr	r3, [pc, #376]	; (801244c <tcp_receive+0x5dc>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122da:	b29b      	uxth	r3, r3
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	b29b      	uxth	r3, r3
 80122e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80122e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122ee:	10db      	asrs	r3, r3, #3
 80122f0:	b21b      	sxth	r3, r3
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	1ad3      	subs	r3, r2, r3
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012302:	b29a      	uxth	r2, r3
 8012304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012308:	4413      	add	r3, r2
 801230a:	b29b      	uxth	r3, r3
 801230c:	b21a      	sxth	r2, r3
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012312:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012316:	2b00      	cmp	r3, #0
 8012318:	da05      	bge.n	8012326 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801231a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801231e:	425b      	negs	r3, r3
 8012320:	b29b      	uxth	r3, r3
 8012322:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012326:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012330:	109b      	asrs	r3, r3, #2
 8012332:	b21b      	sxth	r3, r3
 8012334:	b29b      	uxth	r3, r3
 8012336:	1ad3      	subs	r3, r2, r3
 8012338:	b29b      	uxth	r3, r3
 801233a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012344:	b29a      	uxth	r2, r3
 8012346:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801234a:	4413      	add	r3, r2
 801234c:	b29b      	uxth	r3, r3
 801234e:	b21a      	sxth	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801235a:	10db      	asrs	r3, r3, #3
 801235c:	b21b      	sxth	r3, r3
 801235e:	b29a      	uxth	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012366:	b29b      	uxth	r3, r3
 8012368:	4413      	add	r3, r2
 801236a:	b29b      	uxth	r3, r3
 801236c:	b21a      	sxth	r2, r3
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801237a:	4b35      	ldr	r3, [pc, #212]	; (8012450 <tcp_receive+0x5e0>)
 801237c:	881b      	ldrh	r3, [r3, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	f000 84e1 	beq.w	8012d46 <tcp_receive+0xed6>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	7d1b      	ldrb	r3, [r3, #20]
 8012388:	2b06      	cmp	r3, #6
 801238a:	f200 84dc 	bhi.w	8012d46 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012392:	4b30      	ldr	r3, [pc, #192]	; (8012454 <tcp_receive+0x5e4>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	1ad3      	subs	r3, r2, r3
 8012398:	3b01      	subs	r3, #1
 801239a:	2b00      	cmp	r3, #0
 801239c:	f2c0 808e 	blt.w	80124bc <tcp_receive+0x64c>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123a4:	4b2a      	ldr	r3, [pc, #168]	; (8012450 <tcp_receive+0x5e0>)
 80123a6:	881b      	ldrh	r3, [r3, #0]
 80123a8:	4619      	mov	r1, r3
 80123aa:	4b2a      	ldr	r3, [pc, #168]	; (8012454 <tcp_receive+0x5e4>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	440b      	add	r3, r1
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	3301      	adds	r3, #1
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f300 8081 	bgt.w	80124bc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80123ba:	4b27      	ldr	r3, [pc, #156]	; (8012458 <tcp_receive+0x5e8>)
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123c4:	4b23      	ldr	r3, [pc, #140]	; (8012454 <tcp_receive+0x5e4>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	1ad3      	subs	r3, r2, r3
 80123ca:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80123cc:	4b22      	ldr	r3, [pc, #136]	; (8012458 <tcp_receive+0x5e8>)
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d106      	bne.n	80123e2 <tcp_receive+0x572>
 80123d4:	4b21      	ldr	r3, [pc, #132]	; (801245c <tcp_receive+0x5ec>)
 80123d6:	f240 5294 	movw	r2, #1428	; 0x594
 80123da:	4921      	ldr	r1, [pc, #132]	; (8012460 <tcp_receive+0x5f0>)
 80123dc:	4821      	ldr	r0, [pc, #132]	; (8012464 <tcp_receive+0x5f4>)
 80123de:	f006 f9c3 	bl	8018768 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80123e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d906      	bls.n	80123fa <tcp_receive+0x58a>
 80123ec:	4b1b      	ldr	r3, [pc, #108]	; (801245c <tcp_receive+0x5ec>)
 80123ee:	f240 5295 	movw	r2, #1429	; 0x595
 80123f2:	491d      	ldr	r1, [pc, #116]	; (8012468 <tcp_receive+0x5f8>)
 80123f4:	481b      	ldr	r0, [pc, #108]	; (8012464 <tcp_receive+0x5f4>)
 80123f6:	f006 f9b7 	bl	8018768 <iprintf>
      off = (u16_t)off32;
 80123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012400:	4b15      	ldr	r3, [pc, #84]	; (8012458 <tcp_receive+0x5e8>)
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	891b      	ldrh	r3, [r3, #8]
 8012406:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801240a:	429a      	cmp	r2, r3
 801240c:	d906      	bls.n	801241c <tcp_receive+0x5ac>
 801240e:	4b13      	ldr	r3, [pc, #76]	; (801245c <tcp_receive+0x5ec>)
 8012410:	f240 5297 	movw	r2, #1431	; 0x597
 8012414:	4915      	ldr	r1, [pc, #84]	; (801246c <tcp_receive+0x5fc>)
 8012416:	4813      	ldr	r0, [pc, #76]	; (8012464 <tcp_receive+0x5f4>)
 8012418:	f006 f9a6 	bl	8018768 <iprintf>
      inseg.len -= off;
 801241c:	4b0e      	ldr	r3, [pc, #56]	; (8012458 <tcp_receive+0x5e8>)
 801241e:	891a      	ldrh	r2, [r3, #8]
 8012420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012424:	1ad3      	subs	r3, r2, r3
 8012426:	b29a      	uxth	r2, r3
 8012428:	4b0b      	ldr	r3, [pc, #44]	; (8012458 <tcp_receive+0x5e8>)
 801242a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801242c:	4b0a      	ldr	r3, [pc, #40]	; (8012458 <tcp_receive+0x5e8>)
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	891a      	ldrh	r2, [r3, #8]
 8012432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012436:	1ad3      	subs	r3, r2, r3
 8012438:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801243a:	e029      	b.n	8012490 <tcp_receive+0x620>
 801243c:	0801c064 	.word	0x0801c064
 8012440:	0801c06c 	.word	0x0801c06c
 8012444:	20004374 	.word	0x20004374
 8012448:	20004370 	.word	0x20004370
 801244c:	2000db54 	.word	0x2000db54
 8012450:	20004376 	.word	0x20004376
 8012454:	2000436c 	.word	0x2000436c
 8012458:	2000434c 	.word	0x2000434c
 801245c:	0801bcfc 	.word	0x0801bcfc
 8012460:	0801c074 	.word	0x0801c074
 8012464:	0801bd48 	.word	0x0801bd48
 8012468:	0801c084 	.word	0x0801c084
 801246c:	0801c094 	.word	0x0801c094
        off -= p->len;
 8012470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012472:	895b      	ldrh	r3, [r3, #10]
 8012474:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801247e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012480:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012482:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012486:	2200      	movs	r2, #0
 8012488:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012492:	895b      	ldrh	r3, [r3, #10]
 8012494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012498:	429a      	cmp	r2, r3
 801249a:	d8e9      	bhi.n	8012470 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801249c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124a0:	4619      	mov	r1, r3
 80124a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80124a4:	f7fc f92a 	bl	800e6fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ac:	4a91      	ldr	r2, [pc, #580]	; (80126f4 <tcp_receive+0x884>)
 80124ae:	6013      	str	r3, [r2, #0]
 80124b0:	4b91      	ldr	r3, [pc, #580]	; (80126f8 <tcp_receive+0x888>)
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	4a8f      	ldr	r2, [pc, #572]	; (80126f4 <tcp_receive+0x884>)
 80124b6:	6812      	ldr	r2, [r2, #0]
 80124b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80124ba:	e00d      	b.n	80124d8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80124bc:	4b8d      	ldr	r3, [pc, #564]	; (80126f4 <tcp_receive+0x884>)
 80124be:	681a      	ldr	r2, [r3, #0]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124c4:	1ad3      	subs	r3, r2, r3
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	da06      	bge.n	80124d8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	8b5b      	ldrh	r3, [r3, #26]
 80124ce:	f043 0302 	orr.w	r3, r3, #2
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80124d8:	4b86      	ldr	r3, [pc, #536]	; (80126f4 <tcp_receive+0x884>)
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	f2c0 842a 	blt.w	8012d3c <tcp_receive+0xecc>
 80124e8:	4b82      	ldr	r3, [pc, #520]	; (80126f4 <tcp_receive+0x884>)
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f0:	6879      	ldr	r1, [r7, #4]
 80124f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124f4:	440b      	add	r3, r1
 80124f6:	1ad3      	subs	r3, r2, r3
 80124f8:	3301      	adds	r3, #1
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f300 841e 	bgt.w	8012d3c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012504:	4b7b      	ldr	r3, [pc, #492]	; (80126f4 <tcp_receive+0x884>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	429a      	cmp	r2, r3
 801250a:	f040 829a 	bne.w	8012a42 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801250e:	4b7a      	ldr	r3, [pc, #488]	; (80126f8 <tcp_receive+0x888>)
 8012510:	891c      	ldrh	r4, [r3, #8]
 8012512:	4b79      	ldr	r3, [pc, #484]	; (80126f8 <tcp_receive+0x888>)
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	899b      	ldrh	r3, [r3, #12]
 8012518:	b29b      	uxth	r3, r3
 801251a:	4618      	mov	r0, r3
 801251c:	f7fa fdc8 	bl	800d0b0 <lwip_htons>
 8012520:	4603      	mov	r3, r0
 8012522:	b2db      	uxtb	r3, r3
 8012524:	f003 0303 	and.w	r3, r3, #3
 8012528:	2b00      	cmp	r3, #0
 801252a:	d001      	beq.n	8012530 <tcp_receive+0x6c0>
 801252c:	2301      	movs	r3, #1
 801252e:	e000      	b.n	8012532 <tcp_receive+0x6c2>
 8012530:	2300      	movs	r3, #0
 8012532:	4423      	add	r3, r4
 8012534:	b29a      	uxth	r2, r3
 8012536:	4b71      	ldr	r3, [pc, #452]	; (80126fc <tcp_receive+0x88c>)
 8012538:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801253e:	4b6f      	ldr	r3, [pc, #444]	; (80126fc <tcp_receive+0x88c>)
 8012540:	881b      	ldrh	r3, [r3, #0]
 8012542:	429a      	cmp	r2, r3
 8012544:	d275      	bcs.n	8012632 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012546:	4b6c      	ldr	r3, [pc, #432]	; (80126f8 <tcp_receive+0x888>)
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	899b      	ldrh	r3, [r3, #12]
 801254c:	b29b      	uxth	r3, r3
 801254e:	4618      	mov	r0, r3
 8012550:	f7fa fdae 	bl	800d0b0 <lwip_htons>
 8012554:	4603      	mov	r3, r0
 8012556:	b2db      	uxtb	r3, r3
 8012558:	f003 0301 	and.w	r3, r3, #1
 801255c:	2b00      	cmp	r3, #0
 801255e:	d01f      	beq.n	80125a0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012560:	4b65      	ldr	r3, [pc, #404]	; (80126f8 <tcp_receive+0x888>)
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	899b      	ldrh	r3, [r3, #12]
 8012566:	b29b      	uxth	r3, r3
 8012568:	b21b      	sxth	r3, r3
 801256a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801256e:	b21c      	sxth	r4, r3
 8012570:	4b61      	ldr	r3, [pc, #388]	; (80126f8 <tcp_receive+0x888>)
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	899b      	ldrh	r3, [r3, #12]
 8012576:	b29b      	uxth	r3, r3
 8012578:	4618      	mov	r0, r3
 801257a:	f7fa fd99 	bl	800d0b0 <lwip_htons>
 801257e:	4603      	mov	r3, r0
 8012580:	b2db      	uxtb	r3, r3
 8012582:	b29b      	uxth	r3, r3
 8012584:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012588:	b29b      	uxth	r3, r3
 801258a:	4618      	mov	r0, r3
 801258c:	f7fa fd90 	bl	800d0b0 <lwip_htons>
 8012590:	4603      	mov	r3, r0
 8012592:	b21b      	sxth	r3, r3
 8012594:	4323      	orrs	r3, r4
 8012596:	b21a      	sxth	r2, r3
 8012598:	4b57      	ldr	r3, [pc, #348]	; (80126f8 <tcp_receive+0x888>)
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	b292      	uxth	r2, r2
 801259e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80125a4:	4b54      	ldr	r3, [pc, #336]	; (80126f8 <tcp_receive+0x888>)
 80125a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80125a8:	4b53      	ldr	r3, [pc, #332]	; (80126f8 <tcp_receive+0x888>)
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	899b      	ldrh	r3, [r3, #12]
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fa fd7d 	bl	800d0b0 <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	f003 0302 	and.w	r3, r3, #2
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d005      	beq.n	80125ce <tcp_receive+0x75e>
            inseg.len -= 1;
 80125c2:	4b4d      	ldr	r3, [pc, #308]	; (80126f8 <tcp_receive+0x888>)
 80125c4:	891b      	ldrh	r3, [r3, #8]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	b29a      	uxth	r2, r3
 80125ca:	4b4b      	ldr	r3, [pc, #300]	; (80126f8 <tcp_receive+0x888>)
 80125cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80125ce:	4b4a      	ldr	r3, [pc, #296]	; (80126f8 <tcp_receive+0x888>)
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	4a49      	ldr	r2, [pc, #292]	; (80126f8 <tcp_receive+0x888>)
 80125d4:	8912      	ldrh	r2, [r2, #8]
 80125d6:	4611      	mov	r1, r2
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fb ff8f 	bl	800e4fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80125de:	4b46      	ldr	r3, [pc, #280]	; (80126f8 <tcp_receive+0x888>)
 80125e0:	891c      	ldrh	r4, [r3, #8]
 80125e2:	4b45      	ldr	r3, [pc, #276]	; (80126f8 <tcp_receive+0x888>)
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	899b      	ldrh	r3, [r3, #12]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7fa fd60 	bl	800d0b0 <lwip_htons>
 80125f0:	4603      	mov	r3, r0
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	f003 0303 	and.w	r3, r3, #3
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <tcp_receive+0x790>
 80125fc:	2301      	movs	r3, #1
 80125fe:	e000      	b.n	8012602 <tcp_receive+0x792>
 8012600:	2300      	movs	r3, #0
 8012602:	4423      	add	r3, r4
 8012604:	b29a      	uxth	r2, r3
 8012606:	4b3d      	ldr	r3, [pc, #244]	; (80126fc <tcp_receive+0x88c>)
 8012608:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801260a:	4b3c      	ldr	r3, [pc, #240]	; (80126fc <tcp_receive+0x88c>)
 801260c:	881b      	ldrh	r3, [r3, #0]
 801260e:	461a      	mov	r2, r3
 8012610:	4b38      	ldr	r3, [pc, #224]	; (80126f4 <tcp_receive+0x884>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	441a      	add	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261a:	6879      	ldr	r1, [r7, #4]
 801261c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801261e:	440b      	add	r3, r1
 8012620:	429a      	cmp	r2, r3
 8012622:	d006      	beq.n	8012632 <tcp_receive+0x7c2>
 8012624:	4b36      	ldr	r3, [pc, #216]	; (8012700 <tcp_receive+0x890>)
 8012626:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801262a:	4936      	ldr	r1, [pc, #216]	; (8012704 <tcp_receive+0x894>)
 801262c:	4836      	ldr	r0, [pc, #216]	; (8012708 <tcp_receive+0x898>)
 801262e:	f006 f89b 	bl	8018768 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012636:	2b00      	cmp	r3, #0
 8012638:	f000 80e7 	beq.w	801280a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801263c:	4b2e      	ldr	r3, [pc, #184]	; (80126f8 <tcp_receive+0x888>)
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	899b      	ldrh	r3, [r3, #12]
 8012642:	b29b      	uxth	r3, r3
 8012644:	4618      	mov	r0, r3
 8012646:	f7fa fd33 	bl	800d0b0 <lwip_htons>
 801264a:	4603      	mov	r3, r0
 801264c:	b2db      	uxtb	r3, r3
 801264e:	f003 0301 	and.w	r3, r3, #1
 8012652:	2b00      	cmp	r3, #0
 8012654:	d010      	beq.n	8012678 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012656:	e00a      	b.n	801266e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801265c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012668:	68f8      	ldr	r0, [r7, #12]
 801266a:	f7fd fcc8 	bl	800fffe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1f0      	bne.n	8012658 <tcp_receive+0x7e8>
 8012676:	e0c8      	b.n	801280a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801267c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801267e:	e052      	b.n	8012726 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	899b      	ldrh	r3, [r3, #12]
 8012686:	b29b      	uxth	r3, r3
 8012688:	4618      	mov	r0, r3
 801268a:	f7fa fd11 	bl	800d0b0 <lwip_htons>
 801268e:	4603      	mov	r3, r0
 8012690:	b2db      	uxtb	r3, r3
 8012692:	f003 0301 	and.w	r3, r3, #1
 8012696:	2b00      	cmp	r3, #0
 8012698:	d03d      	beq.n	8012716 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801269a:	4b17      	ldr	r3, [pc, #92]	; (80126f8 <tcp_receive+0x888>)
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	899b      	ldrh	r3, [r3, #12]
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7fa fd04 	bl	800d0b0 <lwip_htons>
 80126a8:	4603      	mov	r3, r0
 80126aa:	b2db      	uxtb	r3, r3
 80126ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d130      	bne.n	8012716 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80126b4:	4b10      	ldr	r3, [pc, #64]	; (80126f8 <tcp_receive+0x888>)
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	899b      	ldrh	r3, [r3, #12]
 80126ba:	b29c      	uxth	r4, r3
 80126bc:	2001      	movs	r0, #1
 80126be:	f7fa fcf7 	bl	800d0b0 <lwip_htons>
 80126c2:	4603      	mov	r3, r0
 80126c4:	461a      	mov	r2, r3
 80126c6:	4b0c      	ldr	r3, [pc, #48]	; (80126f8 <tcp_receive+0x888>)
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	4322      	orrs	r2, r4
 80126cc:	b292      	uxth	r2, r2
 80126ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80126d0:	4b09      	ldr	r3, [pc, #36]	; (80126f8 <tcp_receive+0x888>)
 80126d2:	891c      	ldrh	r4, [r3, #8]
 80126d4:	4b08      	ldr	r3, [pc, #32]	; (80126f8 <tcp_receive+0x888>)
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	899b      	ldrh	r3, [r3, #12]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fa fce7 	bl	800d0b0 <lwip_htons>
 80126e2:	4603      	mov	r3, r0
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	f003 0303 	and.w	r3, r3, #3
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00e      	beq.n	801270c <tcp_receive+0x89c>
 80126ee:	2301      	movs	r3, #1
 80126f0:	e00d      	b.n	801270e <tcp_receive+0x89e>
 80126f2:	bf00      	nop
 80126f4:	2000436c 	.word	0x2000436c
 80126f8:	2000434c 	.word	0x2000434c
 80126fc:	20004376 	.word	0x20004376
 8012700:	0801bcfc 	.word	0x0801bcfc
 8012704:	0801c0a4 	.word	0x0801c0a4
 8012708:	0801bd48 	.word	0x0801bd48
 801270c:	2300      	movs	r3, #0
 801270e:	4423      	add	r3, r4
 8012710:	b29a      	uxth	r2, r3
 8012712:	4b98      	ldr	r3, [pc, #608]	; (8012974 <tcp_receive+0xb04>)
 8012714:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012718:	613b      	str	r3, [r7, #16]
              next = next->next;
 801271a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012720:	6938      	ldr	r0, [r7, #16]
 8012722:	f7fd fc6c 	bl	800fffe <tcp_seg_free>
            while (next &&
 8012726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00e      	beq.n	801274a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801272c:	4b91      	ldr	r3, [pc, #580]	; (8012974 <tcp_receive+0xb04>)
 801272e:	881b      	ldrh	r3, [r3, #0]
 8012730:	461a      	mov	r2, r3
 8012732:	4b91      	ldr	r3, [pc, #580]	; (8012978 <tcp_receive+0xb08>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	441a      	add	r2, r3
 8012738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012740:	8909      	ldrh	r1, [r1, #8]
 8012742:	440b      	add	r3, r1
 8012744:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012746:	2b00      	cmp	r3, #0
 8012748:	da9a      	bge.n	8012680 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274c:	2b00      	cmp	r3, #0
 801274e:	d059      	beq.n	8012804 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012750:	4b88      	ldr	r3, [pc, #544]	; (8012974 <tcp_receive+0xb04>)
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	461a      	mov	r2, r3
 8012756:	4b88      	ldr	r3, [pc, #544]	; (8012978 <tcp_receive+0xb08>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	441a      	add	r2, r3
 801275c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012764:	2b00      	cmp	r3, #0
 8012766:	dd4d      	ble.n	8012804 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	b29a      	uxth	r2, r3
 8012770:	4b81      	ldr	r3, [pc, #516]	; (8012978 <tcp_receive+0xb08>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	b29b      	uxth	r3, r3
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	b29a      	uxth	r2, r3
 801277a:	4b80      	ldr	r3, [pc, #512]	; (801297c <tcp_receive+0xb0c>)
 801277c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801277e:	4b7f      	ldr	r3, [pc, #508]	; (801297c <tcp_receive+0xb0c>)
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	899b      	ldrh	r3, [r3, #12]
 8012784:	b29b      	uxth	r3, r3
 8012786:	4618      	mov	r0, r3
 8012788:	f7fa fc92 	bl	800d0b0 <lwip_htons>
 801278c:	4603      	mov	r3, r0
 801278e:	b2db      	uxtb	r3, r3
 8012790:	f003 0302 	and.w	r3, r3, #2
 8012794:	2b00      	cmp	r3, #0
 8012796:	d005      	beq.n	80127a4 <tcp_receive+0x934>
                inseg.len -= 1;
 8012798:	4b78      	ldr	r3, [pc, #480]	; (801297c <tcp_receive+0xb0c>)
 801279a:	891b      	ldrh	r3, [r3, #8]
 801279c:	3b01      	subs	r3, #1
 801279e:	b29a      	uxth	r2, r3
 80127a0:	4b76      	ldr	r3, [pc, #472]	; (801297c <tcp_receive+0xb0c>)
 80127a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80127a4:	4b75      	ldr	r3, [pc, #468]	; (801297c <tcp_receive+0xb0c>)
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	4a74      	ldr	r2, [pc, #464]	; (801297c <tcp_receive+0xb0c>)
 80127aa:	8912      	ldrh	r2, [r2, #8]
 80127ac:	4611      	mov	r1, r2
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fb fea4 	bl	800e4fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80127b4:	4b71      	ldr	r3, [pc, #452]	; (801297c <tcp_receive+0xb0c>)
 80127b6:	891c      	ldrh	r4, [r3, #8]
 80127b8:	4b70      	ldr	r3, [pc, #448]	; (801297c <tcp_receive+0xb0c>)
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	899b      	ldrh	r3, [r3, #12]
 80127be:	b29b      	uxth	r3, r3
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7fa fc75 	bl	800d0b0 <lwip_htons>
 80127c6:	4603      	mov	r3, r0
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	f003 0303 	and.w	r3, r3, #3
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d001      	beq.n	80127d6 <tcp_receive+0x966>
 80127d2:	2301      	movs	r3, #1
 80127d4:	e000      	b.n	80127d8 <tcp_receive+0x968>
 80127d6:	2300      	movs	r3, #0
 80127d8:	4423      	add	r3, r4
 80127da:	b29a      	uxth	r2, r3
 80127dc:	4b65      	ldr	r3, [pc, #404]	; (8012974 <tcp_receive+0xb04>)
 80127de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80127e0:	4b64      	ldr	r3, [pc, #400]	; (8012974 <tcp_receive+0xb04>)
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	461a      	mov	r2, r3
 80127e6:	4b64      	ldr	r3, [pc, #400]	; (8012978 <tcp_receive+0xb08>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	441a      	add	r2, r3
 80127ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d006      	beq.n	8012804 <tcp_receive+0x994>
 80127f6:	4b62      	ldr	r3, [pc, #392]	; (8012980 <tcp_receive+0xb10>)
 80127f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80127fc:	4961      	ldr	r1, [pc, #388]	; (8012984 <tcp_receive+0xb14>)
 80127fe:	4862      	ldr	r0, [pc, #392]	; (8012988 <tcp_receive+0xb18>)
 8012800:	f005 ffb2 	bl	8018768 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012808:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801280a:	4b5a      	ldr	r3, [pc, #360]	; (8012974 <tcp_receive+0xb04>)
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	461a      	mov	r2, r3
 8012810:	4b59      	ldr	r3, [pc, #356]	; (8012978 <tcp_receive+0xb08>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	441a      	add	r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801281e:	4b55      	ldr	r3, [pc, #340]	; (8012974 <tcp_receive+0xb04>)
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	429a      	cmp	r2, r3
 8012824:	d206      	bcs.n	8012834 <tcp_receive+0x9c4>
 8012826:	4b56      	ldr	r3, [pc, #344]	; (8012980 <tcp_receive+0xb10>)
 8012828:	f240 6207 	movw	r2, #1543	; 0x607
 801282c:	4957      	ldr	r1, [pc, #348]	; (801298c <tcp_receive+0xb1c>)
 801282e:	4856      	ldr	r0, [pc, #344]	; (8012988 <tcp_receive+0xb18>)
 8012830:	f005 ff9a 	bl	8018768 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012838:	4b4e      	ldr	r3, [pc, #312]	; (8012974 <tcp_receive+0xb04>)
 801283a:	881b      	ldrh	r3, [r3, #0]
 801283c:	1ad3      	subs	r3, r2, r3
 801283e:	b29a      	uxth	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7fc feb5 	bl	800f5b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801284a:	4b4c      	ldr	r3, [pc, #304]	; (801297c <tcp_receive+0xb0c>)
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	891b      	ldrh	r3, [r3, #8]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d006      	beq.n	8012862 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012854:	4b49      	ldr	r3, [pc, #292]	; (801297c <tcp_receive+0xb0c>)
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	4a4d      	ldr	r2, [pc, #308]	; (8012990 <tcp_receive+0xb20>)
 801285a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801285c:	4b47      	ldr	r3, [pc, #284]	; (801297c <tcp_receive+0xb0c>)
 801285e:	2200      	movs	r2, #0
 8012860:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012862:	4b46      	ldr	r3, [pc, #280]	; (801297c <tcp_receive+0xb0c>)
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	899b      	ldrh	r3, [r3, #12]
 8012868:	b29b      	uxth	r3, r3
 801286a:	4618      	mov	r0, r3
 801286c:	f7fa fc20 	bl	800d0b0 <lwip_htons>
 8012870:	4603      	mov	r3, r0
 8012872:	b2db      	uxtb	r3, r3
 8012874:	f003 0301 	and.w	r3, r3, #1
 8012878:	2b00      	cmp	r3, #0
 801287a:	f000 80b8 	beq.w	80129ee <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801287e:	4b45      	ldr	r3, [pc, #276]	; (8012994 <tcp_receive+0xb24>)
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	f043 0320 	orr.w	r3, r3, #32
 8012886:	b2da      	uxtb	r2, r3
 8012888:	4b42      	ldr	r3, [pc, #264]	; (8012994 <tcp_receive+0xb24>)
 801288a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801288c:	e0af      	b.n	80129ee <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012892:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	4a36      	ldr	r2, [pc, #216]	; (8012978 <tcp_receive+0xb08>)
 801289e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	891b      	ldrh	r3, [r3, #8]
 80128a4:	461c      	mov	r4, r3
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	899b      	ldrh	r3, [r3, #12]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fa fbfe 	bl	800d0b0 <lwip_htons>
 80128b4:	4603      	mov	r3, r0
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	f003 0303 	and.w	r3, r3, #3
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d001      	beq.n	80128c4 <tcp_receive+0xa54>
 80128c0:	2301      	movs	r3, #1
 80128c2:	e000      	b.n	80128c6 <tcp_receive+0xa56>
 80128c4:	2300      	movs	r3, #0
 80128c6:	191a      	adds	r2, r3, r4
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128cc:	441a      	add	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128d6:	461c      	mov	r4, r3
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	891b      	ldrh	r3, [r3, #8]
 80128dc:	461d      	mov	r5, r3
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	899b      	ldrh	r3, [r3, #12]
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fa fbe2 	bl	800d0b0 <lwip_htons>
 80128ec:	4603      	mov	r3, r0
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	f003 0303 	and.w	r3, r3, #3
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d001      	beq.n	80128fc <tcp_receive+0xa8c>
 80128f8:	2301      	movs	r3, #1
 80128fa:	e000      	b.n	80128fe <tcp_receive+0xa8e>
 80128fc:	2300      	movs	r3, #0
 80128fe:	442b      	add	r3, r5
 8012900:	429c      	cmp	r4, r3
 8012902:	d206      	bcs.n	8012912 <tcp_receive+0xaa2>
 8012904:	4b1e      	ldr	r3, [pc, #120]	; (8012980 <tcp_receive+0xb10>)
 8012906:	f240 622b 	movw	r2, #1579	; 0x62b
 801290a:	4923      	ldr	r1, [pc, #140]	; (8012998 <tcp_receive+0xb28>)
 801290c:	481e      	ldr	r0, [pc, #120]	; (8012988 <tcp_receive+0xb18>)
 801290e:	f005 ff2b 	bl	8018768 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	891b      	ldrh	r3, [r3, #8]
 8012916:	461c      	mov	r4, r3
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	899b      	ldrh	r3, [r3, #12]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4618      	mov	r0, r3
 8012922:	f7fa fbc5 	bl	800d0b0 <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	f003 0303 	and.w	r3, r3, #3
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <tcp_receive+0xac6>
 8012932:	2301      	movs	r3, #1
 8012934:	e000      	b.n	8012938 <tcp_receive+0xac8>
 8012936:	2300      	movs	r3, #0
 8012938:	1919      	adds	r1, r3, r4
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801293e:	b28b      	uxth	r3, r1
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f7fc fe33 	bl	800f5b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	891b      	ldrh	r3, [r3, #8]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d028      	beq.n	80129aa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012958:	4b0d      	ldr	r3, [pc, #52]	; (8012990 <tcp_receive+0xb20>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d01d      	beq.n	801299c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012960:	4b0b      	ldr	r3, [pc, #44]	; (8012990 <tcp_receive+0xb20>)
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	4619      	mov	r1, r3
 801296a:	4610      	mov	r0, r2
 801296c:	f7fc f84c 	bl	800ea08 <pbuf_cat>
 8012970:	e018      	b.n	80129a4 <tcp_receive+0xb34>
 8012972:	bf00      	nop
 8012974:	20004376 	.word	0x20004376
 8012978:	2000436c 	.word	0x2000436c
 801297c:	2000434c 	.word	0x2000434c
 8012980:	0801bcfc 	.word	0x0801bcfc
 8012984:	0801c0dc 	.word	0x0801c0dc
 8012988:	0801bd48 	.word	0x0801bd48
 801298c:	0801c118 	.word	0x0801c118
 8012990:	2000437c 	.word	0x2000437c
 8012994:	20004379 	.word	0x20004379
 8012998:	0801c138 	.word	0x0801c138
            } else {
              recv_data = cseg->p;
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	4a70      	ldr	r2, [pc, #448]	; (8012b64 <tcp_receive+0xcf4>)
 80129a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	2200      	movs	r2, #0
 80129a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	899b      	ldrh	r3, [r3, #12]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fa fb7c 	bl	800d0b0 <lwip_htons>
 80129b8:	4603      	mov	r3, r0
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	f003 0301 	and.w	r3, r3, #1
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00d      	beq.n	80129e0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80129c4:	4b68      	ldr	r3, [pc, #416]	; (8012b68 <tcp_receive+0xcf8>)
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	f043 0320 	orr.w	r3, r3, #32
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	4b66      	ldr	r3, [pc, #408]	; (8012b68 <tcp_receive+0xcf8>)
 80129d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	7d1b      	ldrb	r3, [r3, #20]
 80129d6:	2b04      	cmp	r3, #4
 80129d8:	d102      	bne.n	80129e0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2207      	movs	r2, #7
 80129de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80129e8:	68b8      	ldr	r0, [r7, #8]
 80129ea:	f7fd fb08 	bl	800fffe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d008      	beq.n	8012a08 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	685a      	ldr	r2, [r3, #4]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012a02:	429a      	cmp	r2, r3
 8012a04:	f43f af43 	beq.w	801288e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	8b5b      	ldrh	r3, [r3, #26]
 8012a0c:	f003 0301 	and.w	r3, r3, #1
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d00e      	beq.n	8012a32 <tcp_receive+0xbc2>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	8b5b      	ldrh	r3, [r3, #26]
 8012a18:	f023 0301 	bic.w	r3, r3, #1
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	835a      	strh	r2, [r3, #26]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	8b5b      	ldrh	r3, [r3, #26]
 8012a26:	f043 0302 	orr.w	r3, r3, #2
 8012a2a:	b29a      	uxth	r2, r3
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012a30:	e188      	b.n	8012d44 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	8b5b      	ldrh	r3, [r3, #26]
 8012a36:	f043 0301 	orr.w	r3, r3, #1
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012a40:	e180      	b.n	8012d44 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d106      	bne.n	8012a58 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012a4a:	4848      	ldr	r0, [pc, #288]	; (8012b6c <tcp_receive+0xcfc>)
 8012a4c:	f7fd faf0 	bl	8010030 <tcp_seg_copy>
 8012a50:	4602      	mov	r2, r0
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	675a      	str	r2, [r3, #116]	; 0x74
 8012a56:	e16d      	b.n	8012d34 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a60:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a62:	e157      	b.n	8012d14 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	685a      	ldr	r2, [r3, #4]
 8012a6a:	4b41      	ldr	r3, [pc, #260]	; (8012b70 <tcp_receive+0xd00>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d11d      	bne.n	8012aae <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012a72:	4b3e      	ldr	r3, [pc, #248]	; (8012b6c <tcp_receive+0xcfc>)
 8012a74:	891a      	ldrh	r2, [r3, #8]
 8012a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a78:	891b      	ldrh	r3, [r3, #8]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	f240 814f 	bls.w	8012d1e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a80:	483a      	ldr	r0, [pc, #232]	; (8012b6c <tcp_receive+0xcfc>)
 8012a82:	f7fd fad5 	bl	8010030 <tcp_seg_copy>
 8012a86:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 8149 	beq.w	8012d22 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d003      	beq.n	8012a9e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a98:	697a      	ldr	r2, [r7, #20]
 8012a9a:	601a      	str	r2, [r3, #0]
 8012a9c:	e002      	b.n	8012aa4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	697a      	ldr	r2, [r7, #20]
 8012aa2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012aa6:	6978      	ldr	r0, [r7, #20]
 8012aa8:	f7ff f8de 	bl	8011c68 <tcp_oos_insert_segment>
                }
                break;
 8012aac:	e139      	b.n	8012d22 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d117      	bne.n	8012ae4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012ab4:	4b2e      	ldr	r3, [pc, #184]	; (8012b70 <tcp_receive+0xd00>)
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	1ad3      	subs	r3, r2, r3
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	da57      	bge.n	8012b74 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ac4:	4829      	ldr	r0, [pc, #164]	; (8012b6c <tcp_receive+0xcfc>)
 8012ac6:	f7fd fab3 	bl	8010030 <tcp_seg_copy>
 8012aca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f000 8129 	beq.w	8012d26 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	69ba      	ldr	r2, [r7, #24]
 8012ad8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012adc:	69b8      	ldr	r0, [r7, #24]
 8012ade:	f7ff f8c3 	bl	8011c68 <tcp_oos_insert_segment>
                  }
                  break;
 8012ae2:	e120      	b.n	8012d26 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012ae4:	4b22      	ldr	r3, [pc, #136]	; (8012b70 <tcp_receive+0xd00>)
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	3b01      	subs	r3, #1
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	db3e      	blt.n	8012b74 <tcp_receive+0xd04>
 8012af6:	4b1e      	ldr	r3, [pc, #120]	; (8012b70 <tcp_receive+0xd00>)
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	1ad3      	subs	r3, r2, r3
 8012b02:	3301      	adds	r3, #1
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	dc35      	bgt.n	8012b74 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012b08:	4818      	ldr	r0, [pc, #96]	; (8012b6c <tcp_receive+0xcfc>)
 8012b0a:	f7fd fa91 	bl	8010030 <tcp_seg_copy>
 8012b0e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f000 8109 	beq.w	8012d2a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b20:	8912      	ldrh	r2, [r2, #8]
 8012b22:	441a      	add	r2, r3
 8012b24:	4b12      	ldr	r3, [pc, #72]	; (8012b70 <tcp_receive+0xd00>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	1ad3      	subs	r3, r2, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	dd12      	ble.n	8012b54 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012b2e:	4b10      	ldr	r3, [pc, #64]	; (8012b70 <tcp_receive+0xd00>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	b29a      	uxth	r2, r3
 8012b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b46:	685a      	ldr	r2, [r3, #4]
 8012b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b4a:	891b      	ldrh	r3, [r3, #8]
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	4610      	mov	r0, r2
 8012b50:	f7fb fcd4 	bl	800e4fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b56:	69fa      	ldr	r2, [r7, #28]
 8012b58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012b5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b5c:	69f8      	ldr	r0, [r7, #28]
 8012b5e:	f7ff f883 	bl	8011c68 <tcp_oos_insert_segment>
                  }
                  break;
 8012b62:	e0e2      	b.n	8012d2a <tcp_receive+0xeba>
 8012b64:	2000437c 	.word	0x2000437c
 8012b68:	20004379 	.word	0x20004379
 8012b6c:	2000434c 	.word	0x2000434c
 8012b70:	2000436c 	.word	0x2000436c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b76:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f040 80c6 	bne.w	8012d0e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012b82:	4b80      	ldr	r3, [pc, #512]	; (8012d84 <tcp_receive+0xf14>)
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f340 80bd 	ble.w	8012d0e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	899b      	ldrh	r3, [r3, #12]
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fa fa87 	bl	800d0b0 <lwip_htons>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	b2db      	uxtb	r3, r3
 8012ba6:	f003 0301 	and.w	r3, r3, #1
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	f040 80bf 	bne.w	8012d2e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012bb0:	4875      	ldr	r0, [pc, #468]	; (8012d88 <tcp_receive+0xf18>)
 8012bb2:	f7fd fa3d 	bl	8010030 <tcp_seg_copy>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f000 80b6 	beq.w	8012d32 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bce:	8912      	ldrh	r2, [r2, #8]
 8012bd0:	441a      	add	r2, r3
 8012bd2:	4b6c      	ldr	r3, [pc, #432]	; (8012d84 <tcp_receive+0xf14>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	dd12      	ble.n	8012c02 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012bdc:	4b69      	ldr	r3, [pc, #420]	; (8012d84 <tcp_receive+0xf14>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	1ad3      	subs	r3, r2, r3
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf4:	685a      	ldr	r2, [r3, #4]
 8012bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf8:	891b      	ldrh	r3, [r3, #8]
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	4610      	mov	r0, r2
 8012bfe:	f7fb fc7d 	bl	800e4fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012c02:	4b62      	ldr	r3, [pc, #392]	; (8012d8c <tcp_receive+0xf1c>)
 8012c04:	881b      	ldrh	r3, [r3, #0]
 8012c06:	461a      	mov	r2, r3
 8012c08:	4b5e      	ldr	r3, [pc, #376]	; (8012d84 <tcp_receive+0xf14>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	441a      	add	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c12:	6879      	ldr	r1, [r7, #4]
 8012c14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c16:	440b      	add	r3, r1
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	f340 8089 	ble.w	8012d32 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	899b      	ldrh	r3, [r3, #12]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fa fa40 	bl	800d0b0 <lwip_htons>
 8012c30:	4603      	mov	r3, r0
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d022      	beq.n	8012c82 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	899b      	ldrh	r3, [r3, #12]
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	b21b      	sxth	r3, r3
 8012c48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c4c:	b21c      	sxth	r4, r3
 8012c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	899b      	ldrh	r3, [r3, #12]
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7fa fa29 	bl	800d0b0 <lwip_htons>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7fa fa20 	bl	800d0b0 <lwip_htons>
 8012c70:	4603      	mov	r3, r0
 8012c72:	b21b      	sxth	r3, r3
 8012c74:	4323      	orrs	r3, r4
 8012c76:	b21a      	sxth	r2, r3
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	b292      	uxth	r2, r2
 8012c80:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c8c:	4413      	add	r3, r2
 8012c8e:	b299      	uxth	r1, r3
 8012c90:	4b3c      	ldr	r3, [pc, #240]	; (8012d84 <tcp_receive+0xf14>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	1a8a      	subs	r2, r1, r2
 8012c9c:	b292      	uxth	r2, r2
 8012c9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	685a      	ldr	r2, [r3, #4]
 8012ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	891b      	ldrh	r3, [r3, #8]
 8012cac:	4619      	mov	r1, r3
 8012cae:	4610      	mov	r0, r2
 8012cb0:	f7fb fc24 	bl	800e4fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	891c      	ldrh	r4, [r3, #8]
 8012cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	899b      	ldrh	r3, [r3, #12]
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fa f9f3 	bl	800d0b0 <lwip_htons>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	b2db      	uxtb	r3, r3
 8012cce:	f003 0303 	and.w	r3, r3, #3
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d001      	beq.n	8012cda <tcp_receive+0xe6a>
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	e000      	b.n	8012cdc <tcp_receive+0xe6c>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	4423      	add	r3, r4
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	4b2a      	ldr	r3, [pc, #168]	; (8012d8c <tcp_receive+0xf1c>)
 8012ce2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ce4:	4b29      	ldr	r3, [pc, #164]	; (8012d8c <tcp_receive+0xf1c>)
 8012ce6:	881b      	ldrh	r3, [r3, #0]
 8012ce8:	461a      	mov	r2, r3
 8012cea:	4b26      	ldr	r3, [pc, #152]	; (8012d84 <tcp_receive+0xf14>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	441a      	add	r2, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cf4:	6879      	ldr	r1, [r7, #4]
 8012cf6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cf8:	440b      	add	r3, r1
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d019      	beq.n	8012d32 <tcp_receive+0xec2>
 8012cfe:	4b24      	ldr	r3, [pc, #144]	; (8012d90 <tcp_receive+0xf20>)
 8012d00:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012d04:	4923      	ldr	r1, [pc, #140]	; (8012d94 <tcp_receive+0xf24>)
 8012d06:	4824      	ldr	r0, [pc, #144]	; (8012d98 <tcp_receive+0xf28>)
 8012d08:	f005 fd2e 	bl	8018768 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012d0c:	e011      	b.n	8012d32 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f47f aea4 	bne.w	8012a64 <tcp_receive+0xbf4>
 8012d1c:	e00a      	b.n	8012d34 <tcp_receive+0xec4>
                break;
 8012d1e:	bf00      	nop
 8012d20:	e008      	b.n	8012d34 <tcp_receive+0xec4>
                break;
 8012d22:	bf00      	nop
 8012d24:	e006      	b.n	8012d34 <tcp_receive+0xec4>
                  break;
 8012d26:	bf00      	nop
 8012d28:	e004      	b.n	8012d34 <tcp_receive+0xec4>
                  break;
 8012d2a:	bf00      	nop
 8012d2c:	e002      	b.n	8012d34 <tcp_receive+0xec4>
                  break;
 8012d2e:	bf00      	nop
 8012d30:	e000      	b.n	8012d34 <tcp_receive+0xec4>
                break;
 8012d32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f001 fe8b 	bl	8014a50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012d3a:	e003      	b.n	8012d44 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f001 fe87 	bl	8014a50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d42:	e01a      	b.n	8012d7a <tcp_receive+0xf0a>
 8012d44:	e019      	b.n	8012d7a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012d46:	4b0f      	ldr	r3, [pc, #60]	; (8012d84 <tcp_receive+0xf14>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	db0a      	blt.n	8012d6a <tcp_receive+0xefa>
 8012d54:	4b0b      	ldr	r3, [pc, #44]	; (8012d84 <tcp_receive+0xf14>)
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d5c:	6879      	ldr	r1, [r7, #4]
 8012d5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d60:	440b      	add	r3, r1
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	3301      	adds	r3, #1
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	dd07      	ble.n	8012d7a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	8b5b      	ldrh	r3, [r3, #26]
 8012d6e:	f043 0302 	orr.w	r3, r3, #2
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012d78:	e7ff      	b.n	8012d7a <tcp_receive+0xf0a>
 8012d7a:	bf00      	nop
 8012d7c:	3750      	adds	r7, #80	; 0x50
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bdb0      	pop	{r4, r5, r7, pc}
 8012d82:	bf00      	nop
 8012d84:	2000436c 	.word	0x2000436c
 8012d88:	2000434c 	.word	0x2000434c
 8012d8c:	20004376 	.word	0x20004376
 8012d90:	0801bcfc 	.word	0x0801bcfc
 8012d94:	0801c0a4 	.word	0x0801c0a4
 8012d98:	0801bd48 	.word	0x0801bd48

08012d9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012da2:	4b15      	ldr	r3, [pc, #84]	; (8012df8 <tcp_get_next_optbyte+0x5c>)
 8012da4:	881b      	ldrh	r3, [r3, #0]
 8012da6:	1c5a      	adds	r2, r3, #1
 8012da8:	b291      	uxth	r1, r2
 8012daa:	4a13      	ldr	r2, [pc, #76]	; (8012df8 <tcp_get_next_optbyte+0x5c>)
 8012dac:	8011      	strh	r1, [r2, #0]
 8012dae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012db0:	4b12      	ldr	r3, [pc, #72]	; (8012dfc <tcp_get_next_optbyte+0x60>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d004      	beq.n	8012dc2 <tcp_get_next_optbyte+0x26>
 8012db8:	4b11      	ldr	r3, [pc, #68]	; (8012e00 <tcp_get_next_optbyte+0x64>)
 8012dba:	881b      	ldrh	r3, [r3, #0]
 8012dbc:	88fa      	ldrh	r2, [r7, #6]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d208      	bcs.n	8012dd4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012dc2:	4b10      	ldr	r3, [pc, #64]	; (8012e04 <tcp_get_next_optbyte+0x68>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	3314      	adds	r3, #20
 8012dc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012dca:	88fb      	ldrh	r3, [r7, #6]
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	4413      	add	r3, r2
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	e00b      	b.n	8012dec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012dd4:	88fb      	ldrh	r3, [r7, #6]
 8012dd6:	b2da      	uxtb	r2, r3
 8012dd8:	4b09      	ldr	r3, [pc, #36]	; (8012e00 <tcp_get_next_optbyte+0x64>)
 8012dda:	881b      	ldrh	r3, [r3, #0]
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012de2:	4b06      	ldr	r3, [pc, #24]	; (8012dfc <tcp_get_next_optbyte+0x60>)
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	797b      	ldrb	r3, [r7, #5]
 8012de8:	4413      	add	r3, r2
 8012dea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr
 8012df8:	20004368 	.word	0x20004368
 8012dfc:	20004364 	.word	0x20004364
 8012e00:	20004362 	.word	0x20004362
 8012e04:	2000435c 	.word	0x2000435c

08012e08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d106      	bne.n	8012e24 <tcp_parseopt+0x1c>
 8012e16:	4b32      	ldr	r3, [pc, #200]	; (8012ee0 <tcp_parseopt+0xd8>)
 8012e18:	f240 727d 	movw	r2, #1917	; 0x77d
 8012e1c:	4931      	ldr	r1, [pc, #196]	; (8012ee4 <tcp_parseopt+0xdc>)
 8012e1e:	4832      	ldr	r0, [pc, #200]	; (8012ee8 <tcp_parseopt+0xe0>)
 8012e20:	f005 fca2 	bl	8018768 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012e24:	4b31      	ldr	r3, [pc, #196]	; (8012eec <tcp_parseopt+0xe4>)
 8012e26:	881b      	ldrh	r3, [r3, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d055      	beq.n	8012ed8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e2c:	4b30      	ldr	r3, [pc, #192]	; (8012ef0 <tcp_parseopt+0xe8>)
 8012e2e:	2200      	movs	r2, #0
 8012e30:	801a      	strh	r2, [r3, #0]
 8012e32:	e045      	b.n	8012ec0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012e34:	f7ff ffb2 	bl	8012d9c <tcp_get_next_optbyte>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012e3c:	7bfb      	ldrb	r3, [r7, #15]
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d006      	beq.n	8012e50 <tcp_parseopt+0x48>
 8012e42:	2b02      	cmp	r3, #2
 8012e44:	dc2b      	bgt.n	8012e9e <tcp_parseopt+0x96>
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d041      	beq.n	8012ece <tcp_parseopt+0xc6>
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d127      	bne.n	8012e9e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012e4e:	e037      	b.n	8012ec0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012e50:	f7ff ffa4 	bl	8012d9c <tcp_get_next_optbyte>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b04      	cmp	r3, #4
 8012e58:	d13b      	bne.n	8012ed2 <tcp_parseopt+0xca>
 8012e5a:	4b25      	ldr	r3, [pc, #148]	; (8012ef0 <tcp_parseopt+0xe8>)
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	4a22      	ldr	r2, [pc, #136]	; (8012eec <tcp_parseopt+0xe4>)
 8012e62:	8812      	ldrh	r2, [r2, #0]
 8012e64:	4293      	cmp	r3, r2
 8012e66:	da34      	bge.n	8012ed2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012e68:	f7ff ff98 	bl	8012d9c <tcp_get_next_optbyte>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	021b      	lsls	r3, r3, #8
 8012e72:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012e74:	f7ff ff92 	bl	8012d9c <tcp_get_next_optbyte>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	89bb      	ldrh	r3, [r7, #12]
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012e82:	89bb      	ldrh	r3, [r7, #12]
 8012e84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012e88:	d804      	bhi.n	8012e94 <tcp_parseopt+0x8c>
 8012e8a:	89bb      	ldrh	r3, [r7, #12]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <tcp_parseopt+0x8c>
 8012e90:	89ba      	ldrh	r2, [r7, #12]
 8012e92:	e001      	b.n	8012e98 <tcp_parseopt+0x90>
 8012e94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012e9c:	e010      	b.n	8012ec0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012e9e:	f7ff ff7d 	bl	8012d9c <tcp_get_next_optbyte>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012ea6:	7afb      	ldrb	r3, [r7, #11]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d914      	bls.n	8012ed6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012eac:	7afb      	ldrb	r3, [r7, #11]
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	4b0f      	ldr	r3, [pc, #60]	; (8012ef0 <tcp_parseopt+0xe8>)
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	4413      	add	r3, r2
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	3b02      	subs	r3, #2
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	4b0c      	ldr	r3, [pc, #48]	; (8012ef0 <tcp_parseopt+0xe8>)
 8012ebe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ec0:	4b0b      	ldr	r3, [pc, #44]	; (8012ef0 <tcp_parseopt+0xe8>)
 8012ec2:	881a      	ldrh	r2, [r3, #0]
 8012ec4:	4b09      	ldr	r3, [pc, #36]	; (8012eec <tcp_parseopt+0xe4>)
 8012ec6:	881b      	ldrh	r3, [r3, #0]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d3b3      	bcc.n	8012e34 <tcp_parseopt+0x2c>
 8012ecc:	e004      	b.n	8012ed8 <tcp_parseopt+0xd0>
          return;
 8012ece:	bf00      	nop
 8012ed0:	e002      	b.n	8012ed8 <tcp_parseopt+0xd0>
            return;
 8012ed2:	bf00      	nop
 8012ed4:	e000      	b.n	8012ed8 <tcp_parseopt+0xd0>
            return;
 8012ed6:	bf00      	nop
      }
    }
  }
}
 8012ed8:	3710      	adds	r7, #16
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	0801bcfc 	.word	0x0801bcfc
 8012ee4:	0801c160 	.word	0x0801c160
 8012ee8:	0801bd48 	.word	0x0801bd48
 8012eec:	20004360 	.word	0x20004360
 8012ef0:	20004368 	.word	0x20004368

08012ef4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012ef8:	4b05      	ldr	r3, [pc, #20]	; (8012f10 <tcp_trigger_input_pcb_close+0x1c>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	f043 0310 	orr.w	r3, r3, #16
 8012f00:	b2da      	uxtb	r2, r3
 8012f02:	4b03      	ldr	r3, [pc, #12]	; (8012f10 <tcp_trigger_input_pcb_close+0x1c>)
 8012f04:	701a      	strb	r2, [r3, #0]
}
 8012f06:	bf00      	nop
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr
 8012f10:	20004379 	.word	0x20004379

08012f14 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00a      	beq.n	8012f3c <tcp_route+0x28>
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	7a1b      	ldrb	r3, [r3, #8]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	7a1b      	ldrb	r3, [r3, #8]
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fb f8da 	bl	800e0ec <netif_get_by_index>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	e003      	b.n	8012f44 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f003 fe35 	bl	8016bac <ip4_route>
 8012f42:	4603      	mov	r3, r0
  }
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3710      	adds	r7, #16
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012f4c:	b590      	push	{r4, r7, lr}
 8012f4e:	b087      	sub	sp, #28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	603b      	str	r3, [r7, #0]
 8012f58:	4613      	mov	r3, r2
 8012f5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d105      	bne.n	8012f6e <tcp_create_segment+0x22>
 8012f62:	4b44      	ldr	r3, [pc, #272]	; (8013074 <tcp_create_segment+0x128>)
 8012f64:	22a3      	movs	r2, #163	; 0xa3
 8012f66:	4944      	ldr	r1, [pc, #272]	; (8013078 <tcp_create_segment+0x12c>)
 8012f68:	4844      	ldr	r0, [pc, #272]	; (801307c <tcp_create_segment+0x130>)
 8012f6a:	f005 fbfd 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d105      	bne.n	8012f80 <tcp_create_segment+0x34>
 8012f74:	4b3f      	ldr	r3, [pc, #252]	; (8013074 <tcp_create_segment+0x128>)
 8012f76:	22a4      	movs	r2, #164	; 0xa4
 8012f78:	4941      	ldr	r1, [pc, #260]	; (8013080 <tcp_create_segment+0x134>)
 8012f7a:	4840      	ldr	r0, [pc, #256]	; (801307c <tcp_create_segment+0x130>)
 8012f7c:	f005 fbf4 	bl	8018768 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	b2db      	uxtb	r3, r3
 8012f88:	f003 0304 	and.w	r3, r3, #4
 8012f8c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012f8e:	2003      	movs	r0, #3
 8012f90:	f7fa fd44 	bl	800da1c <memp_malloc>
 8012f94:	6138      	str	r0, [r7, #16]
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d104      	bne.n	8012fa6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012f9c:	68b8      	ldr	r0, [r7, #8]
 8012f9e:	f7fb fc65 	bl	800e86c <pbuf_free>
    return NULL;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	e061      	b.n	801306a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012fac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	891a      	ldrh	r2, [r3, #8]
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
 8012fc0:	b29b      	uxth	r3, r3
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d205      	bcs.n	8012fd2 <tcp_create_segment+0x86>
 8012fc6:	4b2b      	ldr	r3, [pc, #172]	; (8013074 <tcp_create_segment+0x128>)
 8012fc8:	22b0      	movs	r2, #176	; 0xb0
 8012fca:	492e      	ldr	r1, [pc, #184]	; (8013084 <tcp_create_segment+0x138>)
 8012fcc:	482b      	ldr	r0, [pc, #172]	; (801307c <tcp_create_segment+0x130>)
 8012fce:	f005 fbcb 	bl	8018768 <iprintf>
  seg->len = p->tot_len - optlen;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	891a      	ldrh	r2, [r3, #8]
 8012fd6:	7dfb      	ldrb	r3, [r7, #23]
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012fe2:	2114      	movs	r1, #20
 8012fe4:	68b8      	ldr	r0, [r7, #8]
 8012fe6:	f7fb fb79 	bl	800e6dc <pbuf_add_header>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d004      	beq.n	8012ffa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012ff0:	6938      	ldr	r0, [r7, #16]
 8012ff2:	f7fd f804 	bl	800fffe <tcp_seg_free>
    return NULL;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e037      	b.n	801306a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	685a      	ldr	r2, [r3, #4]
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	8ada      	ldrh	r2, [r3, #22]
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	68dc      	ldr	r4, [r3, #12]
 801300c:	4610      	mov	r0, r2
 801300e:	f7fa f84f 	bl	800d0b0 <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	8b1a      	ldrh	r2, [r3, #24]
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	68dc      	ldr	r4, [r3, #12]
 801301e:	4610      	mov	r0, r2
 8013020:	f7fa f846 	bl	800d0b0 <lwip_htons>
 8013024:	4603      	mov	r3, r0
 8013026:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	68dc      	ldr	r4, [r3, #12]
 801302c:	6838      	ldr	r0, [r7, #0]
 801302e:	f7fa f854 	bl	800d0da <lwip_htonl>
 8013032:	4603      	mov	r3, r0
 8013034:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013036:	7dfb      	ldrb	r3, [r7, #23]
 8013038:	089b      	lsrs	r3, r3, #2
 801303a:	b2db      	uxtb	r3, r3
 801303c:	b29b      	uxth	r3, r3
 801303e:	3305      	adds	r3, #5
 8013040:	b29b      	uxth	r3, r3
 8013042:	031b      	lsls	r3, r3, #12
 8013044:	b29a      	uxth	r2, r3
 8013046:	79fb      	ldrb	r3, [r7, #7]
 8013048:	b29b      	uxth	r3, r3
 801304a:	4313      	orrs	r3, r2
 801304c:	b29a      	uxth	r2, r3
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	68dc      	ldr	r4, [r3, #12]
 8013052:	4610      	mov	r0, r2
 8013054:	f7fa f82c 	bl	800d0b0 <lwip_htons>
 8013058:	4603      	mov	r3, r0
 801305a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	68db      	ldr	r3, [r3, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	749a      	strb	r2, [r3, #18]
 8013064:	2200      	movs	r2, #0
 8013066:	74da      	strb	r2, [r3, #19]
  return seg;
 8013068:	693b      	ldr	r3, [r7, #16]
}
 801306a:	4618      	mov	r0, r3
 801306c:	371c      	adds	r7, #28
 801306e:	46bd      	mov	sp, r7
 8013070:	bd90      	pop	{r4, r7, pc}
 8013072:	bf00      	nop
 8013074:	0801c17c 	.word	0x0801c17c
 8013078:	0801c1b0 	.word	0x0801c1b0
 801307c:	0801c1d0 	.word	0x0801c1d0
 8013080:	0801c1f8 	.word	0x0801c1f8
 8013084:	0801c21c 	.word	0x0801c21c

08013088 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b086      	sub	sp, #24
 801308c:	af00      	add	r7, sp, #0
 801308e:	607b      	str	r3, [r7, #4]
 8013090:	4603      	mov	r3, r0
 8013092:	73fb      	strb	r3, [r7, #15]
 8013094:	460b      	mov	r3, r1
 8013096:	81bb      	strh	r3, [r7, #12]
 8013098:	4613      	mov	r3, r2
 801309a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801309c:	89bb      	ldrh	r3, [r7, #12]
 801309e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d105      	bne.n	80130b2 <tcp_pbuf_prealloc+0x2a>
 80130a6:	4b30      	ldr	r3, [pc, #192]	; (8013168 <tcp_pbuf_prealloc+0xe0>)
 80130a8:	22e8      	movs	r2, #232	; 0xe8
 80130aa:	4930      	ldr	r1, [pc, #192]	; (801316c <tcp_pbuf_prealloc+0xe4>)
 80130ac:	4830      	ldr	r0, [pc, #192]	; (8013170 <tcp_pbuf_prealloc+0xe8>)
 80130ae:	f005 fb5b 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80130b2:	6a3b      	ldr	r3, [r7, #32]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d105      	bne.n	80130c4 <tcp_pbuf_prealloc+0x3c>
 80130b8:	4b2b      	ldr	r3, [pc, #172]	; (8013168 <tcp_pbuf_prealloc+0xe0>)
 80130ba:	22e9      	movs	r2, #233	; 0xe9
 80130bc:	492d      	ldr	r1, [pc, #180]	; (8013174 <tcp_pbuf_prealloc+0xec>)
 80130be:	482c      	ldr	r0, [pc, #176]	; (8013170 <tcp_pbuf_prealloc+0xe8>)
 80130c0:	f005 fb52 	bl	8018768 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80130c4:	89ba      	ldrh	r2, [r7, #12]
 80130c6:	897b      	ldrh	r3, [r7, #10]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d221      	bcs.n	8013110 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80130cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80130d0:	f003 0302 	and.w	r3, r3, #2
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d111      	bne.n	80130fc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80130d8:	6a3b      	ldr	r3, [r7, #32]
 80130da:	8b5b      	ldrh	r3, [r3, #26]
 80130dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d115      	bne.n	8013110 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80130e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d007      	beq.n	80130fc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80130ec:	6a3b      	ldr	r3, [r7, #32]
 80130ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d103      	bne.n	80130fc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80130f4:	6a3b      	ldr	r3, [r7, #32]
 80130f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d009      	beq.n	8013110 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80130fc:	89bb      	ldrh	r3, [r7, #12]
 80130fe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013102:	f023 0203 	bic.w	r2, r3, #3
 8013106:	897b      	ldrh	r3, [r7, #10]
 8013108:	4293      	cmp	r3, r2
 801310a:	bf28      	it	cs
 801310c:	4613      	movcs	r3, r2
 801310e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013110:	8af9      	ldrh	r1, [r7, #22]
 8013112:	7bfb      	ldrb	r3, [r7, #15]
 8013114:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013118:	4618      	mov	r0, r3
 801311a:	f7fb f891 	bl	800e240 <pbuf_alloc>
 801311e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d101      	bne.n	801312a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013126:	2300      	movs	r3, #0
 8013128:	e019      	b.n	801315e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d006      	beq.n	8013140 <tcp_pbuf_prealloc+0xb8>
 8013132:	4b0d      	ldr	r3, [pc, #52]	; (8013168 <tcp_pbuf_prealloc+0xe0>)
 8013134:	f240 120b 	movw	r2, #267	; 0x10b
 8013138:	490f      	ldr	r1, [pc, #60]	; (8013178 <tcp_pbuf_prealloc+0xf0>)
 801313a:	480d      	ldr	r0, [pc, #52]	; (8013170 <tcp_pbuf_prealloc+0xe8>)
 801313c:	f005 fb14 	bl	8018768 <iprintf>
  *oversize = p->len - length;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	895a      	ldrh	r2, [r3, #10]
 8013144:	89bb      	ldrh	r3, [r7, #12]
 8013146:	1ad3      	subs	r3, r2, r3
 8013148:	b29a      	uxth	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	89ba      	ldrh	r2, [r7, #12]
 8013152:	811a      	strh	r2, [r3, #8]
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	891a      	ldrh	r2, [r3, #8]
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	815a      	strh	r2, [r3, #10]
  return p;
 801315c:	693b      	ldr	r3, [r7, #16]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3718      	adds	r7, #24
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	0801c17c 	.word	0x0801c17c
 801316c:	0801c234 	.word	0x0801c234
 8013170:	0801c1d0 	.word	0x0801c1d0
 8013174:	0801c258 	.word	0x0801c258
 8013178:	0801c278 	.word	0x0801c278

0801317c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	460b      	mov	r3, r1
 8013186:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d106      	bne.n	801319c <tcp_write_checks+0x20>
 801318e:	4b33      	ldr	r3, [pc, #204]	; (801325c <tcp_write_checks+0xe0>)
 8013190:	f240 1233 	movw	r2, #307	; 0x133
 8013194:	4932      	ldr	r1, [pc, #200]	; (8013260 <tcp_write_checks+0xe4>)
 8013196:	4833      	ldr	r0, [pc, #204]	; (8013264 <tcp_write_checks+0xe8>)
 8013198:	f005 fae6 	bl	8018768 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	7d1b      	ldrb	r3, [r3, #20]
 80131a0:	2b04      	cmp	r3, #4
 80131a2:	d00e      	beq.n	80131c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80131a8:	2b07      	cmp	r3, #7
 80131aa:	d00a      	beq.n	80131c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80131b0:	2b02      	cmp	r3, #2
 80131b2:	d006      	beq.n	80131c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80131b8:	2b03      	cmp	r3, #3
 80131ba:	d002      	beq.n	80131c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80131bc:	f06f 030a 	mvn.w	r3, #10
 80131c0:	e048      	b.n	8013254 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80131c2:	887b      	ldrh	r3, [r7, #2]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d101      	bne.n	80131cc <tcp_write_checks+0x50>
    return ERR_OK;
 80131c8:	2300      	movs	r3, #0
 80131ca:	e043      	b.n	8013254 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80131d2:	887a      	ldrh	r2, [r7, #2]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d909      	bls.n	80131ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8b5b      	ldrh	r3, [r3, #26]
 80131dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80131e6:	f04f 33ff 	mov.w	r3, #4294967295
 80131ea:	e033      	b.n	8013254 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131f2:	2b08      	cmp	r3, #8
 80131f4:	d909      	bls.n	801320a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	8b5b      	ldrh	r3, [r3, #26]
 80131fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131fe:	b29a      	uxth	r2, r3
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013204:	f04f 33ff 	mov.w	r3, #4294967295
 8013208:	e024      	b.n	8013254 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00f      	beq.n	8013234 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013218:	2b00      	cmp	r3, #0
 801321a:	d11a      	bne.n	8013252 <tcp_write_checks+0xd6>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013220:	2b00      	cmp	r3, #0
 8013222:	d116      	bne.n	8013252 <tcp_write_checks+0xd6>
 8013224:	4b0d      	ldr	r3, [pc, #52]	; (801325c <tcp_write_checks+0xe0>)
 8013226:	f240 1255 	movw	r2, #341	; 0x155
 801322a:	490f      	ldr	r1, [pc, #60]	; (8013268 <tcp_write_checks+0xec>)
 801322c:	480d      	ldr	r0, [pc, #52]	; (8013264 <tcp_write_checks+0xe8>)
 801322e:	f005 fa9b 	bl	8018768 <iprintf>
 8013232:	e00e      	b.n	8013252 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013238:	2b00      	cmp	r3, #0
 801323a:	d103      	bne.n	8013244 <tcp_write_checks+0xc8>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013240:	2b00      	cmp	r3, #0
 8013242:	d006      	beq.n	8013252 <tcp_write_checks+0xd6>
 8013244:	4b05      	ldr	r3, [pc, #20]	; (801325c <tcp_write_checks+0xe0>)
 8013246:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801324a:	4908      	ldr	r1, [pc, #32]	; (801326c <tcp_write_checks+0xf0>)
 801324c:	4805      	ldr	r0, [pc, #20]	; (8013264 <tcp_write_checks+0xe8>)
 801324e:	f005 fa8b 	bl	8018768 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013252:	2300      	movs	r3, #0
}
 8013254:	4618      	mov	r0, r3
 8013256:	3708      	adds	r7, #8
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	0801c17c 	.word	0x0801c17c
 8013260:	0801c28c 	.word	0x0801c28c
 8013264:	0801c1d0 	.word	0x0801c1d0
 8013268:	0801c2ac 	.word	0x0801c2ac
 801326c:	0801c2e8 	.word	0x0801c2e8

08013270 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013270:	b590      	push	{r4, r7, lr}
 8013272:	b09b      	sub	sp, #108	; 0x6c
 8013274:	af04      	add	r7, sp, #16
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	4611      	mov	r1, r2
 801327c:	461a      	mov	r2, r3
 801327e:	460b      	mov	r3, r1
 8013280:	80fb      	strh	r3, [r7, #6]
 8013282:	4613      	mov	r3, r2
 8013284:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013286:	2300      	movs	r3, #0
 8013288:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801328a:	2300      	movs	r3, #0
 801328c:	653b      	str	r3, [r7, #80]	; 0x50
 801328e:	2300      	movs	r3, #0
 8013290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013292:	2300      	movs	r3, #0
 8013294:	64bb      	str	r3, [r7, #72]	; 0x48
 8013296:	2300      	movs	r3, #0
 8013298:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801329a:	2300      	movs	r3, #0
 801329c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80132a0:	2300      	movs	r3, #0
 80132a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80132a6:	2300      	movs	r3, #0
 80132a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80132aa:	2300      	movs	r3, #0
 80132ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d109      	bne.n	80132cc <tcp_write+0x5c>
 80132b8:	4ba4      	ldr	r3, [pc, #656]	; (801354c <tcp_write+0x2dc>)
 80132ba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80132be:	49a4      	ldr	r1, [pc, #656]	; (8013550 <tcp_write+0x2e0>)
 80132c0:	48a4      	ldr	r0, [pc, #656]	; (8013554 <tcp_write+0x2e4>)
 80132c2:	f005 fa51 	bl	8018768 <iprintf>
 80132c6:	f06f 030f 	mvn.w	r3, #15
 80132ca:	e32a      	b.n	8013922 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80132d2:	085b      	lsrs	r3, r3, #1
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132da:	4293      	cmp	r3, r2
 80132dc:	bf28      	it	cs
 80132de:	4613      	movcs	r3, r2
 80132e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80132e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d102      	bne.n	80132ee <tcp_write+0x7e>
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132ec:	e000      	b.n	80132f0 <tcp_write+0x80>
 80132ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d109      	bne.n	801330c <tcp_write+0x9c>
 80132f8:	4b94      	ldr	r3, [pc, #592]	; (801354c <tcp_write+0x2dc>)
 80132fa:	f240 12ad 	movw	r2, #429	; 0x1ad
 80132fe:	4996      	ldr	r1, [pc, #600]	; (8013558 <tcp_write+0x2e8>)
 8013300:	4894      	ldr	r0, [pc, #592]	; (8013554 <tcp_write+0x2e4>)
 8013302:	f005 fa31 	bl	8018768 <iprintf>
 8013306:	f06f 030f 	mvn.w	r3, #15
 801330a:	e30a      	b.n	8013922 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801330c:	88fb      	ldrh	r3, [r7, #6]
 801330e:	4619      	mov	r1, r3
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f7ff ff33 	bl	801317c <tcp_write_checks>
 8013316:	4603      	mov	r3, r0
 8013318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801331c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013320:	2b00      	cmp	r3, #0
 8013322:	d002      	beq.n	801332a <tcp_write+0xba>
    return err;
 8013324:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013328:	e2fb      	b.n	8013922 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013330:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013334:	2300      	movs	r3, #0
 8013336:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801333e:	2b00      	cmp	r3, #0
 8013340:	f000 80f6 	beq.w	8013530 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013348:	653b      	str	r3, [r7, #80]	; 0x50
 801334a:	e002      	b.n	8013352 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d1f8      	bne.n	801334c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801335a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801335c:	7a9b      	ldrb	r3, [r3, #10]
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	b29b      	uxth	r3, r3
 8013362:	f003 0304 	and.w	r3, r3, #4
 8013366:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801336a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801336c:	891b      	ldrh	r3, [r3, #8]
 801336e:	4619      	mov	r1, r3
 8013370:	8c3b      	ldrh	r3, [r7, #32]
 8013372:	440b      	add	r3, r1
 8013374:	429a      	cmp	r2, r3
 8013376:	da06      	bge.n	8013386 <tcp_write+0x116>
 8013378:	4b74      	ldr	r3, [pc, #464]	; (801354c <tcp_write+0x2dc>)
 801337a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801337e:	4977      	ldr	r1, [pc, #476]	; (801355c <tcp_write+0x2ec>)
 8013380:	4874      	ldr	r0, [pc, #464]	; (8013554 <tcp_write+0x2e4>)
 8013382:	f005 f9f1 	bl	8018768 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013388:	891a      	ldrh	r2, [r3, #8]
 801338a:	8c3b      	ldrh	r3, [r7, #32]
 801338c:	4413      	add	r3, r2
 801338e:	b29b      	uxth	r3, r3
 8013390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013392:	1ad3      	subs	r3, r2, r3
 8013394:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801339c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801339e:	8a7b      	ldrh	r3, [r7, #18]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d026      	beq.n	80133f2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80133a4:	8a7b      	ldrh	r3, [r7, #18]
 80133a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d206      	bcs.n	80133ba <tcp_write+0x14a>
 80133ac:	4b67      	ldr	r3, [pc, #412]	; (801354c <tcp_write+0x2dc>)
 80133ae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80133b2:	496b      	ldr	r1, [pc, #428]	; (8013560 <tcp_write+0x2f0>)
 80133b4:	4867      	ldr	r0, [pc, #412]	; (8013554 <tcp_write+0x2e4>)
 80133b6:	f005 f9d7 	bl	8018768 <iprintf>
      seg = last_unsent;
 80133ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80133be:	8a7b      	ldrh	r3, [r7, #18]
 80133c0:	88fa      	ldrh	r2, [r7, #6]
 80133c2:	4293      	cmp	r3, r2
 80133c4:	bf28      	it	cs
 80133c6:	4613      	movcs	r3, r2
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133cc:	4293      	cmp	r3, r2
 80133ce:	bf28      	it	cs
 80133d0:	4613      	movcs	r3, r2
 80133d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80133d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133da:	4413      	add	r3, r2
 80133dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80133e0:	8a7a      	ldrh	r2, [r7, #18]
 80133e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133e4:	1ad3      	subs	r3, r2, r3
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80133ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133ee:	1ad3      	subs	r3, r2, r3
 80133f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80133f2:	8a7b      	ldrh	r3, [r7, #18]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d00b      	beq.n	8013410 <tcp_write+0x1a0>
 80133f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133fc:	88fb      	ldrh	r3, [r7, #6]
 80133fe:	429a      	cmp	r2, r3
 8013400:	d006      	beq.n	8013410 <tcp_write+0x1a0>
 8013402:	4b52      	ldr	r3, [pc, #328]	; (801354c <tcp_write+0x2dc>)
 8013404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013408:	4956      	ldr	r1, [pc, #344]	; (8013564 <tcp_write+0x2f4>)
 801340a:	4852      	ldr	r0, [pc, #328]	; (8013554 <tcp_write+0x2e4>)
 801340c:	f005 f9ac 	bl	8018768 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013414:	88fb      	ldrh	r3, [r7, #6]
 8013416:	429a      	cmp	r2, r3
 8013418:	f080 8167 	bcs.w	80136ea <tcp_write+0x47a>
 801341c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801341e:	2b00      	cmp	r3, #0
 8013420:	f000 8163 	beq.w	80136ea <tcp_write+0x47a>
 8013424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013426:	891b      	ldrh	r3, [r3, #8]
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 815e 	beq.w	80136ea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801342e:	88fa      	ldrh	r2, [r7, #6]
 8013430:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013434:	1ad2      	subs	r2, r2, r3
 8013436:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013438:	4293      	cmp	r3, r2
 801343a:	bfa8      	it	ge
 801343c:	4613      	movge	r3, r2
 801343e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013442:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013444:	797b      	ldrb	r3, [r7, #5]
 8013446:	f003 0301 	and.w	r3, r3, #1
 801344a:	2b00      	cmp	r3, #0
 801344c:	d027      	beq.n	801349e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801344e:	f107 0012 	add.w	r0, r7, #18
 8013452:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013454:	8bf9      	ldrh	r1, [r7, #30]
 8013456:	2301      	movs	r3, #1
 8013458:	9302      	str	r3, [sp, #8]
 801345a:	797b      	ldrb	r3, [r7, #5]
 801345c:	9301      	str	r3, [sp, #4]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	9300      	str	r3, [sp, #0]
 8013462:	4603      	mov	r3, r0
 8013464:	2000      	movs	r0, #0
 8013466:	f7ff fe0f 	bl	8013088 <tcp_pbuf_prealloc>
 801346a:	6578      	str	r0, [r7, #84]	; 0x54
 801346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801346e:	2b00      	cmp	r3, #0
 8013470:	f000 8225 	beq.w	80138be <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013476:	6858      	ldr	r0, [r3, #4]
 8013478:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	4413      	add	r3, r2
 8013480:	8bfa      	ldrh	r2, [r7, #30]
 8013482:	4619      	mov	r1, r3
 8013484:	f005 f896 	bl	80185b4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013488:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801348a:	f7fb fa7d 	bl	800e988 <pbuf_clen>
 801348e:	4603      	mov	r3, r0
 8013490:	461a      	mov	r2, r3
 8013492:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013496:	4413      	add	r3, r2
 8013498:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801349c:	e041      	b.n	8013522 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801349e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	637b      	str	r3, [r7, #52]	; 0x34
 80134a4:	e002      	b.n	80134ac <tcp_write+0x23c>
 80134a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	637b      	str	r3, [r7, #52]	; 0x34
 80134ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d1f8      	bne.n	80134a6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80134b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b6:	7b1b      	ldrb	r3, [r3, #12]
 80134b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d115      	bne.n	80134ec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80134c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134c6:	8952      	ldrh	r2, [r2, #10]
 80134c8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80134ca:	68ba      	ldr	r2, [r7, #8]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d10d      	bne.n	80134ec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80134d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <tcp_write+0x276>
 80134d8:	4b1c      	ldr	r3, [pc, #112]	; (801354c <tcp_write+0x2dc>)
 80134da:	f240 2231 	movw	r2, #561	; 0x231
 80134de:	4922      	ldr	r1, [pc, #136]	; (8013568 <tcp_write+0x2f8>)
 80134e0:	481c      	ldr	r0, [pc, #112]	; (8013554 <tcp_write+0x2e4>)
 80134e2:	f005 f941 	bl	8018768 <iprintf>
          extendlen = seglen;
 80134e6:	8bfb      	ldrh	r3, [r7, #30]
 80134e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80134ea:	e01a      	b.n	8013522 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80134ec:	8bfb      	ldrh	r3, [r7, #30]
 80134ee:	2201      	movs	r2, #1
 80134f0:	4619      	mov	r1, r3
 80134f2:	2000      	movs	r0, #0
 80134f4:	f7fa fea4 	bl	800e240 <pbuf_alloc>
 80134f8:	6578      	str	r0, [r7, #84]	; 0x54
 80134fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	f000 81e0 	beq.w	80138c2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	441a      	add	r2, r3
 801350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801350c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801350e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013510:	f7fb fa3a 	bl	800e988 <pbuf_clen>
 8013514:	4603      	mov	r3, r0
 8013516:	461a      	mov	r2, r3
 8013518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801351c:	4413      	add	r3, r2
 801351e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013522:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013526:	8bfb      	ldrh	r3, [r7, #30]
 8013528:	4413      	add	r3, r2
 801352a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801352e:	e0dc      	b.n	80136ea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013536:	2b00      	cmp	r3, #0
 8013538:	f000 80d7 	beq.w	80136ea <tcp_write+0x47a>
 801353c:	4b03      	ldr	r3, [pc, #12]	; (801354c <tcp_write+0x2dc>)
 801353e:	f240 224a 	movw	r2, #586	; 0x24a
 8013542:	490a      	ldr	r1, [pc, #40]	; (801356c <tcp_write+0x2fc>)
 8013544:	4803      	ldr	r0, [pc, #12]	; (8013554 <tcp_write+0x2e4>)
 8013546:	f005 f90f 	bl	8018768 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801354a:	e0ce      	b.n	80136ea <tcp_write+0x47a>
 801354c:	0801c17c 	.word	0x0801c17c
 8013550:	0801c31c 	.word	0x0801c31c
 8013554:	0801c1d0 	.word	0x0801c1d0
 8013558:	0801c334 	.word	0x0801c334
 801355c:	0801c368 	.word	0x0801c368
 8013560:	0801c380 	.word	0x0801c380
 8013564:	0801c3a0 	.word	0x0801c3a0
 8013568:	0801c3c0 	.word	0x0801c3c0
 801356c:	0801c3ec 	.word	0x0801c3ec
    struct pbuf *p;
    u16_t left = len - pos;
 8013570:	88fa      	ldrh	r2, [r7, #6]
 8013572:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801357a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801357e:	b29b      	uxth	r3, r3
 8013580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013586:	8b7a      	ldrh	r2, [r7, #26]
 8013588:	8bbb      	ldrh	r3, [r7, #28]
 801358a:	4293      	cmp	r3, r2
 801358c:	bf28      	it	cs
 801358e:	4613      	movcs	r3, r2
 8013590:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013592:	797b      	ldrb	r3, [r7, #5]
 8013594:	f003 0301 	and.w	r3, r3, #1
 8013598:	2b00      	cmp	r3, #0
 801359a:	d036      	beq.n	801360a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801359c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	8b3b      	ldrh	r3, [r7, #24]
 80135a4:	4413      	add	r3, r2
 80135a6:	b299      	uxth	r1, r3
 80135a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	bf0c      	ite	eq
 80135ae:	2301      	moveq	r3, #1
 80135b0:	2300      	movne	r3, #0
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	f107 0012 	add.w	r0, r7, #18
 80135b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135ba:	9302      	str	r3, [sp, #8]
 80135bc:	797b      	ldrb	r3, [r7, #5]
 80135be:	9301      	str	r3, [sp, #4]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	4603      	mov	r3, r0
 80135c6:	2036      	movs	r0, #54	; 0x36
 80135c8:	f7ff fd5e 	bl	8013088 <tcp_pbuf_prealloc>
 80135cc:	6338      	str	r0, [r7, #48]	; 0x30
 80135ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f000 8178 	beq.w	80138c6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	895b      	ldrh	r3, [r3, #10]
 80135da:	8b3a      	ldrh	r2, [r7, #24]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d906      	bls.n	80135ee <tcp_write+0x37e>
 80135e0:	4b8c      	ldr	r3, [pc, #560]	; (8013814 <tcp_write+0x5a4>)
 80135e2:	f240 2266 	movw	r2, #614	; 0x266
 80135e6:	498c      	ldr	r1, [pc, #560]	; (8013818 <tcp_write+0x5a8>)
 80135e8:	488c      	ldr	r0, [pc, #560]	; (801381c <tcp_write+0x5ac>)
 80135ea:	f005 f8bd 	bl	8018768 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80135ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f0:	685a      	ldr	r2, [r3, #4]
 80135f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135f6:	18d0      	adds	r0, r2, r3
 80135f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	4413      	add	r3, r2
 8013600:	8b3a      	ldrh	r2, [r7, #24]
 8013602:	4619      	mov	r1, r3
 8013604:	f004 ffd6 	bl	80185b4 <memcpy>
 8013608:	e02f      	b.n	801366a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801360a:	8a7b      	ldrh	r3, [r7, #18]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d006      	beq.n	801361e <tcp_write+0x3ae>
 8013610:	4b80      	ldr	r3, [pc, #512]	; (8013814 <tcp_write+0x5a4>)
 8013612:	f240 2271 	movw	r2, #625	; 0x271
 8013616:	4982      	ldr	r1, [pc, #520]	; (8013820 <tcp_write+0x5b0>)
 8013618:	4880      	ldr	r0, [pc, #512]	; (801381c <tcp_write+0x5ac>)
 801361a:	f005 f8a5 	bl	8018768 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801361e:	8b3b      	ldrh	r3, [r7, #24]
 8013620:	2201      	movs	r2, #1
 8013622:	4619      	mov	r1, r3
 8013624:	2036      	movs	r0, #54	; 0x36
 8013626:	f7fa fe0b 	bl	800e240 <pbuf_alloc>
 801362a:	6178      	str	r0, [r7, #20]
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	2b00      	cmp	r3, #0
 8013630:	f000 814b 	beq.w	80138ca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013638:	68ba      	ldr	r2, [r7, #8]
 801363a:	441a      	add	r2, r3
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013640:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013644:	b29b      	uxth	r3, r3
 8013646:	f44f 7220 	mov.w	r2, #640	; 0x280
 801364a:	4619      	mov	r1, r3
 801364c:	2036      	movs	r0, #54	; 0x36
 801364e:	f7fa fdf7 	bl	800e240 <pbuf_alloc>
 8013652:	6338      	str	r0, [r7, #48]	; 0x30
 8013654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013656:	2b00      	cmp	r3, #0
 8013658:	d103      	bne.n	8013662 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801365a:	6978      	ldr	r0, [r7, #20]
 801365c:	f7fb f906 	bl	800e86c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013660:	e136      	b.n	80138d0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013662:	6979      	ldr	r1, [r7, #20]
 8013664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013666:	f7fb f9cf 	bl	800ea08 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801366a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801366c:	f7fb f98c 	bl	800e988 <pbuf_clen>
 8013670:	4603      	mov	r3, r0
 8013672:	461a      	mov	r2, r3
 8013674:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013678:	4413      	add	r3, r2
 801367a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801367e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013682:	2b09      	cmp	r3, #9
 8013684:	d903      	bls.n	801368e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013688:	f7fb f8f0 	bl	800e86c <pbuf_free>
      goto memerr;
 801368c:	e120      	b.n	80138d0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013696:	441a      	add	r2, r3
 8013698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801369c:	9300      	str	r3, [sp, #0]
 801369e:	4613      	mov	r3, r2
 80136a0:	2200      	movs	r2, #0
 80136a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f7ff fc51 	bl	8012f4c <tcp_create_segment>
 80136aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80136ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 810d 	beq.w	80138ce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80136b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d102      	bne.n	80136c0 <tcp_write+0x450>
      queue = seg;
 80136ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136bc:	647b      	str	r3, [r7, #68]	; 0x44
 80136be:	e00c      	b.n	80136da <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80136c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <tcp_write+0x464>
 80136c6:	4b53      	ldr	r3, [pc, #332]	; (8013814 <tcp_write+0x5a4>)
 80136c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80136cc:	4955      	ldr	r1, [pc, #340]	; (8013824 <tcp_write+0x5b4>)
 80136ce:	4853      	ldr	r0, [pc, #332]	; (801381c <tcp_write+0x5ac>)
 80136d0:	f005 f84a 	bl	8018768 <iprintf>
      prev_seg->next = seg;
 80136d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80136d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80136d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80136da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136dc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80136de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136e2:	8b3b      	ldrh	r3, [r7, #24]
 80136e4:	4413      	add	r3, r2
 80136e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80136ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136ee:	88fb      	ldrh	r3, [r7, #6]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	f4ff af3d 	bcc.w	8013570 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80136f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d02c      	beq.n	8013756 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80136fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013702:	e01e      	b.n	8013742 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	891a      	ldrh	r2, [r3, #8]
 8013708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801370a:	4413      	add	r3, r2
 801370c:	b29a      	uxth	r2, r3
 801370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013710:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d110      	bne.n	801373c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013720:	8952      	ldrh	r2, [r2, #10]
 8013722:	4413      	add	r3, r2
 8013724:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013726:	68b9      	ldr	r1, [r7, #8]
 8013728:	4618      	mov	r0, r3
 801372a:	f004 ff43 	bl	80185b4 <memcpy>
        p->len += oversize_used;
 801372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013730:	895a      	ldrh	r2, [r3, #10]
 8013732:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013734:	4413      	add	r3, r2
 8013736:	b29a      	uxth	r2, r3
 8013738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1dd      	bne.n	8013704 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801374a:	891a      	ldrh	r2, [r3, #8]
 801374c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801374e:	4413      	add	r3, r2
 8013750:	b29a      	uxth	r2, r3
 8013752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013754:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013756:	8a7a      	ldrh	r2, [r7, #18]
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801375e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013760:	2b00      	cmp	r3, #0
 8013762:	d018      	beq.n	8013796 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013766:	2b00      	cmp	r3, #0
 8013768:	d106      	bne.n	8013778 <tcp_write+0x508>
 801376a:	4b2a      	ldr	r3, [pc, #168]	; (8013814 <tcp_write+0x5a4>)
 801376c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013770:	492d      	ldr	r1, [pc, #180]	; (8013828 <tcp_write+0x5b8>)
 8013772:	482a      	ldr	r0, [pc, #168]	; (801381c <tcp_write+0x5ac>)
 8013774:	f004 fff8 	bl	8018768 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801377e:	4618      	mov	r0, r3
 8013780:	f7fb f942 	bl	800ea08 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013786:	891a      	ldrh	r2, [r3, #8]
 8013788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801378a:	891b      	ldrh	r3, [r3, #8]
 801378c:	4413      	add	r3, r2
 801378e:	b29a      	uxth	r2, r3
 8013790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013792:	811a      	strh	r2, [r3, #8]
 8013794:	e037      	b.n	8013806 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013798:	2b00      	cmp	r3, #0
 801379a:	d034      	beq.n	8013806 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801379c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d003      	beq.n	80137aa <tcp_write+0x53a>
 80137a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137a4:	685b      	ldr	r3, [r3, #4]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d106      	bne.n	80137b8 <tcp_write+0x548>
 80137aa:	4b1a      	ldr	r3, [pc, #104]	; (8013814 <tcp_write+0x5a4>)
 80137ac:	f240 22e6 	movw	r2, #742	; 0x2e6
 80137b0:	491e      	ldr	r1, [pc, #120]	; (801382c <tcp_write+0x5bc>)
 80137b2:	481a      	ldr	r0, [pc, #104]	; (801381c <tcp_write+0x5ac>)
 80137b4:	f004 ffd8 	bl	8018768 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80137b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80137be:	e009      	b.n	80137d4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80137c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c2:	891a      	ldrh	r2, [r3, #8]
 80137c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137c6:	4413      	add	r3, r2
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137cc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80137ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80137d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d1f1      	bne.n	80137c0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80137dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137de:	891a      	ldrh	r2, [r3, #8]
 80137e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137e2:	4413      	add	r3, r2
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80137ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ec:	895a      	ldrh	r2, [r3, #10]
 80137ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137f0:	4413      	add	r3, r2
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80137f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137fa:	891a      	ldrh	r2, [r3, #8]
 80137fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137fe:	4413      	add	r3, r2
 8013800:	b29a      	uxth	r2, r3
 8013802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013804:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013808:	2b00      	cmp	r3, #0
 801380a:	d111      	bne.n	8013830 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013810:	66da      	str	r2, [r3, #108]	; 0x6c
 8013812:	e010      	b.n	8013836 <tcp_write+0x5c6>
 8013814:	0801c17c 	.word	0x0801c17c
 8013818:	0801c41c 	.word	0x0801c41c
 801381c:	0801c1d0 	.word	0x0801c1d0
 8013820:	0801c45c 	.word	0x0801c45c
 8013824:	0801c46c 	.word	0x0801c46c
 8013828:	0801c480 	.word	0x0801c480
 801382c:	0801c4b8 	.word	0x0801c4b8
  } else {
    last_unsent->next = queue;
 8013830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013834:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801383a:	88fb      	ldrh	r3, [r7, #6]
 801383c:	441a      	add	r2, r3
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013848:	88fb      	ldrh	r3, [r7, #6]
 801384a:	1ad3      	subs	r3, r2, r3
 801384c:	b29a      	uxth	r2, r3
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801385a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013864:	2b00      	cmp	r3, #0
 8013866:	d00e      	beq.n	8013886 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10a      	bne.n	8013886 <tcp_write+0x616>
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013874:	2b00      	cmp	r3, #0
 8013876:	d106      	bne.n	8013886 <tcp_write+0x616>
 8013878:	4b2c      	ldr	r3, [pc, #176]	; (801392c <tcp_write+0x6bc>)
 801387a:	f240 3212 	movw	r2, #786	; 0x312
 801387e:	492c      	ldr	r1, [pc, #176]	; (8013930 <tcp_write+0x6c0>)
 8013880:	482c      	ldr	r0, [pc, #176]	; (8013934 <tcp_write+0x6c4>)
 8013882:	f004 ff71 	bl	8018768 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013888:	2b00      	cmp	r3, #0
 801388a:	d016      	beq.n	80138ba <tcp_write+0x64a>
 801388c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d012      	beq.n	80138ba <tcp_write+0x64a>
 8013894:	797b      	ldrb	r3, [r7, #5]
 8013896:	f003 0302 	and.w	r3, r3, #2
 801389a:	2b00      	cmp	r3, #0
 801389c:	d10d      	bne.n	80138ba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801389e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	899b      	ldrh	r3, [r3, #12]
 80138a4:	b29c      	uxth	r4, r3
 80138a6:	2008      	movs	r0, #8
 80138a8:	f7f9 fc02 	bl	800d0b0 <lwip_htons>
 80138ac:	4603      	mov	r3, r0
 80138ae:	461a      	mov	r2, r3
 80138b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b2:	68db      	ldr	r3, [r3, #12]
 80138b4:	4322      	orrs	r2, r4
 80138b6:	b292      	uxth	r2, r2
 80138b8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e031      	b.n	8013922 <tcp_write+0x6b2>
          goto memerr;
 80138be:	bf00      	nop
 80138c0:	e006      	b.n	80138d0 <tcp_write+0x660>
            goto memerr;
 80138c2:	bf00      	nop
 80138c4:	e004      	b.n	80138d0 <tcp_write+0x660>
        goto memerr;
 80138c6:	bf00      	nop
 80138c8:	e002      	b.n	80138d0 <tcp_write+0x660>
        goto memerr;
 80138ca:	bf00      	nop
 80138cc:	e000      	b.n	80138d0 <tcp_write+0x660>
      goto memerr;
 80138ce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	8b5b      	ldrh	r3, [r3, #26]
 80138d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138d8:	b29a      	uxth	r2, r3
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80138de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d002      	beq.n	80138ea <tcp_write+0x67a>
    pbuf_free(concat_p);
 80138e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80138e6:	f7fa ffc1 	bl	800e86c <pbuf_free>
  }
  if (queue != NULL) {
 80138ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d002      	beq.n	80138f6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80138f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138f2:	f7fc fb6f 	bl	800ffd4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00e      	beq.n	801391e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013904:	2b00      	cmp	r3, #0
 8013906:	d10a      	bne.n	801391e <tcp_write+0x6ae>
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801390c:	2b00      	cmp	r3, #0
 801390e:	d106      	bne.n	801391e <tcp_write+0x6ae>
 8013910:	4b06      	ldr	r3, [pc, #24]	; (801392c <tcp_write+0x6bc>)
 8013912:	f240 3227 	movw	r2, #807	; 0x327
 8013916:	4906      	ldr	r1, [pc, #24]	; (8013930 <tcp_write+0x6c0>)
 8013918:	4806      	ldr	r0, [pc, #24]	; (8013934 <tcp_write+0x6c4>)
 801391a:	f004 ff25 	bl	8018768 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801391e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013922:	4618      	mov	r0, r3
 8013924:	375c      	adds	r7, #92	; 0x5c
 8013926:	46bd      	mov	sp, r7
 8013928:	bd90      	pop	{r4, r7, pc}
 801392a:	bf00      	nop
 801392c:	0801c17c 	.word	0x0801c17c
 8013930:	0801c4f0 	.word	0x0801c4f0
 8013934:	0801c1d0 	.word	0x0801c1d0

08013938 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013938:	b590      	push	{r4, r7, lr}
 801393a:	b08b      	sub	sp, #44	; 0x2c
 801393c:	af02      	add	r7, sp, #8
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	460b      	mov	r3, r1
 8013942:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013944:	2300      	movs	r3, #0
 8013946:	61fb      	str	r3, [r7, #28]
 8013948:	2300      	movs	r3, #0
 801394a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801394c:	2300      	movs	r3, #0
 801394e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d106      	bne.n	8013964 <tcp_split_unsent_seg+0x2c>
 8013956:	4b95      	ldr	r3, [pc, #596]	; (8013bac <tcp_split_unsent_seg+0x274>)
 8013958:	f240 324b 	movw	r2, #843	; 0x34b
 801395c:	4994      	ldr	r1, [pc, #592]	; (8013bb0 <tcp_split_unsent_seg+0x278>)
 801395e:	4895      	ldr	r0, [pc, #596]	; (8013bb4 <tcp_split_unsent_seg+0x27c>)
 8013960:	f004 ff02 	bl	8018768 <iprintf>

  useg = pcb->unsent;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013968:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d102      	bne.n	8013976 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013970:	f04f 33ff 	mov.w	r3, #4294967295
 8013974:	e116      	b.n	8013ba4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013976:	887b      	ldrh	r3, [r7, #2]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d109      	bne.n	8013990 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801397c:	4b8b      	ldr	r3, [pc, #556]	; (8013bac <tcp_split_unsent_seg+0x274>)
 801397e:	f240 3253 	movw	r2, #851	; 0x353
 8013982:	498d      	ldr	r1, [pc, #564]	; (8013bb8 <tcp_split_unsent_seg+0x280>)
 8013984:	488b      	ldr	r0, [pc, #556]	; (8013bb4 <tcp_split_unsent_seg+0x27c>)
 8013986:	f004 feef 	bl	8018768 <iprintf>
    return ERR_VAL;
 801398a:	f06f 0305 	mvn.w	r3, #5
 801398e:	e109      	b.n	8013ba4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	891b      	ldrh	r3, [r3, #8]
 8013994:	887a      	ldrh	r2, [r7, #2]
 8013996:	429a      	cmp	r2, r3
 8013998:	d301      	bcc.n	801399e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801399a:	2300      	movs	r3, #0
 801399c:	e102      	b.n	8013ba4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139a2:	887a      	ldrh	r2, [r7, #2]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d906      	bls.n	80139b6 <tcp_split_unsent_seg+0x7e>
 80139a8:	4b80      	ldr	r3, [pc, #512]	; (8013bac <tcp_split_unsent_seg+0x274>)
 80139aa:	f240 325b 	movw	r2, #859	; 0x35b
 80139ae:	4983      	ldr	r1, [pc, #524]	; (8013bbc <tcp_split_unsent_seg+0x284>)
 80139b0:	4880      	ldr	r0, [pc, #512]	; (8013bb4 <tcp_split_unsent_seg+0x27c>)
 80139b2:	f004 fed9 	bl	8018768 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80139b6:	697b      	ldr	r3, [r7, #20]
 80139b8:	891b      	ldrh	r3, [r3, #8]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <tcp_split_unsent_seg+0x94>
 80139be:	4b7b      	ldr	r3, [pc, #492]	; (8013bac <tcp_split_unsent_seg+0x274>)
 80139c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80139c4:	497e      	ldr	r1, [pc, #504]	; (8013bc0 <tcp_split_unsent_seg+0x288>)
 80139c6:	487b      	ldr	r0, [pc, #492]	; (8013bb4 <tcp_split_unsent_seg+0x27c>)
 80139c8:	f004 fece 	bl	8018768 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	7a9b      	ldrb	r3, [r3, #10]
 80139d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80139d2:	7bfb      	ldrb	r3, [r7, #15]
 80139d4:	009b      	lsls	r3, r3, #2
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	f003 0304 	and.w	r3, r3, #4
 80139dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	891a      	ldrh	r2, [r3, #8]
 80139e2:	887b      	ldrh	r3, [r7, #2]
 80139e4:	1ad3      	subs	r3, r2, r3
 80139e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80139e8:	7bbb      	ldrb	r3, [r7, #14]
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	89bb      	ldrh	r3, [r7, #12]
 80139ee:	4413      	add	r3, r2
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139f6:	4619      	mov	r1, r3
 80139f8:	2036      	movs	r0, #54	; 0x36
 80139fa:	f7fa fc21 	bl	800e240 <pbuf_alloc>
 80139fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	f000 80b7 	beq.w	8013b76 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	891a      	ldrh	r2, [r3, #8]
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	891b      	ldrh	r3, [r3, #8]
 8013a12:	1ad3      	subs	r3, r2, r3
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	887b      	ldrh	r3, [r7, #2]
 8013a18:	4413      	add	r3, r2
 8013a1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	6858      	ldr	r0, [r3, #4]
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	685a      	ldr	r2, [r3, #4]
 8013a24:	7bbb      	ldrb	r3, [r7, #14]
 8013a26:	18d1      	adds	r1, r2, r3
 8013a28:	897b      	ldrh	r3, [r7, #10]
 8013a2a:	89ba      	ldrh	r2, [r7, #12]
 8013a2c:	f7fb f924 	bl	800ec78 <pbuf_copy_partial>
 8013a30:	4603      	mov	r3, r0
 8013a32:	461a      	mov	r2, r3
 8013a34:	89bb      	ldrh	r3, [r7, #12]
 8013a36:	4293      	cmp	r3, r2
 8013a38:	f040 809f 	bne.w	8013b7a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	68db      	ldr	r3, [r3, #12]
 8013a40:	899b      	ldrh	r3, [r3, #12]
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7f9 fb33 	bl	800d0b0 <lwip_htons>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	b2db      	uxtb	r3, r3
 8013a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a52:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013a54:	2300      	movs	r3, #0
 8013a56:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013a58:	7efb      	ldrb	r3, [r7, #27]
 8013a5a:	f003 0308 	and.w	r3, r3, #8
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d007      	beq.n	8013a72 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013a62:	7efb      	ldrb	r3, [r7, #27]
 8013a64:	f023 0308 	bic.w	r3, r3, #8
 8013a68:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013a6a:	7ebb      	ldrb	r3, [r7, #26]
 8013a6c:	f043 0308 	orr.w	r3, r3, #8
 8013a70:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013a72:	7efb      	ldrb	r3, [r7, #27]
 8013a74:	f003 0301 	and.w	r3, r3, #1
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d007      	beq.n	8013a8c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013a7c:	7efb      	ldrb	r3, [r7, #27]
 8013a7e:	f023 0301 	bic.w	r3, r3, #1
 8013a82:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013a84:	7ebb      	ldrb	r3, [r7, #26]
 8013a86:	f043 0301 	orr.w	r3, r3, #1
 8013a8a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7f9 fb21 	bl	800d0da <lwip_htonl>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	887b      	ldrh	r3, [r7, #2]
 8013a9c:	18d1      	adds	r1, r2, r3
 8013a9e:	7eba      	ldrb	r2, [r7, #26]
 8013aa0:	7bfb      	ldrb	r3, [r7, #15]
 8013aa2:	9300      	str	r3, [sp, #0]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	6939      	ldr	r1, [r7, #16]
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff fa4f 	bl	8012f4c <tcp_create_segment>
 8013aae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d063      	beq.n	8013b7e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7fa ff64 	bl	800e988 <pbuf_clen>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	461a      	mov	r2, r3
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013aca:	1a9b      	subs	r3, r3, r2
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	6858      	ldr	r0, [r3, #4]
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	891a      	ldrh	r2, [r3, #8]
 8013ade:	89bb      	ldrh	r3, [r7, #12]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	f7fa fd09 	bl	800e4fc <pbuf_realloc>
  useg->len -= remainder;
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	891a      	ldrh	r2, [r3, #8]
 8013aee:	89bb      	ldrh	r3, [r7, #12]
 8013af0:	1ad3      	subs	r3, r2, r3
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	899b      	ldrh	r3, [r3, #12]
 8013afe:	b29c      	uxth	r4, r3
 8013b00:	7efb      	ldrb	r3, [r7, #27]
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7f9 fad3 	bl	800d0b0 <lwip_htons>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	4322      	orrs	r2, r4
 8013b14:	b292      	uxth	r2, r2
 8013b16:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7fa ff33 	bl	800e988 <pbuf_clen>
 8013b22:	4603      	mov	r3, r0
 8013b24:	461a      	mov	r2, r3
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b2c:	4413      	add	r3, r2
 8013b2e:	b29a      	uxth	r2, r3
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7fa ff24 	bl	800e988 <pbuf_clen>
 8013b40:	4603      	mov	r3, r0
 8013b42:	461a      	mov	r2, r3
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b4a:	4413      	add	r3, r2
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	69fa      	ldr	r2, [r7, #28]
 8013b60:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d103      	bne.n	8013b72 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013b72:	2300      	movs	r3, #0
 8013b74:	e016      	b.n	8013ba4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013b76:	bf00      	nop
 8013b78:	e002      	b.n	8013b80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b7a:	bf00      	nop
 8013b7c:	e000      	b.n	8013b80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b7e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d006      	beq.n	8013b94 <tcp_split_unsent_seg+0x25c>
 8013b86:	4b09      	ldr	r3, [pc, #36]	; (8013bac <tcp_split_unsent_seg+0x274>)
 8013b88:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013b8c:	490d      	ldr	r1, [pc, #52]	; (8013bc4 <tcp_split_unsent_seg+0x28c>)
 8013b8e:	4809      	ldr	r0, [pc, #36]	; (8013bb4 <tcp_split_unsent_seg+0x27c>)
 8013b90:	f004 fdea 	bl	8018768 <iprintf>
  if (p != NULL) {
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d002      	beq.n	8013ba0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013b9a:	6938      	ldr	r0, [r7, #16]
 8013b9c:	f7fa fe66 	bl	800e86c <pbuf_free>
  }

  return ERR_MEM;
 8013ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3724      	adds	r7, #36	; 0x24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd90      	pop	{r4, r7, pc}
 8013bac:	0801c17c 	.word	0x0801c17c
 8013bb0:	0801c510 	.word	0x0801c510
 8013bb4:	0801c1d0 	.word	0x0801c1d0
 8013bb8:	0801c534 	.word	0x0801c534
 8013bbc:	0801c558 	.word	0x0801c558
 8013bc0:	0801c568 	.word	0x0801c568
 8013bc4:	0801c578 	.word	0x0801c578

08013bc8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013bc8:	b590      	push	{r4, r7, lr}
 8013bca:	b085      	sub	sp, #20
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d106      	bne.n	8013be4 <tcp_send_fin+0x1c>
 8013bd6:	4b21      	ldr	r3, [pc, #132]	; (8013c5c <tcp_send_fin+0x94>)
 8013bd8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013bdc:	4920      	ldr	r1, [pc, #128]	; (8013c60 <tcp_send_fin+0x98>)
 8013bde:	4821      	ldr	r0, [pc, #132]	; (8013c64 <tcp_send_fin+0x9c>)
 8013be0:	f004 fdc2 	bl	8018768 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d02e      	beq.n	8013c4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bf0:	60fb      	str	r3, [r7, #12]
 8013bf2:	e002      	b.n	8013bfa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d1f8      	bne.n	8013bf4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	899b      	ldrh	r3, [r3, #12]
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7f9 fa50 	bl	800d0b0 <lwip_htons>
 8013c10:	4603      	mov	r3, r0
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	f003 0307 	and.w	r3, r3, #7
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d116      	bne.n	8013c4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	899b      	ldrh	r3, [r3, #12]
 8013c22:	b29c      	uxth	r4, r3
 8013c24:	2001      	movs	r0, #1
 8013c26:	f7f9 fa43 	bl	800d0b0 <lwip_htons>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	4322      	orrs	r2, r4
 8013c34:	b292      	uxth	r2, r2
 8013c36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	8b5b      	ldrh	r3, [r3, #26]
 8013c3c:	f043 0320 	orr.w	r3, r3, #32
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013c46:	2300      	movs	r3, #0
 8013c48:	e004      	b.n	8013c54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013c4a:	2101      	movs	r1, #1
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f000 f80b 	bl	8013c68 <tcp_enqueue_flags>
 8013c52:	4603      	mov	r3, r0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3714      	adds	r7, #20
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd90      	pop	{r4, r7, pc}
 8013c5c:	0801c17c 	.word	0x0801c17c
 8013c60:	0801c584 	.word	0x0801c584
 8013c64:	0801c1d0 	.word	0x0801c1d0

08013c68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b08a      	sub	sp, #40	; 0x28
 8013c6c:	af02      	add	r7, sp, #8
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	460b      	mov	r3, r1
 8013c72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013c7c:	78fb      	ldrb	r3, [r7, #3]
 8013c7e:	f003 0303 	and.w	r3, r3, #3
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d106      	bne.n	8013c94 <tcp_enqueue_flags+0x2c>
 8013c86:	4b67      	ldr	r3, [pc, #412]	; (8013e24 <tcp_enqueue_flags+0x1bc>)
 8013c88:	f240 4211 	movw	r2, #1041	; 0x411
 8013c8c:	4966      	ldr	r1, [pc, #408]	; (8013e28 <tcp_enqueue_flags+0x1c0>)
 8013c8e:	4867      	ldr	r0, [pc, #412]	; (8013e2c <tcp_enqueue_flags+0x1c4>)
 8013c90:	f004 fd6a 	bl	8018768 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d106      	bne.n	8013ca8 <tcp_enqueue_flags+0x40>
 8013c9a:	4b62      	ldr	r3, [pc, #392]	; (8013e24 <tcp_enqueue_flags+0x1bc>)
 8013c9c:	f240 4213 	movw	r2, #1043	; 0x413
 8013ca0:	4963      	ldr	r1, [pc, #396]	; (8013e30 <tcp_enqueue_flags+0x1c8>)
 8013ca2:	4862      	ldr	r0, [pc, #392]	; (8013e2c <tcp_enqueue_flags+0x1c4>)
 8013ca4:	f004 fd60 	bl	8018768 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013ca8:	78fb      	ldrb	r3, [r7, #3]
 8013caa:	f003 0302 	and.w	r3, r3, #2
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d001      	beq.n	8013cb6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013cb6:	7ffb      	ldrb	r3, [r7, #31]
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	f003 0304 	and.w	r3, r3, #4
 8013cc0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013cc2:	7dfb      	ldrb	r3, [r7, #23]
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cca:	4619      	mov	r1, r3
 8013ccc:	2036      	movs	r0, #54	; 0x36
 8013cce:	f7fa fab7 	bl	800e240 <pbuf_alloc>
 8013cd2:	6138      	str	r0, [r7, #16]
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d109      	bne.n	8013cee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	8b5b      	ldrh	r3, [r3, #26]
 8013cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cec:	e095      	b.n	8013e1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	895a      	ldrh	r2, [r3, #10]
 8013cf2:	7dfb      	ldrb	r3, [r7, #23]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d206      	bcs.n	8013d08 <tcp_enqueue_flags+0xa0>
 8013cfa:	4b4a      	ldr	r3, [pc, #296]	; (8013e24 <tcp_enqueue_flags+0x1bc>)
 8013cfc:	f240 4239 	movw	r2, #1081	; 0x439
 8013d00:	494c      	ldr	r1, [pc, #304]	; (8013e34 <tcp_enqueue_flags+0x1cc>)
 8013d02:	484a      	ldr	r0, [pc, #296]	; (8013e2c <tcp_enqueue_flags+0x1c4>)
 8013d04:	f004 fd30 	bl	8018768 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013d0c:	78fa      	ldrb	r2, [r7, #3]
 8013d0e:	7ffb      	ldrb	r3, [r7, #31]
 8013d10:	9300      	str	r3, [sp, #0]
 8013d12:	460b      	mov	r3, r1
 8013d14:	6939      	ldr	r1, [r7, #16]
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f7ff f918 	bl	8012f4c <tcp_create_segment>
 8013d1c:	60f8      	str	r0, [r7, #12]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d109      	bne.n	8013d38 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	8b5b      	ldrh	r3, [r3, #26]
 8013d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d32:	f04f 33ff 	mov.w	r3, #4294967295
 8013d36:	e070      	b.n	8013e1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	f003 0303 	and.w	r3, r3, #3
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d006      	beq.n	8013d52 <tcp_enqueue_flags+0xea>
 8013d44:	4b37      	ldr	r3, [pc, #220]	; (8013e24 <tcp_enqueue_flags+0x1bc>)
 8013d46:	f240 4242 	movw	r2, #1090	; 0x442
 8013d4a:	493b      	ldr	r1, [pc, #236]	; (8013e38 <tcp_enqueue_flags+0x1d0>)
 8013d4c:	4837      	ldr	r0, [pc, #220]	; (8013e2c <tcp_enqueue_flags+0x1c4>)
 8013d4e:	f004 fd0b 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	891b      	ldrh	r3, [r3, #8]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d006      	beq.n	8013d68 <tcp_enqueue_flags+0x100>
 8013d5a:	4b32      	ldr	r3, [pc, #200]	; (8013e24 <tcp_enqueue_flags+0x1bc>)
 8013d5c:	f240 4243 	movw	r2, #1091	; 0x443
 8013d60:	4936      	ldr	r1, [pc, #216]	; (8013e3c <tcp_enqueue_flags+0x1d4>)
 8013d62:	4832      	ldr	r0, [pc, #200]	; (8013e2c <tcp_enqueue_flags+0x1c4>)
 8013d64:	f004 fd00 	bl	8018768 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d103      	bne.n	8013d78 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	68fa      	ldr	r2, [r7, #12]
 8013d74:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d76:	e00d      	b.n	8013d94 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d7c:	61bb      	str	r3, [r7, #24]
 8013d7e:	e002      	b.n	8013d86 <tcp_enqueue_flags+0x11e>
 8013d80:	69bb      	ldr	r3, [r7, #24]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	61bb      	str	r3, [r7, #24]
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d1f8      	bne.n	8013d80 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013d8e:	69bb      	ldr	r3, [r7, #24]
 8013d90:	68fa      	ldr	r2, [r7, #12]
 8013d92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2200      	movs	r2, #0
 8013d98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013d9c:	78fb      	ldrb	r3, [r7, #3]
 8013d9e:	f003 0302 	and.w	r3, r3, #2
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d104      	bne.n	8013db0 <tcp_enqueue_flags+0x148>
 8013da6:	78fb      	ldrb	r3, [r7, #3]
 8013da8:	f003 0301 	and.w	r3, r3, #1
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d004      	beq.n	8013dba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013db4:	1c5a      	adds	r2, r3, #1
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013dba:	78fb      	ldrb	r3, [r7, #3]
 8013dbc:	f003 0301 	and.w	r3, r3, #1
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d006      	beq.n	8013dd2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	8b5b      	ldrh	r3, [r3, #26]
 8013dc8:	f043 0320 	orr.w	r3, r3, #32
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7fa fdd6 	bl	800e988 <pbuf_clen>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	461a      	mov	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013de6:	4413      	add	r3, r2
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00e      	beq.n	8013e18 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d10a      	bne.n	8013e18 <tcp_enqueue_flags+0x1b0>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <tcp_enqueue_flags+0x1b0>
 8013e0a:	4b06      	ldr	r3, [pc, #24]	; (8013e24 <tcp_enqueue_flags+0x1bc>)
 8013e0c:	f240 4265 	movw	r2, #1125	; 0x465
 8013e10:	490b      	ldr	r1, [pc, #44]	; (8013e40 <tcp_enqueue_flags+0x1d8>)
 8013e12:	4806      	ldr	r0, [pc, #24]	; (8013e2c <tcp_enqueue_flags+0x1c4>)
 8013e14:	f004 fca8 	bl	8018768 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3720      	adds	r7, #32
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}
 8013e22:	bf00      	nop
 8013e24:	0801c17c 	.word	0x0801c17c
 8013e28:	0801c5a0 	.word	0x0801c5a0
 8013e2c:	0801c1d0 	.word	0x0801c1d0
 8013e30:	0801c5f8 	.word	0x0801c5f8
 8013e34:	0801c618 	.word	0x0801c618
 8013e38:	0801c654 	.word	0x0801c654
 8013e3c:	0801c66c 	.word	0x0801c66c
 8013e40:	0801c698 	.word	0x0801c698

08013e44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013e44:	b5b0      	push	{r4, r5, r7, lr}
 8013e46:	b08a      	sub	sp, #40	; 0x28
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d106      	bne.n	8013e60 <tcp_output+0x1c>
 8013e52:	4b9e      	ldr	r3, [pc, #632]	; (80140cc <tcp_output+0x288>)
 8013e54:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013e58:	499d      	ldr	r1, [pc, #628]	; (80140d0 <tcp_output+0x28c>)
 8013e5a:	489e      	ldr	r0, [pc, #632]	; (80140d4 <tcp_output+0x290>)
 8013e5c:	f004 fc84 	bl	8018768 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	7d1b      	ldrb	r3, [r3, #20]
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d106      	bne.n	8013e76 <tcp_output+0x32>
 8013e68:	4b98      	ldr	r3, [pc, #608]	; (80140cc <tcp_output+0x288>)
 8013e6a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013e6e:	499a      	ldr	r1, [pc, #616]	; (80140d8 <tcp_output+0x294>)
 8013e70:	4898      	ldr	r0, [pc, #608]	; (80140d4 <tcp_output+0x290>)
 8013e72:	f004 fc79 	bl	8018768 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013e76:	4b99      	ldr	r3, [pc, #612]	; (80140dc <tcp_output+0x298>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d101      	bne.n	8013e84 <tcp_output+0x40>
    return ERR_OK;
 8013e80:	2300      	movs	r3, #0
 8013e82:	e1ce      	b.n	8014222 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e90:	4293      	cmp	r3, r2
 8013e92:	bf28      	it	cs
 8013e94:	4613      	movcs	r3, r2
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d10b      	bne.n	8013ebe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	8b5b      	ldrh	r3, [r3, #26]
 8013eaa:	f003 0302 	and.w	r3, r3, #2
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	f000 81aa 	beq.w	8014208 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 fdcb 	bl	8014a50 <tcp_send_empty_ack>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	e1b1      	b.n	8014222 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013ebe:	6879      	ldr	r1, [r7, #4]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7ff f824 	bl	8012f14 <tcp_route>
 8013ecc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d102      	bne.n	8013eda <tcp_output+0x96>
    return ERR_RTE;
 8013ed4:	f06f 0303 	mvn.w	r3, #3
 8013ed8:	e1a3      	b.n	8014222 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d003      	beq.n	8013ee8 <tcp_output+0xa4>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d111      	bne.n	8013f0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d002      	beq.n	8013ef4 <tcp_output+0xb0>
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	e000      	b.n	8013ef6 <tcp_output+0xb2>
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d102      	bne.n	8013f04 <tcp_output+0xc0>
      return ERR_RTE;
 8013efe:	f06f 0303 	mvn.w	r3, #3
 8013f02:	e18e      	b.n	8014222 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7f9 f8e1 	bl	800d0da <lwip_htonl>
 8013f18:	4602      	mov	r2, r0
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f1e:	1ad3      	subs	r3, r2, r3
 8013f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f22:	8912      	ldrh	r2, [r2, #8]
 8013f24:	4413      	add	r3, r2
 8013f26:	69ba      	ldr	r2, [r7, #24]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d227      	bcs.n	8013f7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f32:	461a      	mov	r2, r3
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d114      	bne.n	8013f64 <tcp_output+0x120>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d110      	bne.n	8013f64 <tcp_output+0x120>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d10b      	bne.n	8013f64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2201      	movs	r2, #1
 8013f58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	8b5b      	ldrh	r3, [r3, #26]
 8013f68:	f003 0302 	and.w	r3, r3, #2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 814d 	beq.w	801420c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 fd6c 	bl	8014a50 <tcp_send_empty_ack>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	e152      	b.n	8014222 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013f8a:	6a3b      	ldr	r3, [r7, #32]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	f000 811c 	beq.w	80141ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013f92:	e002      	b.n	8013f9a <tcp_output+0x156>
 8013f94:	6a3b      	ldr	r3, [r7, #32]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	623b      	str	r3, [r7, #32]
 8013f9a:	6a3b      	ldr	r3, [r7, #32]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d1f8      	bne.n	8013f94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013fa2:	e112      	b.n	80141ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	899b      	ldrh	r3, [r3, #12]
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7f9 f87f 	bl	800d0b0 <lwip_htons>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	f003 0304 	and.w	r3, r3, #4
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d006      	beq.n	8013fcc <tcp_output+0x188>
 8013fbe:	4b43      	ldr	r3, [pc, #268]	; (80140cc <tcp_output+0x288>)
 8013fc0:	f240 5236 	movw	r2, #1334	; 0x536
 8013fc4:	4946      	ldr	r1, [pc, #280]	; (80140e0 <tcp_output+0x29c>)
 8013fc6:	4843      	ldr	r0, [pc, #268]	; (80140d4 <tcp_output+0x290>)
 8013fc8:	f004 fbce 	bl	8018768 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d01f      	beq.n	8014014 <tcp_output+0x1d0>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	8b5b      	ldrh	r3, [r3, #26]
 8013fd8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d119      	bne.n	8014014 <tcp_output+0x1d0>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00b      	beq.n	8014000 <tcp_output+0x1bc>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d110      	bne.n	8014014 <tcp_output+0x1d0>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff6:	891a      	ldrh	r2, [r3, #8]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d209      	bcs.n	8014014 <tcp_output+0x1d0>
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014006:	2b00      	cmp	r3, #0
 8014008:	d004      	beq.n	8014014 <tcp_output+0x1d0>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014010:	2b08      	cmp	r3, #8
 8014012:	d901      	bls.n	8014018 <tcp_output+0x1d4>
 8014014:	2301      	movs	r3, #1
 8014016:	e000      	b.n	801401a <tcp_output+0x1d6>
 8014018:	2300      	movs	r3, #0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d106      	bne.n	801402c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	8b5b      	ldrh	r3, [r3, #26]
 8014022:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014026:	2b00      	cmp	r3, #0
 8014028:	f000 80e4 	beq.w	80141f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	7d1b      	ldrb	r3, [r3, #20]
 8014030:	2b02      	cmp	r3, #2
 8014032:	d00d      	beq.n	8014050 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	899b      	ldrh	r3, [r3, #12]
 801403a:	b29c      	uxth	r4, r3
 801403c:	2010      	movs	r0, #16
 801403e:	f7f9 f837 	bl	800d0b0 <lwip_htons>
 8014042:	4603      	mov	r3, r0
 8014044:	461a      	mov	r2, r3
 8014046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	4322      	orrs	r2, r4
 801404c:	b292      	uxth	r2, r2
 801404e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014050:	697a      	ldr	r2, [r7, #20]
 8014052:	6879      	ldr	r1, [r7, #4]
 8014054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014056:	f000 f909 	bl	801426c <tcp_output_segment>
 801405a:	4603      	mov	r3, r0
 801405c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d009      	beq.n	801407a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	8b5b      	ldrh	r3, [r3, #26]
 801406a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801406e:	b29a      	uxth	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	835a      	strh	r2, [r3, #26]
      return err;
 8014074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014078:	e0d3      	b.n	8014222 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	7d1b      	ldrb	r3, [r3, #20]
 8014086:	2b02      	cmp	r3, #2
 8014088:	d006      	beq.n	8014098 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	8b5b      	ldrh	r3, [r3, #26]
 801408e:	f023 0303 	bic.w	r3, r3, #3
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	685b      	ldr	r3, [r3, #4]
 801409e:	4618      	mov	r0, r3
 80140a0:	f7f9 f81b 	bl	800d0da <lwip_htonl>
 80140a4:	4604      	mov	r4, r0
 80140a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a8:	891b      	ldrh	r3, [r3, #8]
 80140aa:	461d      	mov	r5, r3
 80140ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	899b      	ldrh	r3, [r3, #12]
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7f8 fffb 	bl	800d0b0 <lwip_htons>
 80140ba:	4603      	mov	r3, r0
 80140bc:	b2db      	uxtb	r3, r3
 80140be:	f003 0303 	and.w	r3, r3, #3
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d00e      	beq.n	80140e4 <tcp_output+0x2a0>
 80140c6:	2301      	movs	r3, #1
 80140c8:	e00d      	b.n	80140e6 <tcp_output+0x2a2>
 80140ca:	bf00      	nop
 80140cc:	0801c17c 	.word	0x0801c17c
 80140d0:	0801c6c0 	.word	0x0801c6c0
 80140d4:	0801c1d0 	.word	0x0801c1d0
 80140d8:	0801c6d8 	.word	0x0801c6d8
 80140dc:	2000db64 	.word	0x2000db64
 80140e0:	0801c700 	.word	0x0801c700
 80140e4:	2300      	movs	r3, #0
 80140e6:	442b      	add	r3, r5
 80140e8:	4423      	add	r3, r4
 80140ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	da02      	bge.n	80140fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80140fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014100:	891b      	ldrh	r3, [r3, #8]
 8014102:	461c      	mov	r4, r3
 8014104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	899b      	ldrh	r3, [r3, #12]
 801410a:	b29b      	uxth	r3, r3
 801410c:	4618      	mov	r0, r3
 801410e:	f7f8 ffcf 	bl	800d0b0 <lwip_htons>
 8014112:	4603      	mov	r3, r0
 8014114:	b2db      	uxtb	r3, r3
 8014116:	f003 0303 	and.w	r3, r3, #3
 801411a:	2b00      	cmp	r3, #0
 801411c:	d001      	beq.n	8014122 <tcp_output+0x2de>
 801411e:	2301      	movs	r3, #1
 8014120:	e000      	b.n	8014124 <tcp_output+0x2e0>
 8014122:	2300      	movs	r3, #0
 8014124:	4423      	add	r3, r4
 8014126:	2b00      	cmp	r3, #0
 8014128:	d049      	beq.n	80141be <tcp_output+0x37a>
      seg->next = NULL;
 801412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412c:	2200      	movs	r2, #0
 801412e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014134:	2b00      	cmp	r3, #0
 8014136:	d105      	bne.n	8014144 <tcp_output+0x300>
        pcb->unacked = seg;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801413c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014140:	623b      	str	r3, [r7, #32]
 8014142:	e03f      	b.n	80141c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014146:	68db      	ldr	r3, [r3, #12]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	4618      	mov	r0, r3
 801414c:	f7f8 ffc5 	bl	800d0da <lwip_htonl>
 8014150:	4604      	mov	r4, r0
 8014152:	6a3b      	ldr	r3, [r7, #32]
 8014154:	68db      	ldr	r3, [r3, #12]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	4618      	mov	r0, r3
 801415a:	f7f8 ffbe 	bl	800d0da <lwip_htonl>
 801415e:	4603      	mov	r3, r0
 8014160:	1ae3      	subs	r3, r4, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	da24      	bge.n	80141b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	3370      	adds	r3, #112	; 0x70
 801416a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801416c:	e002      	b.n	8014174 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014174:	69fb      	ldr	r3, [r7, #28]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d011      	beq.n	80141a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	4618      	mov	r0, r3
 8014186:	f7f8 ffa8 	bl	800d0da <lwip_htonl>
 801418a:	4604      	mov	r4, r0
 801418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	4618      	mov	r0, r3
 8014194:	f7f8 ffa1 	bl	800d0da <lwip_htonl>
 8014198:	4603      	mov	r3, r0
 801419a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801419c:	2b00      	cmp	r3, #0
 801419e:	dbe6      	blt.n	801416e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80141a0:	69fb      	ldr	r3, [r7, #28]
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ac:	601a      	str	r2, [r3, #0]
 80141ae:	e009      	b.n	80141c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80141b0:	6a3b      	ldr	r3, [r7, #32]
 80141b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80141b6:	6a3b      	ldr	r3, [r7, #32]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	623b      	str	r3, [r7, #32]
 80141bc:	e002      	b.n	80141c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80141be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141c0:	f7fb ff1d 	bl	800fffe <tcp_seg_free>
    }
    seg = pcb->unsent;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80141ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d012      	beq.n	80141f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7f8 ff7f 	bl	800d0da <lwip_htonl>
 80141dc:	4602      	mov	r2, r0
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141e2:	1ad3      	subs	r3, r2, r3
 80141e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141e6:	8912      	ldrh	r2, [r2, #8]
 80141e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80141ea:	69ba      	ldr	r2, [r7, #24]
 80141ec:	429a      	cmp	r2, r3
 80141ee:	f4bf aed9 	bcs.w	8013fa4 <tcp_output+0x160>
 80141f2:	e000      	b.n	80141f6 <tcp_output+0x3b2>
      break;
 80141f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d108      	bne.n	8014210 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2200      	movs	r2, #0
 8014202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014206:	e004      	b.n	8014212 <tcp_output+0x3ce>
    goto output_done;
 8014208:	bf00      	nop
 801420a:	e002      	b.n	8014212 <tcp_output+0x3ce>
    goto output_done;
 801420c:	bf00      	nop
 801420e:	e000      	b.n	8014212 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014210:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	8b5b      	ldrh	r3, [r3, #26]
 8014216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801421a:	b29a      	uxth	r2, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014220:	2300      	movs	r3, #0
}
 8014222:	4618      	mov	r0, r3
 8014224:	3728      	adds	r7, #40	; 0x28
 8014226:	46bd      	mov	sp, r7
 8014228:	bdb0      	pop	{r4, r5, r7, pc}
 801422a:	bf00      	nop

0801422c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d106      	bne.n	8014248 <tcp_output_segment_busy+0x1c>
 801423a:	4b09      	ldr	r3, [pc, #36]	; (8014260 <tcp_output_segment_busy+0x34>)
 801423c:	f240 529a 	movw	r2, #1434	; 0x59a
 8014240:	4908      	ldr	r1, [pc, #32]	; (8014264 <tcp_output_segment_busy+0x38>)
 8014242:	4809      	ldr	r0, [pc, #36]	; (8014268 <tcp_output_segment_busy+0x3c>)
 8014244:	f004 fa90 	bl	8018768 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	7b9b      	ldrb	r3, [r3, #14]
 801424e:	2b01      	cmp	r3, #1
 8014250:	d001      	beq.n	8014256 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014252:	2301      	movs	r3, #1
 8014254:	e000      	b.n	8014258 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014256:	2300      	movs	r3, #0
}
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	0801c17c 	.word	0x0801c17c
 8014264:	0801c718 	.word	0x0801c718
 8014268:	0801c1d0 	.word	0x0801c1d0

0801426c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801426c:	b5b0      	push	{r4, r5, r7, lr}
 801426e:	b08c      	sub	sp, #48	; 0x30
 8014270:	af04      	add	r7, sp, #16
 8014272:	60f8      	str	r0, [r7, #12]
 8014274:	60b9      	str	r1, [r7, #8]
 8014276:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d106      	bne.n	801428c <tcp_output_segment+0x20>
 801427e:	4b63      	ldr	r3, [pc, #396]	; (801440c <tcp_output_segment+0x1a0>)
 8014280:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014284:	4962      	ldr	r1, [pc, #392]	; (8014410 <tcp_output_segment+0x1a4>)
 8014286:	4863      	ldr	r0, [pc, #396]	; (8014414 <tcp_output_segment+0x1a8>)
 8014288:	f004 fa6e 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d106      	bne.n	80142a0 <tcp_output_segment+0x34>
 8014292:	4b5e      	ldr	r3, [pc, #376]	; (801440c <tcp_output_segment+0x1a0>)
 8014294:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014298:	495f      	ldr	r1, [pc, #380]	; (8014418 <tcp_output_segment+0x1ac>)
 801429a:	485e      	ldr	r0, [pc, #376]	; (8014414 <tcp_output_segment+0x1a8>)
 801429c:	f004 fa64 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d106      	bne.n	80142b4 <tcp_output_segment+0x48>
 80142a6:	4b59      	ldr	r3, [pc, #356]	; (801440c <tcp_output_segment+0x1a0>)
 80142a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80142ac:	495b      	ldr	r1, [pc, #364]	; (801441c <tcp_output_segment+0x1b0>)
 80142ae:	4859      	ldr	r0, [pc, #356]	; (8014414 <tcp_output_segment+0x1a8>)
 80142b0:	f004 fa5a 	bl	8018768 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f7ff ffb9 	bl	801422c <tcp_output_segment_busy>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d001      	beq.n	80142c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80142c0:	2300      	movs	r3, #0
 80142c2:	e09f      	b.n	8014404 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	68dc      	ldr	r4, [r3, #12]
 80142cc:	4610      	mov	r0, r2
 80142ce:	f7f8 ff04 	bl	800d0da <lwip_htonl>
 80142d2:	4603      	mov	r3, r0
 80142d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	68dc      	ldr	r4, [r3, #12]
 80142de:	4610      	mov	r0, r2
 80142e0:	f7f8 fee6 	bl	800d0b0 <lwip_htons>
 80142e4:	4603      	mov	r3, r0
 80142e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ec:	68ba      	ldr	r2, [r7, #8]
 80142ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80142f0:	441a      	add	r2, r3
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	3314      	adds	r3, #20
 80142fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	7a9b      	ldrb	r3, [r3, #10]
 8014302:	f003 0301 	and.w	r3, r3, #1
 8014306:	2b00      	cmp	r3, #0
 8014308:	d015      	beq.n	8014336 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	3304      	adds	r3, #4
 801430e:	461a      	mov	r2, r3
 8014310:	6879      	ldr	r1, [r7, #4]
 8014312:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014316:	f7fc fa37 	bl	8010788 <tcp_eff_send_mss_netif>
 801431a:	4603      	mov	r3, r0
 801431c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801431e:	8b7b      	ldrh	r3, [r7, #26]
 8014320:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014324:	4618      	mov	r0, r3
 8014326:	f7f8 fed8 	bl	800d0da <lwip_htonl>
 801432a:	4602      	mov	r2, r0
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	3304      	adds	r3, #4
 8014334:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801433c:	2b00      	cmp	r3, #0
 801433e:	da02      	bge.n	8014346 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	2200      	movs	r2, #0
 8014344:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801434a:	2b00      	cmp	r3, #0
 801434c:	d10c      	bne.n	8014368 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801434e:	4b34      	ldr	r3, [pc, #208]	; (8014420 <tcp_output_segment+0x1b4>)
 8014350:	681a      	ldr	r2, [r3, #0]
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	4618      	mov	r0, r3
 801435e:	f7f8 febc 	bl	800d0da <lwip_htonl>
 8014362:	4602      	mov	r2, r0
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	68da      	ldr	r2, [r3, #12]
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	8959      	ldrh	r1, [r3, #10]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	8b3a      	ldrh	r2, [r7, #24]
 8014382:	1a8a      	subs	r2, r1, r2
 8014384:	b292      	uxth	r2, r2
 8014386:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	685b      	ldr	r3, [r3, #4]
 801438c:	8919      	ldrh	r1, [r3, #8]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	8b3a      	ldrh	r2, [r7, #24]
 8014394:	1a8a      	subs	r2, r1, r2
 8014396:	b292      	uxth	r2, r2
 8014398:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	68fa      	ldr	r2, [r7, #12]
 80143a0:	68d2      	ldr	r2, [r2, #12]
 80143a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	68db      	ldr	r3, [r3, #12]
 80143a8:	2200      	movs	r2, #0
 80143aa:	741a      	strb	r2, [r3, #16]
 80143ac:	2200      	movs	r2, #0
 80143ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	68db      	ldr	r3, [r3, #12]
 80143b4:	f103 0214 	add.w	r2, r3, #20
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	7a9b      	ldrb	r3, [r3, #10]
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	f003 0304 	and.w	r3, r3, #4
 80143c2:	4413      	add	r3, r2
 80143c4:	69fa      	ldr	r2, [r7, #28]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d006      	beq.n	80143d8 <tcp_output_segment+0x16c>
 80143ca:	4b10      	ldr	r3, [pc, #64]	; (801440c <tcp_output_segment+0x1a0>)
 80143cc:	f240 621c 	movw	r2, #1564	; 0x61c
 80143d0:	4914      	ldr	r1, [pc, #80]	; (8014424 <tcp_output_segment+0x1b8>)
 80143d2:	4810      	ldr	r0, [pc, #64]	; (8014414 <tcp_output_segment+0x1a8>)
 80143d4:	f004 f9c8 	bl	8018768 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	6858      	ldr	r0, [r3, #4]
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	1d1c      	adds	r4, r3, #4
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	7add      	ldrb	r5, [r3, #11]
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	7a9b      	ldrb	r3, [r3, #10]
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	9202      	str	r2, [sp, #8]
 80143ee:	2206      	movs	r2, #6
 80143f0:	9201      	str	r2, [sp, #4]
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	462b      	mov	r3, r5
 80143f6:	4622      	mov	r2, r4
 80143f8:	f002 fd96 	bl	8016f28 <ip4_output_if>
 80143fc:	4603      	mov	r3, r0
 80143fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014400:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014404:	4618      	mov	r0, r3
 8014406:	3720      	adds	r7, #32
 8014408:	46bd      	mov	sp, r7
 801440a:	bdb0      	pop	{r4, r5, r7, pc}
 801440c:	0801c17c 	.word	0x0801c17c
 8014410:	0801c740 	.word	0x0801c740
 8014414:	0801c1d0 	.word	0x0801c1d0
 8014418:	0801c760 	.word	0x0801c760
 801441c:	0801c780 	.word	0x0801c780
 8014420:	2000db54 	.word	0x2000db54
 8014424:	0801c7a4 	.word	0x0801c7a4

08014428 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014428:	b5b0      	push	{r4, r5, r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d106      	bne.n	8014444 <tcp_rexmit_rto_prepare+0x1c>
 8014436:	4b31      	ldr	r3, [pc, #196]	; (80144fc <tcp_rexmit_rto_prepare+0xd4>)
 8014438:	f240 6263 	movw	r2, #1635	; 0x663
 801443c:	4930      	ldr	r1, [pc, #192]	; (8014500 <tcp_rexmit_rto_prepare+0xd8>)
 801443e:	4831      	ldr	r0, [pc, #196]	; (8014504 <tcp_rexmit_rto_prepare+0xdc>)
 8014440:	f004 f992 	bl	8018768 <iprintf>

  if (pcb->unacked == NULL) {
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014448:	2b00      	cmp	r3, #0
 801444a:	d102      	bne.n	8014452 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801444c:	f06f 0305 	mvn.w	r3, #5
 8014450:	e050      	b.n	80144f4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014456:	60fb      	str	r3, [r7, #12]
 8014458:	e00b      	b.n	8014472 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f7ff fee6 	bl	801422c <tcp_output_segment_busy>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d002      	beq.n	801446c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014466:	f06f 0305 	mvn.w	r3, #5
 801446a:	e043      	b.n	80144f4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	60fb      	str	r3, [r7, #12]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d1ef      	bne.n	801445a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801447a:	68f8      	ldr	r0, [r7, #12]
 801447c:	f7ff fed6 	bl	801422c <tcp_output_segment_busy>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d002      	beq.n	801448c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014486:	f06f 0305 	mvn.w	r3, #5
 801448a:	e033      	b.n	80144f4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2200      	movs	r2, #0
 80144a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	8b5b      	ldrh	r3, [r3, #26]
 80144a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80144aa:	b29a      	uxth	r2, r3
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7f8 fe0f 	bl	800d0da <lwip_htonl>
 80144bc:	4604      	mov	r4, r0
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	891b      	ldrh	r3, [r3, #8]
 80144c2:	461d      	mov	r5, r3
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	899b      	ldrh	r3, [r3, #12]
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7f8 fdef 	bl	800d0b0 <lwip_htons>
 80144d2:	4603      	mov	r3, r0
 80144d4:	b2db      	uxtb	r3, r3
 80144d6:	f003 0303 	and.w	r3, r3, #3
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d001      	beq.n	80144e2 <tcp_rexmit_rto_prepare+0xba>
 80144de:	2301      	movs	r3, #1
 80144e0:	e000      	b.n	80144e4 <tcp_rexmit_rto_prepare+0xbc>
 80144e2:	2300      	movs	r3, #0
 80144e4:	442b      	add	r3, r5
 80144e6:	18e2      	adds	r2, r4, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2200      	movs	r2, #0
 80144f0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bdb0      	pop	{r4, r5, r7, pc}
 80144fc:	0801c17c 	.word	0x0801c17c
 8014500:	0801c7b8 	.word	0x0801c7b8
 8014504:	0801c1d0 	.word	0x0801c1d0

08014508 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b082      	sub	sp, #8
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d106      	bne.n	8014524 <tcp_rexmit_rto_commit+0x1c>
 8014516:	4b0d      	ldr	r3, [pc, #52]	; (801454c <tcp_rexmit_rto_commit+0x44>)
 8014518:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801451c:	490c      	ldr	r1, [pc, #48]	; (8014550 <tcp_rexmit_rto_commit+0x48>)
 801451e:	480d      	ldr	r0, [pc, #52]	; (8014554 <tcp_rexmit_rto_commit+0x4c>)
 8014520:	f004 f922 	bl	8018768 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801452a:	2bff      	cmp	r3, #255	; 0xff
 801452c:	d007      	beq.n	801453e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014534:	3301      	adds	r3, #1
 8014536:	b2da      	uxtb	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7ff fc80 	bl	8013e44 <tcp_output>
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	0801c17c 	.word	0x0801c17c
 8014550:	0801c7dc 	.word	0x0801c7dc
 8014554:	0801c1d0 	.word	0x0801c1d0

08014558 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <tcp_rexmit_rto+0x1c>
 8014566:	4b0a      	ldr	r3, [pc, #40]	; (8014590 <tcp_rexmit_rto+0x38>)
 8014568:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801456c:	4909      	ldr	r1, [pc, #36]	; (8014594 <tcp_rexmit_rto+0x3c>)
 801456e:	480a      	ldr	r0, [pc, #40]	; (8014598 <tcp_rexmit_rto+0x40>)
 8014570:	f004 f8fa 	bl	8018768 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f7ff ff57 	bl	8014428 <tcp_rexmit_rto_prepare>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d102      	bne.n	8014586 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff ffc1 	bl	8014508 <tcp_rexmit_rto_commit>
  }
}
 8014586:	bf00      	nop
 8014588:	3708      	adds	r7, #8
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	0801c17c 	.word	0x0801c17c
 8014594:	0801c800 	.word	0x0801c800
 8014598:	0801c1d0 	.word	0x0801c1d0

0801459c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801459c:	b590      	push	{r4, r7, lr}
 801459e:	b085      	sub	sp, #20
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d106      	bne.n	80145b8 <tcp_rexmit+0x1c>
 80145aa:	4b2f      	ldr	r3, [pc, #188]	; (8014668 <tcp_rexmit+0xcc>)
 80145ac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80145b0:	492e      	ldr	r1, [pc, #184]	; (801466c <tcp_rexmit+0xd0>)
 80145b2:	482f      	ldr	r0, [pc, #188]	; (8014670 <tcp_rexmit+0xd4>)
 80145b4:	f004 f8d8 	bl	8018768 <iprintf>

  if (pcb->unacked == NULL) {
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d102      	bne.n	80145c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80145c0:	f06f 0305 	mvn.w	r3, #5
 80145c4:	e04c      	b.n	8014660 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80145cc:	68b8      	ldr	r0, [r7, #8]
 80145ce:	f7ff fe2d 	bl	801422c <tcp_output_segment_busy>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d002      	beq.n	80145de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80145d8:	f06f 0305 	mvn.w	r3, #5
 80145dc:	e040      	b.n	8014660 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	336c      	adds	r3, #108	; 0x6c
 80145ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80145ec:	e002      	b.n	80145f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d011      	beq.n	8014620 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	4618      	mov	r0, r3
 8014606:	f7f8 fd68 	bl	800d0da <lwip_htonl>
 801460a:	4604      	mov	r4, r0
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	4618      	mov	r0, r3
 8014614:	f7f8 fd61 	bl	800d0da <lwip_htonl>
 8014618:	4603      	mov	r3, r0
 801461a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801461c:	2b00      	cmp	r3, #0
 801461e:	dbe6      	blt.n	80145ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	68ba      	ldr	r2, [r7, #8]
 801462c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d103      	bne.n	801463e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2200      	movs	r2, #0
 801463a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014644:	2bff      	cmp	r3, #255	; 0xff
 8014646:	d007      	beq.n	8014658 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801464e:	3301      	adds	r3, #1
 8014650:	b2da      	uxtb	r2, r3
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801465e:	2300      	movs	r3, #0
}
 8014660:	4618      	mov	r0, r3
 8014662:	3714      	adds	r7, #20
 8014664:	46bd      	mov	sp, r7
 8014666:	bd90      	pop	{r4, r7, pc}
 8014668:	0801c17c 	.word	0x0801c17c
 801466c:	0801c81c 	.word	0x0801c81c
 8014670:	0801c1d0 	.word	0x0801c1d0

08014674 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d106      	bne.n	8014690 <tcp_rexmit_fast+0x1c>
 8014682:	4b2a      	ldr	r3, [pc, #168]	; (801472c <tcp_rexmit_fast+0xb8>)
 8014684:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014688:	4929      	ldr	r1, [pc, #164]	; (8014730 <tcp_rexmit_fast+0xbc>)
 801468a:	482a      	ldr	r0, [pc, #168]	; (8014734 <tcp_rexmit_fast+0xc0>)
 801468c:	f004 f86c 	bl	8018768 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014694:	2b00      	cmp	r3, #0
 8014696:	d045      	beq.n	8014724 <tcp_rexmit_fast+0xb0>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	8b5b      	ldrh	r3, [r3, #26]
 801469c:	f003 0304 	and.w	r3, r3, #4
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d13f      	bne.n	8014724 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7ff ff79 	bl	801459c <tcp_rexmit>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d139      	bne.n	8014724 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80146bc:	4293      	cmp	r3, r2
 80146be:	bf28      	it	cs
 80146c0:	4613      	movcs	r3, r2
 80146c2:	b29b      	uxth	r3, r3
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	da00      	bge.n	80146ca <tcp_rexmit_fast+0x56>
 80146c8:	3301      	adds	r3, #1
 80146ca:	105b      	asrs	r3, r3, #1
 80146cc:	b29a      	uxth	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80146da:	461a      	mov	r2, r3
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d206      	bcs.n	80146f4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146fe:	4619      	mov	r1, r3
 8014700:	0049      	lsls	r1, r1, #1
 8014702:	440b      	add	r3, r1
 8014704:	b29b      	uxth	r3, r3
 8014706:	4413      	add	r3, r2
 8014708:	b29a      	uxth	r2, r3
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	8b5b      	ldrh	r3, [r3, #26]
 8014714:	f043 0304 	orr.w	r3, r3, #4
 8014718:	b29a      	uxth	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2200      	movs	r2, #0
 8014722:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014724:	bf00      	nop
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	0801c17c 	.word	0x0801c17c
 8014730:	0801c834 	.word	0x0801c834
 8014734:	0801c1d0 	.word	0x0801c1d0

08014738 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	60f8      	str	r0, [r7, #12]
 8014740:	607b      	str	r3, [r7, #4]
 8014742:	460b      	mov	r3, r1
 8014744:	817b      	strh	r3, [r7, #10]
 8014746:	4613      	mov	r3, r2
 8014748:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801474a:	897a      	ldrh	r2, [r7, #10]
 801474c:	893b      	ldrh	r3, [r7, #8]
 801474e:	4413      	add	r3, r2
 8014750:	b29b      	uxth	r3, r3
 8014752:	3314      	adds	r3, #20
 8014754:	b29b      	uxth	r3, r3
 8014756:	f44f 7220 	mov.w	r2, #640	; 0x280
 801475a:	4619      	mov	r1, r3
 801475c:	2022      	movs	r0, #34	; 0x22
 801475e:	f7f9 fd6f 	bl	800e240 <pbuf_alloc>
 8014762:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d04d      	beq.n	8014806 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801476a:	897b      	ldrh	r3, [r7, #10]
 801476c:	3313      	adds	r3, #19
 801476e:	697a      	ldr	r2, [r7, #20]
 8014770:	8952      	ldrh	r2, [r2, #10]
 8014772:	4293      	cmp	r3, r2
 8014774:	db06      	blt.n	8014784 <tcp_output_alloc_header_common+0x4c>
 8014776:	4b26      	ldr	r3, [pc, #152]	; (8014810 <tcp_output_alloc_header_common+0xd8>)
 8014778:	f240 7223 	movw	r2, #1827	; 0x723
 801477c:	4925      	ldr	r1, [pc, #148]	; (8014814 <tcp_output_alloc_header_common+0xdc>)
 801477e:	4826      	ldr	r0, [pc, #152]	; (8014818 <tcp_output_alloc_header_common+0xe0>)
 8014780:	f003 fff2 	bl	8018768 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801478a:	8c3b      	ldrh	r3, [r7, #32]
 801478c:	4618      	mov	r0, r3
 801478e:	f7f8 fc8f 	bl	800d0b0 <lwip_htons>
 8014792:	4603      	mov	r3, r0
 8014794:	461a      	mov	r2, r3
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801479a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801479c:	4618      	mov	r0, r3
 801479e:	f7f8 fc87 	bl	800d0b0 <lwip_htons>
 80147a2:	4603      	mov	r3, r0
 80147a4:	461a      	mov	r2, r3
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80147b0:	68f8      	ldr	r0, [r7, #12]
 80147b2:	f7f8 fc92 	bl	800d0da <lwip_htonl>
 80147b6:	4602      	mov	r2, r0
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80147bc:	897b      	ldrh	r3, [r7, #10]
 80147be:	089b      	lsrs	r3, r3, #2
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	3305      	adds	r3, #5
 80147c4:	b29b      	uxth	r3, r3
 80147c6:	031b      	lsls	r3, r3, #12
 80147c8:	b29a      	uxth	r2, r3
 80147ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	4313      	orrs	r3, r2
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7f8 fc6b 	bl	800d0b0 <lwip_htons>
 80147da:	4603      	mov	r3, r0
 80147dc:	461a      	mov	r2, r3
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80147e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7f8 fc63 	bl	800d0b0 <lwip_htons>
 80147ea:	4603      	mov	r3, r0
 80147ec:	461a      	mov	r2, r3
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	2200      	movs	r2, #0
 80147f6:	741a      	strb	r2, [r3, #16]
 80147f8:	2200      	movs	r2, #0
 80147fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	2200      	movs	r2, #0
 8014800:	749a      	strb	r2, [r3, #18]
 8014802:	2200      	movs	r2, #0
 8014804:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014806:	697b      	ldr	r3, [r7, #20]
}
 8014808:	4618      	mov	r0, r3
 801480a:	3718      	adds	r7, #24
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}
 8014810:	0801c17c 	.word	0x0801c17c
 8014814:	0801c854 	.word	0x0801c854
 8014818:	0801c1d0 	.word	0x0801c1d0

0801481c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801481c:	b5b0      	push	{r4, r5, r7, lr}
 801481e:	b08a      	sub	sp, #40	; 0x28
 8014820:	af04      	add	r7, sp, #16
 8014822:	60f8      	str	r0, [r7, #12]
 8014824:	607b      	str	r3, [r7, #4]
 8014826:	460b      	mov	r3, r1
 8014828:	817b      	strh	r3, [r7, #10]
 801482a:	4613      	mov	r3, r2
 801482c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d106      	bne.n	8014842 <tcp_output_alloc_header+0x26>
 8014834:	4b15      	ldr	r3, [pc, #84]	; (801488c <tcp_output_alloc_header+0x70>)
 8014836:	f240 7242 	movw	r2, #1858	; 0x742
 801483a:	4915      	ldr	r1, [pc, #84]	; (8014890 <tcp_output_alloc_header+0x74>)
 801483c:	4815      	ldr	r0, [pc, #84]	; (8014894 <tcp_output_alloc_header+0x78>)
 801483e:	f003 ff93 	bl	8018768 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	8adb      	ldrh	r3, [r3, #22]
 801484a:	68fa      	ldr	r2, [r7, #12]
 801484c:	8b12      	ldrh	r2, [r2, #24]
 801484e:	68f9      	ldr	r1, [r7, #12]
 8014850:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014852:	893d      	ldrh	r5, [r7, #8]
 8014854:	897c      	ldrh	r4, [r7, #10]
 8014856:	9103      	str	r1, [sp, #12]
 8014858:	2110      	movs	r1, #16
 801485a:	9102      	str	r1, [sp, #8]
 801485c:	9201      	str	r2, [sp, #4]
 801485e:	9300      	str	r3, [sp, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	462a      	mov	r2, r5
 8014864:	4621      	mov	r1, r4
 8014866:	f7ff ff67 	bl	8014738 <tcp_output_alloc_header_common>
 801486a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d006      	beq.n	8014880 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801487a:	441a      	add	r2, r3
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014880:	697b      	ldr	r3, [r7, #20]
}
 8014882:	4618      	mov	r0, r3
 8014884:	3718      	adds	r7, #24
 8014886:	46bd      	mov	sp, r7
 8014888:	bdb0      	pop	{r4, r5, r7, pc}
 801488a:	bf00      	nop
 801488c:	0801c17c 	.word	0x0801c17c
 8014890:	0801c884 	.word	0x0801c884
 8014894:	0801c1d0 	.word	0x0801c1d0

08014898 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b088      	sub	sp, #32
 801489c:	af00      	add	r7, sp, #0
 801489e:	60f8      	str	r0, [r7, #12]
 80148a0:	60b9      	str	r1, [r7, #8]
 80148a2:	4611      	mov	r1, r2
 80148a4:	461a      	mov	r2, r3
 80148a6:	460b      	mov	r3, r1
 80148a8:	71fb      	strb	r3, [r7, #7]
 80148aa:	4613      	mov	r3, r2
 80148ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80148ae:	2300      	movs	r3, #0
 80148b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d106      	bne.n	80148c6 <tcp_output_fill_options+0x2e>
 80148b8:	4b13      	ldr	r3, [pc, #76]	; (8014908 <tcp_output_fill_options+0x70>)
 80148ba:	f240 7256 	movw	r2, #1878	; 0x756
 80148be:	4913      	ldr	r1, [pc, #76]	; (801490c <tcp_output_fill_options+0x74>)
 80148c0:	4813      	ldr	r0, [pc, #76]	; (8014910 <tcp_output_fill_options+0x78>)
 80148c2:	f003 ff51 	bl	8018768 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80148cc:	69bb      	ldr	r3, [r7, #24]
 80148ce:	3314      	adds	r3, #20
 80148d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	f103 0214 	add.w	r2, r3, #20
 80148d8:	8bfb      	ldrh	r3, [r7, #30]
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	4619      	mov	r1, r3
 80148de:	79fb      	ldrb	r3, [r7, #7]
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	f003 0304 	and.w	r3, r3, #4
 80148e6:	440b      	add	r3, r1
 80148e8:	4413      	add	r3, r2
 80148ea:	697a      	ldr	r2, [r7, #20]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d006      	beq.n	80148fe <tcp_output_fill_options+0x66>
 80148f0:	4b05      	ldr	r3, [pc, #20]	; (8014908 <tcp_output_fill_options+0x70>)
 80148f2:	f240 7275 	movw	r2, #1909	; 0x775
 80148f6:	4907      	ldr	r1, [pc, #28]	; (8014914 <tcp_output_fill_options+0x7c>)
 80148f8:	4805      	ldr	r0, [pc, #20]	; (8014910 <tcp_output_fill_options+0x78>)
 80148fa:	f003 ff35 	bl	8018768 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80148fe:	bf00      	nop
 8014900:	3720      	adds	r7, #32
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}
 8014906:	bf00      	nop
 8014908:	0801c17c 	.word	0x0801c17c
 801490c:	0801c8ac 	.word	0x0801c8ac
 8014910:	0801c1d0 	.word	0x0801c1d0
 8014914:	0801c7a4 	.word	0x0801c7a4

08014918 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b08a      	sub	sp, #40	; 0x28
 801491c:	af04      	add	r7, sp, #16
 801491e:	60f8      	str	r0, [r7, #12]
 8014920:	60b9      	str	r1, [r7, #8]
 8014922:	607a      	str	r2, [r7, #4]
 8014924:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d106      	bne.n	801493a <tcp_output_control_segment+0x22>
 801492c:	4b1c      	ldr	r3, [pc, #112]	; (80149a0 <tcp_output_control_segment+0x88>)
 801492e:	f240 7287 	movw	r2, #1927	; 0x787
 8014932:	491c      	ldr	r1, [pc, #112]	; (80149a4 <tcp_output_control_segment+0x8c>)
 8014934:	481c      	ldr	r0, [pc, #112]	; (80149a8 <tcp_output_control_segment+0x90>)
 8014936:	f003 ff17 	bl	8018768 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801493a:	683a      	ldr	r2, [r7, #0]
 801493c:	6879      	ldr	r1, [r7, #4]
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f7fe fae8 	bl	8012f14 <tcp_route>
 8014944:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d102      	bne.n	8014952 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801494c:	23fc      	movs	r3, #252	; 0xfc
 801494e:	75fb      	strb	r3, [r7, #23]
 8014950:	e01c      	b.n	801498c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d006      	beq.n	8014966 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	7adb      	ldrb	r3, [r3, #11]
 801495c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	7a9b      	ldrb	r3, [r3, #10]
 8014962:	757b      	strb	r3, [r7, #21]
 8014964:	e003      	b.n	801496e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014966:	23ff      	movs	r3, #255	; 0xff
 8014968:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801496a:	2300      	movs	r3, #0
 801496c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801496e:	7dba      	ldrb	r2, [r7, #22]
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	9302      	str	r3, [sp, #8]
 8014974:	2306      	movs	r3, #6
 8014976:	9301      	str	r3, [sp, #4]
 8014978:	7d7b      	ldrb	r3, [r7, #21]
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	4613      	mov	r3, r2
 801497e:	683a      	ldr	r2, [r7, #0]
 8014980:	6879      	ldr	r1, [r7, #4]
 8014982:	68b8      	ldr	r0, [r7, #8]
 8014984:	f002 fad0 	bl	8016f28 <ip4_output_if>
 8014988:	4603      	mov	r3, r0
 801498a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801498c:	68b8      	ldr	r0, [r7, #8]
 801498e:	f7f9 ff6d 	bl	800e86c <pbuf_free>
  return err;
 8014992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014996:	4618      	mov	r0, r3
 8014998:	3718      	adds	r7, #24
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	bf00      	nop
 80149a0:	0801c17c 	.word	0x0801c17c
 80149a4:	0801c8d4 	.word	0x0801c8d4
 80149a8:	0801c1d0 	.word	0x0801c1d0

080149ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80149ac:	b590      	push	{r4, r7, lr}
 80149ae:	b08b      	sub	sp, #44	; 0x2c
 80149b0:	af04      	add	r7, sp, #16
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
 80149b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d106      	bne.n	80149ce <tcp_rst+0x22>
 80149c0:	4b1f      	ldr	r3, [pc, #124]	; (8014a40 <tcp_rst+0x94>)
 80149c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80149c6:	491f      	ldr	r1, [pc, #124]	; (8014a44 <tcp_rst+0x98>)
 80149c8:	481f      	ldr	r0, [pc, #124]	; (8014a48 <tcp_rst+0x9c>)
 80149ca:	f003 fecd 	bl	8018768 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80149ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d106      	bne.n	80149e2 <tcp_rst+0x36>
 80149d4:	4b1a      	ldr	r3, [pc, #104]	; (8014a40 <tcp_rst+0x94>)
 80149d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80149da:	491c      	ldr	r1, [pc, #112]	; (8014a4c <tcp_rst+0xa0>)
 80149dc:	481a      	ldr	r0, [pc, #104]	; (8014a48 <tcp_rst+0x9c>)
 80149de:	f003 fec3 	bl	8018768 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149e2:	2300      	movs	r3, #0
 80149e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80149e6:	f246 0308 	movw	r3, #24584	; 0x6008
 80149ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80149ec:	7dfb      	ldrb	r3, [r7, #23]
 80149ee:	b29c      	uxth	r4, r3
 80149f0:	68b8      	ldr	r0, [r7, #8]
 80149f2:	f7f8 fb72 	bl	800d0da <lwip_htonl>
 80149f6:	4602      	mov	r2, r0
 80149f8:	8abb      	ldrh	r3, [r7, #20]
 80149fa:	9303      	str	r3, [sp, #12]
 80149fc:	2314      	movs	r3, #20
 80149fe:	9302      	str	r3, [sp, #8]
 8014a00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014a02:	9301      	str	r3, [sp, #4]
 8014a04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	4621      	mov	r1, r4
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7ff fe92 	bl	8014738 <tcp_output_alloc_header_common>
 8014a14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d00c      	beq.n	8014a36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a1c:	7dfb      	ldrb	r3, [r7, #23]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	6939      	ldr	r1, [r7, #16]
 8014a22:	68f8      	ldr	r0, [r7, #12]
 8014a24:	f7ff ff38 	bl	8014898 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	6939      	ldr	r1, [r7, #16]
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f7ff ff72 	bl	8014918 <tcp_output_control_segment>
 8014a34:	e000      	b.n	8014a38 <tcp_rst+0x8c>
    return;
 8014a36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014a38:	371c      	adds	r7, #28
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd90      	pop	{r4, r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	0801c17c 	.word	0x0801c17c
 8014a44:	0801c900 	.word	0x0801c900
 8014a48:	0801c1d0 	.word	0x0801c1d0
 8014a4c:	0801c91c 	.word	0x0801c91c

08014a50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014a50:	b590      	push	{r4, r7, lr}
 8014a52:	b087      	sub	sp, #28
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d106      	bne.n	8014a74 <tcp_send_empty_ack+0x24>
 8014a66:	4b28      	ldr	r3, [pc, #160]	; (8014b08 <tcp_send_empty_ack+0xb8>)
 8014a68:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014a6c:	4927      	ldr	r1, [pc, #156]	; (8014b0c <tcp_send_empty_ack+0xbc>)
 8014a6e:	4828      	ldr	r0, [pc, #160]	; (8014b10 <tcp_send_empty_ack+0xc0>)
 8014a70:	f003 fe7a 	bl	8018768 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a74:	7dfb      	ldrb	r3, [r7, #23]
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	f003 0304 	and.w	r3, r3, #4
 8014a7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014a80:	7d7b      	ldrb	r3, [r7, #21]
 8014a82:	b29c      	uxth	r4, r3
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7f8 fb26 	bl	800d0da <lwip_htonl>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2200      	movs	r2, #0
 8014a92:	4621      	mov	r1, r4
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f7ff fec1 	bl	801481c <tcp_output_alloc_header>
 8014a9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d109      	bne.n	8014ab6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	8b5b      	ldrh	r3, [r3, #26]
 8014aa6:	f043 0303 	orr.w	r3, r3, #3
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014ab0:	f06f 0301 	mvn.w	r3, #1
 8014ab4:	e023      	b.n	8014afe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014ab6:	7dbb      	ldrb	r3, [r7, #22]
 8014ab8:	7dfa      	ldrb	r2, [r7, #23]
 8014aba:	6939      	ldr	r1, [r7, #16]
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff feeb 	bl	8014898 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	6939      	ldr	r1, [r7, #16]
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f7ff ff24 	bl	8014918 <tcp_output_control_segment>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d007      	beq.n	8014aec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	8b5b      	ldrh	r3, [r3, #26]
 8014ae0:	f043 0303 	orr.w	r3, r3, #3
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	835a      	strh	r2, [r3, #26]
 8014aea:	e006      	b.n	8014afa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	8b5b      	ldrh	r3, [r3, #26]
 8014af0:	f023 0303 	bic.w	r3, r3, #3
 8014af4:	b29a      	uxth	r2, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	371c      	adds	r7, #28
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd90      	pop	{r4, r7, pc}
 8014b06:	bf00      	nop
 8014b08:	0801c17c 	.word	0x0801c17c
 8014b0c:	0801c938 	.word	0x0801c938
 8014b10:	0801c1d0 	.word	0x0801c1d0

08014b14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014b14:	b590      	push	{r4, r7, lr}
 8014b16:	b087      	sub	sp, #28
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d106      	bne.n	8014b34 <tcp_keepalive+0x20>
 8014b26:	4b18      	ldr	r3, [pc, #96]	; (8014b88 <tcp_keepalive+0x74>)
 8014b28:	f640 0224 	movw	r2, #2084	; 0x824
 8014b2c:	4917      	ldr	r1, [pc, #92]	; (8014b8c <tcp_keepalive+0x78>)
 8014b2e:	4818      	ldr	r0, [pc, #96]	; (8014b90 <tcp_keepalive+0x7c>)
 8014b30:	f003 fe1a 	bl	8018768 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014b34:	7dfb      	ldrb	r3, [r7, #23]
 8014b36:	b29c      	uxth	r4, r3
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7f8 facb 	bl	800d0da <lwip_htonl>
 8014b44:	4603      	mov	r3, r0
 8014b46:	2200      	movs	r2, #0
 8014b48:	4621      	mov	r1, r4
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f7ff fe66 	bl	801481c <tcp_output_alloc_header>
 8014b50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d102      	bne.n	8014b5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014b58:	f04f 33ff 	mov.w	r3, #4294967295
 8014b5c:	e010      	b.n	8014b80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b5e:	7dfb      	ldrb	r3, [r7, #23]
 8014b60:	2200      	movs	r2, #0
 8014b62:	6939      	ldr	r1, [r7, #16]
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7ff fe97 	bl	8014898 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	3304      	adds	r3, #4
 8014b70:	6939      	ldr	r1, [r7, #16]
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f7ff fed0 	bl	8014918 <tcp_output_control_segment>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	371c      	adds	r7, #28
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd90      	pop	{r4, r7, pc}
 8014b88:	0801c17c 	.word	0x0801c17c
 8014b8c:	0801c958 	.word	0x0801c958
 8014b90:	0801c1d0 	.word	0x0801c1d0

08014b94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014b94:	b590      	push	{r4, r7, lr}
 8014b96:	b08b      	sub	sp, #44	; 0x2c
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d106      	bne.n	8014bb6 <tcp_zero_window_probe+0x22>
 8014ba8:	4b4c      	ldr	r3, [pc, #304]	; (8014cdc <tcp_zero_window_probe+0x148>)
 8014baa:	f640 024f 	movw	r2, #2127	; 0x84f
 8014bae:	494c      	ldr	r1, [pc, #304]	; (8014ce0 <tcp_zero_window_probe+0x14c>)
 8014bb0:	484c      	ldr	r0, [pc, #304]	; (8014ce4 <tcp_zero_window_probe+0x150>)
 8014bb2:	f003 fdd9 	bl	8018768 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014bbc:	6a3b      	ldr	r3, [r7, #32]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d101      	bne.n	8014bc6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	e086      	b.n	8014cd4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014bcc:	2bff      	cmp	r3, #255	; 0xff
 8014bce:	d007      	beq.n	8014be0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	b2da      	uxtb	r2, r3
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014be0:	6a3b      	ldr	r3, [r7, #32]
 8014be2:	68db      	ldr	r3, [r3, #12]
 8014be4:	899b      	ldrh	r3, [r3, #12]
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7f8 fa61 	bl	800d0b0 <lwip_htons>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	f003 0301 	and.w	r3, r3, #1
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d005      	beq.n	8014c06 <tcp_zero_window_probe+0x72>
 8014bfa:	6a3b      	ldr	r3, [r7, #32]
 8014bfc:	891b      	ldrh	r3, [r3, #8]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d101      	bne.n	8014c06 <tcp_zero_window_probe+0x72>
 8014c02:	2301      	movs	r3, #1
 8014c04:	e000      	b.n	8014c08 <tcp_zero_window_probe+0x74>
 8014c06:	2300      	movs	r3, #0
 8014c08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014c0a:	7ffb      	ldrb	r3, [r7, #31]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	bf0c      	ite	eq
 8014c10:	2301      	moveq	r3, #1
 8014c12:	2300      	movne	r3, #0
 8014c14:	b2db      	uxtb	r3, r3
 8014c16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c1c:	b299      	uxth	r1, r3
 8014c1e:	6a3b      	ldr	r3, [r7, #32]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	8bba      	ldrh	r2, [r7, #28]
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7ff fdf8 	bl	801481c <tcp_output_alloc_header>
 8014c2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014c2e:	69bb      	ldr	r3, [r7, #24]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d102      	bne.n	8014c3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014c34:	f04f 33ff 	mov.w	r3, #4294967295
 8014c38:	e04c      	b.n	8014cd4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014c40:	7ffb      	ldrb	r3, [r7, #31]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d011      	beq.n	8014c6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	899b      	ldrh	r3, [r3, #12]
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	b21b      	sxth	r3, r3
 8014c4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014c52:	b21c      	sxth	r4, r3
 8014c54:	2011      	movs	r0, #17
 8014c56:	f7f8 fa2b 	bl	800d0b0 <lwip_htons>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	b21b      	sxth	r3, r3
 8014c5e:	4323      	orrs	r3, r4
 8014c60:	b21b      	sxth	r3, r3
 8014c62:	b29a      	uxth	r2, r3
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	819a      	strh	r2, [r3, #12]
 8014c68:	e010      	b.n	8014c8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	3314      	adds	r3, #20
 8014c70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014c72:	6a3b      	ldr	r3, [r7, #32]
 8014c74:	6858      	ldr	r0, [r3, #4]
 8014c76:	6a3b      	ldr	r3, [r7, #32]
 8014c78:	685b      	ldr	r3, [r3, #4]
 8014c7a:	891a      	ldrh	r2, [r3, #8]
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	891b      	ldrh	r3, [r3, #8]
 8014c80:	1ad3      	subs	r3, r2, r3
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	2201      	movs	r2, #1
 8014c86:	6939      	ldr	r1, [r7, #16]
 8014c88:	f7f9 fff6 	bl	800ec78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014c8c:	6a3b      	ldr	r3, [r7, #32]
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7f8 fa21 	bl	800d0da <lwip_htonl>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	da02      	bge.n	8014cb0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	68fa      	ldr	r2, [r7, #12]
 8014cae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	69b9      	ldr	r1, [r7, #24]
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f7ff fded 	bl	8014898 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	3304      	adds	r3, #4
 8014cc4:	69b9      	ldr	r1, [r7, #24]
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f7ff fe26 	bl	8014918 <tcp_output_control_segment>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014cd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	372c      	adds	r7, #44	; 0x2c
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd90      	pop	{r4, r7, pc}
 8014cdc:	0801c17c 	.word	0x0801c17c
 8014ce0:	0801c974 	.word	0x0801c974
 8014ce4:	0801c1d0 	.word	0x0801c1d0

08014ce8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014cf0:	f7fa f8b0 	bl	800ee54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014cf4:	4b0a      	ldr	r3, [pc, #40]	; (8014d20 <tcpip_tcp_timer+0x38>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d103      	bne.n	8014d04 <tcpip_tcp_timer+0x1c>
 8014cfc:	4b09      	ldr	r3, [pc, #36]	; (8014d24 <tcpip_tcp_timer+0x3c>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d005      	beq.n	8014d10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d04:	2200      	movs	r2, #0
 8014d06:	4908      	ldr	r1, [pc, #32]	; (8014d28 <tcpip_tcp_timer+0x40>)
 8014d08:	20fa      	movs	r0, #250	; 0xfa
 8014d0a:	f000 f8f3 	bl	8014ef4 <sys_timeout>
 8014d0e:	e003      	b.n	8014d18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014d10:	4b06      	ldr	r3, [pc, #24]	; (8014d2c <tcpip_tcp_timer+0x44>)
 8014d12:	2200      	movs	r2, #0
 8014d14:	601a      	str	r2, [r3, #0]
  }
}
 8014d16:	bf00      	nop
 8014d18:	bf00      	nop
 8014d1a:	3708      	adds	r7, #8
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	2000db50 	.word	0x2000db50
 8014d24:	2000db60 	.word	0x2000db60
 8014d28:	08014ce9 	.word	0x08014ce9
 8014d2c:	20004388 	.word	0x20004388

08014d30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014d34:	4b0a      	ldr	r3, [pc, #40]	; (8014d60 <tcp_timer_needed+0x30>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d10f      	bne.n	8014d5c <tcp_timer_needed+0x2c>
 8014d3c:	4b09      	ldr	r3, [pc, #36]	; (8014d64 <tcp_timer_needed+0x34>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d103      	bne.n	8014d4c <tcp_timer_needed+0x1c>
 8014d44:	4b08      	ldr	r3, [pc, #32]	; (8014d68 <tcp_timer_needed+0x38>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d007      	beq.n	8014d5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014d4c:	4b04      	ldr	r3, [pc, #16]	; (8014d60 <tcp_timer_needed+0x30>)
 8014d4e:	2201      	movs	r2, #1
 8014d50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d52:	2200      	movs	r2, #0
 8014d54:	4905      	ldr	r1, [pc, #20]	; (8014d6c <tcp_timer_needed+0x3c>)
 8014d56:	20fa      	movs	r0, #250	; 0xfa
 8014d58:	f000 f8cc 	bl	8014ef4 <sys_timeout>
  }
}
 8014d5c:	bf00      	nop
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	20004388 	.word	0x20004388
 8014d64:	2000db50 	.word	0x2000db50
 8014d68:	2000db60 	.word	0x2000db60
 8014d6c:	08014ce9 	.word	0x08014ce9

08014d70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014d7c:	200a      	movs	r0, #10
 8014d7e:	f7f8 fe4d 	bl	800da1c <memp_malloc>
 8014d82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d109      	bne.n	8014d9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d151      	bne.n	8014e34 <sys_timeout_abs+0xc4>
 8014d90:	4b2a      	ldr	r3, [pc, #168]	; (8014e3c <sys_timeout_abs+0xcc>)
 8014d92:	22be      	movs	r2, #190	; 0xbe
 8014d94:	492a      	ldr	r1, [pc, #168]	; (8014e40 <sys_timeout_abs+0xd0>)
 8014d96:	482b      	ldr	r0, [pc, #172]	; (8014e44 <sys_timeout_abs+0xd4>)
 8014d98:	f003 fce6 	bl	8018768 <iprintf>
    return;
 8014d9c:	e04a      	b.n	8014e34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	2200      	movs	r2, #0
 8014da2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	68ba      	ldr	r2, [r7, #8]
 8014da8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	687a      	ldr	r2, [r7, #4]
 8014dae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014db6:	4b24      	ldr	r3, [pc, #144]	; (8014e48 <sys_timeout_abs+0xd8>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d103      	bne.n	8014dc6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014dbe:	4a22      	ldr	r2, [pc, #136]	; (8014e48 <sys_timeout_abs+0xd8>)
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	6013      	str	r3, [r2, #0]
    return;
 8014dc4:	e037      	b.n	8014e36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	685a      	ldr	r2, [r3, #4]
 8014dca:	4b1f      	ldr	r3, [pc, #124]	; (8014e48 <sys_timeout_abs+0xd8>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	1ad3      	subs	r3, r2, r3
 8014dd2:	0fdb      	lsrs	r3, r3, #31
 8014dd4:	f003 0301 	and.w	r3, r3, #1
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d007      	beq.n	8014dee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014dde:	4b1a      	ldr	r3, [pc, #104]	; (8014e48 <sys_timeout_abs+0xd8>)
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014de6:	4a18      	ldr	r2, [pc, #96]	; (8014e48 <sys_timeout_abs+0xd8>)
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	6013      	str	r3, [r2, #0]
 8014dec:	e023      	b.n	8014e36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014dee:	4b16      	ldr	r3, [pc, #88]	; (8014e48 <sys_timeout_abs+0xd8>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	617b      	str	r3, [r7, #20]
 8014df4:	e01a      	b.n	8014e2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d00b      	beq.n	8014e16 <sys_timeout_abs+0xa6>
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	685a      	ldr	r2, [r3, #4]
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	1ad3      	subs	r3, r2, r3
 8014e0a:	0fdb      	lsrs	r3, r3, #31
 8014e0c:	f003 0301 	and.w	r3, r3, #1
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d007      	beq.n	8014e26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	693a      	ldr	r2, [r7, #16]
 8014e22:	601a      	str	r2, [r3, #0]
        break;
 8014e24:	e007      	b.n	8014e36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	617b      	str	r3, [r7, #20]
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d1e1      	bne.n	8014df6 <sys_timeout_abs+0x86>
 8014e32:	e000      	b.n	8014e36 <sys_timeout_abs+0xc6>
    return;
 8014e34:	bf00      	nop
      }
    }
  }
}
 8014e36:	3718      	adds	r7, #24
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	0801c998 	.word	0x0801c998
 8014e40:	0801c9cc 	.word	0x0801c9cc
 8014e44:	0801ca0c 	.word	0x0801ca0c
 8014e48:	20004380 	.word	0x20004380

08014e4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b086      	sub	sp, #24
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4798      	blx	r3

  now = sys_now();
 8014e5e:	f7f1 fdcd 	bl	80069fc <sys_now>
 8014e62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	4b0f      	ldr	r3, [pc, #60]	; (8014ea8 <lwip_cyclic_timer+0x5c>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014e70:	68fa      	ldr	r2, [r7, #12]
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	1ad3      	subs	r3, r2, r3
 8014e76:	0fdb      	lsrs	r3, r3, #31
 8014e78:	f003 0301 	and.w	r3, r3, #1
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d009      	beq.n	8014e96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	681a      	ldr	r2, [r3, #0]
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	4413      	add	r3, r2
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4907      	ldr	r1, [pc, #28]	; (8014eac <lwip_cyclic_timer+0x60>)
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff ff6e 	bl	8014d70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014e94:	e004      	b.n	8014ea0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	4904      	ldr	r1, [pc, #16]	; (8014eac <lwip_cyclic_timer+0x60>)
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	f7ff ff68 	bl	8014d70 <sys_timeout_abs>
}
 8014ea0:	bf00      	nop
 8014ea2:	3718      	adds	r7, #24
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	20004384 	.word	0x20004384
 8014eac:	08014e4d 	.word	0x08014e4d

08014eb0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	607b      	str	r3, [r7, #4]
 8014eba:	e00e      	b.n	8014eda <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014ebc:	4a0b      	ldr	r2, [pc, #44]	; (8014eec <sys_timeouts_init+0x3c>)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	00db      	lsls	r3, r3, #3
 8014ec8:	4a08      	ldr	r2, [pc, #32]	; (8014eec <sys_timeouts_init+0x3c>)
 8014eca:	4413      	add	r3, r2
 8014ecc:	461a      	mov	r2, r3
 8014ece:	4908      	ldr	r1, [pc, #32]	; (8014ef0 <sys_timeouts_init+0x40>)
 8014ed0:	f000 f810 	bl	8014ef4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	607b      	str	r3, [r7, #4]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2b02      	cmp	r3, #2
 8014ede:	d9ed      	bls.n	8014ebc <sys_timeouts_init+0xc>
  }
}
 8014ee0:	bf00      	nop
 8014ee2:	bf00      	nop
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	0801d600 	.word	0x0801d600
 8014ef0:	08014e4d 	.word	0x08014e4d

08014ef4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b086      	sub	sp, #24
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f06:	d306      	bcc.n	8014f16 <sys_timeout+0x22>
 8014f08:	4b0a      	ldr	r3, [pc, #40]	; (8014f34 <sys_timeout+0x40>)
 8014f0a:	f240 1229 	movw	r2, #297	; 0x129
 8014f0e:	490a      	ldr	r1, [pc, #40]	; (8014f38 <sys_timeout+0x44>)
 8014f10:	480a      	ldr	r0, [pc, #40]	; (8014f3c <sys_timeout+0x48>)
 8014f12:	f003 fc29 	bl	8018768 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014f16:	f7f1 fd71 	bl	80069fc <sys_now>
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	4413      	add	r3, r2
 8014f20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	68b9      	ldr	r1, [r7, #8]
 8014f26:	6978      	ldr	r0, [r7, #20]
 8014f28:	f7ff ff22 	bl	8014d70 <sys_timeout_abs>
#endif
}
 8014f2c:	bf00      	nop
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}
 8014f34:	0801c998 	.word	0x0801c998
 8014f38:	0801ca34 	.word	0x0801ca34
 8014f3c:	0801ca0c 	.word	0x0801ca0c

08014f40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014f46:	f7f1 fd59 	bl	80069fc <sys_now>
 8014f4a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014f4c:	4b17      	ldr	r3, [pc, #92]	; (8014fac <sys_check_timeouts+0x6c>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d022      	beq.n	8014f9e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	685b      	ldr	r3, [r3, #4]
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	0fdb      	lsrs	r3, r3, #31
 8014f62:	f003 0301 	and.w	r3, r3, #1
 8014f66:	b2db      	uxtb	r3, r3
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d11a      	bne.n	8014fa2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	4a0e      	ldr	r2, [pc, #56]	; (8014fac <sys_check_timeouts+0x6c>)
 8014f72:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	68db      	ldr	r3, [r3, #12]
 8014f7e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	4a0a      	ldr	r2, [pc, #40]	; (8014fb0 <sys_check_timeouts+0x70>)
 8014f86:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014f88:	68b9      	ldr	r1, [r7, #8]
 8014f8a:	200a      	movs	r0, #10
 8014f8c:	f7f8 fd98 	bl	800dac0 <memp_free>
    if (handler != NULL) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d0da      	beq.n	8014f4c <sys_check_timeouts+0xc>
      handler(arg);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6838      	ldr	r0, [r7, #0]
 8014f9a:	4798      	blx	r3
  do {
 8014f9c:	e7d6      	b.n	8014f4c <sys_check_timeouts+0xc>
      return;
 8014f9e:	bf00      	nop
 8014fa0:	e000      	b.n	8014fa4 <sys_check_timeouts+0x64>
      return;
 8014fa2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	20004380 	.word	0x20004380
 8014fb0:	20004384 	.word	0x20004384

08014fb4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014fba:	4b16      	ldr	r3, [pc, #88]	; (8015014 <sys_timeouts_sleeptime+0x60>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d102      	bne.n	8014fc8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc6:	e020      	b.n	801500a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014fc8:	f7f1 fd18 	bl	80069fc <sys_now>
 8014fcc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014fce:	4b11      	ldr	r3, [pc, #68]	; (8015014 <sys_timeouts_sleeptime+0x60>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	685a      	ldr	r2, [r3, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	0fdb      	lsrs	r3, r3, #31
 8014fda:	f003 0301 	and.w	r3, r3, #1
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d001      	beq.n	8014fe8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	e010      	b.n	801500a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014fe8:	4b0a      	ldr	r3, [pc, #40]	; (8015014 <sys_timeouts_sleeptime+0x60>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	685a      	ldr	r2, [r3, #4]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	1ad3      	subs	r3, r2, r3
 8014ff2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	da06      	bge.n	8015008 <sys_timeouts_sleeptime+0x54>
 8014ffa:	4b07      	ldr	r3, [pc, #28]	; (8015018 <sys_timeouts_sleeptime+0x64>)
 8014ffc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015000:	4906      	ldr	r1, [pc, #24]	; (801501c <sys_timeouts_sleeptime+0x68>)
 8015002:	4807      	ldr	r0, [pc, #28]	; (8015020 <sys_timeouts_sleeptime+0x6c>)
 8015004:	f003 fbb0 	bl	8018768 <iprintf>
    return ret;
 8015008:	683b      	ldr	r3, [r7, #0]
  }
}
 801500a:	4618      	mov	r0, r3
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	20004380 	.word	0x20004380
 8015018:	0801c998 	.word	0x0801c998
 801501c:	0801ca6c 	.word	0x0801ca6c
 8015020:	0801ca0c 	.word	0x0801ca0c

08015024 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015028:	f003 fc2c 	bl	8018884 <rand>
 801502c:	4603      	mov	r3, r0
 801502e:	b29b      	uxth	r3, r3
 8015030:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015034:	b29b      	uxth	r3, r3
 8015036:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801503a:	b29a      	uxth	r2, r3
 801503c:	4b01      	ldr	r3, [pc, #4]	; (8015044 <udp_init+0x20>)
 801503e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015040:	bf00      	nop
 8015042:	bd80      	pop	{r7, pc}
 8015044:	2000001c 	.word	0x2000001c

08015048 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801504e:	2300      	movs	r3, #0
 8015050:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015052:	4b17      	ldr	r3, [pc, #92]	; (80150b0 <udp_new_port+0x68>)
 8015054:	881b      	ldrh	r3, [r3, #0]
 8015056:	1c5a      	adds	r2, r3, #1
 8015058:	b291      	uxth	r1, r2
 801505a:	4a15      	ldr	r2, [pc, #84]	; (80150b0 <udp_new_port+0x68>)
 801505c:	8011      	strh	r1, [r2, #0]
 801505e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015062:	4293      	cmp	r3, r2
 8015064:	d103      	bne.n	801506e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015066:	4b12      	ldr	r3, [pc, #72]	; (80150b0 <udp_new_port+0x68>)
 8015068:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801506c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801506e:	4b11      	ldr	r3, [pc, #68]	; (80150b4 <udp_new_port+0x6c>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	603b      	str	r3, [r7, #0]
 8015074:	e011      	b.n	801509a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	8a5a      	ldrh	r2, [r3, #18]
 801507a:	4b0d      	ldr	r3, [pc, #52]	; (80150b0 <udp_new_port+0x68>)
 801507c:	881b      	ldrh	r3, [r3, #0]
 801507e:	429a      	cmp	r2, r3
 8015080:	d108      	bne.n	8015094 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015082:	88fb      	ldrh	r3, [r7, #6]
 8015084:	3301      	adds	r3, #1
 8015086:	80fb      	strh	r3, [r7, #6]
 8015088:	88fb      	ldrh	r3, [r7, #6]
 801508a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801508e:	d3e0      	bcc.n	8015052 <udp_new_port+0xa>
        return 0;
 8015090:	2300      	movs	r3, #0
 8015092:	e007      	b.n	80150a4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	603b      	str	r3, [r7, #0]
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d1ea      	bne.n	8015076 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80150a0:	4b03      	ldr	r3, [pc, #12]	; (80150b0 <udp_new_port+0x68>)
 80150a2:	881b      	ldrh	r3, [r3, #0]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr
 80150b0:	2000001c 	.word	0x2000001c
 80150b4:	2000db68 	.word	0x2000db68

080150b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	60b9      	str	r1, [r7, #8]
 80150c2:	4613      	mov	r3, r2
 80150c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d105      	bne.n	80150d8 <udp_input_local_match+0x20>
 80150cc:	4b27      	ldr	r3, [pc, #156]	; (801516c <udp_input_local_match+0xb4>)
 80150ce:	2287      	movs	r2, #135	; 0x87
 80150d0:	4927      	ldr	r1, [pc, #156]	; (8015170 <udp_input_local_match+0xb8>)
 80150d2:	4828      	ldr	r0, [pc, #160]	; (8015174 <udp_input_local_match+0xbc>)
 80150d4:	f003 fb48 	bl	8018768 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d105      	bne.n	80150ea <udp_input_local_match+0x32>
 80150de:	4b23      	ldr	r3, [pc, #140]	; (801516c <udp_input_local_match+0xb4>)
 80150e0:	2288      	movs	r2, #136	; 0x88
 80150e2:	4925      	ldr	r1, [pc, #148]	; (8015178 <udp_input_local_match+0xc0>)
 80150e4:	4823      	ldr	r0, [pc, #140]	; (8015174 <udp_input_local_match+0xbc>)
 80150e6:	f003 fb3f 	bl	8018768 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	7a1b      	ldrb	r3, [r3, #8]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d00b      	beq.n	801510a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	7a1a      	ldrb	r2, [r3, #8]
 80150f6:	4b21      	ldr	r3, [pc, #132]	; (801517c <udp_input_local_match+0xc4>)
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150fe:	3301      	adds	r3, #1
 8015100:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015102:	429a      	cmp	r2, r3
 8015104:	d001      	beq.n	801510a <udp_input_local_match+0x52>
    return 0;
 8015106:	2300      	movs	r3, #0
 8015108:	e02b      	b.n	8015162 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801510a:	79fb      	ldrb	r3, [r7, #7]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d018      	beq.n	8015142 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d013      	beq.n	801513e <udp_input_local_match+0x86>
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d00f      	beq.n	801513e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801511e:	4b17      	ldr	r3, [pc, #92]	; (801517c <udp_input_local_match+0xc4>)
 8015120:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015126:	d00a      	beq.n	801513e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	4b13      	ldr	r3, [pc, #76]	; (801517c <udp_input_local_match+0xc4>)
 801512e:	695b      	ldr	r3, [r3, #20]
 8015130:	405a      	eors	r2, r3
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	3308      	adds	r3, #8
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801513a:	2b00      	cmp	r3, #0
 801513c:	d110      	bne.n	8015160 <udp_input_local_match+0xa8>
          return 1;
 801513e:	2301      	movs	r3, #1
 8015140:	e00f      	b.n	8015162 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d009      	beq.n	801515c <udp_input_local_match+0xa4>
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d005      	beq.n	801515c <udp_input_local_match+0xa4>
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	4b09      	ldr	r3, [pc, #36]	; (801517c <udp_input_local_match+0xc4>)
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	429a      	cmp	r2, r3
 801515a:	d101      	bne.n	8015160 <udp_input_local_match+0xa8>
        return 1;
 801515c:	2301      	movs	r3, #1
 801515e:	e000      	b.n	8015162 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3710      	adds	r7, #16
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	0801ca80 	.word	0x0801ca80
 8015170:	0801cab0 	.word	0x0801cab0
 8015174:	0801cad4 	.word	0x0801cad4
 8015178:	0801cafc 	.word	0x0801cafc
 801517c:	2000a43c 	.word	0x2000a43c

08015180 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015180:	b590      	push	{r4, r7, lr}
 8015182:	b08d      	sub	sp, #52	; 0x34
 8015184:	af02      	add	r7, sp, #8
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801518a:	2300      	movs	r3, #0
 801518c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d105      	bne.n	80151a0 <udp_input+0x20>
 8015194:	4b7c      	ldr	r3, [pc, #496]	; (8015388 <udp_input+0x208>)
 8015196:	22cf      	movs	r2, #207	; 0xcf
 8015198:	497c      	ldr	r1, [pc, #496]	; (801538c <udp_input+0x20c>)
 801519a:	487d      	ldr	r0, [pc, #500]	; (8015390 <udp_input+0x210>)
 801519c:	f003 fae4 	bl	8018768 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d105      	bne.n	80151b2 <udp_input+0x32>
 80151a6:	4b78      	ldr	r3, [pc, #480]	; (8015388 <udp_input+0x208>)
 80151a8:	22d0      	movs	r2, #208	; 0xd0
 80151aa:	497a      	ldr	r1, [pc, #488]	; (8015394 <udp_input+0x214>)
 80151ac:	4878      	ldr	r0, [pc, #480]	; (8015390 <udp_input+0x210>)
 80151ae:	f003 fadb 	bl	8018768 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	895b      	ldrh	r3, [r3, #10]
 80151b6:	2b07      	cmp	r3, #7
 80151b8:	d803      	bhi.n	80151c2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7f9 fb56 	bl	800e86c <pbuf_free>
    goto end;
 80151c0:	e0de      	b.n	8015380 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80151c8:	4b73      	ldr	r3, [pc, #460]	; (8015398 <udp_input+0x218>)
 80151ca:	695b      	ldr	r3, [r3, #20]
 80151cc:	4a72      	ldr	r2, [pc, #456]	; (8015398 <udp_input+0x218>)
 80151ce:	6812      	ldr	r2, [r2, #0]
 80151d0:	4611      	mov	r1, r2
 80151d2:	4618      	mov	r0, r3
 80151d4:	f001 ff80 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80151d8:	4603      	mov	r3, r0
 80151da:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	881b      	ldrh	r3, [r3, #0]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7f7 ff64 	bl	800d0b0 <lwip_htons>
 80151e8:	4603      	mov	r3, r0
 80151ea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	885b      	ldrh	r3, [r3, #2]
 80151f0:	b29b      	uxth	r3, r3
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7f7 ff5c 	bl	800d0b0 <lwip_htons>
 80151f8:	4603      	mov	r3, r0
 80151fa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80151fc:	2300      	movs	r3, #0
 80151fe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015200:	2300      	movs	r3, #0
 8015202:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015204:	2300      	movs	r3, #0
 8015206:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015208:	4b64      	ldr	r3, [pc, #400]	; (801539c <udp_input+0x21c>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	627b      	str	r3, [r7, #36]	; 0x24
 801520e:	e054      	b.n	80152ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015212:	8a5b      	ldrh	r3, [r3, #18]
 8015214:	89fa      	ldrh	r2, [r7, #14]
 8015216:	429a      	cmp	r2, r3
 8015218:	d14a      	bne.n	80152b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801521a:	7cfb      	ldrb	r3, [r7, #19]
 801521c:	461a      	mov	r2, r3
 801521e:	6839      	ldr	r1, [r7, #0]
 8015220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015222:	f7ff ff49 	bl	80150b8 <udp_input_local_match>
 8015226:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015228:	2b00      	cmp	r3, #0
 801522a:	d041      	beq.n	80152b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522e:	7c1b      	ldrb	r3, [r3, #16]
 8015230:	f003 0304 	and.w	r3, r3, #4
 8015234:	2b00      	cmp	r3, #0
 8015236:	d11d      	bne.n	8015274 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d102      	bne.n	8015244 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015240:	61fb      	str	r3, [r7, #28]
 8015242:	e017      	b.n	8015274 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015244:	7cfb      	ldrb	r3, [r7, #19]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d014      	beq.n	8015274 <udp_input+0xf4>
 801524a:	4b53      	ldr	r3, [pc, #332]	; (8015398 <udp_input+0x218>)
 801524c:	695b      	ldr	r3, [r3, #20]
 801524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015252:	d10f      	bne.n	8015274 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015254:	69fb      	ldr	r3, [r7, #28]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	3304      	adds	r3, #4
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	429a      	cmp	r2, r3
 8015260:	d008      	beq.n	8015274 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	3304      	adds	r3, #4
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	429a      	cmp	r2, r3
 801526e:	d101      	bne.n	8015274 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015272:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015276:	8a9b      	ldrh	r3, [r3, #20]
 8015278:	8a3a      	ldrh	r2, [r7, #16]
 801527a:	429a      	cmp	r2, r3
 801527c:	d118      	bne.n	80152b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015280:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015282:	2b00      	cmp	r3, #0
 8015284:	d005      	beq.n	8015292 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015288:	685a      	ldr	r2, [r3, #4]
 801528a:	4b43      	ldr	r3, [pc, #268]	; (8015398 <udp_input+0x218>)
 801528c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801528e:	429a      	cmp	r2, r3
 8015290:	d10e      	bne.n	80152b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015292:	6a3b      	ldr	r3, [r7, #32]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d014      	beq.n	80152c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529a:	68da      	ldr	r2, [r3, #12]
 801529c:	6a3b      	ldr	r3, [r7, #32]
 801529e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80152a0:	4b3e      	ldr	r3, [pc, #248]	; (801539c <udp_input+0x21c>)
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80152a8:	4a3c      	ldr	r2, [pc, #240]	; (801539c <udp_input+0x21c>)
 80152aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80152ae:	e008      	b.n	80152c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80152b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80152b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	627b      	str	r3, [r7, #36]	; 0x24
 80152ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1a7      	bne.n	8015210 <udp_input+0x90>
 80152c0:	e000      	b.n	80152c4 <udp_input+0x144>
        break;
 80152c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d101      	bne.n	80152ce <udp_input+0x14e>
    pcb = uncon_pcb;
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80152ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d002      	beq.n	80152da <udp_input+0x15a>
    for_us = 1;
 80152d4:	2301      	movs	r3, #1
 80152d6:	76fb      	strb	r3, [r7, #27]
 80152d8:	e00a      	b.n	80152f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	3304      	adds	r3, #4
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	4b2d      	ldr	r3, [pc, #180]	; (8015398 <udp_input+0x218>)
 80152e2:	695b      	ldr	r3, [r3, #20]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	bf0c      	ite	eq
 80152e8:	2301      	moveq	r3, #1
 80152ea:	2300      	movne	r3, #0
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80152f0:	7efb      	ldrb	r3, [r7, #27]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d041      	beq.n	801537a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80152f6:	2108      	movs	r1, #8
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f7f9 f9ff 	bl	800e6fc <pbuf_remove_header>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d00a      	beq.n	801531a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015304:	4b20      	ldr	r3, [pc, #128]	; (8015388 <udp_input+0x208>)
 8015306:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801530a:	4925      	ldr	r1, [pc, #148]	; (80153a0 <udp_input+0x220>)
 801530c:	4820      	ldr	r0, [pc, #128]	; (8015390 <udp_input+0x210>)
 801530e:	f003 fa2b 	bl	8018768 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f7f9 faaa 	bl	800e86c <pbuf_free>
      goto end;
 8015318:	e032      	b.n	8015380 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531c:	2b00      	cmp	r3, #0
 801531e:	d012      	beq.n	8015346 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015322:	699b      	ldr	r3, [r3, #24]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00a      	beq.n	801533e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532a:	699c      	ldr	r4, [r3, #24]
 801532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532e:	69d8      	ldr	r0, [r3, #28]
 8015330:	8a3b      	ldrh	r3, [r7, #16]
 8015332:	9300      	str	r3, [sp, #0]
 8015334:	4b1b      	ldr	r3, [pc, #108]	; (80153a4 <udp_input+0x224>)
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801533a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801533c:	e021      	b.n	8015382 <udp_input+0x202>
        pbuf_free(p);
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f7f9 fa94 	bl	800e86c <pbuf_free>
        goto end;
 8015344:	e01c      	b.n	8015380 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015346:	7cfb      	ldrb	r3, [r7, #19]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d112      	bne.n	8015372 <udp_input+0x1f2>
 801534c:	4b12      	ldr	r3, [pc, #72]	; (8015398 <udp_input+0x218>)
 801534e:	695b      	ldr	r3, [r3, #20]
 8015350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015354:	2be0      	cmp	r3, #224	; 0xe0
 8015356:	d00c      	beq.n	8015372 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015358:	4b0f      	ldr	r3, [pc, #60]	; (8015398 <udp_input+0x218>)
 801535a:	899b      	ldrh	r3, [r3, #12]
 801535c:	3308      	adds	r3, #8
 801535e:	b29b      	uxth	r3, r3
 8015360:	b21b      	sxth	r3, r3
 8015362:	4619      	mov	r1, r3
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7f9 fa3c 	bl	800e7e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801536a:	2103      	movs	r1, #3
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f001 fb93 	bl	8016a98 <icmp_dest_unreach>
      pbuf_free(p);
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7f9 fa7a 	bl	800e86c <pbuf_free>
  return;
 8015378:	e003      	b.n	8015382 <udp_input+0x202>
    pbuf_free(p);
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f7f9 fa76 	bl	800e86c <pbuf_free>
  return;
 8015380:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015382:	372c      	adds	r7, #44	; 0x2c
 8015384:	46bd      	mov	sp, r7
 8015386:	bd90      	pop	{r4, r7, pc}
 8015388:	0801ca80 	.word	0x0801ca80
 801538c:	0801cb24 	.word	0x0801cb24
 8015390:	0801cad4 	.word	0x0801cad4
 8015394:	0801cb3c 	.word	0x0801cb3c
 8015398:	2000a43c 	.word	0x2000a43c
 801539c:	2000db68 	.word	0x2000db68
 80153a0:	0801cb58 	.word	0x0801cb58
 80153a4:	2000a44c 	.word	0x2000a44c

080153a8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d109      	bne.n	80153cc <udp_send+0x24>
 80153b8:	4b11      	ldr	r3, [pc, #68]	; (8015400 <udp_send+0x58>)
 80153ba:	f240 12d5 	movw	r2, #469	; 0x1d5
 80153be:	4911      	ldr	r1, [pc, #68]	; (8015404 <udp_send+0x5c>)
 80153c0:	4811      	ldr	r0, [pc, #68]	; (8015408 <udp_send+0x60>)
 80153c2:	f003 f9d1 	bl	8018768 <iprintf>
 80153c6:	f06f 030f 	mvn.w	r3, #15
 80153ca:	e015      	b.n	80153f8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d109      	bne.n	80153e6 <udp_send+0x3e>
 80153d2:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <udp_send+0x58>)
 80153d4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80153d8:	490c      	ldr	r1, [pc, #48]	; (801540c <udp_send+0x64>)
 80153da:	480b      	ldr	r0, [pc, #44]	; (8015408 <udp_send+0x60>)
 80153dc:	f003 f9c4 	bl	8018768 <iprintf>
 80153e0:	f06f 030f 	mvn.w	r3, #15
 80153e4:	e008      	b.n	80153f8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	1d1a      	adds	r2, r3, #4
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	8a9b      	ldrh	r3, [r3, #20]
 80153ee:	6839      	ldr	r1, [r7, #0]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 f80d 	bl	8015410 <udp_sendto>
 80153f6:	4603      	mov	r3, r0
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	0801ca80 	.word	0x0801ca80
 8015404:	0801cb74 	.word	0x0801cb74
 8015408:	0801cad4 	.word	0x0801cad4
 801540c:	0801cb8c 	.word	0x0801cb8c

08015410 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b088      	sub	sp, #32
 8015414:	af02      	add	r7, sp, #8
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	607a      	str	r2, [r7, #4]
 801541c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d109      	bne.n	8015438 <udp_sendto+0x28>
 8015424:	4b23      	ldr	r3, [pc, #140]	; (80154b4 <udp_sendto+0xa4>)
 8015426:	f44f 7206 	mov.w	r2, #536	; 0x218
 801542a:	4923      	ldr	r1, [pc, #140]	; (80154b8 <udp_sendto+0xa8>)
 801542c:	4823      	ldr	r0, [pc, #140]	; (80154bc <udp_sendto+0xac>)
 801542e:	f003 f99b 	bl	8018768 <iprintf>
 8015432:	f06f 030f 	mvn.w	r3, #15
 8015436:	e038      	b.n	80154aa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d109      	bne.n	8015452 <udp_sendto+0x42>
 801543e:	4b1d      	ldr	r3, [pc, #116]	; (80154b4 <udp_sendto+0xa4>)
 8015440:	f240 2219 	movw	r2, #537	; 0x219
 8015444:	491e      	ldr	r1, [pc, #120]	; (80154c0 <udp_sendto+0xb0>)
 8015446:	481d      	ldr	r0, [pc, #116]	; (80154bc <udp_sendto+0xac>)
 8015448:	f003 f98e 	bl	8018768 <iprintf>
 801544c:	f06f 030f 	mvn.w	r3, #15
 8015450:	e02b      	b.n	80154aa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d109      	bne.n	801546c <udp_sendto+0x5c>
 8015458:	4b16      	ldr	r3, [pc, #88]	; (80154b4 <udp_sendto+0xa4>)
 801545a:	f240 221a 	movw	r2, #538	; 0x21a
 801545e:	4919      	ldr	r1, [pc, #100]	; (80154c4 <udp_sendto+0xb4>)
 8015460:	4816      	ldr	r0, [pc, #88]	; (80154bc <udp_sendto+0xac>)
 8015462:	f003 f981 	bl	8018768 <iprintf>
 8015466:	f06f 030f 	mvn.w	r3, #15
 801546a:	e01e      	b.n	80154aa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	7a1b      	ldrb	r3, [r3, #8]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d006      	beq.n	8015482 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	7a1b      	ldrb	r3, [r3, #8]
 8015478:	4618      	mov	r0, r3
 801547a:	f7f8 fe37 	bl	800e0ec <netif_get_by_index>
 801547e:	6178      	str	r0, [r7, #20]
 8015480:	e003      	b.n	801548a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f001 fb92 	bl	8016bac <ip4_route>
 8015488:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801548a:	697b      	ldr	r3, [r7, #20]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d102      	bne.n	8015496 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015490:	f06f 0303 	mvn.w	r3, #3
 8015494:	e009      	b.n	80154aa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015496:	887a      	ldrh	r2, [r7, #2]
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	9300      	str	r3, [sp, #0]
 801549c:	4613      	mov	r3, r2
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	68b9      	ldr	r1, [r7, #8]
 80154a2:	68f8      	ldr	r0, [r7, #12]
 80154a4:	f000 f810 	bl	80154c8 <udp_sendto_if>
 80154a8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154aa:	4618      	mov	r0, r3
 80154ac:	3718      	adds	r7, #24
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	0801ca80 	.word	0x0801ca80
 80154b8:	0801cba4 	.word	0x0801cba4
 80154bc:	0801cad4 	.word	0x0801cad4
 80154c0:	0801cbbc 	.word	0x0801cbbc
 80154c4:	0801cbd8 	.word	0x0801cbd8

080154c8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b088      	sub	sp, #32
 80154cc:	af02      	add	r7, sp, #8
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d109      	bne.n	80154f0 <udp_sendto_if+0x28>
 80154dc:	4b2e      	ldr	r3, [pc, #184]	; (8015598 <udp_sendto_if+0xd0>)
 80154de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154e2:	492e      	ldr	r1, [pc, #184]	; (801559c <udp_sendto_if+0xd4>)
 80154e4:	482e      	ldr	r0, [pc, #184]	; (80155a0 <udp_sendto_if+0xd8>)
 80154e6:	f003 f93f 	bl	8018768 <iprintf>
 80154ea:	f06f 030f 	mvn.w	r3, #15
 80154ee:	e04f      	b.n	8015590 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d109      	bne.n	801550a <udp_sendto_if+0x42>
 80154f6:	4b28      	ldr	r3, [pc, #160]	; (8015598 <udp_sendto_if+0xd0>)
 80154f8:	f240 2281 	movw	r2, #641	; 0x281
 80154fc:	4929      	ldr	r1, [pc, #164]	; (80155a4 <udp_sendto_if+0xdc>)
 80154fe:	4828      	ldr	r0, [pc, #160]	; (80155a0 <udp_sendto_if+0xd8>)
 8015500:	f003 f932 	bl	8018768 <iprintf>
 8015504:	f06f 030f 	mvn.w	r3, #15
 8015508:	e042      	b.n	8015590 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d109      	bne.n	8015524 <udp_sendto_if+0x5c>
 8015510:	4b21      	ldr	r3, [pc, #132]	; (8015598 <udp_sendto_if+0xd0>)
 8015512:	f240 2282 	movw	r2, #642	; 0x282
 8015516:	4924      	ldr	r1, [pc, #144]	; (80155a8 <udp_sendto_if+0xe0>)
 8015518:	4821      	ldr	r0, [pc, #132]	; (80155a0 <udp_sendto_if+0xd8>)
 801551a:	f003 f925 	bl	8018768 <iprintf>
 801551e:	f06f 030f 	mvn.w	r3, #15
 8015522:	e035      	b.n	8015590 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015524:	6a3b      	ldr	r3, [r7, #32]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d109      	bne.n	801553e <udp_sendto_if+0x76>
 801552a:	4b1b      	ldr	r3, [pc, #108]	; (8015598 <udp_sendto_if+0xd0>)
 801552c:	f240 2283 	movw	r2, #643	; 0x283
 8015530:	491e      	ldr	r1, [pc, #120]	; (80155ac <udp_sendto_if+0xe4>)
 8015532:	481b      	ldr	r0, [pc, #108]	; (80155a0 <udp_sendto_if+0xd8>)
 8015534:	f003 f918 	bl	8018768 <iprintf>
 8015538:	f06f 030f 	mvn.w	r3, #15
 801553c:	e028      	b.n	8015590 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d009      	beq.n	8015558 <udp_sendto_if+0x90>
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d005      	beq.n	8015558 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015554:	2be0      	cmp	r3, #224	; 0xe0
 8015556:	d103      	bne.n	8015560 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015558:	6a3b      	ldr	r3, [r7, #32]
 801555a:	3304      	adds	r3, #4
 801555c:	617b      	str	r3, [r7, #20]
 801555e:	e00b      	b.n	8015578 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	6a3b      	ldr	r3, [r7, #32]
 8015566:	3304      	adds	r3, #4
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	429a      	cmp	r2, r3
 801556c:	d002      	beq.n	8015574 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801556e:	f06f 0303 	mvn.w	r3, #3
 8015572:	e00d      	b.n	8015590 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015578:	887a      	ldrh	r2, [r7, #2]
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	9301      	str	r3, [sp, #4]
 801557e:	6a3b      	ldr	r3, [r7, #32]
 8015580:	9300      	str	r3, [sp, #0]
 8015582:	4613      	mov	r3, r2
 8015584:	687a      	ldr	r2, [r7, #4]
 8015586:	68b9      	ldr	r1, [r7, #8]
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f000 f811 	bl	80155b0 <udp_sendto_if_src>
 801558e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015590:	4618      	mov	r0, r3
 8015592:	3718      	adds	r7, #24
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	0801ca80 	.word	0x0801ca80
 801559c:	0801cbf4 	.word	0x0801cbf4
 80155a0:	0801cad4 	.word	0x0801cad4
 80155a4:	0801cc10 	.word	0x0801cc10
 80155a8:	0801cc2c 	.word	0x0801cc2c
 80155ac:	0801cc4c 	.word	0x0801cc4c

080155b0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08c      	sub	sp, #48	; 0x30
 80155b4:	af04      	add	r7, sp, #16
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
 80155bc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d109      	bne.n	80155d8 <udp_sendto_if_src+0x28>
 80155c4:	4b65      	ldr	r3, [pc, #404]	; (801575c <udp_sendto_if_src+0x1ac>)
 80155c6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80155ca:	4965      	ldr	r1, [pc, #404]	; (8015760 <udp_sendto_if_src+0x1b0>)
 80155cc:	4865      	ldr	r0, [pc, #404]	; (8015764 <udp_sendto_if_src+0x1b4>)
 80155ce:	f003 f8cb 	bl	8018768 <iprintf>
 80155d2:	f06f 030f 	mvn.w	r3, #15
 80155d6:	e0bc      	b.n	8015752 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d109      	bne.n	80155f2 <udp_sendto_if_src+0x42>
 80155de:	4b5f      	ldr	r3, [pc, #380]	; (801575c <udp_sendto_if_src+0x1ac>)
 80155e0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80155e4:	4960      	ldr	r1, [pc, #384]	; (8015768 <udp_sendto_if_src+0x1b8>)
 80155e6:	485f      	ldr	r0, [pc, #380]	; (8015764 <udp_sendto_if_src+0x1b4>)
 80155e8:	f003 f8be 	bl	8018768 <iprintf>
 80155ec:	f06f 030f 	mvn.w	r3, #15
 80155f0:	e0af      	b.n	8015752 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d109      	bne.n	801560c <udp_sendto_if_src+0x5c>
 80155f8:	4b58      	ldr	r3, [pc, #352]	; (801575c <udp_sendto_if_src+0x1ac>)
 80155fa:	f240 22d3 	movw	r2, #723	; 0x2d3
 80155fe:	495b      	ldr	r1, [pc, #364]	; (801576c <udp_sendto_if_src+0x1bc>)
 8015600:	4858      	ldr	r0, [pc, #352]	; (8015764 <udp_sendto_if_src+0x1b4>)
 8015602:	f003 f8b1 	bl	8018768 <iprintf>
 8015606:	f06f 030f 	mvn.w	r3, #15
 801560a:	e0a2      	b.n	8015752 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560e:	2b00      	cmp	r3, #0
 8015610:	d109      	bne.n	8015626 <udp_sendto_if_src+0x76>
 8015612:	4b52      	ldr	r3, [pc, #328]	; (801575c <udp_sendto_if_src+0x1ac>)
 8015614:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015618:	4955      	ldr	r1, [pc, #340]	; (8015770 <udp_sendto_if_src+0x1c0>)
 801561a:	4852      	ldr	r0, [pc, #328]	; (8015764 <udp_sendto_if_src+0x1b4>)
 801561c:	f003 f8a4 	bl	8018768 <iprintf>
 8015620:	f06f 030f 	mvn.w	r3, #15
 8015624:	e095      	b.n	8015752 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015628:	2b00      	cmp	r3, #0
 801562a:	d109      	bne.n	8015640 <udp_sendto_if_src+0x90>
 801562c:	4b4b      	ldr	r3, [pc, #300]	; (801575c <udp_sendto_if_src+0x1ac>)
 801562e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015632:	4950      	ldr	r1, [pc, #320]	; (8015774 <udp_sendto_if_src+0x1c4>)
 8015634:	484b      	ldr	r0, [pc, #300]	; (8015764 <udp_sendto_if_src+0x1b4>)
 8015636:	f003 f897 	bl	8018768 <iprintf>
 801563a:	f06f 030f 	mvn.w	r3, #15
 801563e:	e088      	b.n	8015752 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	8a5b      	ldrh	r3, [r3, #18]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d10f      	bne.n	8015668 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015648:	68f9      	ldr	r1, [r7, #12]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	8a5b      	ldrh	r3, [r3, #18]
 801564e:	461a      	mov	r2, r3
 8015650:	68f8      	ldr	r0, [r7, #12]
 8015652:	f000 f893 	bl	801577c <udp_bind>
 8015656:	4603      	mov	r3, r0
 8015658:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801565a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d002      	beq.n	8015668 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015662:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015666:	e074      	b.n	8015752 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	891b      	ldrh	r3, [r3, #8]
 801566c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015670:	4293      	cmp	r3, r2
 8015672:	d902      	bls.n	801567a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015674:	f04f 33ff 	mov.w	r3, #4294967295
 8015678:	e06b      	b.n	8015752 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801567a:	2108      	movs	r1, #8
 801567c:	68b8      	ldr	r0, [r7, #8]
 801567e:	f7f9 f82d 	bl	800e6dc <pbuf_add_header>
 8015682:	4603      	mov	r3, r0
 8015684:	2b00      	cmp	r3, #0
 8015686:	d015      	beq.n	80156b4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015688:	f44f 7220 	mov.w	r2, #640	; 0x280
 801568c:	2108      	movs	r1, #8
 801568e:	2022      	movs	r0, #34	; 0x22
 8015690:	f7f8 fdd6 	bl	800e240 <pbuf_alloc>
 8015694:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d102      	bne.n	80156a2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801569c:	f04f 33ff 	mov.w	r3, #4294967295
 80156a0:	e057      	b.n	8015752 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	891b      	ldrh	r3, [r3, #8]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d006      	beq.n	80156b8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80156aa:	68b9      	ldr	r1, [r7, #8]
 80156ac:	69f8      	ldr	r0, [r7, #28]
 80156ae:	f7f9 fa01 	bl	800eab4 <pbuf_chain>
 80156b2:	e001      	b.n	80156b8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	895b      	ldrh	r3, [r3, #10]
 80156bc:	2b07      	cmp	r3, #7
 80156be:	d806      	bhi.n	80156ce <udp_sendto_if_src+0x11e>
 80156c0:	4b26      	ldr	r3, [pc, #152]	; (801575c <udp_sendto_if_src+0x1ac>)
 80156c2:	f240 320d 	movw	r2, #781	; 0x30d
 80156c6:	492c      	ldr	r1, [pc, #176]	; (8015778 <udp_sendto_if_src+0x1c8>)
 80156c8:	4826      	ldr	r0, [pc, #152]	; (8015764 <udp_sendto_if_src+0x1b4>)
 80156ca:	f003 f84d 	bl	8018768 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	685b      	ldr	r3, [r3, #4]
 80156d2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	8a5b      	ldrh	r3, [r3, #18]
 80156d8:	4618      	mov	r0, r3
 80156da:	f7f7 fce9 	bl	800d0b0 <lwip_htons>
 80156de:	4603      	mov	r3, r0
 80156e0:	461a      	mov	r2, r3
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80156e6:	887b      	ldrh	r3, [r7, #2]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7f7 fce1 	bl	800d0b0 <lwip_htons>
 80156ee:	4603      	mov	r3, r0
 80156f0:	461a      	mov	r2, r3
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	2200      	movs	r2, #0
 80156fa:	719a      	strb	r2, [r3, #6]
 80156fc:	2200      	movs	r2, #0
 80156fe:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	891b      	ldrh	r3, [r3, #8]
 8015704:	4618      	mov	r0, r3
 8015706:	f7f7 fcd3 	bl	800d0b0 <lwip_htons>
 801570a:	4603      	mov	r3, r0
 801570c:	461a      	mov	r2, r3
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015712:	2311      	movs	r3, #17
 8015714:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	7adb      	ldrb	r3, [r3, #11]
 801571a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	7a9b      	ldrb	r3, [r3, #10]
 8015720:	7cb9      	ldrb	r1, [r7, #18]
 8015722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015724:	9202      	str	r2, [sp, #8]
 8015726:	7cfa      	ldrb	r2, [r7, #19]
 8015728:	9201      	str	r2, [sp, #4]
 801572a:	9300      	str	r3, [sp, #0]
 801572c:	460b      	mov	r3, r1
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015732:	69f8      	ldr	r0, [r7, #28]
 8015734:	f001 fc22 	bl	8016f7c <ip4_output_if_src>
 8015738:	4603      	mov	r3, r0
 801573a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801573c:	69fa      	ldr	r2, [r7, #28]
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	429a      	cmp	r2, r3
 8015742:	d004      	beq.n	801574e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015744:	69f8      	ldr	r0, [r7, #28]
 8015746:	f7f9 f891 	bl	800e86c <pbuf_free>
    q = NULL;
 801574a:	2300      	movs	r3, #0
 801574c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801574e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3720      	adds	r7, #32
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}
 801575a:	bf00      	nop
 801575c:	0801ca80 	.word	0x0801ca80
 8015760:	0801cc6c 	.word	0x0801cc6c
 8015764:	0801cad4 	.word	0x0801cad4
 8015768:	0801cc8c 	.word	0x0801cc8c
 801576c:	0801ccac 	.word	0x0801ccac
 8015770:	0801ccd0 	.word	0x0801ccd0
 8015774:	0801ccf4 	.word	0x0801ccf4
 8015778:	0801cd18 	.word	0x0801cd18

0801577c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b086      	sub	sp, #24
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	4613      	mov	r3, r2
 8015788:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015790:	4b39      	ldr	r3, [pc, #228]	; (8015878 <udp_bind+0xfc>)
 8015792:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d109      	bne.n	80157ae <udp_bind+0x32>
 801579a:	4b38      	ldr	r3, [pc, #224]	; (801587c <udp_bind+0x100>)
 801579c:	f240 32b7 	movw	r2, #951	; 0x3b7
 80157a0:	4937      	ldr	r1, [pc, #220]	; (8015880 <udp_bind+0x104>)
 80157a2:	4838      	ldr	r0, [pc, #224]	; (8015884 <udp_bind+0x108>)
 80157a4:	f002 ffe0 	bl	8018768 <iprintf>
 80157a8:	f06f 030f 	mvn.w	r3, #15
 80157ac:	e060      	b.n	8015870 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80157ae:	2300      	movs	r3, #0
 80157b0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157b2:	4b35      	ldr	r3, [pc, #212]	; (8015888 <udp_bind+0x10c>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	e009      	b.n	80157ce <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d102      	bne.n	80157c8 <udp_bind+0x4c>
      rebind = 1;
 80157c2:	2301      	movs	r3, #1
 80157c4:	74fb      	strb	r3, [r7, #19]
      break;
 80157c6:	e005      	b.n	80157d4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	617b      	str	r3, [r7, #20]
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d1f2      	bne.n	80157ba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80157d4:	88fb      	ldrh	r3, [r7, #6]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d109      	bne.n	80157ee <udp_bind+0x72>
    port = udp_new_port();
 80157da:	f7ff fc35 	bl	8015048 <udp_new_port>
 80157de:	4603      	mov	r3, r0
 80157e0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80157e2:	88fb      	ldrh	r3, [r7, #6]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d12c      	bne.n	8015842 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80157e8:	f06f 0307 	mvn.w	r3, #7
 80157ec:	e040      	b.n	8015870 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157ee:	4b26      	ldr	r3, [pc, #152]	; (8015888 <udp_bind+0x10c>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	617b      	str	r3, [r7, #20]
 80157f4:	e022      	b.n	801583c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80157f6:	68fa      	ldr	r2, [r7, #12]
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d01b      	beq.n	8015836 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	8a5b      	ldrh	r3, [r3, #18]
 8015802:	88fa      	ldrh	r2, [r7, #6]
 8015804:	429a      	cmp	r2, r3
 8015806:	d116      	bne.n	8015836 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	681a      	ldr	r2, [r3, #0]
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015810:	429a      	cmp	r2, r3
 8015812:	d00d      	beq.n	8015830 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d00a      	beq.n	8015830 <udp_bind+0xb4>
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d006      	beq.n	8015830 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015822:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015824:	2b00      	cmp	r3, #0
 8015826:	d003      	beq.n	8015830 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d102      	bne.n	8015836 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015830:	f06f 0307 	mvn.w	r3, #7
 8015834:	e01c      	b.n	8015870 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	617b      	str	r3, [r7, #20]
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1d9      	bne.n	80157f6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d002      	beq.n	801584e <udp_bind+0xd2>
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	e000      	b.n	8015850 <udp_bind+0xd4>
 801584e:	2300      	movs	r3, #0
 8015850:	68fa      	ldr	r2, [r7, #12]
 8015852:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	88fa      	ldrh	r2, [r7, #6]
 8015858:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801585a:	7cfb      	ldrb	r3, [r7, #19]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d106      	bne.n	801586e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015860:	4b09      	ldr	r3, [pc, #36]	; (8015888 <udp_bind+0x10c>)
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015868:	4a07      	ldr	r2, [pc, #28]	; (8015888 <udp_bind+0x10c>)
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	3718      	adds	r7, #24
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	0801d618 	.word	0x0801d618
 801587c:	0801ca80 	.word	0x0801ca80
 8015880:	0801cd48 	.word	0x0801cd48
 8015884:	0801cad4 	.word	0x0801cad4
 8015888:	2000db68 	.word	0x2000db68

0801588c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b084      	sub	sp, #16
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d107      	bne.n	80158ae <udp_recv+0x22>
 801589e:	4b08      	ldr	r3, [pc, #32]	; (80158c0 <udp_recv+0x34>)
 80158a0:	f240 428a 	movw	r2, #1162	; 0x48a
 80158a4:	4907      	ldr	r1, [pc, #28]	; (80158c4 <udp_recv+0x38>)
 80158a6:	4808      	ldr	r0, [pc, #32]	; (80158c8 <udp_recv+0x3c>)
 80158a8:	f002 ff5e 	bl	8018768 <iprintf>
 80158ac:	e005      	b.n	80158ba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	68ba      	ldr	r2, [r7, #8]
 80158b2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	61da      	str	r2, [r3, #28]
}
 80158ba:	3710      	adds	r7, #16
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	0801ca80 	.word	0x0801ca80
 80158c4:	0801cdb4 	.word	0x0801cdb4
 80158c8:	0801cad4 	.word	0x0801cad4

080158cc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d107      	bne.n	80158ea <udp_remove+0x1e>
 80158da:	4b19      	ldr	r3, [pc, #100]	; (8015940 <udp_remove+0x74>)
 80158dc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80158e0:	4918      	ldr	r1, [pc, #96]	; (8015944 <udp_remove+0x78>)
 80158e2:	4819      	ldr	r0, [pc, #100]	; (8015948 <udp_remove+0x7c>)
 80158e4:	f002 ff40 	bl	8018768 <iprintf>
 80158e8:	e026      	b.n	8015938 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80158ea:	4b18      	ldr	r3, [pc, #96]	; (801594c <udp_remove+0x80>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d105      	bne.n	8015900 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80158f4:	4b15      	ldr	r3, [pc, #84]	; (801594c <udp_remove+0x80>)
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	68db      	ldr	r3, [r3, #12]
 80158fa:	4a14      	ldr	r2, [pc, #80]	; (801594c <udp_remove+0x80>)
 80158fc:	6013      	str	r3, [r2, #0]
 80158fe:	e017      	b.n	8015930 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015900:	4b12      	ldr	r3, [pc, #72]	; (801594c <udp_remove+0x80>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	60fb      	str	r3, [r7, #12]
 8015906:	e010      	b.n	801592a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	68db      	ldr	r3, [r3, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d009      	beq.n	8015924 <udp_remove+0x58>
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	68db      	ldr	r3, [r3, #12]
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	429a      	cmp	r2, r3
 8015918:	d104      	bne.n	8015924 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	68da      	ldr	r2, [r3, #12]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	60da      	str	r2, [r3, #12]
        break;
 8015922:	e005      	b.n	8015930 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	68db      	ldr	r3, [r3, #12]
 8015928:	60fb      	str	r3, [r7, #12]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d1eb      	bne.n	8015908 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015930:	6879      	ldr	r1, [r7, #4]
 8015932:	2000      	movs	r0, #0
 8015934:	f7f8 f8c4 	bl	800dac0 <memp_free>
}
 8015938:	3710      	adds	r7, #16
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}
 801593e:	bf00      	nop
 8015940:	0801ca80 	.word	0x0801ca80
 8015944:	0801cdcc 	.word	0x0801cdcc
 8015948:	0801cad4 	.word	0x0801cad4
 801594c:	2000db68 	.word	0x2000db68

08015950 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015956:	2000      	movs	r0, #0
 8015958:	f7f8 f860 	bl	800da1c <memp_malloc>
 801595c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d007      	beq.n	8015974 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015964:	2220      	movs	r2, #32
 8015966:	2100      	movs	r1, #0
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f002 fe4b 	bl	8018604 <memset>
    pcb->ttl = UDP_TTL;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	22ff      	movs	r2, #255	; 0xff
 8015972:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015974:	687b      	ldr	r3, [r7, #4]
}
 8015976:	4618      	mov	r0, r3
 8015978:	3708      	adds	r7, #8
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}

0801597e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801597e:	b580      	push	{r7, lr}
 8015980:	b084      	sub	sp, #16
 8015982:	af00      	add	r7, sp, #0
 8015984:	4603      	mov	r3, r0
 8015986:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015988:	f7ff ffe2 	bl	8015950 <udp_new>
 801598c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801598e:	68fb      	ldr	r3, [r7, #12]
}
 8015990:	4618      	mov	r0, r3
 8015992:	3710      	adds	r7, #16
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015998:	b480      	push	{r7}
 801599a:	b085      	sub	sp, #20
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d01e      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d01a      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d017      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d013      	beq.n	80159e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159be:	4b0d      	ldr	r3, [pc, #52]	; (80159f4 <udp_netif_ip_addr_changed+0x5c>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
 80159c4:	e00c      	b.n	80159e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d103      	bne.n	80159da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1ef      	bne.n	80159c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159e6:	bf00      	nop
 80159e8:	3714      	adds	r7, #20
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop
 80159f4:	2000db68 	.word	0x2000db68

080159f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015a00:	4915      	ldr	r1, [pc, #84]	; (8015a58 <etharp_free_entry+0x60>)
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	4613      	mov	r3, r2
 8015a06:	005b      	lsls	r3, r3, #1
 8015a08:	4413      	add	r3, r2
 8015a0a:	00db      	lsls	r3, r3, #3
 8015a0c:	440b      	add	r3, r1
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d013      	beq.n	8015a3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015a14:	4910      	ldr	r1, [pc, #64]	; (8015a58 <etharp_free_entry+0x60>)
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	4613      	mov	r3, r2
 8015a1a:	005b      	lsls	r3, r3, #1
 8015a1c:	4413      	add	r3, r2
 8015a1e:	00db      	lsls	r3, r3, #3
 8015a20:	440b      	add	r3, r1
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	4618      	mov	r0, r3
 8015a26:	f7f8 ff21 	bl	800e86c <pbuf_free>
    arp_table[i].q = NULL;
 8015a2a:	490b      	ldr	r1, [pc, #44]	; (8015a58 <etharp_free_entry+0x60>)
 8015a2c:	687a      	ldr	r2, [r7, #4]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	005b      	lsls	r3, r3, #1
 8015a32:	4413      	add	r3, r2
 8015a34:	00db      	lsls	r3, r3, #3
 8015a36:	440b      	add	r3, r1
 8015a38:	2200      	movs	r2, #0
 8015a3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a3c:	4906      	ldr	r1, [pc, #24]	; (8015a58 <etharp_free_entry+0x60>)
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4613      	mov	r3, r2
 8015a42:	005b      	lsls	r3, r3, #1
 8015a44:	4413      	add	r3, r2
 8015a46:	00db      	lsls	r3, r3, #3
 8015a48:	440b      	add	r3, r1
 8015a4a:	3314      	adds	r3, #20
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015a50:	bf00      	nop
 8015a52:	3708      	adds	r7, #8
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	2000438c 	.word	0x2000438c

08015a5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a62:	2300      	movs	r3, #0
 8015a64:	607b      	str	r3, [r7, #4]
 8015a66:	e096      	b.n	8015b96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a68:	494f      	ldr	r1, [pc, #316]	; (8015ba8 <etharp_tmr+0x14c>)
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	005b      	lsls	r3, r3, #1
 8015a70:	4413      	add	r3, r2
 8015a72:	00db      	lsls	r3, r3, #3
 8015a74:	440b      	add	r3, r1
 8015a76:	3314      	adds	r3, #20
 8015a78:	781b      	ldrb	r3, [r3, #0]
 8015a7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a7c:	78fb      	ldrb	r3, [r7, #3]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f000 8086 	beq.w	8015b90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a84:	4948      	ldr	r1, [pc, #288]	; (8015ba8 <etharp_tmr+0x14c>)
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	4613      	mov	r3, r2
 8015a8a:	005b      	lsls	r3, r3, #1
 8015a8c:	4413      	add	r3, r2
 8015a8e:	00db      	lsls	r3, r3, #3
 8015a90:	440b      	add	r3, r1
 8015a92:	3312      	adds	r3, #18
 8015a94:	881b      	ldrh	r3, [r3, #0]
 8015a96:	3301      	adds	r3, #1
 8015a98:	b298      	uxth	r0, r3
 8015a9a:	4943      	ldr	r1, [pc, #268]	; (8015ba8 <etharp_tmr+0x14c>)
 8015a9c:	687a      	ldr	r2, [r7, #4]
 8015a9e:	4613      	mov	r3, r2
 8015aa0:	005b      	lsls	r3, r3, #1
 8015aa2:	4413      	add	r3, r2
 8015aa4:	00db      	lsls	r3, r3, #3
 8015aa6:	440b      	add	r3, r1
 8015aa8:	3312      	adds	r3, #18
 8015aaa:	4602      	mov	r2, r0
 8015aac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015aae:	493e      	ldr	r1, [pc, #248]	; (8015ba8 <etharp_tmr+0x14c>)
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	005b      	lsls	r3, r3, #1
 8015ab6:	4413      	add	r3, r2
 8015ab8:	00db      	lsls	r3, r3, #3
 8015aba:	440b      	add	r3, r1
 8015abc:	3312      	adds	r3, #18
 8015abe:	881b      	ldrh	r3, [r3, #0]
 8015ac0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015ac4:	d215      	bcs.n	8015af2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ac6:	4938      	ldr	r1, [pc, #224]	; (8015ba8 <etharp_tmr+0x14c>)
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	4613      	mov	r3, r2
 8015acc:	005b      	lsls	r3, r3, #1
 8015ace:	4413      	add	r3, r2
 8015ad0:	00db      	lsls	r3, r3, #3
 8015ad2:	440b      	add	r3, r1
 8015ad4:	3314      	adds	r3, #20
 8015ad6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015ad8:	2b01      	cmp	r3, #1
 8015ada:	d10e      	bne.n	8015afa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015adc:	4932      	ldr	r1, [pc, #200]	; (8015ba8 <etharp_tmr+0x14c>)
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	4413      	add	r3, r2
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	440b      	add	r3, r1
 8015aea:	3312      	adds	r3, #18
 8015aec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015aee:	2b04      	cmp	r3, #4
 8015af0:	d903      	bls.n	8015afa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f7ff ff80 	bl	80159f8 <etharp_free_entry>
 8015af8:	e04a      	b.n	8015b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015afa:	492b      	ldr	r1, [pc, #172]	; (8015ba8 <etharp_tmr+0x14c>)
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	4613      	mov	r3, r2
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	4413      	add	r3, r2
 8015b04:	00db      	lsls	r3, r3, #3
 8015b06:	440b      	add	r3, r1
 8015b08:	3314      	adds	r3, #20
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	2b03      	cmp	r3, #3
 8015b0e:	d10a      	bne.n	8015b26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015b10:	4925      	ldr	r1, [pc, #148]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	4613      	mov	r3, r2
 8015b16:	005b      	lsls	r3, r3, #1
 8015b18:	4413      	add	r3, r2
 8015b1a:	00db      	lsls	r3, r3, #3
 8015b1c:	440b      	add	r3, r1
 8015b1e:	3314      	adds	r3, #20
 8015b20:	2204      	movs	r2, #4
 8015b22:	701a      	strb	r2, [r3, #0]
 8015b24:	e034      	b.n	8015b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015b26:	4920      	ldr	r1, [pc, #128]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	440b      	add	r3, r1
 8015b34:	3314      	adds	r3, #20
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	2b04      	cmp	r3, #4
 8015b3a:	d10a      	bne.n	8015b52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b3c:	491a      	ldr	r1, [pc, #104]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	4613      	mov	r3, r2
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	4413      	add	r3, r2
 8015b46:	00db      	lsls	r3, r3, #3
 8015b48:	440b      	add	r3, r1
 8015b4a:	3314      	adds	r3, #20
 8015b4c:	2202      	movs	r2, #2
 8015b4e:	701a      	strb	r2, [r3, #0]
 8015b50:	e01e      	b.n	8015b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b52:	4915      	ldr	r1, [pc, #84]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	4613      	mov	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4413      	add	r3, r2
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	440b      	add	r3, r1
 8015b60:	3314      	adds	r3, #20
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d113      	bne.n	8015b90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b68:	490f      	ldr	r1, [pc, #60]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b6a:	687a      	ldr	r2, [r7, #4]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	005b      	lsls	r3, r3, #1
 8015b70:	4413      	add	r3, r2
 8015b72:	00db      	lsls	r3, r3, #3
 8015b74:	440b      	add	r3, r1
 8015b76:	3308      	adds	r3, #8
 8015b78:	6818      	ldr	r0, [r3, #0]
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	005b      	lsls	r3, r3, #1
 8015b80:	4413      	add	r3, r2
 8015b82:	00db      	lsls	r3, r3, #3
 8015b84:	4a08      	ldr	r2, [pc, #32]	; (8015ba8 <etharp_tmr+0x14c>)
 8015b86:	4413      	add	r3, r2
 8015b88:	3304      	adds	r3, #4
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	f000 fe6e 	bl	801686c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	3301      	adds	r3, #1
 8015b94:	607b      	str	r3, [r7, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b09      	cmp	r3, #9
 8015b9a:	f77f af65 	ble.w	8015a68 <etharp_tmr+0xc>
      }
    }
  }
}
 8015b9e:	bf00      	nop
 8015ba0:	bf00      	nop
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	2000438c 	.word	0x2000438c

08015bac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08a      	sub	sp, #40	; 0x28
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015bba:	230a      	movs	r3, #10
 8015bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015bbe:	230a      	movs	r3, #10
 8015bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015bc2:	230a      	movs	r3, #10
 8015bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015bca:	230a      	movs	r3, #10
 8015bcc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	83bb      	strh	r3, [r7, #28]
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	837b      	strh	r3, [r7, #26]
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bda:	2300      	movs	r3, #0
 8015bdc:	843b      	strh	r3, [r7, #32]
 8015bde:	e0ae      	b.n	8015d3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015be0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015be4:	49a6      	ldr	r1, [pc, #664]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015be6:	4613      	mov	r3, r2
 8015be8:	005b      	lsls	r3, r3, #1
 8015bea:	4413      	add	r3, r2
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	440b      	add	r3, r1
 8015bf0:	3314      	adds	r3, #20
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bfa:	2b0a      	cmp	r3, #10
 8015bfc:	d105      	bne.n	8015c0a <etharp_find_entry+0x5e>
 8015bfe:	7dfb      	ldrb	r3, [r7, #23]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d102      	bne.n	8015c0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015c04:	8c3b      	ldrh	r3, [r7, #32]
 8015c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8015c08:	e095      	b.n	8015d36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015c0a:	7dfb      	ldrb	r3, [r7, #23]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f000 8092 	beq.w	8015d36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015c12:	7dfb      	ldrb	r3, [r7, #23]
 8015c14:	2b01      	cmp	r3, #1
 8015c16:	d009      	beq.n	8015c2c <etharp_find_entry+0x80>
 8015c18:	7dfb      	ldrb	r3, [r7, #23]
 8015c1a:	2b01      	cmp	r3, #1
 8015c1c:	d806      	bhi.n	8015c2c <etharp_find_entry+0x80>
 8015c1e:	4b99      	ldr	r3, [pc, #612]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015c20:	f240 1223 	movw	r2, #291	; 0x123
 8015c24:	4998      	ldr	r1, [pc, #608]	; (8015e88 <etharp_find_entry+0x2dc>)
 8015c26:	4899      	ldr	r0, [pc, #612]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015c28:	f002 fd9e 	bl	8018768 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d020      	beq.n	8015c74 <etharp_find_entry+0xc8>
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c3a:	4891      	ldr	r0, [pc, #580]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c3c:	4613      	mov	r3, r2
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	4413      	add	r3, r2
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	4403      	add	r3, r0
 8015c46:	3304      	adds	r3, #4
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4299      	cmp	r1, r3
 8015c4c:	d112      	bne.n	8015c74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d00c      	beq.n	8015c6e <etharp_find_entry+0xc2>
 8015c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c58:	4989      	ldr	r1, [pc, #548]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	4413      	add	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	440b      	add	r3, r1
 8015c64:	3308      	adds	r3, #8
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d102      	bne.n	8015c74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c72:	e100      	b.n	8015e76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c74:	7dfb      	ldrb	r3, [r7, #23]
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d140      	bne.n	8015cfc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c7e:	4980      	ldr	r1, [pc, #512]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c80:	4613      	mov	r3, r2
 8015c82:	005b      	lsls	r3, r3, #1
 8015c84:	4413      	add	r3, r2
 8015c86:	00db      	lsls	r3, r3, #3
 8015c88:	440b      	add	r3, r1
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d01a      	beq.n	8015cc6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c94:	497a      	ldr	r1, [pc, #488]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015c96:	4613      	mov	r3, r2
 8015c98:	005b      	lsls	r3, r3, #1
 8015c9a:	4413      	add	r3, r2
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	440b      	add	r3, r1
 8015ca0:	3312      	adds	r3, #18
 8015ca2:	881b      	ldrh	r3, [r3, #0]
 8015ca4:	8bba      	ldrh	r2, [r7, #28]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d845      	bhi.n	8015d36 <etharp_find_entry+0x18a>
            old_queue = i;
 8015caa:	8c3b      	ldrh	r3, [r7, #32]
 8015cac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb2:	4973      	ldr	r1, [pc, #460]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	005b      	lsls	r3, r3, #1
 8015cb8:	4413      	add	r3, r2
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	440b      	add	r3, r1
 8015cbe:	3312      	adds	r3, #18
 8015cc0:	881b      	ldrh	r3, [r3, #0]
 8015cc2:	83bb      	strh	r3, [r7, #28]
 8015cc4:	e037      	b.n	8015d36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cca:	496d      	ldr	r1, [pc, #436]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015ccc:	4613      	mov	r3, r2
 8015cce:	005b      	lsls	r3, r3, #1
 8015cd0:	4413      	add	r3, r2
 8015cd2:	00db      	lsls	r3, r3, #3
 8015cd4:	440b      	add	r3, r1
 8015cd6:	3312      	adds	r3, #18
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	8b7a      	ldrh	r2, [r7, #26]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d82a      	bhi.n	8015d36 <etharp_find_entry+0x18a>
            old_pending = i;
 8015ce0:	8c3b      	ldrh	r3, [r7, #32]
 8015ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ce8:	4965      	ldr	r1, [pc, #404]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015cea:	4613      	mov	r3, r2
 8015cec:	005b      	lsls	r3, r3, #1
 8015cee:	4413      	add	r3, r2
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	440b      	add	r3, r1
 8015cf4:	3312      	adds	r3, #18
 8015cf6:	881b      	ldrh	r3, [r3, #0]
 8015cf8:	837b      	strh	r3, [r7, #26]
 8015cfa:	e01c      	b.n	8015d36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015cfc:	7dfb      	ldrb	r3, [r7, #23]
 8015cfe:	2b01      	cmp	r3, #1
 8015d00:	d919      	bls.n	8015d36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d06:	495e      	ldr	r1, [pc, #376]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015d08:	4613      	mov	r3, r2
 8015d0a:	005b      	lsls	r3, r3, #1
 8015d0c:	4413      	add	r3, r2
 8015d0e:	00db      	lsls	r3, r3, #3
 8015d10:	440b      	add	r3, r1
 8015d12:	3312      	adds	r3, #18
 8015d14:	881b      	ldrh	r3, [r3, #0]
 8015d16:	8b3a      	ldrh	r2, [r7, #24]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d80c      	bhi.n	8015d36 <etharp_find_entry+0x18a>
            old_stable = i;
 8015d1c:	8c3b      	ldrh	r3, [r7, #32]
 8015d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d24:	4956      	ldr	r1, [pc, #344]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015d26:	4613      	mov	r3, r2
 8015d28:	005b      	lsls	r3, r3, #1
 8015d2a:	4413      	add	r3, r2
 8015d2c:	00db      	lsls	r3, r3, #3
 8015d2e:	440b      	add	r3, r1
 8015d30:	3312      	adds	r3, #18
 8015d32:	881b      	ldrh	r3, [r3, #0]
 8015d34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d36:	8c3b      	ldrh	r3, [r7, #32]
 8015d38:	3301      	adds	r3, #1
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	843b      	strh	r3, [r7, #32]
 8015d3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d42:	2b09      	cmp	r3, #9
 8015d44:	f77f af4c 	ble.w	8015be0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	f003 0302 	and.w	r3, r3, #2
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d108      	bne.n	8015d64 <etharp_find_entry+0x1b8>
 8015d52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d56:	2b0a      	cmp	r3, #10
 8015d58:	d107      	bne.n	8015d6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d5a:	7afb      	ldrb	r3, [r7, #11]
 8015d5c:	f003 0301 	and.w	r3, r3, #1
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d102      	bne.n	8015d6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d64:	f04f 33ff 	mov.w	r3, #4294967295
 8015d68:	e085      	b.n	8015e76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d6e:	2b09      	cmp	r3, #9
 8015d70:	dc02      	bgt.n	8015d78 <etharp_find_entry+0x1cc>
    i = empty;
 8015d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d74:	843b      	strh	r3, [r7, #32]
 8015d76:	e039      	b.n	8015dec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015d7c:	2b09      	cmp	r3, #9
 8015d7e:	dc14      	bgt.n	8015daa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d88:	493d      	ldr	r1, [pc, #244]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	005b      	lsls	r3, r3, #1
 8015d8e:	4413      	add	r3, r2
 8015d90:	00db      	lsls	r3, r3, #3
 8015d92:	440b      	add	r3, r1
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d018      	beq.n	8015dcc <etharp_find_entry+0x220>
 8015d9a:	4b3a      	ldr	r3, [pc, #232]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015d9c:	f240 126d 	movw	r2, #365	; 0x16d
 8015da0:	493b      	ldr	r1, [pc, #236]	; (8015e90 <etharp_find_entry+0x2e4>)
 8015da2:	483a      	ldr	r0, [pc, #232]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015da4:	f002 fce0 	bl	8018768 <iprintf>
 8015da8:	e010      	b.n	8015dcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015daa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015dae:	2b09      	cmp	r3, #9
 8015db0:	dc02      	bgt.n	8015db8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015db4:	843b      	strh	r3, [r7, #32]
 8015db6:	e009      	b.n	8015dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015db8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015dbc:	2b09      	cmp	r3, #9
 8015dbe:	dc02      	bgt.n	8015dc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015dc0:	8bfb      	ldrh	r3, [r7, #30]
 8015dc2:	843b      	strh	r3, [r7, #32]
 8015dc4:	e002      	b.n	8015dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015dca:	e054      	b.n	8015e76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015dcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015dd0:	2b09      	cmp	r3, #9
 8015dd2:	dd06      	ble.n	8015de2 <etharp_find_entry+0x236>
 8015dd4:	4b2b      	ldr	r3, [pc, #172]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015dd6:	f240 127f 	movw	r2, #383	; 0x17f
 8015dda:	492e      	ldr	r1, [pc, #184]	; (8015e94 <etharp_find_entry+0x2e8>)
 8015ddc:	482b      	ldr	r0, [pc, #172]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015dde:	f002 fcc3 	bl	8018768 <iprintf>
    etharp_free_entry(i);
 8015de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff fe06 	bl	80159f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015df0:	2b09      	cmp	r3, #9
 8015df2:	dd06      	ble.n	8015e02 <etharp_find_entry+0x256>
 8015df4:	4b23      	ldr	r3, [pc, #140]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015df6:	f240 1283 	movw	r2, #387	; 0x183
 8015dfa:	4926      	ldr	r1, [pc, #152]	; (8015e94 <etharp_find_entry+0x2e8>)
 8015dfc:	4823      	ldr	r0, [pc, #140]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015dfe:	f002 fcb3 	bl	8018768 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e06:	491e      	ldr	r1, [pc, #120]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e08:	4613      	mov	r3, r2
 8015e0a:	005b      	lsls	r3, r3, #1
 8015e0c:	4413      	add	r3, r2
 8015e0e:	00db      	lsls	r3, r3, #3
 8015e10:	440b      	add	r3, r1
 8015e12:	3314      	adds	r3, #20
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d006      	beq.n	8015e28 <etharp_find_entry+0x27c>
 8015e1a:	4b1a      	ldr	r3, [pc, #104]	; (8015e84 <etharp_find_entry+0x2d8>)
 8015e1c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015e20:	491d      	ldr	r1, [pc, #116]	; (8015e98 <etharp_find_entry+0x2ec>)
 8015e22:	481a      	ldr	r0, [pc, #104]	; (8015e8c <etharp_find_entry+0x2e0>)
 8015e24:	f002 fca0 	bl	8018768 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d00b      	beq.n	8015e46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015e2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	6819      	ldr	r1, [r3, #0]
 8015e36:	4812      	ldr	r0, [pc, #72]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e38:	4613      	mov	r3, r2
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	4413      	add	r3, r2
 8015e3e:	00db      	lsls	r3, r3, #3
 8015e40:	4403      	add	r3, r0
 8015e42:	3304      	adds	r3, #4
 8015e44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e4a:	490d      	ldr	r1, [pc, #52]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	4413      	add	r3, r2
 8015e52:	00db      	lsls	r3, r3, #3
 8015e54:	440b      	add	r3, r1
 8015e56:	3312      	adds	r3, #18
 8015e58:	2200      	movs	r2, #0
 8015e5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e60:	4907      	ldr	r1, [pc, #28]	; (8015e80 <etharp_find_entry+0x2d4>)
 8015e62:	4613      	mov	r3, r2
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	440b      	add	r3, r1
 8015e6c:	3308      	adds	r3, #8
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3728      	adds	r7, #40	; 0x28
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	2000438c 	.word	0x2000438c
 8015e84:	0801cde4 	.word	0x0801cde4
 8015e88:	0801ce1c 	.word	0x0801ce1c
 8015e8c:	0801ce5c 	.word	0x0801ce5c
 8015e90:	0801ce84 	.word	0x0801ce84
 8015e94:	0801ce9c 	.word	0x0801ce9c
 8015e98:	0801ceb0 	.word	0x0801ceb0

08015e9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b088      	sub	sp, #32
 8015ea0:	af02      	add	r7, sp, #8
 8015ea2:	60f8      	str	r0, [r7, #12]
 8015ea4:	60b9      	str	r1, [r7, #8]
 8015ea6:	607a      	str	r2, [r7, #4]
 8015ea8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015eb0:	2b06      	cmp	r3, #6
 8015eb2:	d006      	beq.n	8015ec2 <etharp_update_arp_entry+0x26>
 8015eb4:	4b48      	ldr	r3, [pc, #288]	; (8015fd8 <etharp_update_arp_entry+0x13c>)
 8015eb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015eba:	4948      	ldr	r1, [pc, #288]	; (8015fdc <etharp_update_arp_entry+0x140>)
 8015ebc:	4848      	ldr	r0, [pc, #288]	; (8015fe0 <etharp_update_arp_entry+0x144>)
 8015ebe:	f002 fc53 	bl	8018768 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d012      	beq.n	8015eee <etharp_update_arp_entry+0x52>
 8015ec8:	68bb      	ldr	r3, [r7, #8]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00e      	beq.n	8015eee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ed0:	68bb      	ldr	r3, [r7, #8]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	68f9      	ldr	r1, [r7, #12]
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f001 f8fe 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8015edc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d105      	bne.n	8015eee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015eea:	2be0      	cmp	r3, #224	; 0xe0
 8015eec:	d102      	bne.n	8015ef4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015eee:	f06f 030f 	mvn.w	r3, #15
 8015ef2:	e06c      	b.n	8015fce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015ef4:	78fb      	ldrb	r3, [r7, #3]
 8015ef6:	68fa      	ldr	r2, [r7, #12]
 8015ef8:	4619      	mov	r1, r3
 8015efa:	68b8      	ldr	r0, [r7, #8]
 8015efc:	f7ff fe56 	bl	8015bac <etharp_find_entry>
 8015f00:	4603      	mov	r3, r0
 8015f02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015f04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	da02      	bge.n	8015f12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015f0c:	8afb      	ldrh	r3, [r7, #22]
 8015f0e:	b25b      	sxtb	r3, r3
 8015f10:	e05d      	b.n	8015fce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f16:	4933      	ldr	r1, [pc, #204]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	440b      	add	r3, r1
 8015f22:	3314      	adds	r3, #20
 8015f24:	2202      	movs	r2, #2
 8015f26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f2c:	492d      	ldr	r1, [pc, #180]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f2e:	4613      	mov	r3, r2
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	4413      	add	r3, r2
 8015f34:	00db      	lsls	r3, r3, #3
 8015f36:	440b      	add	r3, r1
 8015f38:	3308      	adds	r3, #8
 8015f3a:	68fa      	ldr	r2, [r7, #12]
 8015f3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f42:	4613      	mov	r3, r2
 8015f44:	005b      	lsls	r3, r3, #1
 8015f46:	4413      	add	r3, r2
 8015f48:	00db      	lsls	r3, r3, #3
 8015f4a:	3308      	adds	r3, #8
 8015f4c:	4a25      	ldr	r2, [pc, #148]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f4e:	4413      	add	r3, r2
 8015f50:	3304      	adds	r3, #4
 8015f52:	2206      	movs	r2, #6
 8015f54:	6879      	ldr	r1, [r7, #4]
 8015f56:	4618      	mov	r0, r3
 8015f58:	f002 fb2c 	bl	80185b4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f60:	4920      	ldr	r1, [pc, #128]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f62:	4613      	mov	r3, r2
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	4413      	add	r3, r2
 8015f68:	00db      	lsls	r3, r3, #3
 8015f6a:	440b      	add	r3, r1
 8015f6c:	3312      	adds	r3, #18
 8015f6e:	2200      	movs	r2, #0
 8015f70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f76:	491b      	ldr	r1, [pc, #108]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f78:	4613      	mov	r3, r2
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	4413      	add	r3, r2
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	440b      	add	r3, r1
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d021      	beq.n	8015fcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f8c:	4915      	ldr	r1, [pc, #84]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015f8e:	4613      	mov	r3, r2
 8015f90:	005b      	lsls	r3, r3, #1
 8015f92:	4413      	add	r3, r2
 8015f94:	00db      	lsls	r3, r3, #3
 8015f96:	440b      	add	r3, r1
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fa0:	4910      	ldr	r1, [pc, #64]	; (8015fe4 <etharp_update_arp_entry+0x148>)
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4413      	add	r3, r2
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	440b      	add	r3, r1
 8015fac:	2200      	movs	r2, #0
 8015fae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6939      	ldr	r1, [r7, #16]
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	f001 ff91 	bl	8017ee8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015fc6:	6938      	ldr	r0, [r7, #16]
 8015fc8:	f7f8 fc50 	bl	800e86c <pbuf_free>
  }
  return ERR_OK;
 8015fcc:	2300      	movs	r3, #0
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3718      	adds	r7, #24
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	0801cde4 	.word	0x0801cde4
 8015fdc:	0801cedc 	.word	0x0801cedc
 8015fe0:	0801ce5c 	.word	0x0801ce5c
 8015fe4:	2000438c 	.word	0x2000438c

08015fe8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b084      	sub	sp, #16
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	60fb      	str	r3, [r7, #12]
 8015ff4:	e01e      	b.n	8016034 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015ff6:	4913      	ldr	r1, [pc, #76]	; (8016044 <etharp_cleanup_netif+0x5c>)
 8015ff8:	68fa      	ldr	r2, [r7, #12]
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	005b      	lsls	r3, r3, #1
 8015ffe:	4413      	add	r3, r2
 8016000:	00db      	lsls	r3, r3, #3
 8016002:	440b      	add	r3, r1
 8016004:	3314      	adds	r3, #20
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801600a:	7afb      	ldrb	r3, [r7, #11]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d00e      	beq.n	801602e <etharp_cleanup_netif+0x46>
 8016010:	490c      	ldr	r1, [pc, #48]	; (8016044 <etharp_cleanup_netif+0x5c>)
 8016012:	68fa      	ldr	r2, [r7, #12]
 8016014:	4613      	mov	r3, r2
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	4413      	add	r3, r2
 801601a:	00db      	lsls	r3, r3, #3
 801601c:	440b      	add	r3, r1
 801601e:	3308      	adds	r3, #8
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	429a      	cmp	r2, r3
 8016026:	d102      	bne.n	801602e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f7ff fce5 	bl	80159f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	3301      	adds	r3, #1
 8016032:	60fb      	str	r3, [r7, #12]
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2b09      	cmp	r3, #9
 8016038:	dddd      	ble.n	8015ff6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801603a:	bf00      	nop
 801603c:	bf00      	nop
 801603e:	3710      	adds	r7, #16
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	2000438c 	.word	0x2000438c

08016048 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016048:	b5b0      	push	{r4, r5, r7, lr}
 801604a:	b08a      	sub	sp, #40	; 0x28
 801604c:	af04      	add	r7, sp, #16
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d107      	bne.n	8016068 <etharp_input+0x20>
 8016058:	4b3d      	ldr	r3, [pc, #244]	; (8016150 <etharp_input+0x108>)
 801605a:	f240 228a 	movw	r2, #650	; 0x28a
 801605e:	493d      	ldr	r1, [pc, #244]	; (8016154 <etharp_input+0x10c>)
 8016060:	483d      	ldr	r0, [pc, #244]	; (8016158 <etharp_input+0x110>)
 8016062:	f002 fb81 	bl	8018768 <iprintf>
 8016066:	e06f      	b.n	8016148 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	881b      	ldrh	r3, [r3, #0]
 8016072:	b29b      	uxth	r3, r3
 8016074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016078:	d10c      	bne.n	8016094 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801607e:	2b06      	cmp	r3, #6
 8016080:	d108      	bne.n	8016094 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016082:	693b      	ldr	r3, [r7, #16]
 8016084:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016086:	2b04      	cmp	r3, #4
 8016088:	d104      	bne.n	8016094 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	885b      	ldrh	r3, [r3, #2]
 801608e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016090:	2b08      	cmp	r3, #8
 8016092:	d003      	beq.n	801609c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7f8 fbe9 	bl	800e86c <pbuf_free>
    return;
 801609a:	e055      	b.n	8016148 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	330e      	adds	r3, #14
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	3318      	adds	r3, #24
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	3304      	adds	r3, #4
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d102      	bne.n	80160bc <etharp_input+0x74>
    for_us = 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	75fb      	strb	r3, [r7, #23]
 80160ba:	e009      	b.n	80160d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80160bc:	68ba      	ldr	r2, [r7, #8]
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	3304      	adds	r3, #4
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	bf0c      	ite	eq
 80160c8:	2301      	moveq	r3, #1
 80160ca:	2300      	movne	r3, #0
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	f103 0208 	add.w	r2, r3, #8
 80160d6:	7dfb      	ldrb	r3, [r7, #23]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d001      	beq.n	80160e0 <etharp_input+0x98>
 80160dc:	2301      	movs	r3, #1
 80160de:	e000      	b.n	80160e2 <etharp_input+0x9a>
 80160e0:	2302      	movs	r3, #2
 80160e2:	f107 010c 	add.w	r1, r7, #12
 80160e6:	6838      	ldr	r0, [r7, #0]
 80160e8:	f7ff fed8 	bl	8015e9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	88db      	ldrh	r3, [r3, #6]
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160f6:	d003      	beq.n	8016100 <etharp_input+0xb8>
 80160f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160fc:	d01e      	beq.n	801613c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80160fe:	e020      	b.n	8016142 <etharp_input+0xfa>
      if (for_us) {
 8016100:	7dfb      	ldrb	r3, [r7, #23]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d01c      	beq.n	8016140 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801611c:	693a      	ldr	r2, [r7, #16]
 801611e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016120:	2102      	movs	r1, #2
 8016122:	9103      	str	r1, [sp, #12]
 8016124:	f107 010c 	add.w	r1, r7, #12
 8016128:	9102      	str	r1, [sp, #8]
 801612a:	9201      	str	r2, [sp, #4]
 801612c:	9300      	str	r3, [sp, #0]
 801612e:	462b      	mov	r3, r5
 8016130:	4622      	mov	r2, r4
 8016132:	4601      	mov	r1, r0
 8016134:	6838      	ldr	r0, [r7, #0]
 8016136:	f000 faeb 	bl	8016710 <etharp_raw>
      break;
 801613a:	e001      	b.n	8016140 <etharp_input+0xf8>
      break;
 801613c:	bf00      	nop
 801613e:	e000      	b.n	8016142 <etharp_input+0xfa>
      break;
 8016140:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7f8 fb92 	bl	800e86c <pbuf_free>
}
 8016148:	3718      	adds	r7, #24
 801614a:	46bd      	mov	sp, r7
 801614c:	bdb0      	pop	{r4, r5, r7, pc}
 801614e:	bf00      	nop
 8016150:	0801cde4 	.word	0x0801cde4
 8016154:	0801cf34 	.word	0x0801cf34
 8016158:	0801ce5c 	.word	0x0801ce5c

0801615c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b086      	sub	sp, #24
 8016160:	af02      	add	r7, sp, #8
 8016162:	60f8      	str	r0, [r7, #12]
 8016164:	60b9      	str	r1, [r7, #8]
 8016166:	4613      	mov	r3, r2
 8016168:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801616a:	79fa      	ldrb	r2, [r7, #7]
 801616c:	4944      	ldr	r1, [pc, #272]	; (8016280 <etharp_output_to_arp_index+0x124>)
 801616e:	4613      	mov	r3, r2
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	4413      	add	r3, r2
 8016174:	00db      	lsls	r3, r3, #3
 8016176:	440b      	add	r3, r1
 8016178:	3314      	adds	r3, #20
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	2b01      	cmp	r3, #1
 801617e:	d806      	bhi.n	801618e <etharp_output_to_arp_index+0x32>
 8016180:	4b40      	ldr	r3, [pc, #256]	; (8016284 <etharp_output_to_arp_index+0x128>)
 8016182:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016186:	4940      	ldr	r1, [pc, #256]	; (8016288 <etharp_output_to_arp_index+0x12c>)
 8016188:	4840      	ldr	r0, [pc, #256]	; (801628c <etharp_output_to_arp_index+0x130>)
 801618a:	f002 faed 	bl	8018768 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801618e:	79fa      	ldrb	r2, [r7, #7]
 8016190:	493b      	ldr	r1, [pc, #236]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016192:	4613      	mov	r3, r2
 8016194:	005b      	lsls	r3, r3, #1
 8016196:	4413      	add	r3, r2
 8016198:	00db      	lsls	r3, r3, #3
 801619a:	440b      	add	r3, r1
 801619c:	3314      	adds	r3, #20
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	2b02      	cmp	r3, #2
 80161a2:	d153      	bne.n	801624c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80161a4:	79fa      	ldrb	r2, [r7, #7]
 80161a6:	4936      	ldr	r1, [pc, #216]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161a8:	4613      	mov	r3, r2
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4413      	add	r3, r2
 80161ae:	00db      	lsls	r3, r3, #3
 80161b0:	440b      	add	r3, r1
 80161b2:	3312      	adds	r3, #18
 80161b4:	881b      	ldrh	r3, [r3, #0]
 80161b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80161ba:	d919      	bls.n	80161f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80161bc:	79fa      	ldrb	r2, [r7, #7]
 80161be:	4613      	mov	r3, r2
 80161c0:	005b      	lsls	r3, r3, #1
 80161c2:	4413      	add	r3, r2
 80161c4:	00db      	lsls	r3, r3, #3
 80161c6:	4a2e      	ldr	r2, [pc, #184]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161c8:	4413      	add	r3, r2
 80161ca:	3304      	adds	r3, #4
 80161cc:	4619      	mov	r1, r3
 80161ce:	68f8      	ldr	r0, [r7, #12]
 80161d0:	f000 fb4c 	bl	801686c <etharp_request>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d138      	bne.n	801624c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161da:	79fa      	ldrb	r2, [r7, #7]
 80161dc:	4928      	ldr	r1, [pc, #160]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161de:	4613      	mov	r3, r2
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	4413      	add	r3, r2
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	440b      	add	r3, r1
 80161e8:	3314      	adds	r3, #20
 80161ea:	2203      	movs	r2, #3
 80161ec:	701a      	strb	r2, [r3, #0]
 80161ee:	e02d      	b.n	801624c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80161f0:	79fa      	ldrb	r2, [r7, #7]
 80161f2:	4923      	ldr	r1, [pc, #140]	; (8016280 <etharp_output_to_arp_index+0x124>)
 80161f4:	4613      	mov	r3, r2
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	4413      	add	r3, r2
 80161fa:	00db      	lsls	r3, r3, #3
 80161fc:	440b      	add	r3, r1
 80161fe:	3312      	adds	r3, #18
 8016200:	881b      	ldrh	r3, [r3, #0]
 8016202:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016206:	d321      	bcc.n	801624c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016208:	79fa      	ldrb	r2, [r7, #7]
 801620a:	4613      	mov	r3, r2
 801620c:	005b      	lsls	r3, r3, #1
 801620e:	4413      	add	r3, r2
 8016210:	00db      	lsls	r3, r3, #3
 8016212:	4a1b      	ldr	r2, [pc, #108]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016214:	4413      	add	r3, r2
 8016216:	1d19      	adds	r1, r3, #4
 8016218:	79fa      	ldrb	r2, [r7, #7]
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	00db      	lsls	r3, r3, #3
 8016222:	3308      	adds	r3, #8
 8016224:	4a16      	ldr	r2, [pc, #88]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016226:	4413      	add	r3, r2
 8016228:	3304      	adds	r3, #4
 801622a:	461a      	mov	r2, r3
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	f000 fafb 	bl	8016828 <etharp_request_dst>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d109      	bne.n	801624c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016238:	79fa      	ldrb	r2, [r7, #7]
 801623a:	4911      	ldr	r1, [pc, #68]	; (8016280 <etharp_output_to_arp_index+0x124>)
 801623c:	4613      	mov	r3, r2
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	4413      	add	r3, r2
 8016242:	00db      	lsls	r3, r3, #3
 8016244:	440b      	add	r3, r1
 8016246:	3314      	adds	r3, #20
 8016248:	2203      	movs	r2, #3
 801624a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016252:	79fa      	ldrb	r2, [r7, #7]
 8016254:	4613      	mov	r3, r2
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	4413      	add	r3, r2
 801625a:	00db      	lsls	r3, r3, #3
 801625c:	3308      	adds	r3, #8
 801625e:	4a08      	ldr	r2, [pc, #32]	; (8016280 <etharp_output_to_arp_index+0x124>)
 8016260:	4413      	add	r3, r2
 8016262:	3304      	adds	r3, #4
 8016264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016268:	9200      	str	r2, [sp, #0]
 801626a:	460a      	mov	r2, r1
 801626c:	68b9      	ldr	r1, [r7, #8]
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	f001 fe3a 	bl	8017ee8 <ethernet_output>
 8016274:	4603      	mov	r3, r0
}
 8016276:	4618      	mov	r0, r3
 8016278:	3710      	adds	r7, #16
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}
 801627e:	bf00      	nop
 8016280:	2000438c 	.word	0x2000438c
 8016284:	0801cde4 	.word	0x0801cde4
 8016288:	0801cf54 	.word	0x0801cf54
 801628c:	0801ce5c 	.word	0x0801ce5c

08016290 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b08a      	sub	sp, #40	; 0x28
 8016294:	af02      	add	r7, sp, #8
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d106      	bne.n	80162b4 <etharp_output+0x24>
 80162a6:	4b73      	ldr	r3, [pc, #460]	; (8016474 <etharp_output+0x1e4>)
 80162a8:	f240 321e 	movw	r2, #798	; 0x31e
 80162ac:	4972      	ldr	r1, [pc, #456]	; (8016478 <etharp_output+0x1e8>)
 80162ae:	4873      	ldr	r0, [pc, #460]	; (801647c <etharp_output+0x1ec>)
 80162b0:	f002 fa5a 	bl	8018768 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <etharp_output+0x38>
 80162ba:	4b6e      	ldr	r3, [pc, #440]	; (8016474 <etharp_output+0x1e4>)
 80162bc:	f240 321f 	movw	r2, #799	; 0x31f
 80162c0:	496f      	ldr	r1, [pc, #444]	; (8016480 <etharp_output+0x1f0>)
 80162c2:	486e      	ldr	r0, [pc, #440]	; (801647c <etharp_output+0x1ec>)
 80162c4:	f002 fa50 	bl	8018768 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d106      	bne.n	80162dc <etharp_output+0x4c>
 80162ce:	4b69      	ldr	r3, [pc, #420]	; (8016474 <etharp_output+0x1e4>)
 80162d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80162d4:	496b      	ldr	r1, [pc, #428]	; (8016484 <etharp_output+0x1f4>)
 80162d6:	4869      	ldr	r0, [pc, #420]	; (801647c <etharp_output+0x1ec>)
 80162d8:	f002 fa46 	bl	8018768 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	68f9      	ldr	r1, [r7, #12]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f000 fef8 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80162e8:	4603      	mov	r3, r0
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d002      	beq.n	80162f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80162ee:	4b66      	ldr	r3, [pc, #408]	; (8016488 <etharp_output+0x1f8>)
 80162f0:	61fb      	str	r3, [r7, #28]
 80162f2:	e0af      	b.n	8016454 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162fc:	2be0      	cmp	r3, #224	; 0xe0
 80162fe:	d118      	bne.n	8016332 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016300:	2301      	movs	r3, #1
 8016302:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016304:	2300      	movs	r3, #0
 8016306:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016308:	235e      	movs	r3, #94	; 0x5e
 801630a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	3301      	adds	r3, #1
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016316:	b2db      	uxtb	r3, r3
 8016318:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	3302      	adds	r3, #2
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	3303      	adds	r3, #3
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801632a:	f107 0310 	add.w	r3, r7, #16
 801632e:	61fb      	str	r3, [r7, #28]
 8016330:	e090      	b.n	8016454 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681a      	ldr	r2, [r3, #0]
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	3304      	adds	r3, #4
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	405a      	eors	r2, r3
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	3308      	adds	r3, #8
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	4013      	ands	r3, r2
 8016346:	2b00      	cmp	r3, #0
 8016348:	d012      	beq.n	8016370 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016350:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016354:	4293      	cmp	r3, r2
 8016356:	d00b      	beq.n	8016370 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	330c      	adds	r3, #12
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d003      	beq.n	801636a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	330c      	adds	r3, #12
 8016366:	61bb      	str	r3, [r7, #24]
 8016368:	e002      	b.n	8016370 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801636a:	f06f 0303 	mvn.w	r3, #3
 801636e:	e07d      	b.n	801646c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016370:	4b46      	ldr	r3, [pc, #280]	; (801648c <etharp_output+0x1fc>)
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	4619      	mov	r1, r3
 8016376:	4a46      	ldr	r2, [pc, #280]	; (8016490 <etharp_output+0x200>)
 8016378:	460b      	mov	r3, r1
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	440b      	add	r3, r1
 801637e:	00db      	lsls	r3, r3, #3
 8016380:	4413      	add	r3, r2
 8016382:	3314      	adds	r3, #20
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	2b01      	cmp	r3, #1
 8016388:	d925      	bls.n	80163d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801638a:	4b40      	ldr	r3, [pc, #256]	; (801648c <etharp_output+0x1fc>)
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	4619      	mov	r1, r3
 8016390:	4a3f      	ldr	r2, [pc, #252]	; (8016490 <etharp_output+0x200>)
 8016392:	460b      	mov	r3, r1
 8016394:	005b      	lsls	r3, r3, #1
 8016396:	440b      	add	r3, r1
 8016398:	00db      	lsls	r3, r3, #3
 801639a:	4413      	add	r3, r2
 801639c:	3308      	adds	r3, #8
 801639e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80163a0:	68fa      	ldr	r2, [r7, #12]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d117      	bne.n	80163d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	4b38      	ldr	r3, [pc, #224]	; (801648c <etharp_output+0x1fc>)
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	4618      	mov	r0, r3
 80163b0:	4937      	ldr	r1, [pc, #220]	; (8016490 <etharp_output+0x200>)
 80163b2:	4603      	mov	r3, r0
 80163b4:	005b      	lsls	r3, r3, #1
 80163b6:	4403      	add	r3, r0
 80163b8:	00db      	lsls	r3, r3, #3
 80163ba:	440b      	add	r3, r1
 80163bc:	3304      	adds	r3, #4
 80163be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d108      	bne.n	80163d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80163c4:	4b31      	ldr	r3, [pc, #196]	; (801648c <etharp_output+0x1fc>)
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	461a      	mov	r2, r3
 80163ca:	68b9      	ldr	r1, [r7, #8]
 80163cc:	68f8      	ldr	r0, [r7, #12]
 80163ce:	f7ff fec5 	bl	801615c <etharp_output_to_arp_index>
 80163d2:	4603      	mov	r3, r0
 80163d4:	e04a      	b.n	801646c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163d6:	2300      	movs	r3, #0
 80163d8:	75fb      	strb	r3, [r7, #23]
 80163da:	e031      	b.n	8016440 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163dc:	7dfa      	ldrb	r2, [r7, #23]
 80163de:	492c      	ldr	r1, [pc, #176]	; (8016490 <etharp_output+0x200>)
 80163e0:	4613      	mov	r3, r2
 80163e2:	005b      	lsls	r3, r3, #1
 80163e4:	4413      	add	r3, r2
 80163e6:	00db      	lsls	r3, r3, #3
 80163e8:	440b      	add	r3, r1
 80163ea:	3314      	adds	r3, #20
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d923      	bls.n	801643a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80163f2:	7dfa      	ldrb	r2, [r7, #23]
 80163f4:	4926      	ldr	r1, [pc, #152]	; (8016490 <etharp_output+0x200>)
 80163f6:	4613      	mov	r3, r2
 80163f8:	005b      	lsls	r3, r3, #1
 80163fa:	4413      	add	r3, r2
 80163fc:	00db      	lsls	r3, r3, #3
 80163fe:	440b      	add	r3, r1
 8016400:	3308      	adds	r3, #8
 8016402:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016404:	68fa      	ldr	r2, [r7, #12]
 8016406:	429a      	cmp	r2, r3
 8016408:	d117      	bne.n	801643a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801640a:	69bb      	ldr	r3, [r7, #24]
 801640c:	6819      	ldr	r1, [r3, #0]
 801640e:	7dfa      	ldrb	r2, [r7, #23]
 8016410:	481f      	ldr	r0, [pc, #124]	; (8016490 <etharp_output+0x200>)
 8016412:	4613      	mov	r3, r2
 8016414:	005b      	lsls	r3, r3, #1
 8016416:	4413      	add	r3, r2
 8016418:	00db      	lsls	r3, r3, #3
 801641a:	4403      	add	r3, r0
 801641c:	3304      	adds	r3, #4
 801641e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016420:	4299      	cmp	r1, r3
 8016422:	d10a      	bne.n	801643a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016424:	4a19      	ldr	r2, [pc, #100]	; (801648c <etharp_output+0x1fc>)
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801642a:	7dfb      	ldrb	r3, [r7, #23]
 801642c:	461a      	mov	r2, r3
 801642e:	68b9      	ldr	r1, [r7, #8]
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	f7ff fe93 	bl	801615c <etharp_output_to_arp_index>
 8016436:	4603      	mov	r3, r0
 8016438:	e018      	b.n	801646c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801643a:	7dfb      	ldrb	r3, [r7, #23]
 801643c:	3301      	adds	r3, #1
 801643e:	75fb      	strb	r3, [r7, #23]
 8016440:	7dfb      	ldrb	r3, [r7, #23]
 8016442:	2b09      	cmp	r3, #9
 8016444:	d9ca      	bls.n	80163dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	69b9      	ldr	r1, [r7, #24]
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	f000 f822 	bl	8016494 <etharp_query>
 8016450:	4603      	mov	r3, r0
 8016452:	e00b      	b.n	801646c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801645a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801645e:	9300      	str	r3, [sp, #0]
 8016460:	69fb      	ldr	r3, [r7, #28]
 8016462:	68b9      	ldr	r1, [r7, #8]
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f001 fd3f 	bl	8017ee8 <ethernet_output>
 801646a:	4603      	mov	r3, r0
}
 801646c:	4618      	mov	r0, r3
 801646e:	3720      	adds	r7, #32
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	0801cde4 	.word	0x0801cde4
 8016478:	0801cf34 	.word	0x0801cf34
 801647c:	0801ce5c 	.word	0x0801ce5c
 8016480:	0801cf84 	.word	0x0801cf84
 8016484:	0801cf24 	.word	0x0801cf24
 8016488:	0801d61c 	.word	0x0801d61c
 801648c:	2000447c 	.word	0x2000447c
 8016490:	2000438c 	.word	0x2000438c

08016494 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b08c      	sub	sp, #48	; 0x30
 8016498:	af02      	add	r7, sp, #8
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	3326      	adds	r3, #38	; 0x26
 80164a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80164a6:	23ff      	movs	r3, #255	; 0xff
 80164a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80164ac:	2300      	movs	r3, #0
 80164ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	68f9      	ldr	r1, [r7, #12]
 80164b6:	4618      	mov	r0, r3
 80164b8:	f000 fe0e 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80164bc:	4603      	mov	r3, r0
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d10c      	bne.n	80164dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164ca:	2be0      	cmp	r3, #224	; 0xe0
 80164cc:	d006      	beq.n	80164dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d003      	beq.n	80164dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d102      	bne.n	80164e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164dc:	f06f 030f 	mvn.w	r3, #15
 80164e0:	e101      	b.n	80166e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80164e2:	68fa      	ldr	r2, [r7, #12]
 80164e4:	2101      	movs	r1, #1
 80164e6:	68b8      	ldr	r0, [r7, #8]
 80164e8:	f7ff fb60 	bl	8015bac <etharp_find_entry>
 80164ec:	4603      	mov	r3, r0
 80164ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80164f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	da02      	bge.n	80164fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80164f8:	8a7b      	ldrh	r3, [r7, #18]
 80164fa:	b25b      	sxtb	r3, r3
 80164fc:	e0f3      	b.n	80166e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80164fe:	8a7b      	ldrh	r3, [r7, #18]
 8016500:	2b7e      	cmp	r3, #126	; 0x7e
 8016502:	d906      	bls.n	8016512 <etharp_query+0x7e>
 8016504:	4b7a      	ldr	r3, [pc, #488]	; (80166f0 <etharp_query+0x25c>)
 8016506:	f240 32c1 	movw	r2, #961	; 0x3c1
 801650a:	497a      	ldr	r1, [pc, #488]	; (80166f4 <etharp_query+0x260>)
 801650c:	487a      	ldr	r0, [pc, #488]	; (80166f8 <etharp_query+0x264>)
 801650e:	f002 f92b 	bl	8018768 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016512:	8a7b      	ldrh	r3, [r7, #18]
 8016514:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016516:	7c7a      	ldrb	r2, [r7, #17]
 8016518:	4978      	ldr	r1, [pc, #480]	; (80166fc <etharp_query+0x268>)
 801651a:	4613      	mov	r3, r2
 801651c:	005b      	lsls	r3, r3, #1
 801651e:	4413      	add	r3, r2
 8016520:	00db      	lsls	r3, r3, #3
 8016522:	440b      	add	r3, r1
 8016524:	3314      	adds	r3, #20
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d115      	bne.n	8016558 <etharp_query+0xc4>
    is_new_entry = 1;
 801652c:	2301      	movs	r3, #1
 801652e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016530:	7c7a      	ldrb	r2, [r7, #17]
 8016532:	4972      	ldr	r1, [pc, #456]	; (80166fc <etharp_query+0x268>)
 8016534:	4613      	mov	r3, r2
 8016536:	005b      	lsls	r3, r3, #1
 8016538:	4413      	add	r3, r2
 801653a:	00db      	lsls	r3, r3, #3
 801653c:	440b      	add	r3, r1
 801653e:	3314      	adds	r3, #20
 8016540:	2201      	movs	r2, #1
 8016542:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016544:	7c7a      	ldrb	r2, [r7, #17]
 8016546:	496d      	ldr	r1, [pc, #436]	; (80166fc <etharp_query+0x268>)
 8016548:	4613      	mov	r3, r2
 801654a:	005b      	lsls	r3, r3, #1
 801654c:	4413      	add	r3, r2
 801654e:	00db      	lsls	r3, r3, #3
 8016550:	440b      	add	r3, r1
 8016552:	3308      	adds	r3, #8
 8016554:	68fa      	ldr	r2, [r7, #12]
 8016556:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016558:	7c7a      	ldrb	r2, [r7, #17]
 801655a:	4968      	ldr	r1, [pc, #416]	; (80166fc <etharp_query+0x268>)
 801655c:	4613      	mov	r3, r2
 801655e:	005b      	lsls	r3, r3, #1
 8016560:	4413      	add	r3, r2
 8016562:	00db      	lsls	r3, r3, #3
 8016564:	440b      	add	r3, r1
 8016566:	3314      	adds	r3, #20
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	2b01      	cmp	r3, #1
 801656c:	d011      	beq.n	8016592 <etharp_query+0xfe>
 801656e:	7c7a      	ldrb	r2, [r7, #17]
 8016570:	4962      	ldr	r1, [pc, #392]	; (80166fc <etharp_query+0x268>)
 8016572:	4613      	mov	r3, r2
 8016574:	005b      	lsls	r3, r3, #1
 8016576:	4413      	add	r3, r2
 8016578:	00db      	lsls	r3, r3, #3
 801657a:	440b      	add	r3, r1
 801657c:	3314      	adds	r3, #20
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	2b01      	cmp	r3, #1
 8016582:	d806      	bhi.n	8016592 <etharp_query+0xfe>
 8016584:	4b5a      	ldr	r3, [pc, #360]	; (80166f0 <etharp_query+0x25c>)
 8016586:	f240 32cd 	movw	r2, #973	; 0x3cd
 801658a:	495d      	ldr	r1, [pc, #372]	; (8016700 <etharp_query+0x26c>)
 801658c:	485a      	ldr	r0, [pc, #360]	; (80166f8 <etharp_query+0x264>)
 801658e:	f002 f8eb 	bl	8018768 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016592:	6a3b      	ldr	r3, [r7, #32]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d102      	bne.n	801659e <etharp_query+0x10a>
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d10c      	bne.n	80165b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801659e:	68b9      	ldr	r1, [r7, #8]
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f000 f963 	bl	801686c <etharp_request>
 80165a6:	4603      	mov	r3, r0
 80165a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d102      	bne.n	80165b8 <etharp_query+0x124>
      return result;
 80165b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80165b6:	e096      	b.n	80166e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d106      	bne.n	80165cc <etharp_query+0x138>
 80165be:	4b4c      	ldr	r3, [pc, #304]	; (80166f0 <etharp_query+0x25c>)
 80165c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80165c4:	494f      	ldr	r1, [pc, #316]	; (8016704 <etharp_query+0x270>)
 80165c6:	484c      	ldr	r0, [pc, #304]	; (80166f8 <etharp_query+0x264>)
 80165c8:	f002 f8ce 	bl	8018768 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80165cc:	7c7a      	ldrb	r2, [r7, #17]
 80165ce:	494b      	ldr	r1, [pc, #300]	; (80166fc <etharp_query+0x268>)
 80165d0:	4613      	mov	r3, r2
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	4413      	add	r3, r2
 80165d6:	00db      	lsls	r3, r3, #3
 80165d8:	440b      	add	r3, r1
 80165da:	3314      	adds	r3, #20
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d917      	bls.n	8016612 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80165e2:	4a49      	ldr	r2, [pc, #292]	; (8016708 <etharp_query+0x274>)
 80165e4:	7c7b      	ldrb	r3, [r7, #17]
 80165e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80165e8:	7c7a      	ldrb	r2, [r7, #17]
 80165ea:	4613      	mov	r3, r2
 80165ec:	005b      	lsls	r3, r3, #1
 80165ee:	4413      	add	r3, r2
 80165f0:	00db      	lsls	r3, r3, #3
 80165f2:	3308      	adds	r3, #8
 80165f4:	4a41      	ldr	r2, [pc, #260]	; (80166fc <etharp_query+0x268>)
 80165f6:	4413      	add	r3, r2
 80165f8:	3304      	adds	r3, #4
 80165fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165fe:	9200      	str	r2, [sp, #0]
 8016600:	697a      	ldr	r2, [r7, #20]
 8016602:	6879      	ldr	r1, [r7, #4]
 8016604:	68f8      	ldr	r0, [r7, #12]
 8016606:	f001 fc6f 	bl	8017ee8 <ethernet_output>
 801660a:	4603      	mov	r3, r0
 801660c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016610:	e067      	b.n	80166e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016612:	7c7a      	ldrb	r2, [r7, #17]
 8016614:	4939      	ldr	r1, [pc, #228]	; (80166fc <etharp_query+0x268>)
 8016616:	4613      	mov	r3, r2
 8016618:	005b      	lsls	r3, r3, #1
 801661a:	4413      	add	r3, r2
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	440b      	add	r3, r1
 8016620:	3314      	adds	r3, #20
 8016622:	781b      	ldrb	r3, [r3, #0]
 8016624:	2b01      	cmp	r3, #1
 8016626:	d15c      	bne.n	80166e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016628:	2300      	movs	r3, #0
 801662a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016630:	e01c      	b.n	801666c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016632:	69fb      	ldr	r3, [r7, #28]
 8016634:	895a      	ldrh	r2, [r3, #10]
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	891b      	ldrh	r3, [r3, #8]
 801663a:	429a      	cmp	r2, r3
 801663c:	d10a      	bne.n	8016654 <etharp_query+0x1c0>
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d006      	beq.n	8016654 <etharp_query+0x1c0>
 8016646:	4b2a      	ldr	r3, [pc, #168]	; (80166f0 <etharp_query+0x25c>)
 8016648:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801664c:	492f      	ldr	r1, [pc, #188]	; (801670c <etharp_query+0x278>)
 801664e:	482a      	ldr	r0, [pc, #168]	; (80166f8 <etharp_query+0x264>)
 8016650:	f002 f88a 	bl	8018768 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	7b1b      	ldrb	r3, [r3, #12]
 8016658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801665c:	2b00      	cmp	r3, #0
 801665e:	d002      	beq.n	8016666 <etharp_query+0x1d2>
        copy_needed = 1;
 8016660:	2301      	movs	r3, #1
 8016662:	61bb      	str	r3, [r7, #24]
        break;
 8016664:	e005      	b.n	8016672 <etharp_query+0x1de>
      }
      p = p->next;
 8016666:	69fb      	ldr	r3, [r7, #28]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1df      	bne.n	8016632 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016672:	69bb      	ldr	r3, [r7, #24]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d007      	beq.n	8016688 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016678:	687a      	ldr	r2, [r7, #4]
 801667a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801667e:	200e      	movs	r0, #14
 8016680:	f7f8 fb6c 	bl	800ed5c <pbuf_clone>
 8016684:	61f8      	str	r0, [r7, #28]
 8016686:	e004      	b.n	8016692 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801668c:	69f8      	ldr	r0, [r7, #28]
 801668e:	f7f8 f993 	bl	800e9b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d021      	beq.n	80166dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016698:	7c7a      	ldrb	r2, [r7, #17]
 801669a:	4918      	ldr	r1, [pc, #96]	; (80166fc <etharp_query+0x268>)
 801669c:	4613      	mov	r3, r2
 801669e:	005b      	lsls	r3, r3, #1
 80166a0:	4413      	add	r3, r2
 80166a2:	00db      	lsls	r3, r3, #3
 80166a4:	440b      	add	r3, r1
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d00a      	beq.n	80166c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80166ac:	7c7a      	ldrb	r2, [r7, #17]
 80166ae:	4913      	ldr	r1, [pc, #76]	; (80166fc <etharp_query+0x268>)
 80166b0:	4613      	mov	r3, r2
 80166b2:	005b      	lsls	r3, r3, #1
 80166b4:	4413      	add	r3, r2
 80166b6:	00db      	lsls	r3, r3, #3
 80166b8:	440b      	add	r3, r1
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	4618      	mov	r0, r3
 80166be:	f7f8 f8d5 	bl	800e86c <pbuf_free>
      }
      arp_table[i].q = p;
 80166c2:	7c7a      	ldrb	r2, [r7, #17]
 80166c4:	490d      	ldr	r1, [pc, #52]	; (80166fc <etharp_query+0x268>)
 80166c6:	4613      	mov	r3, r2
 80166c8:	005b      	lsls	r3, r3, #1
 80166ca:	4413      	add	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	440b      	add	r3, r1
 80166d0:	69fa      	ldr	r2, [r7, #28]
 80166d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80166d4:	2300      	movs	r3, #0
 80166d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166da:	e002      	b.n	80166e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80166dc:	23ff      	movs	r3, #255	; 0xff
 80166de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80166e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3728      	adds	r7, #40	; 0x28
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	0801cde4 	.word	0x0801cde4
 80166f4:	0801cf90 	.word	0x0801cf90
 80166f8:	0801ce5c 	.word	0x0801ce5c
 80166fc:	2000438c 	.word	0x2000438c
 8016700:	0801cfa0 	.word	0x0801cfa0
 8016704:	0801cf84 	.word	0x0801cf84
 8016708:	2000447c 	.word	0x2000447c
 801670c:	0801cfc8 	.word	0x0801cfc8

08016710 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b08a      	sub	sp, #40	; 0x28
 8016714:	af02      	add	r7, sp, #8
 8016716:	60f8      	str	r0, [r7, #12]
 8016718:	60b9      	str	r1, [r7, #8]
 801671a:	607a      	str	r2, [r7, #4]
 801671c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801671e:	2300      	movs	r3, #0
 8016720:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d106      	bne.n	8016736 <etharp_raw+0x26>
 8016728:	4b3a      	ldr	r3, [pc, #232]	; (8016814 <etharp_raw+0x104>)
 801672a:	f240 4257 	movw	r2, #1111	; 0x457
 801672e:	493a      	ldr	r1, [pc, #232]	; (8016818 <etharp_raw+0x108>)
 8016730:	483a      	ldr	r0, [pc, #232]	; (801681c <etharp_raw+0x10c>)
 8016732:	f002 f819 	bl	8018768 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801673a:	211c      	movs	r1, #28
 801673c:	200e      	movs	r0, #14
 801673e:	f7f7 fd7f 	bl	800e240 <pbuf_alloc>
 8016742:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d102      	bne.n	8016750 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801674a:	f04f 33ff 	mov.w	r3, #4294967295
 801674e:	e05d      	b.n	801680c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016750:	69bb      	ldr	r3, [r7, #24]
 8016752:	895b      	ldrh	r3, [r3, #10]
 8016754:	2b1b      	cmp	r3, #27
 8016756:	d806      	bhi.n	8016766 <etharp_raw+0x56>
 8016758:	4b2e      	ldr	r3, [pc, #184]	; (8016814 <etharp_raw+0x104>)
 801675a:	f240 4262 	movw	r2, #1122	; 0x462
 801675e:	4930      	ldr	r1, [pc, #192]	; (8016820 <etharp_raw+0x110>)
 8016760:	482e      	ldr	r0, [pc, #184]	; (801681c <etharp_raw+0x10c>)
 8016762:	f002 f801 	bl	8018768 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	685b      	ldr	r3, [r3, #4]
 801676a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801676c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801676e:	4618      	mov	r0, r3
 8016770:	f7f6 fc9e 	bl	800d0b0 <lwip_htons>
 8016774:	4603      	mov	r3, r0
 8016776:	461a      	mov	r2, r3
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016782:	2b06      	cmp	r3, #6
 8016784:	d006      	beq.n	8016794 <etharp_raw+0x84>
 8016786:	4b23      	ldr	r3, [pc, #140]	; (8016814 <etharp_raw+0x104>)
 8016788:	f240 4269 	movw	r2, #1129	; 0x469
 801678c:	4925      	ldr	r1, [pc, #148]	; (8016824 <etharp_raw+0x114>)
 801678e:	4823      	ldr	r0, [pc, #140]	; (801681c <etharp_raw+0x10c>)
 8016790:	f001 ffea 	bl	8018768 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	3308      	adds	r3, #8
 8016798:	2206      	movs	r2, #6
 801679a:	6839      	ldr	r1, [r7, #0]
 801679c:	4618      	mov	r0, r3
 801679e:	f001 ff09 	bl	80185b4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	3312      	adds	r3, #18
 80167a6:	2206      	movs	r2, #6
 80167a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167aa:	4618      	mov	r0, r3
 80167ac:	f001 ff02 	bl	80185b4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	330e      	adds	r3, #14
 80167b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167b6:	6812      	ldr	r2, [r2, #0]
 80167b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	3318      	adds	r3, #24
 80167be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167c0:	6812      	ldr	r2, [r2, #0]
 80167c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	2200      	movs	r2, #0
 80167c8:	701a      	strb	r2, [r3, #0]
 80167ca:	2200      	movs	r2, #0
 80167cc:	f042 0201 	orr.w	r2, r2, #1
 80167d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	2200      	movs	r2, #0
 80167d6:	f042 0208 	orr.w	r2, r2, #8
 80167da:	709a      	strb	r2, [r3, #2]
 80167dc:	2200      	movs	r2, #0
 80167de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	2206      	movs	r2, #6
 80167e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	2204      	movs	r2, #4
 80167ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80167ec:	f640 0306 	movw	r3, #2054	; 0x806
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	68ba      	ldr	r2, [r7, #8]
 80167f6:	69b9      	ldr	r1, [r7, #24]
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f001 fb75 	bl	8017ee8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80167fe:	69b8      	ldr	r0, [r7, #24]
 8016800:	f7f8 f834 	bl	800e86c <pbuf_free>
  p = NULL;
 8016804:	2300      	movs	r3, #0
 8016806:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016808:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801680c:	4618      	mov	r0, r3
 801680e:	3720      	adds	r7, #32
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	0801cde4 	.word	0x0801cde4
 8016818:	0801cf34 	.word	0x0801cf34
 801681c:	0801ce5c 	.word	0x0801ce5c
 8016820:	0801cfe4 	.word	0x0801cfe4
 8016824:	0801d018 	.word	0x0801d018

08016828 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b088      	sub	sp, #32
 801682c:	af04      	add	r7, sp, #16
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016844:	2201      	movs	r2, #1
 8016846:	9203      	str	r2, [sp, #12]
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	9202      	str	r2, [sp, #8]
 801684c:	4a06      	ldr	r2, [pc, #24]	; (8016868 <etharp_request_dst+0x40>)
 801684e:	9201      	str	r2, [sp, #4]
 8016850:	9300      	str	r3, [sp, #0]
 8016852:	4603      	mov	r3, r0
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f7ff ff5a 	bl	8016710 <etharp_raw>
 801685c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	0801d624 	.word	0x0801d624

0801686c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016876:	4a05      	ldr	r2, [pc, #20]	; (801688c <etharp_request+0x20>)
 8016878:	6839      	ldr	r1, [r7, #0]
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f7ff ffd4 	bl	8016828 <etharp_request_dst>
 8016880:	4603      	mov	r3, r0
}
 8016882:	4618      	mov	r0, r3
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	0801d61c 	.word	0x0801d61c

08016890 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b08e      	sub	sp, #56	; 0x38
 8016894:	af04      	add	r7, sp, #16
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801689a:	4b79      	ldr	r3, [pc, #484]	; (8016a80 <icmp_input+0x1f0>)
 801689c:	689b      	ldr	r3, [r3, #8]
 801689e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80168a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	f003 030f 	and.w	r3, r3, #15
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	009b      	lsls	r3, r3, #2
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80168b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168b2:	2b13      	cmp	r3, #19
 80168b4:	f240 80cd 	bls.w	8016a52 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	895b      	ldrh	r3, [r3, #10]
 80168bc:	2b03      	cmp	r3, #3
 80168be:	f240 80ca 	bls.w	8016a56 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80168cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f000 80b7 	beq.w	8016a44 <icmp_input+0x1b4>
 80168d6:	2b08      	cmp	r3, #8
 80168d8:	f040 80b7 	bne.w	8016a4a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80168dc:	4b69      	ldr	r3, [pc, #420]	; (8016a84 <icmp_input+0x1f4>)
 80168de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168e0:	4b67      	ldr	r3, [pc, #412]	; (8016a80 <icmp_input+0x1f0>)
 80168e2:	695b      	ldr	r3, [r3, #20]
 80168e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168e8:	2be0      	cmp	r3, #224	; 0xe0
 80168ea:	f000 80bb 	beq.w	8016a64 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80168ee:	4b64      	ldr	r3, [pc, #400]	; (8016a80 <icmp_input+0x1f0>)
 80168f0:	695b      	ldr	r3, [r3, #20]
 80168f2:	4a63      	ldr	r2, [pc, #396]	; (8016a80 <icmp_input+0x1f0>)
 80168f4:	6812      	ldr	r2, [r2, #0]
 80168f6:	4611      	mov	r1, r2
 80168f8:	4618      	mov	r0, r3
 80168fa:	f000 fbed 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 80168fe:	4603      	mov	r3, r0
 8016900:	2b00      	cmp	r3, #0
 8016902:	f040 80b1 	bne.w	8016a68 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	891b      	ldrh	r3, [r3, #8]
 801690a:	2b07      	cmp	r3, #7
 801690c:	f240 80a5 	bls.w	8016a5a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016912:	330e      	adds	r3, #14
 8016914:	4619      	mov	r1, r3
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f7f7 fee0 	bl	800e6dc <pbuf_add_header>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d04b      	beq.n	80169ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	891a      	ldrh	r2, [r3, #8]
 8016926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016928:	4413      	add	r3, r2
 801692a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	891b      	ldrh	r3, [r3, #8]
 8016930:	8b7a      	ldrh	r2, [r7, #26]
 8016932:	429a      	cmp	r2, r3
 8016934:	f0c0 809a 	bcc.w	8016a6c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016938:	8b7b      	ldrh	r3, [r7, #26]
 801693a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801693e:	4619      	mov	r1, r3
 8016940:	200e      	movs	r0, #14
 8016942:	f7f7 fc7d 	bl	800e240 <pbuf_alloc>
 8016946:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	2b00      	cmp	r3, #0
 801694c:	f000 8090 	beq.w	8016a70 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	895b      	ldrh	r3, [r3, #10]
 8016954:	461a      	mov	r2, r3
 8016956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016958:	3308      	adds	r3, #8
 801695a:	429a      	cmp	r2, r3
 801695c:	d203      	bcs.n	8016966 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801695e:	6978      	ldr	r0, [r7, #20]
 8016960:	f7f7 ff84 	bl	800e86c <pbuf_free>
          goto icmperr;
 8016964:	e085      	b.n	8016a72 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801696c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801696e:	4618      	mov	r0, r3
 8016970:	f001 fe20 	bl	80185b4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016976:	4619      	mov	r1, r3
 8016978:	6978      	ldr	r0, [r7, #20]
 801697a:	f7f7 febf 	bl	800e6fc <pbuf_remove_header>
 801697e:	4603      	mov	r3, r0
 8016980:	2b00      	cmp	r3, #0
 8016982:	d009      	beq.n	8016998 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016984:	4b40      	ldr	r3, [pc, #256]	; (8016a88 <icmp_input+0x1f8>)
 8016986:	22b6      	movs	r2, #182	; 0xb6
 8016988:	4940      	ldr	r1, [pc, #256]	; (8016a8c <icmp_input+0x1fc>)
 801698a:	4841      	ldr	r0, [pc, #260]	; (8016a90 <icmp_input+0x200>)
 801698c:	f001 feec 	bl	8018768 <iprintf>
          pbuf_free(r);
 8016990:	6978      	ldr	r0, [r7, #20]
 8016992:	f7f7 ff6b 	bl	800e86c <pbuf_free>
          goto icmperr;
 8016996:	e06c      	b.n	8016a72 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016998:	6879      	ldr	r1, [r7, #4]
 801699a:	6978      	ldr	r0, [r7, #20]
 801699c:	f7f8 f89a 	bl	800ead4 <pbuf_copy>
 80169a0:	4603      	mov	r3, r0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d003      	beq.n	80169ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80169a6:	6978      	ldr	r0, [r7, #20]
 80169a8:	f7f7 ff60 	bl	800e86c <pbuf_free>
          goto icmperr;
 80169ac:	e061      	b.n	8016a72 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	f7f7 ff5c 	bl	800e86c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	607b      	str	r3, [r7, #4]
 80169b8:	e00f      	b.n	80169da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80169ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169bc:	330e      	adds	r3, #14
 80169be:	4619      	mov	r1, r3
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f7f7 fe9b 	bl	800e6fc <pbuf_remove_header>
 80169c6:	4603      	mov	r3, r0
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d006      	beq.n	80169da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80169cc:	4b2e      	ldr	r3, [pc, #184]	; (8016a88 <icmp_input+0x1f8>)
 80169ce:	22c7      	movs	r2, #199	; 0xc7
 80169d0:	4930      	ldr	r1, [pc, #192]	; (8016a94 <icmp_input+0x204>)
 80169d2:	482f      	ldr	r0, [pc, #188]	; (8016a90 <icmp_input+0x200>)
 80169d4:	f001 fec8 	bl	8018768 <iprintf>
          goto icmperr;
 80169d8:	e04b      	b.n	8016a72 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80169e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169e2:	4619      	mov	r1, r3
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f7f7 fe79 	bl	800e6dc <pbuf_add_header>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d12b      	bne.n	8016a48 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80169f6:	69fb      	ldr	r3, [r7, #28]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80169fe:	4b20      	ldr	r3, [pc, #128]	; (8016a80 <icmp_input+0x1f0>)
 8016a00:	691a      	ldr	r2, [r3, #16]
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	709a      	strb	r2, [r3, #2]
 8016a12:	2200      	movs	r2, #0
 8016a14:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	22ff      	movs	r2, #255	; 0xff
 8016a1a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	729a      	strb	r2, [r3, #10]
 8016a22:	2200      	movs	r2, #0
 8016a24:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	9302      	str	r3, [sp, #8]
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	9301      	str	r3, [sp, #4]
 8016a2e:	2300      	movs	r3, #0
 8016a30:	9300      	str	r3, [sp, #0]
 8016a32:	23ff      	movs	r3, #255	; 0xff
 8016a34:	2200      	movs	r2, #0
 8016a36:	69f9      	ldr	r1, [r7, #28]
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f000 fa75 	bl	8016f28 <ip4_output_if>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a42:	e001      	b.n	8016a48 <icmp_input+0x1b8>
      break;
 8016a44:	bf00      	nop
 8016a46:	e000      	b.n	8016a4a <icmp_input+0x1ba>
      break;
 8016a48:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f7f7 ff0e 	bl	800e86c <pbuf_free>
  return;
 8016a50:	e013      	b.n	8016a7a <icmp_input+0x1ea>
    goto lenerr;
 8016a52:	bf00      	nop
 8016a54:	e002      	b.n	8016a5c <icmp_input+0x1cc>
    goto lenerr;
 8016a56:	bf00      	nop
 8016a58:	e000      	b.n	8016a5c <icmp_input+0x1cc>
        goto lenerr;
 8016a5a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f7f7 ff05 	bl	800e86c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a62:	e00a      	b.n	8016a7a <icmp_input+0x1ea>
        goto icmperr;
 8016a64:	bf00      	nop
 8016a66:	e004      	b.n	8016a72 <icmp_input+0x1e2>
        goto icmperr;
 8016a68:	bf00      	nop
 8016a6a:	e002      	b.n	8016a72 <icmp_input+0x1e2>
          goto icmperr;
 8016a6c:	bf00      	nop
 8016a6e:	e000      	b.n	8016a72 <icmp_input+0x1e2>
          goto icmperr;
 8016a70:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7f7 fefa 	bl	800e86c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016a7a:	3728      	adds	r7, #40	; 0x28
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	2000a43c 	.word	0x2000a43c
 8016a84:	2000a450 	.word	0x2000a450
 8016a88:	0801d05c 	.word	0x0801d05c
 8016a8c:	0801d094 	.word	0x0801d094
 8016a90:	0801d0cc 	.word	0x0801d0cc
 8016a94:	0801d0f4 	.word	0x0801d0f4

08016a98 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016aa4:	78fb      	ldrb	r3, [r7, #3]
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	2103      	movs	r1, #3
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f000 f814 	bl	8016ad8 <icmp_send_response>
}
 8016ab0:	bf00      	nop
 8016ab2:	3708      	adds	r7, #8
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016ac4:	78fb      	ldrb	r3, [r7, #3]
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	210b      	movs	r1, #11
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f000 f804 	bl	8016ad8 <icmp_send_response>
}
 8016ad0:	bf00      	nop
 8016ad2:	3708      	adds	r7, #8
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b08c      	sub	sp, #48	; 0x30
 8016adc:	af04      	add	r7, sp, #16
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	70fb      	strb	r3, [r7, #3]
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016ae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016aec:	2124      	movs	r1, #36	; 0x24
 8016aee:	2022      	movs	r0, #34	; 0x22
 8016af0:	f7f7 fba6 	bl	800e240 <pbuf_alloc>
 8016af4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d04c      	beq.n	8016b96 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	895b      	ldrh	r3, [r3, #10]
 8016b00:	2b23      	cmp	r3, #35	; 0x23
 8016b02:	d806      	bhi.n	8016b12 <icmp_send_response+0x3a>
 8016b04:	4b26      	ldr	r3, [pc, #152]	; (8016ba0 <icmp_send_response+0xc8>)
 8016b06:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016b0a:	4926      	ldr	r1, [pc, #152]	; (8016ba4 <icmp_send_response+0xcc>)
 8016b0c:	4826      	ldr	r0, [pc, #152]	; (8016ba8 <icmp_send_response+0xd0>)
 8016b0e:	f001 fe2b 	bl	8018768 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	685b      	ldr	r3, [r3, #4]
 8016b1c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	78fa      	ldrb	r2, [r7, #3]
 8016b22:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	78ba      	ldrb	r2, [r7, #2]
 8016b28:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	711a      	strb	r2, [r3, #4]
 8016b30:	2200      	movs	r2, #0
 8016b32:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	2200      	movs	r2, #0
 8016b38:	719a      	strb	r2, [r3, #6]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	f103 0008 	add.w	r0, r3, #8
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	685b      	ldr	r3, [r3, #4]
 8016b4a:	221c      	movs	r2, #28
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	f001 fd31 	bl	80185b4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b58:	f107 030c 	add.w	r3, r7, #12
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f000 f825 	bl	8016bac <ip4_route>
 8016b62:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d011      	beq.n	8016b8e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	709a      	strb	r2, [r3, #2]
 8016b70:	2200      	movs	r2, #0
 8016b72:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b74:	f107 020c 	add.w	r2, r7, #12
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	9302      	str	r3, [sp, #8]
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	9301      	str	r3, [sp, #4]
 8016b80:	2300      	movs	r3, #0
 8016b82:	9300      	str	r3, [sp, #0]
 8016b84:	23ff      	movs	r3, #255	; 0xff
 8016b86:	2100      	movs	r1, #0
 8016b88:	69f8      	ldr	r0, [r7, #28]
 8016b8a:	f000 f9cd 	bl	8016f28 <ip4_output_if>
  }
  pbuf_free(q);
 8016b8e:	69f8      	ldr	r0, [r7, #28]
 8016b90:	f7f7 fe6c 	bl	800e86c <pbuf_free>
 8016b94:	e000      	b.n	8016b98 <icmp_send_response+0xc0>
    return;
 8016b96:	bf00      	nop
}
 8016b98:	3720      	adds	r7, #32
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}
 8016b9e:	bf00      	nop
 8016ba0:	0801d05c 	.word	0x0801d05c
 8016ba4:	0801d128 	.word	0x0801d128
 8016ba8:	0801d0cc 	.word	0x0801d0cc

08016bac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b085      	sub	sp, #20
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016bb4:	4b33      	ldr	r3, [pc, #204]	; (8016c84 <ip4_route+0xd8>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	60fb      	str	r3, [r7, #12]
 8016bba:	e036      	b.n	8016c2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bc2:	f003 0301 	and.w	r3, r3, #1
 8016bc6:	b2db      	uxtb	r3, r3
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d02b      	beq.n	8016c24 <ip4_route+0x78>
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bd2:	089b      	lsrs	r3, r3, #2
 8016bd4:	f003 0301 	and.w	r3, r3, #1
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d022      	beq.n	8016c24 <ip4_route+0x78>
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	3304      	adds	r3, #4
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d01d      	beq.n	8016c24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681a      	ldr	r2, [r3, #0]
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	3304      	adds	r3, #4
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	405a      	eors	r2, r3
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	3308      	adds	r3, #8
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d101      	bne.n	8016c04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	e038      	b.n	8016c76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c0a:	f003 0302 	and.w	r3, r3, #2
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d108      	bne.n	8016c24 <ip4_route+0x78>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681a      	ldr	r2, [r3, #0]
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	330c      	adds	r3, #12
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d101      	bne.n	8016c24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	e028      	b.n	8016c76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	60fb      	str	r3, [r7, #12]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1c5      	bne.n	8016bbc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c30:	4b15      	ldr	r3, [pc, #84]	; (8016c88 <ip4_route+0xdc>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d01a      	beq.n	8016c6e <ip4_route+0xc2>
 8016c38:	4b13      	ldr	r3, [pc, #76]	; (8016c88 <ip4_route+0xdc>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c40:	f003 0301 	and.w	r3, r3, #1
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d012      	beq.n	8016c6e <ip4_route+0xc2>
 8016c48:	4b0f      	ldr	r3, [pc, #60]	; (8016c88 <ip4_route+0xdc>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c50:	f003 0304 	and.w	r3, r3, #4
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d00a      	beq.n	8016c6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c58:	4b0b      	ldr	r3, [pc, #44]	; (8016c88 <ip4_route+0xdc>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	3304      	adds	r3, #4
 8016c5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d004      	beq.n	8016c6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	b2db      	uxtb	r3, r3
 8016c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8016c6c:	d101      	bne.n	8016c72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	e001      	b.n	8016c76 <ip4_route+0xca>
  }

  return netif_default;
 8016c72:	4b05      	ldr	r3, [pc, #20]	; (8016c88 <ip4_route+0xdc>)
 8016c74:	681b      	ldr	r3, [r3, #0]
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3714      	adds	r7, #20
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c80:	4770      	bx	lr
 8016c82:	bf00      	nop
 8016c84:	2000db40 	.word	0x2000db40
 8016c88:	2000db44 	.word	0x2000db44

08016c8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b082      	sub	sp, #8
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c9a:	f003 0301 	and.w	r3, r3, #1
 8016c9e:	b2db      	uxtb	r3, r3
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d016      	beq.n	8016cd2 <ip4_input_accept+0x46>
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	3304      	adds	r3, #4
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d011      	beq.n	8016cd2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cae:	4b0b      	ldr	r3, [pc, #44]	; (8016cdc <ip4_input_accept+0x50>)
 8016cb0:	695a      	ldr	r2, [r3, #20]
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	3304      	adds	r3, #4
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d008      	beq.n	8016cce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016cbc:	4b07      	ldr	r3, [pc, #28]	; (8016cdc <ip4_input_accept+0x50>)
 8016cbe:	695b      	ldr	r3, [r3, #20]
 8016cc0:	6879      	ldr	r1, [r7, #4]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fa08 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8016cc8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d001      	beq.n	8016cd2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	e000      	b.n	8016cd4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016cd2:	2300      	movs	r3, #0
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	2000a43c 	.word	0x2000a43c

08016ce0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b086      	sub	sp, #24
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	091b      	lsrs	r3, r3, #4
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	2b04      	cmp	r3, #4
 8016cfa:	d004      	beq.n	8016d06 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f7f7 fdb5 	bl	800e86c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016d02:	2300      	movs	r3, #0
 8016d04:	e107      	b.n	8016f16 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	f003 030f 	and.w	r3, r3, #15
 8016d0e:	b2db      	uxtb	r3, r3
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	885b      	ldrh	r3, [r3, #2]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7f6 f9c7 	bl	800d0b0 <lwip_htons>
 8016d22:	4603      	mov	r3, r0
 8016d24:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	891b      	ldrh	r3, [r3, #8]
 8016d2a:	89ba      	ldrh	r2, [r7, #12]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d204      	bcs.n	8016d3a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016d30:	89bb      	ldrh	r3, [r7, #12]
 8016d32:	4619      	mov	r1, r3
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7f7 fbe1 	bl	800e4fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	895b      	ldrh	r3, [r3, #10]
 8016d3e:	89fa      	ldrh	r2, [r7, #14]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d807      	bhi.n	8016d54 <ip4_input+0x74>
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	891b      	ldrh	r3, [r3, #8]
 8016d48:	89ba      	ldrh	r2, [r7, #12]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d802      	bhi.n	8016d54 <ip4_input+0x74>
 8016d4e:	89fb      	ldrh	r3, [r7, #14]
 8016d50:	2b13      	cmp	r3, #19
 8016d52:	d804      	bhi.n	8016d5e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f7f7 fd89 	bl	800e86c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	e0db      	b.n	8016f16 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d5e:	697b      	ldr	r3, [r7, #20]
 8016d60:	691b      	ldr	r3, [r3, #16]
 8016d62:	4a6f      	ldr	r2, [pc, #444]	; (8016f20 <ip4_input+0x240>)
 8016d64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	68db      	ldr	r3, [r3, #12]
 8016d6a:	4a6d      	ldr	r2, [pc, #436]	; (8016f20 <ip4_input+0x240>)
 8016d6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d6e:	4b6c      	ldr	r3, [pc, #432]	; (8016f20 <ip4_input+0x240>)
 8016d70:	695b      	ldr	r3, [r3, #20]
 8016d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d76:	2be0      	cmp	r3, #224	; 0xe0
 8016d78:	d112      	bne.n	8016da0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d80:	f003 0301 	and.w	r3, r3, #1
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d007      	beq.n	8016d9a <ip4_input+0xba>
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	3304      	adds	r3, #4
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d002      	beq.n	8016d9a <ip4_input+0xba>
      netif = inp;
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	613b      	str	r3, [r7, #16]
 8016d98:	e02a      	b.n	8016df0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	613b      	str	r3, [r7, #16]
 8016d9e:	e027      	b.n	8016df0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016da0:	6838      	ldr	r0, [r7, #0]
 8016da2:	f7ff ff73 	bl	8016c8c <ip4_input_accept>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d002      	beq.n	8016db2 <ip4_input+0xd2>
      netif = inp;
 8016dac:	683b      	ldr	r3, [r7, #0]
 8016dae:	613b      	str	r3, [r7, #16]
 8016db0:	e01e      	b.n	8016df0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016db2:	2300      	movs	r3, #0
 8016db4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016db6:	4b5a      	ldr	r3, [pc, #360]	; (8016f20 <ip4_input+0x240>)
 8016db8:	695b      	ldr	r3, [r3, #20]
 8016dba:	b2db      	uxtb	r3, r3
 8016dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8016dbe:	d017      	beq.n	8016df0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016dc0:	4b58      	ldr	r3, [pc, #352]	; (8016f24 <ip4_input+0x244>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	613b      	str	r3, [r7, #16]
 8016dc6:	e00e      	b.n	8016de6 <ip4_input+0x106>
          if (netif == inp) {
 8016dc8:	693a      	ldr	r2, [r7, #16]
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d006      	beq.n	8016dde <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016dd0:	6938      	ldr	r0, [r7, #16]
 8016dd2:	f7ff ff5b 	bl	8016c8c <ip4_input_accept>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d108      	bne.n	8016dee <ip4_input+0x10e>
 8016ddc:	e000      	b.n	8016de0 <ip4_input+0x100>
            continue;
 8016dde:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	613b      	str	r3, [r7, #16]
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d1ed      	bne.n	8016dc8 <ip4_input+0xe8>
 8016dec:	e000      	b.n	8016df0 <ip4_input+0x110>
            break;
 8016dee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016df0:	4b4b      	ldr	r3, [pc, #300]	; (8016f20 <ip4_input+0x240>)
 8016df2:	691b      	ldr	r3, [r3, #16]
 8016df4:	6839      	ldr	r1, [r7, #0]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f000 f96e 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d105      	bne.n	8016e0e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016e02:	4b47      	ldr	r3, [pc, #284]	; (8016f20 <ip4_input+0x240>)
 8016e04:	691b      	ldr	r3, [r3, #16]
 8016e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e0a:	2be0      	cmp	r3, #224	; 0xe0
 8016e0c:	d104      	bne.n	8016e18 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f7f7 fd2c 	bl	800e86c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016e14:	2300      	movs	r3, #0
 8016e16:	e07e      	b.n	8016f16 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d104      	bne.n	8016e28 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f7f7 fd24 	bl	800e86c <pbuf_free>
    return ERR_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	e076      	b.n	8016f16 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	88db      	ldrh	r3, [r3, #6]
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	461a      	mov	r2, r3
 8016e30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016e34:	4013      	ands	r3, r2
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00b      	beq.n	8016e52 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 fc92 	bl	8017764 <ip4_reass>
 8016e40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d101      	bne.n	8016e4c <ip4_input+0x16c>
      return ERR_OK;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	e064      	b.n	8016f16 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016e52:	4a33      	ldr	r2, [pc, #204]	; (8016f20 <ip4_input+0x240>)
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016e58:	4a31      	ldr	r2, [pc, #196]	; (8016f20 <ip4_input+0x240>)
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016e5e:	4a30      	ldr	r2, [pc, #192]	; (8016f20 <ip4_input+0x240>)
 8016e60:	697b      	ldr	r3, [r7, #20]
 8016e62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	781b      	ldrb	r3, [r3, #0]
 8016e68:	f003 030f 	and.w	r3, r3, #15
 8016e6c:	b2db      	uxtb	r3, r3
 8016e6e:	009b      	lsls	r3, r3, #2
 8016e70:	b2db      	uxtb	r3, r3
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	4b2a      	ldr	r3, [pc, #168]	; (8016f20 <ip4_input+0x240>)
 8016e76:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016e78:	89fb      	ldrh	r3, [r7, #14]
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f7f7 fc3d 	bl	800e6fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016e82:	697b      	ldr	r3, [r7, #20]
 8016e84:	7a5b      	ldrb	r3, [r3, #9]
 8016e86:	2b11      	cmp	r3, #17
 8016e88:	d006      	beq.n	8016e98 <ip4_input+0x1b8>
 8016e8a:	2b11      	cmp	r3, #17
 8016e8c:	dc13      	bgt.n	8016eb6 <ip4_input+0x1d6>
 8016e8e:	2b01      	cmp	r3, #1
 8016e90:	d00c      	beq.n	8016eac <ip4_input+0x1cc>
 8016e92:	2b06      	cmp	r3, #6
 8016e94:	d005      	beq.n	8016ea2 <ip4_input+0x1c2>
 8016e96:	e00e      	b.n	8016eb6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f7fe f970 	bl	8015180 <udp_input>
        break;
 8016ea0:	e026      	b.n	8016ef0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016ea2:	6839      	ldr	r1, [r7, #0]
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f7f9 fd2d 	bl	8010904 <tcp_input>
        break;
 8016eaa:	e021      	b.n	8016ef0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016eac:	6839      	ldr	r1, [r7, #0]
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7ff fcee 	bl	8016890 <icmp_input>
        break;
 8016eb4:	e01c      	b.n	8016ef0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016eb6:	4b1a      	ldr	r3, [pc, #104]	; (8016f20 <ip4_input+0x240>)
 8016eb8:	695b      	ldr	r3, [r3, #20]
 8016eba:	6939      	ldr	r1, [r7, #16]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 f90b 	bl	80170d8 <ip4_addr_isbroadcast_u32>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d10f      	bne.n	8016ee8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ec8:	4b15      	ldr	r3, [pc, #84]	; (8016f20 <ip4_input+0x240>)
 8016eca:	695b      	ldr	r3, [r3, #20]
 8016ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ed0:	2be0      	cmp	r3, #224	; 0xe0
 8016ed2:	d009      	beq.n	8016ee8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016ed8:	4619      	mov	r1, r3
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f7f7 fc81 	bl	800e7e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016ee0:	2102      	movs	r1, #2
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f7ff fdd8 	bl	8016a98 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7f7 fcbf 	bl	800e86c <pbuf_free>
        break;
 8016eee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016ef0:	4b0b      	ldr	r3, [pc, #44]	; (8016f20 <ip4_input+0x240>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016ef6:	4b0a      	ldr	r3, [pc, #40]	; (8016f20 <ip4_input+0x240>)
 8016ef8:	2200      	movs	r2, #0
 8016efa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016efc:	4b08      	ldr	r3, [pc, #32]	; (8016f20 <ip4_input+0x240>)
 8016efe:	2200      	movs	r2, #0
 8016f00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f02:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <ip4_input+0x240>)
 8016f04:	2200      	movs	r2, #0
 8016f06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016f08:	4b05      	ldr	r3, [pc, #20]	; (8016f20 <ip4_input+0x240>)
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016f0e:	4b04      	ldr	r3, [pc, #16]	; (8016f20 <ip4_input+0x240>)
 8016f10:	2200      	movs	r2, #0
 8016f12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016f14:	2300      	movs	r3, #0
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3718      	adds	r7, #24
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	2000a43c 	.word	0x2000a43c
 8016f24:	2000db40 	.word	0x2000db40

08016f28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b08a      	sub	sp, #40	; 0x28
 8016f2c:	af04      	add	r7, sp, #16
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d009      	beq.n	8016f54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d003      	beq.n	8016f4e <ip4_output_if+0x26>
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d102      	bne.n	8016f54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f50:	3304      	adds	r3, #4
 8016f52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f54:	78fa      	ldrb	r2, [r7, #3]
 8016f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f58:	9302      	str	r3, [sp, #8]
 8016f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f5e:	9301      	str	r3, [sp, #4]
 8016f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016f64:	9300      	str	r3, [sp, #0]
 8016f66:	4613      	mov	r3, r2
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	6979      	ldr	r1, [r7, #20]
 8016f6c:	68f8      	ldr	r0, [r7, #12]
 8016f6e:	f000 f805 	bl	8016f7c <ip4_output_if_src>
 8016f72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3718      	adds	r7, #24
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b088      	sub	sp, #32
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
 8016f88:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	7b9b      	ldrb	r3, [r3, #14]
 8016f8e:	2b01      	cmp	r3, #1
 8016f90:	d006      	beq.n	8016fa0 <ip4_output_if_src+0x24>
 8016f92:	4b4b      	ldr	r3, [pc, #300]	; (80170c0 <ip4_output_if_src+0x144>)
 8016f94:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016f98:	494a      	ldr	r1, [pc, #296]	; (80170c4 <ip4_output_if_src+0x148>)
 8016f9a:	484b      	ldr	r0, [pc, #300]	; (80170c8 <ip4_output_if_src+0x14c>)
 8016f9c:	f001 fbe4 	bl	8018768 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d060      	beq.n	8017068 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016fa6:	2314      	movs	r3, #20
 8016fa8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016faa:	2114      	movs	r1, #20
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f7f7 fb95 	bl	800e6dc <pbuf_add_header>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d002      	beq.n	8016fbe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016fb8:	f06f 0301 	mvn.w	r3, #1
 8016fbc:	e07c      	b.n	80170b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	895b      	ldrh	r3, [r3, #10]
 8016fc8:	2b13      	cmp	r3, #19
 8016fca:	d806      	bhi.n	8016fda <ip4_output_if_src+0x5e>
 8016fcc:	4b3c      	ldr	r3, [pc, #240]	; (80170c0 <ip4_output_if_src+0x144>)
 8016fce:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016fd2:	493e      	ldr	r1, [pc, #248]	; (80170cc <ip4_output_if_src+0x150>)
 8016fd4:	483c      	ldr	r0, [pc, #240]	; (80170c8 <ip4_output_if_src+0x14c>)
 8016fd6:	f001 fbc7 	bl	8018768 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	78fa      	ldrb	r2, [r7, #3]
 8016fde:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016fe6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	681a      	ldr	r2, [r3, #0]
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016ff0:	8b7b      	ldrh	r3, [r7, #26]
 8016ff2:	089b      	lsrs	r3, r3, #2
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	b2db      	uxtb	r3, r3
 8016ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ffc:	b2da      	uxtb	r2, r3
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017002:	69fb      	ldr	r3, [r7, #28]
 8017004:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017008:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	891b      	ldrh	r3, [r3, #8]
 801700e:	4618      	mov	r0, r3
 8017010:	f7f6 f84e 	bl	800d0b0 <lwip_htons>
 8017014:	4603      	mov	r3, r0
 8017016:	461a      	mov	r2, r3
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	2200      	movs	r2, #0
 8017020:	719a      	strb	r2, [r3, #6]
 8017022:	2200      	movs	r2, #0
 8017024:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017026:	4b2a      	ldr	r3, [pc, #168]	; (80170d0 <ip4_output_if_src+0x154>)
 8017028:	881b      	ldrh	r3, [r3, #0]
 801702a:	4618      	mov	r0, r3
 801702c:	f7f6 f840 	bl	800d0b0 <lwip_htons>
 8017030:	4603      	mov	r3, r0
 8017032:	461a      	mov	r2, r3
 8017034:	69fb      	ldr	r3, [r7, #28]
 8017036:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017038:	4b25      	ldr	r3, [pc, #148]	; (80170d0 <ip4_output_if_src+0x154>)
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	3301      	adds	r3, #1
 801703e:	b29a      	uxth	r2, r3
 8017040:	4b23      	ldr	r3, [pc, #140]	; (80170d0 <ip4_output_if_src+0x154>)
 8017042:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d104      	bne.n	8017054 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801704a:	4b22      	ldr	r3, [pc, #136]	; (80170d4 <ip4_output_if_src+0x158>)
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	60da      	str	r2, [r3, #12]
 8017052:	e003      	b.n	801705c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	2200      	movs	r2, #0
 8017060:	729a      	strb	r2, [r3, #10]
 8017062:	2200      	movs	r2, #0
 8017064:	72da      	strb	r2, [r3, #11]
 8017066:	e00f      	b.n	8017088 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	895b      	ldrh	r3, [r3, #10]
 801706c:	2b13      	cmp	r3, #19
 801706e:	d802      	bhi.n	8017076 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017070:	f06f 0301 	mvn.w	r3, #1
 8017074:	e020      	b.n	80170b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	691b      	ldr	r3, [r3, #16]
 8017080:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017082:	f107 0314 	add.w	r3, r7, #20
 8017086:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801708a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801708c:	2b00      	cmp	r3, #0
 801708e:	d00c      	beq.n	80170aa <ip4_output_if_src+0x12e>
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	891a      	ldrh	r2, [r3, #8]
 8017094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017096:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017098:	429a      	cmp	r2, r3
 801709a:	d906      	bls.n	80170aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80170a0:	68f8      	ldr	r0, [r7, #12]
 80170a2:	f000 fd4d 	bl	8017b40 <ip4_frag>
 80170a6:	4603      	mov	r3, r0
 80170a8:	e006      	b.n	80170b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80170aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ac:	695b      	ldr	r3, [r3, #20]
 80170ae:	687a      	ldr	r2, [r7, #4]
 80170b0:	68f9      	ldr	r1, [r7, #12]
 80170b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170b4:	4798      	blx	r3
 80170b6:	4603      	mov	r3, r0
}
 80170b8:	4618      	mov	r0, r3
 80170ba:	3720      	adds	r7, #32
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	0801d154 	.word	0x0801d154
 80170c4:	0801d188 	.word	0x0801d188
 80170c8:	0801d194 	.word	0x0801d194
 80170cc:	0801d1bc 	.word	0x0801d1bc
 80170d0:	2000447e 	.word	0x2000447e
 80170d4:	0801d618 	.word	0x0801d618

080170d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80170d8:	b480      	push	{r7}
 80170da:	b085      	sub	sp, #20
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170ec:	d002      	beq.n	80170f4 <ip4_addr_isbroadcast_u32+0x1c>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d101      	bne.n	80170f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80170f4:	2301      	movs	r3, #1
 80170f6:	e02a      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170fe:	f003 0302 	and.w	r3, r3, #2
 8017102:	2b00      	cmp	r3, #0
 8017104:	d101      	bne.n	801710a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017106:	2300      	movs	r3, #0
 8017108:	e021      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	3304      	adds	r3, #4
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	429a      	cmp	r2, r3
 8017114:	d101      	bne.n	801711a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017116:	2300      	movs	r3, #0
 8017118:	e019      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801711a:	68fa      	ldr	r2, [r7, #12]
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	3304      	adds	r3, #4
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	405a      	eors	r2, r3
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	3308      	adds	r3, #8
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	4013      	ands	r3, r2
 801712c:	2b00      	cmp	r3, #0
 801712e:	d10d      	bne.n	801714c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	3308      	adds	r3, #8
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	43da      	mvns	r2, r3
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	3308      	adds	r3, #8
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017144:	429a      	cmp	r2, r3
 8017146:	d101      	bne.n	801714c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017148:	2301      	movs	r3, #1
 801714a:	e000      	b.n	801714e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801714c:	2300      	movs	r3, #0
  }
}
 801714e:	4618      	mov	r0, r3
 8017150:	3714      	adds	r7, #20
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr
	...

0801715c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017162:	2300      	movs	r3, #0
 8017164:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017166:	4b12      	ldr	r3, [pc, #72]	; (80171b0 <ip_reass_tmr+0x54>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801716c:	e018      	b.n	80171a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	7fdb      	ldrb	r3, [r3, #31]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d00b      	beq.n	801718e <ip_reass_tmr+0x32>
      r->timer--;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	7fdb      	ldrb	r3, [r3, #31]
 801717a:	3b01      	subs	r3, #1
 801717c:	b2da      	uxtb	r2, r3
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	60fb      	str	r3, [r7, #12]
 801718c:	e008      	b.n	80171a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017198:	68b9      	ldr	r1, [r7, #8]
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f000 f80a 	bl	80171b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d1e3      	bne.n	801716e <ip_reass_tmr+0x12>
    }
  }
}
 80171a6:	bf00      	nop
 80171a8:	bf00      	nop
 80171aa:	3710      	adds	r7, #16
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}
 80171b0:	20004480 	.word	0x20004480

080171b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b088      	sub	sp, #32
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80171be:	2300      	movs	r3, #0
 80171c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80171c2:	683a      	ldr	r2, [r7, #0]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d105      	bne.n	80171d6 <ip_reass_free_complete_datagram+0x22>
 80171ca:	4b45      	ldr	r3, [pc, #276]	; (80172e0 <ip_reass_free_complete_datagram+0x12c>)
 80171cc:	22ab      	movs	r2, #171	; 0xab
 80171ce:	4945      	ldr	r1, [pc, #276]	; (80172e4 <ip_reass_free_complete_datagram+0x130>)
 80171d0:	4845      	ldr	r0, [pc, #276]	; (80172e8 <ip_reass_free_complete_datagram+0x134>)
 80171d2:	f001 fac9 	bl	8018768 <iprintf>
  if (prev != NULL) {
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d00a      	beq.n	80171f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d005      	beq.n	80171f2 <ip_reass_free_complete_datagram+0x3e>
 80171e6:	4b3e      	ldr	r3, [pc, #248]	; (80172e0 <ip_reass_free_complete_datagram+0x12c>)
 80171e8:	22ad      	movs	r2, #173	; 0xad
 80171ea:	4940      	ldr	r1, [pc, #256]	; (80172ec <ip_reass_free_complete_datagram+0x138>)
 80171ec:	483e      	ldr	r0, [pc, #248]	; (80172e8 <ip_reass_free_complete_datagram+0x134>)
 80171ee:	f001 fabb 	bl	8018768 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80171fa:	697b      	ldr	r3, [r7, #20]
 80171fc:	889b      	ldrh	r3, [r3, #4]
 80171fe:	b29b      	uxth	r3, r3
 8017200:	2b00      	cmp	r3, #0
 8017202:	d12a      	bne.n	801725a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	685b      	ldr	r3, [r3, #4]
 8017208:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	681a      	ldr	r2, [r3, #0]
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	6858      	ldr	r0, [r3, #4]
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	3308      	adds	r3, #8
 801721a:	2214      	movs	r2, #20
 801721c:	4619      	mov	r1, r3
 801721e:	f001 f9c9 	bl	80185b4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017222:	2101      	movs	r1, #1
 8017224:	69b8      	ldr	r0, [r7, #24]
 8017226:	f7ff fc47 	bl	8016ab8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801722a:	69b8      	ldr	r0, [r7, #24]
 801722c:	f7f7 fbac 	bl	800e988 <pbuf_clen>
 8017230:	4603      	mov	r3, r0
 8017232:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017234:	8bfa      	ldrh	r2, [r7, #30]
 8017236:	8a7b      	ldrh	r3, [r7, #18]
 8017238:	4413      	add	r3, r2
 801723a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801723e:	db05      	blt.n	801724c <ip_reass_free_complete_datagram+0x98>
 8017240:	4b27      	ldr	r3, [pc, #156]	; (80172e0 <ip_reass_free_complete_datagram+0x12c>)
 8017242:	22bc      	movs	r2, #188	; 0xbc
 8017244:	492a      	ldr	r1, [pc, #168]	; (80172f0 <ip_reass_free_complete_datagram+0x13c>)
 8017246:	4828      	ldr	r0, [pc, #160]	; (80172e8 <ip_reass_free_complete_datagram+0x134>)
 8017248:	f001 fa8e 	bl	8018768 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801724c:	8bfa      	ldrh	r2, [r7, #30]
 801724e:	8a7b      	ldrh	r3, [r7, #18]
 8017250:	4413      	add	r3, r2
 8017252:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017254:	69b8      	ldr	r0, [r7, #24]
 8017256:	f7f7 fb09 	bl	800e86c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017260:	e01f      	b.n	80172a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017262:	69bb      	ldr	r3, [r7, #24]
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017268:	69bb      	ldr	r3, [r7, #24]
 801726a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017272:	68f8      	ldr	r0, [r7, #12]
 8017274:	f7f7 fb88 	bl	800e988 <pbuf_clen>
 8017278:	4603      	mov	r3, r0
 801727a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801727c:	8bfa      	ldrh	r2, [r7, #30]
 801727e:	8a7b      	ldrh	r3, [r7, #18]
 8017280:	4413      	add	r3, r2
 8017282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017286:	db05      	blt.n	8017294 <ip_reass_free_complete_datagram+0xe0>
 8017288:	4b15      	ldr	r3, [pc, #84]	; (80172e0 <ip_reass_free_complete_datagram+0x12c>)
 801728a:	22cc      	movs	r2, #204	; 0xcc
 801728c:	4918      	ldr	r1, [pc, #96]	; (80172f0 <ip_reass_free_complete_datagram+0x13c>)
 801728e:	4816      	ldr	r0, [pc, #88]	; (80172e8 <ip_reass_free_complete_datagram+0x134>)
 8017290:	f001 fa6a 	bl	8018768 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017294:	8bfa      	ldrh	r2, [r7, #30]
 8017296:	8a7b      	ldrh	r3, [r7, #18]
 8017298:	4413      	add	r3, r2
 801729a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801729c:	68f8      	ldr	r0, [r7, #12]
 801729e:	f7f7 fae5 	bl	800e86c <pbuf_free>
  while (p != NULL) {
 80172a2:	69bb      	ldr	r3, [r7, #24]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d1dc      	bne.n	8017262 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80172a8:	6839      	ldr	r1, [r7, #0]
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f000 f8c2 	bl	8017434 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80172b0:	4b10      	ldr	r3, [pc, #64]	; (80172f4 <ip_reass_free_complete_datagram+0x140>)
 80172b2:	881b      	ldrh	r3, [r3, #0]
 80172b4:	8bfa      	ldrh	r2, [r7, #30]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d905      	bls.n	80172c6 <ip_reass_free_complete_datagram+0x112>
 80172ba:	4b09      	ldr	r3, [pc, #36]	; (80172e0 <ip_reass_free_complete_datagram+0x12c>)
 80172bc:	22d2      	movs	r2, #210	; 0xd2
 80172be:	490e      	ldr	r1, [pc, #56]	; (80172f8 <ip_reass_free_complete_datagram+0x144>)
 80172c0:	4809      	ldr	r0, [pc, #36]	; (80172e8 <ip_reass_free_complete_datagram+0x134>)
 80172c2:	f001 fa51 	bl	8018768 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80172c6:	4b0b      	ldr	r3, [pc, #44]	; (80172f4 <ip_reass_free_complete_datagram+0x140>)
 80172c8:	881a      	ldrh	r2, [r3, #0]
 80172ca:	8bfb      	ldrh	r3, [r7, #30]
 80172cc:	1ad3      	subs	r3, r2, r3
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	4b08      	ldr	r3, [pc, #32]	; (80172f4 <ip_reass_free_complete_datagram+0x140>)
 80172d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80172d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3720      	adds	r7, #32
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	bf00      	nop
 80172e0:	0801d1ec 	.word	0x0801d1ec
 80172e4:	0801d228 	.word	0x0801d228
 80172e8:	0801d234 	.word	0x0801d234
 80172ec:	0801d25c 	.word	0x0801d25c
 80172f0:	0801d270 	.word	0x0801d270
 80172f4:	20004484 	.word	0x20004484
 80172f8:	0801d290 	.word	0x0801d290

080172fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b08a      	sub	sp, #40	; 0x28
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017306:	2300      	movs	r3, #0
 8017308:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801730a:	2300      	movs	r3, #0
 801730c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801730e:	2300      	movs	r3, #0
 8017310:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017312:	2300      	movs	r3, #0
 8017314:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017316:	2300      	movs	r3, #0
 8017318:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801731a:	4b28      	ldr	r3, [pc, #160]	; (80173bc <ip_reass_remove_oldest_datagram+0xc0>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017320:	e030      	b.n	8017384 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017324:	695a      	ldr	r2, [r3, #20]
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	68db      	ldr	r3, [r3, #12]
 801732a:	429a      	cmp	r2, r3
 801732c:	d10c      	bne.n	8017348 <ip_reass_remove_oldest_datagram+0x4c>
 801732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017330:	699a      	ldr	r2, [r3, #24]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	691b      	ldr	r3, [r3, #16]
 8017336:	429a      	cmp	r2, r3
 8017338:	d106      	bne.n	8017348 <ip_reass_remove_oldest_datagram+0x4c>
 801733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733c:	899a      	ldrh	r2, [r3, #12]
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	889b      	ldrh	r3, [r3, #4]
 8017342:	b29b      	uxth	r3, r3
 8017344:	429a      	cmp	r2, r3
 8017346:	d014      	beq.n	8017372 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	3301      	adds	r3, #1
 801734c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801734e:	6a3b      	ldr	r3, [r7, #32]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d104      	bne.n	801735e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017356:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017358:	69fb      	ldr	r3, [r7, #28]
 801735a:	61bb      	str	r3, [r7, #24]
 801735c:	e009      	b.n	8017372 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017360:	7fda      	ldrb	r2, [r3, #31]
 8017362:	6a3b      	ldr	r3, [r7, #32]
 8017364:	7fdb      	ldrb	r3, [r3, #31]
 8017366:	429a      	cmp	r2, r3
 8017368:	d803      	bhi.n	8017372 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801736e:	69fb      	ldr	r3, [r7, #28]
 8017370:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d001      	beq.n	801737e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801737c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017386:	2b00      	cmp	r3, #0
 8017388:	d1cb      	bne.n	8017322 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801738a:	6a3b      	ldr	r3, [r7, #32]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d008      	beq.n	80173a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017390:	69b9      	ldr	r1, [r7, #24]
 8017392:	6a38      	ldr	r0, [r7, #32]
 8017394:	f7ff ff0e 	bl	80171b4 <ip_reass_free_complete_datagram>
 8017398:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801739a:	697a      	ldr	r2, [r7, #20]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	4413      	add	r3, r2
 80173a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80173a2:	697a      	ldr	r2, [r7, #20]
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	429a      	cmp	r2, r3
 80173a8:	da02      	bge.n	80173b0 <ip_reass_remove_oldest_datagram+0xb4>
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	2b01      	cmp	r3, #1
 80173ae:	dcac      	bgt.n	801730a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80173b0:	697b      	ldr	r3, [r7, #20]
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3728      	adds	r7, #40	; 0x28
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	20004480 	.word	0x20004480

080173c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b084      	sub	sp, #16
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80173ca:	2004      	movs	r0, #4
 80173cc:	f7f6 fb26 	bl	800da1c <memp_malloc>
 80173d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d110      	bne.n	80173fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80173d8:	6839      	ldr	r1, [r7, #0]
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f7ff ff8e 	bl	80172fc <ip_reass_remove_oldest_datagram>
 80173e0:	4602      	mov	r2, r0
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	4293      	cmp	r3, r2
 80173e6:	dc03      	bgt.n	80173f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80173e8:	2004      	movs	r0, #4
 80173ea:	f7f6 fb17 	bl	800da1c <memp_malloc>
 80173ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d101      	bne.n	80173fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80173f6:	2300      	movs	r3, #0
 80173f8:	e016      	b.n	8017428 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80173fa:	2220      	movs	r2, #32
 80173fc:	2100      	movs	r1, #0
 80173fe:	68f8      	ldr	r0, [r7, #12]
 8017400:	f001 f900 	bl	8018604 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	220f      	movs	r2, #15
 8017408:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801740a:	4b09      	ldr	r3, [pc, #36]	; (8017430 <ip_reass_enqueue_new_datagram+0x70>)
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017412:	4a07      	ldr	r2, [pc, #28]	; (8017430 <ip_reass_enqueue_new_datagram+0x70>)
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	3308      	adds	r3, #8
 801741c:	2214      	movs	r2, #20
 801741e:	6879      	ldr	r1, [r7, #4]
 8017420:	4618      	mov	r0, r3
 8017422:	f001 f8c7 	bl	80185b4 <memcpy>
  return ipr;
 8017426:	68fb      	ldr	r3, [r7, #12]
}
 8017428:	4618      	mov	r0, r3
 801742a:	3710      	adds	r7, #16
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}
 8017430:	20004480 	.word	0x20004480

08017434 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
 801743c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801743e:	4b10      	ldr	r3, [pc, #64]	; (8017480 <ip_reass_dequeue_datagram+0x4c>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	687a      	ldr	r2, [r7, #4]
 8017444:	429a      	cmp	r2, r3
 8017446:	d104      	bne.n	8017452 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	4a0c      	ldr	r2, [pc, #48]	; (8017480 <ip_reass_dequeue_datagram+0x4c>)
 801744e:	6013      	str	r3, [r2, #0]
 8017450:	e00d      	b.n	801746e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d106      	bne.n	8017466 <ip_reass_dequeue_datagram+0x32>
 8017458:	4b0a      	ldr	r3, [pc, #40]	; (8017484 <ip_reass_dequeue_datagram+0x50>)
 801745a:	f240 1245 	movw	r2, #325	; 0x145
 801745e:	490a      	ldr	r1, [pc, #40]	; (8017488 <ip_reass_dequeue_datagram+0x54>)
 8017460:	480a      	ldr	r0, [pc, #40]	; (801748c <ip_reass_dequeue_datagram+0x58>)
 8017462:	f001 f981 	bl	8018768 <iprintf>
    prev->next = ipr->next;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801746e:	6879      	ldr	r1, [r7, #4]
 8017470:	2004      	movs	r0, #4
 8017472:	f7f6 fb25 	bl	800dac0 <memp_free>
}
 8017476:	bf00      	nop
 8017478:	3708      	adds	r7, #8
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	20004480 	.word	0x20004480
 8017484:	0801d1ec 	.word	0x0801d1ec
 8017488:	0801d2b4 	.word	0x0801d2b4
 801748c:	0801d234 	.word	0x0801d234

08017490 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b08c      	sub	sp, #48	; 0x30
 8017494:	af00      	add	r7, sp, #0
 8017496:	60f8      	str	r0, [r7, #12]
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801749c:	2300      	movs	r3, #0
 801749e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80174a0:	2301      	movs	r3, #1
 80174a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	685b      	ldr	r3, [r3, #4]
 80174a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80174aa:	69fb      	ldr	r3, [r7, #28]
 80174ac:	885b      	ldrh	r3, [r3, #2]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f5 fdfd 	bl	800d0b0 <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	f003 030f 	and.w	r3, r3, #15
 80174c2:	b2db      	uxtb	r3, r3
 80174c4:	009b      	lsls	r3, r3, #2
 80174c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80174c8:	7e7b      	ldrb	r3, [r7, #25]
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	8b7a      	ldrh	r2, [r7, #26]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d202      	bcs.n	80174d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174d2:	f04f 33ff 	mov.w	r3, #4294967295
 80174d6:	e135      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80174d8:	7e7b      	ldrb	r3, [r7, #25]
 80174da:	b29b      	uxth	r3, r3
 80174dc:	8b7a      	ldrh	r2, [r7, #26]
 80174de:	1ad3      	subs	r3, r2, r3
 80174e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80174e2:	69fb      	ldr	r3, [r7, #28]
 80174e4:	88db      	ldrh	r3, [r3, #6]
 80174e6:	b29b      	uxth	r3, r3
 80174e8:	4618      	mov	r0, r3
 80174ea:	f7f5 fde1 	bl	800d0b0 <lwip_htons>
 80174ee:	4603      	mov	r3, r0
 80174f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	00db      	lsls	r3, r3, #3
 80174f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	685b      	ldr	r3, [r3, #4]
 80174fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017502:	2200      	movs	r2, #0
 8017504:	701a      	strb	r2, [r3, #0]
 8017506:	2200      	movs	r2, #0
 8017508:	705a      	strb	r2, [r3, #1]
 801750a:	2200      	movs	r2, #0
 801750c:	709a      	strb	r2, [r3, #2]
 801750e:	2200      	movs	r2, #0
 8017510:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017514:	8afa      	ldrh	r2, [r7, #22]
 8017516:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017518:	8afa      	ldrh	r2, [r7, #22]
 801751a:	8b7b      	ldrh	r3, [r7, #26]
 801751c:	4413      	add	r3, r2
 801751e:	b29a      	uxth	r2, r3
 8017520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017522:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017526:	88db      	ldrh	r3, [r3, #6]
 8017528:	b29b      	uxth	r3, r3
 801752a:	8afa      	ldrh	r2, [r7, #22]
 801752c:	429a      	cmp	r2, r3
 801752e:	d902      	bls.n	8017536 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017530:	f04f 33ff 	mov.w	r3, #4294967295
 8017534:	e106      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	627b      	str	r3, [r7, #36]	; 0x24
 801753c:	e068      	b.n	8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017546:	889b      	ldrh	r3, [r3, #4]
 8017548:	b29a      	uxth	r2, r3
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	889b      	ldrh	r3, [r3, #4]
 801754e:	b29b      	uxth	r3, r3
 8017550:	429a      	cmp	r2, r3
 8017552:	d235      	bcs.n	80175c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017558:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755c:	2b00      	cmp	r3, #0
 801755e:	d020      	beq.n	80175a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017562:	889b      	ldrh	r3, [r3, #4]
 8017564:	b29a      	uxth	r2, r3
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	88db      	ldrh	r3, [r3, #6]
 801756a:	b29b      	uxth	r3, r3
 801756c:	429a      	cmp	r2, r3
 801756e:	d307      	bcc.n	8017580 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	88db      	ldrh	r3, [r3, #6]
 8017574:	b29a      	uxth	r2, r3
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	889b      	ldrh	r3, [r3, #4]
 801757a:	b29b      	uxth	r3, r3
 801757c:	429a      	cmp	r2, r3
 801757e:	d902      	bls.n	8017586 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017580:	f04f 33ff 	mov.w	r3, #4294967295
 8017584:	e0de      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	68ba      	ldr	r2, [r7, #8]
 801758a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758e:	88db      	ldrh	r3, [r3, #6]
 8017590:	b29a      	uxth	r2, r3
 8017592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017594:	889b      	ldrh	r3, [r3, #4]
 8017596:	b29b      	uxth	r3, r3
 8017598:	429a      	cmp	r2, r3
 801759a:	d03d      	beq.n	8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801759c:	2300      	movs	r3, #0
 801759e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80175a0:	e03a      	b.n	8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80175a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a4:	88db      	ldrh	r3, [r3, #6]
 80175a6:	b29a      	uxth	r2, r3
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	889b      	ldrh	r3, [r3, #4]
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d902      	bls.n	80175b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175b2:	f04f 33ff 	mov.w	r3, #4294967295
 80175b6:	e0c5      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	68ba      	ldr	r2, [r7, #8]
 80175bc:	605a      	str	r2, [r3, #4]
      break;
 80175be:	e02b      	b.n	8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	889b      	ldrh	r3, [r3, #4]
 80175c4:	b29a      	uxth	r2, r3
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	889b      	ldrh	r3, [r3, #4]
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d102      	bne.n	80175d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175d0:	f04f 33ff 	mov.w	r3, #4294967295
 80175d4:	e0b6      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80175d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d8:	889b      	ldrh	r3, [r3, #4]
 80175da:	b29a      	uxth	r2, r3
 80175dc:	693b      	ldr	r3, [r7, #16]
 80175de:	88db      	ldrh	r3, [r3, #6]
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d202      	bcs.n	80175ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175e6:	f04f 33ff 	mov.w	r3, #4294967295
 80175ea:	e0ab      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80175ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d009      	beq.n	8017606 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80175f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f4:	88db      	ldrh	r3, [r3, #6]
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	889b      	ldrh	r3, [r3, #4]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	429a      	cmp	r2, r3
 8017600:	d001      	beq.n	8017606 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017602:	2300      	movs	r3, #0
 8017604:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017606:	693b      	ldr	r3, [r7, #16]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017612:	2b00      	cmp	r3, #0
 8017614:	d193      	bne.n	801753e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017616:	e000      	b.n	801761a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017618:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761c:	2b00      	cmp	r3, #0
 801761e:	d12d      	bne.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017622:	2b00      	cmp	r3, #0
 8017624:	d01c      	beq.n	8017660 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017628:	88db      	ldrh	r3, [r3, #6]
 801762a:	b29a      	uxth	r2, r3
 801762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762e:	889b      	ldrh	r3, [r3, #4]
 8017630:	b29b      	uxth	r3, r3
 8017632:	429a      	cmp	r2, r3
 8017634:	d906      	bls.n	8017644 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017636:	4b45      	ldr	r3, [pc, #276]	; (801774c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017638:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801763c:	4944      	ldr	r1, [pc, #272]	; (8017750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801763e:	4845      	ldr	r0, [pc, #276]	; (8017754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017640:	f001 f892 	bl	8018768 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017646:	68ba      	ldr	r2, [r7, #8]
 8017648:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801764c:	88db      	ldrh	r3, [r3, #6]
 801764e:	b29a      	uxth	r2, r3
 8017650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017652:	889b      	ldrh	r3, [r3, #4]
 8017654:	b29b      	uxth	r3, r3
 8017656:	429a      	cmp	r2, r3
 8017658:	d010      	beq.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801765a:	2300      	movs	r3, #0
 801765c:	623b      	str	r3, [r7, #32]
 801765e:	e00d      	b.n	801767c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	685b      	ldr	r3, [r3, #4]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d006      	beq.n	8017676 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017668:	4b38      	ldr	r3, [pc, #224]	; (801774c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801766a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801766e:	493a      	ldr	r1, [pc, #232]	; (8017758 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017670:	4838      	ldr	r0, [pc, #224]	; (8017754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017672:	f001 f879 	bl	8018768 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	68ba      	ldr	r2, [r7, #8]
 801767a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d105      	bne.n	801768e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	7f9b      	ldrb	r3, [r3, #30]
 8017686:	f003 0301 	and.w	r3, r3, #1
 801768a:	2b00      	cmp	r3, #0
 801768c:	d059      	beq.n	8017742 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801768e:	6a3b      	ldr	r3, [r7, #32]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d04f      	beq.n	8017734 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	685b      	ldr	r3, [r3, #4]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d006      	beq.n	80176aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	889b      	ldrh	r3, [r3, #4]
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d002      	beq.n	80176b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	623b      	str	r3, [r7, #32]
 80176ae:	e041      	b.n	8017734 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80176b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80176b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80176ba:	e012      	b.n	80176e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80176bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80176c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c4:	88db      	ldrh	r3, [r3, #6]
 80176c6:	b29a      	uxth	r2, r3
 80176c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ca:	889b      	ldrh	r3, [r3, #4]
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d002      	beq.n	80176d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80176d2:	2300      	movs	r3, #0
 80176d4:	623b      	str	r3, [r7, #32]
            break;
 80176d6:	e007      	b.n	80176e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80176d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80176dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80176e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d1e9      	bne.n	80176bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80176e8:	6a3b      	ldr	r3, [r7, #32]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d022      	beq.n	8017734 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d106      	bne.n	8017704 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80176f6:	4b15      	ldr	r3, [pc, #84]	; (801774c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176f8:	f240 12df 	movw	r2, #479	; 0x1df
 80176fc:	4917      	ldr	r1, [pc, #92]	; (801775c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80176fe:	4815      	ldr	r0, [pc, #84]	; (8017754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017700:	f001 f832 	bl	8018768 <iprintf>
          LWIP_ASSERT("sanity check",
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	685b      	ldr	r3, [r3, #4]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801770c:	429a      	cmp	r2, r3
 801770e:	d106      	bne.n	801771e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017710:	4b0e      	ldr	r3, [pc, #56]	; (801774c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017712:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017716:	4911      	ldr	r1, [pc, #68]	; (801775c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017718:	480e      	ldr	r0, [pc, #56]	; (8017754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801771a:	f001 f825 	bl	8018768 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d006      	beq.n	8017734 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017726:	4b09      	ldr	r3, [pc, #36]	; (801774c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017728:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801772c:	490c      	ldr	r1, [pc, #48]	; (8017760 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801772e:	4809      	ldr	r0, [pc, #36]	; (8017754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017730:	f001 f81a 	bl	8018768 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017734:	6a3b      	ldr	r3, [r7, #32]
 8017736:	2b00      	cmp	r3, #0
 8017738:	bf14      	ite	ne
 801773a:	2301      	movne	r3, #1
 801773c:	2300      	moveq	r3, #0
 801773e:	b2db      	uxtb	r3, r3
 8017740:	e000      	b.n	8017744 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017742:	2300      	movs	r3, #0
}
 8017744:	4618      	mov	r0, r3
 8017746:	3730      	adds	r7, #48	; 0x30
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}
 801774c:	0801d1ec 	.word	0x0801d1ec
 8017750:	0801d2d0 	.word	0x0801d2d0
 8017754:	0801d234 	.word	0x0801d234
 8017758:	0801d2f0 	.word	0x0801d2f0
 801775c:	0801d328 	.word	0x0801d328
 8017760:	0801d338 	.word	0x0801d338

08017764 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b08e      	sub	sp, #56	; 0x38
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	f003 030f 	and.w	r3, r3, #15
 801777a:	b2db      	uxtb	r3, r3
 801777c:	009b      	lsls	r3, r3, #2
 801777e:	b2db      	uxtb	r3, r3
 8017780:	2b14      	cmp	r3, #20
 8017782:	f040 8167 	bne.w	8017a54 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017788:	88db      	ldrh	r3, [r3, #6]
 801778a:	b29b      	uxth	r3, r3
 801778c:	4618      	mov	r0, r3
 801778e:	f7f5 fc8f 	bl	800d0b0 <lwip_htons>
 8017792:	4603      	mov	r3, r0
 8017794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017798:	b29b      	uxth	r3, r3
 801779a:	00db      	lsls	r3, r3, #3
 801779c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a0:	885b      	ldrh	r3, [r3, #2]
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7f5 fc83 	bl	800d0b0 <lwip_htons>
 80177aa:	4603      	mov	r3, r0
 80177ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80177ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	f003 030f 	and.w	r3, r3, #15
 80177b6:	b2db      	uxtb	r3, r3
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80177be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80177c6:	429a      	cmp	r2, r3
 80177c8:	f0c0 8146 	bcc.w	8017a58 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80177cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80177d4:	1ad3      	subs	r3, r2, r3
 80177d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7f7 f8d5 	bl	800e988 <pbuf_clen>
 80177de:	4603      	mov	r3, r0
 80177e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80177e2:	4b9f      	ldr	r3, [pc, #636]	; (8017a60 <ip4_reass+0x2fc>)
 80177e4:	881b      	ldrh	r3, [r3, #0]
 80177e6:	461a      	mov	r2, r3
 80177e8:	8c3b      	ldrh	r3, [r7, #32]
 80177ea:	4413      	add	r3, r2
 80177ec:	2b0a      	cmp	r3, #10
 80177ee:	dd10      	ble.n	8017812 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177f0:	8c3b      	ldrh	r3, [r7, #32]
 80177f2:	4619      	mov	r1, r3
 80177f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177f6:	f7ff fd81 	bl	80172fc <ip_reass_remove_oldest_datagram>
 80177fa:	4603      	mov	r3, r0
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	f000 812d 	beq.w	8017a5c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017802:	4b97      	ldr	r3, [pc, #604]	; (8017a60 <ip4_reass+0x2fc>)
 8017804:	881b      	ldrh	r3, [r3, #0]
 8017806:	461a      	mov	r2, r3
 8017808:	8c3b      	ldrh	r3, [r7, #32]
 801780a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801780c:	2b0a      	cmp	r3, #10
 801780e:	f300 8125 	bgt.w	8017a5c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017812:	4b94      	ldr	r3, [pc, #592]	; (8017a64 <ip4_reass+0x300>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	633b      	str	r3, [r7, #48]	; 0x30
 8017818:	e015      	b.n	8017846 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801781c:	695a      	ldr	r2, [r3, #20]
 801781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017820:	68db      	ldr	r3, [r3, #12]
 8017822:	429a      	cmp	r2, r3
 8017824:	d10c      	bne.n	8017840 <ip4_reass+0xdc>
 8017826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017828:	699a      	ldr	r2, [r3, #24]
 801782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801782c:	691b      	ldr	r3, [r3, #16]
 801782e:	429a      	cmp	r2, r3
 8017830:	d106      	bne.n	8017840 <ip4_reass+0xdc>
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	899a      	ldrh	r2, [r3, #12]
 8017836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017838:	889b      	ldrh	r3, [r3, #4]
 801783a:	b29b      	uxth	r3, r3
 801783c:	429a      	cmp	r2, r3
 801783e:	d006      	beq.n	801784e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	633b      	str	r3, [r7, #48]	; 0x30
 8017846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017848:	2b00      	cmp	r3, #0
 801784a:	d1e6      	bne.n	801781a <ip4_reass+0xb6>
 801784c:	e000      	b.n	8017850 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801784e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017852:	2b00      	cmp	r3, #0
 8017854:	d109      	bne.n	801786a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017856:	8c3b      	ldrh	r3, [r7, #32]
 8017858:	4619      	mov	r1, r3
 801785a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801785c:	f7ff fdb0 	bl	80173c0 <ip_reass_enqueue_new_datagram>
 8017860:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017864:	2b00      	cmp	r3, #0
 8017866:	d11c      	bne.n	80178a2 <ip4_reass+0x13e>
      goto nullreturn;
 8017868:	e109      	b.n	8017a7e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786c:	88db      	ldrh	r3, [r3, #6]
 801786e:	b29b      	uxth	r3, r3
 8017870:	4618      	mov	r0, r3
 8017872:	f7f5 fc1d 	bl	800d0b0 <lwip_htons>
 8017876:	4603      	mov	r3, r0
 8017878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801787c:	2b00      	cmp	r3, #0
 801787e:	d110      	bne.n	80178a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017882:	89db      	ldrh	r3, [r3, #14]
 8017884:	4618      	mov	r0, r3
 8017886:	f7f5 fc13 	bl	800d0b0 <lwip_htons>
 801788a:	4603      	mov	r3, r0
 801788c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017890:	2b00      	cmp	r3, #0
 8017892:	d006      	beq.n	80178a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017896:	3308      	adds	r3, #8
 8017898:	2214      	movs	r2, #20
 801789a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801789c:	4618      	mov	r0, r3
 801789e:	f000 fe89 	bl	80185b4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80178a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a4:	88db      	ldrh	r3, [r3, #6]
 80178a6:	b29b      	uxth	r3, r3
 80178a8:	f003 0320 	and.w	r3, r3, #32
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	bf0c      	ite	eq
 80178b0:	2301      	moveq	r3, #1
 80178b2:	2300      	movne	r3, #0
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80178b8:	69fb      	ldr	r3, [r7, #28]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d00e      	beq.n	80178dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80178be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80178c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178c2:	4413      	add	r3, r2
 80178c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80178c6:	8b7a      	ldrh	r2, [r7, #26]
 80178c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80178ca:	429a      	cmp	r2, r3
 80178cc:	f0c0 80a0 	bcc.w	8017a10 <ip4_reass+0x2ac>
 80178d0:	8b7b      	ldrh	r3, [r7, #26]
 80178d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80178d6:	4293      	cmp	r3, r2
 80178d8:	f200 809a 	bhi.w	8017a10 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80178dc:	69fa      	ldr	r2, [r7, #28]
 80178de:	6879      	ldr	r1, [r7, #4]
 80178e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178e2:	f7ff fdd5 	bl	8017490 <ip_reass_chain_frag_into_datagram_and_validate>
 80178e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80178e8:	697b      	ldr	r3, [r7, #20]
 80178ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178ee:	f000 8091 	beq.w	8017a14 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80178f2:	4b5b      	ldr	r3, [pc, #364]	; (8017a60 <ip4_reass+0x2fc>)
 80178f4:	881a      	ldrh	r2, [r3, #0]
 80178f6:	8c3b      	ldrh	r3, [r7, #32]
 80178f8:	4413      	add	r3, r2
 80178fa:	b29a      	uxth	r2, r3
 80178fc:	4b58      	ldr	r3, [pc, #352]	; (8017a60 <ip4_reass+0x2fc>)
 80178fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017900:	69fb      	ldr	r3, [r7, #28]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d00d      	beq.n	8017922 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017906:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801790a:	4413      	add	r3, r2
 801790c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017910:	8a7a      	ldrh	r2, [r7, #18]
 8017912:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017916:	7f9b      	ldrb	r3, [r3, #30]
 8017918:	f043 0301 	orr.w	r3, r3, #1
 801791c:	b2da      	uxtb	r2, r3
 801791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017920:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	2b01      	cmp	r3, #1
 8017926:	d171      	bne.n	8017a0c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801792a:	8b9b      	ldrh	r3, [r3, #28]
 801792c:	3314      	adds	r3, #20
 801792e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017932:	685b      	ldr	r3, [r3, #4]
 8017934:	685b      	ldr	r3, [r3, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017944:	3308      	adds	r3, #8
 8017946:	2214      	movs	r2, #20
 8017948:	4619      	mov	r1, r3
 801794a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801794c:	f000 fe32 	bl	80185b4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017950:	8a3b      	ldrh	r3, [r7, #16]
 8017952:	4618      	mov	r0, r3
 8017954:	f7f5 fbac 	bl	800d0b0 <lwip_htons>
 8017958:	4603      	mov	r3, r0
 801795a:	461a      	mov	r2, r3
 801795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801795e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017962:	2200      	movs	r2, #0
 8017964:	719a      	strb	r2, [r3, #6]
 8017966:	2200      	movs	r2, #0
 8017968:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796c:	2200      	movs	r2, #0
 801796e:	729a      	strb	r2, [r3, #10]
 8017970:	2200      	movs	r2, #0
 8017972:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801797a:	e00d      	b.n	8017998 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017982:	2114      	movs	r1, #20
 8017984:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017986:	f7f6 feb9 	bl	800e6fc <pbuf_remove_header>
      pbuf_cat(p, r);
 801798a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7f7 f83b 	bl	800ea08 <pbuf_cat>
      r = iprh->next_pbuf;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1ee      	bne.n	801797c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801799e:	4b31      	ldr	r3, [pc, #196]	; (8017a64 <ip4_reass+0x300>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d102      	bne.n	80179ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80179a8:	2300      	movs	r3, #0
 80179aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179ac:	e010      	b.n	80179d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179ae:	4b2d      	ldr	r3, [pc, #180]	; (8017a64 <ip4_reass+0x300>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179b4:	e007      	b.n	80179c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80179b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179bc:	429a      	cmp	r2, r3
 80179be:	d006      	beq.n	80179ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d1f4      	bne.n	80179b6 <ip4_reass+0x252>
 80179cc:	e000      	b.n	80179d0 <ip4_reass+0x26c>
          break;
 80179ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80179d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80179d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179d4:	f7ff fd2e 	bl	8017434 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7f6 ffd5 	bl	800e988 <pbuf_clen>
 80179de:	4603      	mov	r3, r0
 80179e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80179e2:	4b1f      	ldr	r3, [pc, #124]	; (8017a60 <ip4_reass+0x2fc>)
 80179e4:	881b      	ldrh	r3, [r3, #0]
 80179e6:	8c3a      	ldrh	r2, [r7, #32]
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d906      	bls.n	80179fa <ip4_reass+0x296>
 80179ec:	4b1e      	ldr	r3, [pc, #120]	; (8017a68 <ip4_reass+0x304>)
 80179ee:	f240 229b 	movw	r2, #667	; 0x29b
 80179f2:	491e      	ldr	r1, [pc, #120]	; (8017a6c <ip4_reass+0x308>)
 80179f4:	481e      	ldr	r0, [pc, #120]	; (8017a70 <ip4_reass+0x30c>)
 80179f6:	f000 feb7 	bl	8018768 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80179fa:	4b19      	ldr	r3, [pc, #100]	; (8017a60 <ip4_reass+0x2fc>)
 80179fc:	881a      	ldrh	r2, [r3, #0]
 80179fe:	8c3b      	ldrh	r3, [r7, #32]
 8017a00:	1ad3      	subs	r3, r2, r3
 8017a02:	b29a      	uxth	r2, r3
 8017a04:	4b16      	ldr	r3, [pc, #88]	; (8017a60 <ip4_reass+0x2fc>)
 8017a06:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	e03c      	b.n	8017a86 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	e03a      	b.n	8017a86 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017a10:	bf00      	nop
 8017a12:	e000      	b.n	8017a16 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017a14:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d106      	bne.n	8017a2a <ip4_reass+0x2c6>
 8017a1c:	4b12      	ldr	r3, [pc, #72]	; (8017a68 <ip4_reass+0x304>)
 8017a1e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017a22:	4914      	ldr	r1, [pc, #80]	; (8017a74 <ip4_reass+0x310>)
 8017a24:	4812      	ldr	r0, [pc, #72]	; (8017a70 <ip4_reass+0x30c>)
 8017a26:	f000 fe9f 	bl	8018768 <iprintf>
  if (ipr->p == NULL) {
 8017a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d124      	bne.n	8017a7c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017a32:	4b0c      	ldr	r3, [pc, #48]	; (8017a64 <ip4_reass+0x300>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d006      	beq.n	8017a4a <ip4_reass+0x2e6>
 8017a3c:	4b0a      	ldr	r3, [pc, #40]	; (8017a68 <ip4_reass+0x304>)
 8017a3e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017a42:	490d      	ldr	r1, [pc, #52]	; (8017a78 <ip4_reass+0x314>)
 8017a44:	480a      	ldr	r0, [pc, #40]	; (8017a70 <ip4_reass+0x30c>)
 8017a46:	f000 fe8f 	bl	8018768 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a4e:	f7ff fcf1 	bl	8017434 <ip_reass_dequeue_datagram>
 8017a52:	e014      	b.n	8017a7e <ip4_reass+0x31a>
    goto nullreturn;
 8017a54:	bf00      	nop
 8017a56:	e012      	b.n	8017a7e <ip4_reass+0x31a>
    goto nullreturn;
 8017a58:	bf00      	nop
 8017a5a:	e010      	b.n	8017a7e <ip4_reass+0x31a>
      goto nullreturn;
 8017a5c:	bf00      	nop
 8017a5e:	e00e      	b.n	8017a7e <ip4_reass+0x31a>
 8017a60:	20004484 	.word	0x20004484
 8017a64:	20004480 	.word	0x20004480
 8017a68:	0801d1ec 	.word	0x0801d1ec
 8017a6c:	0801d35c 	.word	0x0801d35c
 8017a70:	0801d234 	.word	0x0801d234
 8017a74:	0801d378 	.word	0x0801d378
 8017a78:	0801d384 	.word	0x0801d384
  }

nullreturn:
 8017a7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017a7e:	6878      	ldr	r0, [r7, #4]
 8017a80:	f7f6 fef4 	bl	800e86c <pbuf_free>
  return NULL;
 8017a84:	2300      	movs	r3, #0
}
 8017a86:	4618      	mov	r0, r3
 8017a88:	3738      	adds	r7, #56	; 0x38
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop

08017a90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017a94:	2005      	movs	r0, #5
 8017a96:	f7f5 ffc1 	bl	800da1c <memp_malloc>
 8017a9a:	4603      	mov	r3, r0
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d106      	bne.n	8017abc <ip_frag_free_pbuf_custom_ref+0x1c>
 8017aae:	4b07      	ldr	r3, [pc, #28]	; (8017acc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017ab0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017ab4:	4906      	ldr	r1, [pc, #24]	; (8017ad0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017ab6:	4807      	ldr	r0, [pc, #28]	; (8017ad4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017ab8:	f000 fe56 	bl	8018768 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017abc:	6879      	ldr	r1, [r7, #4]
 8017abe:	2005      	movs	r0, #5
 8017ac0:	f7f5 fffe 	bl	800dac0 <memp_free>
}
 8017ac4:	bf00      	nop
 8017ac6:	3708      	adds	r7, #8
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	bd80      	pop	{r7, pc}
 8017acc:	0801d1ec 	.word	0x0801d1ec
 8017ad0:	0801d3a4 	.word	0x0801d3a4
 8017ad4:	0801d234 	.word	0x0801d234

08017ad8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b084      	sub	sp, #16
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d106      	bne.n	8017af8 <ipfrag_free_pbuf_custom+0x20>
 8017aea:	4b11      	ldr	r3, [pc, #68]	; (8017b30 <ipfrag_free_pbuf_custom+0x58>)
 8017aec:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017af0:	4910      	ldr	r1, [pc, #64]	; (8017b34 <ipfrag_free_pbuf_custom+0x5c>)
 8017af2:	4811      	ldr	r0, [pc, #68]	; (8017b38 <ipfrag_free_pbuf_custom+0x60>)
 8017af4:	f000 fe38 	bl	8018768 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017af8:	68fa      	ldr	r2, [r7, #12]
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d006      	beq.n	8017b0e <ipfrag_free_pbuf_custom+0x36>
 8017b00:	4b0b      	ldr	r3, [pc, #44]	; (8017b30 <ipfrag_free_pbuf_custom+0x58>)
 8017b02:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017b06:	490d      	ldr	r1, [pc, #52]	; (8017b3c <ipfrag_free_pbuf_custom+0x64>)
 8017b08:	480b      	ldr	r0, [pc, #44]	; (8017b38 <ipfrag_free_pbuf_custom+0x60>)
 8017b0a:	f000 fe2d 	bl	8018768 <iprintf>
  if (pcr->original != NULL) {
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	695b      	ldr	r3, [r3, #20]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d004      	beq.n	8017b20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	695b      	ldr	r3, [r3, #20]
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f7f6 fea6 	bl	800e86c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017b20:	68f8      	ldr	r0, [r7, #12]
 8017b22:	f7ff ffbd 	bl	8017aa0 <ip_frag_free_pbuf_custom_ref>
}
 8017b26:	bf00      	nop
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	0801d1ec 	.word	0x0801d1ec
 8017b34:	0801d3b0 	.word	0x0801d3b0
 8017b38:	0801d234 	.word	0x0801d234
 8017b3c:	0801d3bc 	.word	0x0801d3bc

08017b40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b094      	sub	sp, #80	; 0x50
 8017b44:	af02      	add	r7, sp, #8
 8017b46:	60f8      	str	r0, [r7, #12]
 8017b48:	60b9      	str	r1, [r7, #8]
 8017b4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017b52:	68bb      	ldr	r3, [r7, #8]
 8017b54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b56:	3b14      	subs	r3, #20
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	da00      	bge.n	8017b5e <ip4_frag+0x1e>
 8017b5c:	3307      	adds	r3, #7
 8017b5e:	10db      	asrs	r3, r3, #3
 8017b60:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017b62:	2314      	movs	r3, #20
 8017b64:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b72:	781b      	ldrb	r3, [r3, #0]
 8017b74:	f003 030f 	and.w	r3, r3, #15
 8017b78:	b2db      	uxtb	r3, r3
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	b2db      	uxtb	r3, r3
 8017b7e:	2b14      	cmp	r3, #20
 8017b80:	d002      	beq.n	8017b88 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017b82:	f06f 0305 	mvn.w	r3, #5
 8017b86:	e110      	b.n	8017daa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	895b      	ldrh	r3, [r3, #10]
 8017b8c:	2b13      	cmp	r3, #19
 8017b8e:	d809      	bhi.n	8017ba4 <ip4_frag+0x64>
 8017b90:	4b88      	ldr	r3, [pc, #544]	; (8017db4 <ip4_frag+0x274>)
 8017b92:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017b96:	4988      	ldr	r1, [pc, #544]	; (8017db8 <ip4_frag+0x278>)
 8017b98:	4888      	ldr	r0, [pc, #544]	; (8017dbc <ip4_frag+0x27c>)
 8017b9a:	f000 fde5 	bl	8018768 <iprintf>
 8017b9e:	f06f 0305 	mvn.w	r3, #5
 8017ba2:	e102      	b.n	8017daa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba6:	88db      	ldrh	r3, [r3, #6]
 8017ba8:	b29b      	uxth	r3, r3
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7f5 fa80 	bl	800d0b0 <lwip_htons>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017bb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017bba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017bbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	891b      	ldrh	r3, [r3, #8]
 8017bca:	3b14      	subs	r3, #20
 8017bcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017bd0:	e0e1      	b.n	8017d96 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017bd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017bd4:	00db      	lsls	r3, r3, #3
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017bdc:	4293      	cmp	r3, r2
 8017bde:	bf28      	it	cs
 8017be0:	4613      	movcs	r3, r2
 8017be2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017be4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017be8:	2114      	movs	r1, #20
 8017bea:	200e      	movs	r0, #14
 8017bec:	f7f6 fb28 	bl	800e240 <pbuf_alloc>
 8017bf0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	f000 80d5 	beq.w	8017da4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bfc:	895b      	ldrh	r3, [r3, #10]
 8017bfe:	2b13      	cmp	r3, #19
 8017c00:	d806      	bhi.n	8017c10 <ip4_frag+0xd0>
 8017c02:	4b6c      	ldr	r3, [pc, #432]	; (8017db4 <ip4_frag+0x274>)
 8017c04:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017c08:	496d      	ldr	r1, [pc, #436]	; (8017dc0 <ip4_frag+0x280>)
 8017c0a:	486c      	ldr	r0, [pc, #432]	; (8017dbc <ip4_frag+0x27c>)
 8017c0c:	f000 fdac 	bl	8018768 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c12:	685b      	ldr	r3, [r3, #4]
 8017c14:	2214      	movs	r2, #20
 8017c16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f000 fccb 	bl	80185b4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c20:	685b      	ldr	r3, [r3, #4]
 8017c22:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017c2a:	e064      	b.n	8017cf6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	895a      	ldrh	r2, [r3, #10]
 8017c30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c32:	1ad3      	subs	r3, r2, r3
 8017c34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	895b      	ldrh	r3, [r3, #10]
 8017c3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c3c:	429a      	cmp	r2, r3
 8017c3e:	d906      	bls.n	8017c4e <ip4_frag+0x10e>
 8017c40:	4b5c      	ldr	r3, [pc, #368]	; (8017db4 <ip4_frag+0x274>)
 8017c42:	f240 322d 	movw	r2, #813	; 0x32d
 8017c46:	495f      	ldr	r1, [pc, #380]	; (8017dc4 <ip4_frag+0x284>)
 8017c48:	485c      	ldr	r0, [pc, #368]	; (8017dbc <ip4_frag+0x27c>)
 8017c4a:	f000 fd8d 	bl	8018768 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017c4e:	8bfa      	ldrh	r2, [r7, #30]
 8017c50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017c54:	4293      	cmp	r3, r2
 8017c56:	bf28      	it	cs
 8017c58:	4613      	movcs	r3, r2
 8017c5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017c5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d105      	bne.n	8017c72 <ip4_frag+0x132>
        poff = 0;
 8017c66:	2300      	movs	r3, #0
 8017c68:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	60fb      	str	r3, [r7, #12]
        continue;
 8017c70:	e041      	b.n	8017cf6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017c72:	f7ff ff0d 	bl	8017a90 <ip_frag_alloc_pbuf_custom_ref>
 8017c76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017c78:	69bb      	ldr	r3, [r7, #24]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d103      	bne.n	8017c86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c80:	f7f6 fdf4 	bl	800e86c <pbuf_free>
        goto memerr;
 8017c84:	e08f      	b.n	8017da6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017c8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c8e:	4413      	add	r3, r2
 8017c90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017c94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017c98:	9201      	str	r2, [sp, #4]
 8017c9a:	9300      	str	r3, [sp, #0]
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	2241      	movs	r2, #65	; 0x41
 8017ca0:	2000      	movs	r0, #0
 8017ca2:	f7f6 fbf7 	bl	800e494 <pbuf_alloced_custom>
 8017ca6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d106      	bne.n	8017cbc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017cae:	69b8      	ldr	r0, [r7, #24]
 8017cb0:	f7ff fef6 	bl	8017aa0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cb6:	f7f6 fdd9 	bl	800e86c <pbuf_free>
        goto memerr;
 8017cba:	e074      	b.n	8017da6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017cbc:	68f8      	ldr	r0, [r7, #12]
 8017cbe:	f7f6 fe7b 	bl	800e9b8 <pbuf_ref>
      pcr->original = p;
 8017cc2:	69bb      	ldr	r3, [r7, #24]
 8017cc4:	68fa      	ldr	r2, [r7, #12]
 8017cc6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017cc8:	69bb      	ldr	r3, [r7, #24]
 8017cca:	4a3f      	ldr	r2, [pc, #252]	; (8017dc8 <ip4_frag+0x288>)
 8017ccc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017cce:	6979      	ldr	r1, [r7, #20]
 8017cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cd2:	f7f6 fe99 	bl	800ea08 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017cd6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017cda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017cde:	1ad3      	subs	r3, r2, r3
 8017ce0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017ce4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d004      	beq.n	8017cf6 <ip4_frag+0x1b6>
        poff = 0;
 8017cec:	2300      	movs	r3, #0
 8017cee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017cf6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d196      	bne.n	8017c2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017cfe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017d00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d04:	4413      	add	r3, r2
 8017d06:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d0c:	f1a3 0213 	sub.w	r2, r3, #19
 8017d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d14:	429a      	cmp	r2, r3
 8017d16:	bfcc      	ite	gt
 8017d18:	2301      	movgt	r3, #1
 8017d1a:	2300      	movle	r3, #0
 8017d1c:	b2db      	uxtb	r3, r3
 8017d1e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017d2a:	6a3b      	ldr	r3, [r7, #32]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d002      	beq.n	8017d36 <ip4_frag+0x1f6>
 8017d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d003      	beq.n	8017d3e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017d36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017d3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017d3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7f5 f9b5 	bl	800d0b0 <lwip_htons>
 8017d46:	4603      	mov	r3, r0
 8017d48:	461a      	mov	r2, r3
 8017d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017d4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d50:	3314      	adds	r3, #20
 8017d52:	b29b      	uxth	r3, r3
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7f5 f9ab 	bl	800d0b0 <lwip_htons>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d64:	2200      	movs	r2, #0
 8017d66:	729a      	strb	r2, [r3, #10]
 8017d68:	2200      	movs	r2, #0
 8017d6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	695b      	ldr	r3, [r3, #20]
 8017d70:	687a      	ldr	r2, [r7, #4]
 8017d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d74:	68b8      	ldr	r0, [r7, #8]
 8017d76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d7a:	f7f6 fd77 	bl	800e86c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017d7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017d84:	1ad3      	subs	r3, r2, r3
 8017d86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017d8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017d8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d90:	4413      	add	r3, r2
 8017d92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017d96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	f47f af19 	bne.w	8017bd2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017da0:	2300      	movs	r3, #0
 8017da2:	e002      	b.n	8017daa <ip4_frag+0x26a>
      goto memerr;
 8017da4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3748      	adds	r7, #72	; 0x48
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	0801d1ec 	.word	0x0801d1ec
 8017db8:	0801d3c8 	.word	0x0801d3c8
 8017dbc:	0801d234 	.word	0x0801d234
 8017dc0:	0801d3e4 	.word	0x0801d3e4
 8017dc4:	0801d404 	.word	0x0801d404
 8017dc8:	08017ad9 	.word	0x08017ad9

08017dcc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b086      	sub	sp, #24
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
 8017dd4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017dd6:	230e      	movs	r3, #14
 8017dd8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	895b      	ldrh	r3, [r3, #10]
 8017dde:	2b0e      	cmp	r3, #14
 8017de0:	d96e      	bls.n	8017ec0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	7bdb      	ldrb	r3, [r3, #15]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d106      	bne.n	8017df8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017df0:	3301      	adds	r3, #1
 8017df2:	b2da      	uxtb	r2, r3
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	685b      	ldr	r3, [r3, #4]
 8017dfc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	7b1a      	ldrb	r2, [r3, #12]
 8017e02:	7b5b      	ldrb	r3, [r3, #13]
 8017e04:	021b      	lsls	r3, r3, #8
 8017e06:	4313      	orrs	r3, r2
 8017e08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017e0a:	693b      	ldr	r3, [r7, #16]
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	f003 0301 	and.w	r3, r3, #1
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d023      	beq.n	8017e5e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	781b      	ldrb	r3, [r3, #0]
 8017e1a:	2b01      	cmp	r3, #1
 8017e1c:	d10f      	bne.n	8017e3e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	785b      	ldrb	r3, [r3, #1]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d11b      	bne.n	8017e5e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017e2a:	2b5e      	cmp	r3, #94	; 0x5e
 8017e2c:	d117      	bne.n	8017e5e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	7b5b      	ldrb	r3, [r3, #13]
 8017e32:	f043 0310 	orr.w	r3, r3, #16
 8017e36:	b2da      	uxtb	r2, r3
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	735a      	strb	r2, [r3, #13]
 8017e3c:	e00f      	b.n	8017e5e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017e3e:	693b      	ldr	r3, [r7, #16]
 8017e40:	2206      	movs	r2, #6
 8017e42:	4928      	ldr	r1, [pc, #160]	; (8017ee4 <ethernet_input+0x118>)
 8017e44:	4618      	mov	r0, r3
 8017e46:	f000 fba7 	bl	8018598 <memcmp>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d106      	bne.n	8017e5e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	7b5b      	ldrb	r3, [r3, #13]
 8017e54:	f043 0308 	orr.w	r3, r3, #8
 8017e58:	b2da      	uxtb	r2, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017e5e:	89fb      	ldrh	r3, [r7, #14]
 8017e60:	2b08      	cmp	r3, #8
 8017e62:	d003      	beq.n	8017e6c <ethernet_input+0xa0>
 8017e64:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017e68:	d014      	beq.n	8017e94 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017e6a:	e032      	b.n	8017ed2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e72:	f003 0308 	and.w	r3, r3, #8
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d024      	beq.n	8017ec4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017e7a:	8afb      	ldrh	r3, [r7, #22]
 8017e7c:	4619      	mov	r1, r3
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f7f6 fc3c 	bl	800e6fc <pbuf_remove_header>
 8017e84:	4603      	mov	r3, r0
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d11e      	bne.n	8017ec8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017e8a:	6839      	ldr	r1, [r7, #0]
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f7fe ff27 	bl	8016ce0 <ip4_input>
      break;
 8017e92:	e013      	b.n	8017ebc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e9a:	f003 0308 	and.w	r3, r3, #8
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d014      	beq.n	8017ecc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017ea2:	8afb      	ldrh	r3, [r7, #22]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7f6 fc28 	bl	800e6fc <pbuf_remove_header>
 8017eac:	4603      	mov	r3, r0
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d10e      	bne.n	8017ed0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017eb2:	6839      	ldr	r1, [r7, #0]
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f7fe f8c7 	bl	8016048 <etharp_input>
      break;
 8017eba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	e00c      	b.n	8017eda <ethernet_input+0x10e>
    goto free_and_return;
 8017ec0:	bf00      	nop
 8017ec2:	e006      	b.n	8017ed2 <ethernet_input+0x106>
        goto free_and_return;
 8017ec4:	bf00      	nop
 8017ec6:	e004      	b.n	8017ed2 <ethernet_input+0x106>
        goto free_and_return;
 8017ec8:	bf00      	nop
 8017eca:	e002      	b.n	8017ed2 <ethernet_input+0x106>
        goto free_and_return;
 8017ecc:	bf00      	nop
 8017ece:	e000      	b.n	8017ed2 <ethernet_input+0x106>
        goto free_and_return;
 8017ed0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f7f6 fcca 	bl	800e86c <pbuf_free>
  return ERR_OK;
 8017ed8:	2300      	movs	r3, #0
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	3718      	adds	r7, #24
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bd80      	pop	{r7, pc}
 8017ee2:	bf00      	nop
 8017ee4:	0801d61c 	.word	0x0801d61c

08017ee8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
 8017ef4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017ef6:	8c3b      	ldrh	r3, [r7, #32]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7f5 f8d9 	bl	800d0b0 <lwip_htons>
 8017efe:	4603      	mov	r3, r0
 8017f00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017f02:	210e      	movs	r1, #14
 8017f04:	68b8      	ldr	r0, [r7, #8]
 8017f06:	f7f6 fbe9 	bl	800e6dc <pbuf_add_header>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d125      	bne.n	8017f5c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	8afa      	ldrh	r2, [r7, #22]
 8017f1a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017f1c:	693b      	ldr	r3, [r7, #16]
 8017f1e:	2206      	movs	r2, #6
 8017f20:	6839      	ldr	r1, [r7, #0]
 8017f22:	4618      	mov	r0, r3
 8017f24:	f000 fb46 	bl	80185b4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	3306      	adds	r3, #6
 8017f2c:	2206      	movs	r2, #6
 8017f2e:	6879      	ldr	r1, [r7, #4]
 8017f30:	4618      	mov	r0, r3
 8017f32:	f000 fb3f 	bl	80185b4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017f3c:	2b06      	cmp	r3, #6
 8017f3e:	d006      	beq.n	8017f4e <ethernet_output+0x66>
 8017f40:	4b0a      	ldr	r3, [pc, #40]	; (8017f6c <ethernet_output+0x84>)
 8017f42:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017f46:	490a      	ldr	r1, [pc, #40]	; (8017f70 <ethernet_output+0x88>)
 8017f48:	480a      	ldr	r0, [pc, #40]	; (8017f74 <ethernet_output+0x8c>)
 8017f4a:	f000 fc0d 	bl	8018768 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	699b      	ldr	r3, [r3, #24]
 8017f52:	68b9      	ldr	r1, [r7, #8]
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	4798      	blx	r3
 8017f58:	4603      	mov	r3, r0
 8017f5a:	e002      	b.n	8017f62 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017f5c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017f5e:	f06f 0301 	mvn.w	r3, #1
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3718      	adds	r7, #24
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	0801d414 	.word	0x0801d414
 8017f70:	0801d44c 	.word	0x0801d44c
 8017f74:	0801d480 	.word	0x0801d480

08017f78 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b086      	sub	sp, #24
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	60bb      	str	r3, [r7, #8]
 8017f86:	2304      	movs	r3, #4
 8017f88:	60fb      	str	r3, [r7, #12]
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	613b      	str	r3, [r7, #16]
 8017f8e:	2300      	movs	r3, #0
 8017f90:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017f92:	f107 0308 	add.w	r3, r7, #8
 8017f96:	2100      	movs	r1, #0
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7ef f800 	bl	8006f9e <osMessageCreate>
 8017f9e:	4602      	mov	r2, r0
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d102      	bne.n	8017fb2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017fac:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb0:	e000      	b.n	8017fb4 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017fb2:	2300      	movs	r3, #0
}
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	3718      	adds	r7, #24
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7ef f8c5 	bl	8007158 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7ef f8d6 	bl	8007184 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b084      	sub	sp, #16
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	6839      	ldr	r1, [r7, #0]
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7ee fffc 	bl	8006ff0 <osMessagePut>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d102      	bne.n	8018004 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017ffe:	2300      	movs	r3, #0
 8018000:	73fb      	strb	r3, [r7, #15]
 8018002:	e001      	b.n	8018008 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018004:	23ff      	movs	r3, #255	; 0xff
 8018006:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801800c:	4618      	mov	r0, r3
 801800e:	3710      	adds	r7, #16
 8018010:	46bd      	mov	sp, r7
 8018012:	bd80      	pop	{r7, pc}

08018014 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b08c      	sub	sp, #48	; 0x30
 8018018:	af00      	add	r7, sp, #0
 801801a:	61f8      	str	r0, [r7, #28]
 801801c:	61b9      	str	r1, [r7, #24]
 801801e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018020:	f7ee fde7 	bl	8006bf2 <osKernelSysTick>
 8018024:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d017      	beq.n	801805c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801802c:	69fb      	ldr	r3, [r7, #28]
 801802e:	6819      	ldr	r1, [r3, #0]
 8018030:	f107 0320 	add.w	r3, r7, #32
 8018034:	697a      	ldr	r2, [r7, #20]
 8018036:	4618      	mov	r0, r3
 8018038:	f7ef f81a 	bl	8007070 <osMessageGet>

    if(event.status == osEventMessage)
 801803c:	6a3b      	ldr	r3, [r7, #32]
 801803e:	2b10      	cmp	r3, #16
 8018040:	d109      	bne.n	8018056 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018044:	461a      	mov	r2, r3
 8018046:	69bb      	ldr	r3, [r7, #24]
 8018048:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801804a:	f7ee fdd2 	bl	8006bf2 <osKernelSysTick>
 801804e:	4602      	mov	r2, r0
 8018050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018052:	1ad3      	subs	r3, r2, r3
 8018054:	e019      	b.n	801808a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018056:	f04f 33ff 	mov.w	r3, #4294967295
 801805a:	e016      	b.n	801808a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801805c:	69fb      	ldr	r3, [r7, #28]
 801805e:	6819      	ldr	r1, [r3, #0]
 8018060:	463b      	mov	r3, r7
 8018062:	f04f 32ff 	mov.w	r2, #4294967295
 8018066:	4618      	mov	r0, r3
 8018068:	f7ef f802 	bl	8007070 <osMessageGet>
 801806c:	f107 0320 	add.w	r3, r7, #32
 8018070:	463a      	mov	r2, r7
 8018072:	ca07      	ldmia	r2, {r0, r1, r2}
 8018074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801807a:	461a      	mov	r2, r3
 801807c:	69bb      	ldr	r3, [r7, #24]
 801807e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018080:	f7ee fdb7 	bl	8006bf2 <osKernelSysTick>
 8018084:	4602      	mov	r2, r0
 8018086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018088:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801808a:	4618      	mov	r0, r3
 801808c:	3730      	adds	r7, #48	; 0x30
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}

08018092 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b086      	sub	sp, #24
 8018096:	af00      	add	r7, sp, #0
 8018098:	6078      	str	r0, [r7, #4]
 801809a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6819      	ldr	r1, [r3, #0]
 80180a0:	f107 030c 	add.w	r3, r7, #12
 80180a4:	2200      	movs	r2, #0
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7ee ffe2 	bl	8007070 <osMessageGet>

  if(event.status == osEventMessage)
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	2b10      	cmp	r3, #16
 80180b0:	d105      	bne.n	80180be <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80180b2:	693b      	ldr	r3, [r7, #16]
 80180b4:	461a      	mov	r2, r3
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80180ba:	2300      	movs	r3, #0
 80180bc:	e001      	b.n	80180c2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80180be:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3718      	adds	r7, #24
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}

080180ca <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80180ca:	b480      	push	{r7}
 80180cc:	b083      	sub	sp, #12
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d101      	bne.n	80180de <sys_mbox_valid+0x14>
    return 0;
 80180da:	2300      	movs	r3, #0
 80180dc:	e000      	b.n	80180e0 <sys_mbox_valid+0x16>
  else
    return 1;
 80180de:	2301      	movs	r3, #1
}
 80180e0:	4618      	mov	r0, r3
 80180e2:	370c      	adds	r7, #12
 80180e4:	46bd      	mov	sp, r7
 80180e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ea:	4770      	bx	lr

080180ec <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b083      	sub	sp, #12
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	2200      	movs	r2, #0
 80180f8:	601a      	str	r2, [r3, #0]
}
 80180fa:	bf00      	nop
 80180fc:	370c      	adds	r7, #12
 80180fe:	46bd      	mov	sp, r7
 8018100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018104:	4770      	bx	lr

08018106 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018106:	b580      	push	{r7, lr}
 8018108:	b084      	sub	sp, #16
 801810a:	af00      	add	r7, sp, #0
 801810c:	6078      	str	r0, [r7, #4]
 801810e:	460b      	mov	r3, r1
 8018110:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018112:	2300      	movs	r3, #0
 8018114:	60bb      	str	r3, [r7, #8]
 8018116:	2300      	movs	r3, #0
 8018118:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801811a:	f107 0308 	add.w	r3, r7, #8
 801811e:	2101      	movs	r1, #1
 8018120:	4618      	mov	r0, r3
 8018122:	f7ee fe73 	bl	8006e0c <osSemaphoreCreate>
 8018126:	4602      	mov	r2, r0
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d102      	bne.n	801813a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018134:	f04f 33ff 	mov.w	r3, #4294967295
 8018138:	e009      	b.n	801814e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801813a:	78fb      	ldrb	r3, [r7, #3]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d105      	bne.n	801814c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2100      	movs	r1, #0
 8018146:	4618      	mov	r0, r3
 8018148:	f7ee fe92 	bl	8006e70 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801814c:	2300      	movs	r3, #0
}
 801814e:	4618      	mov	r0, r3
 8018150:	3710      	adds	r7, #16
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}

08018156 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018156:	b580      	push	{r7, lr}
 8018158:	b084      	sub	sp, #16
 801815a:	af00      	add	r7, sp, #0
 801815c:	6078      	str	r0, [r7, #4]
 801815e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018160:	f7ee fd47 	bl	8006bf2 <osKernelSysTick>
 8018164:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018166:	683b      	ldr	r3, [r7, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d011      	beq.n	8018190 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	6839      	ldr	r1, [r7, #0]
 8018172:	4618      	mov	r0, r3
 8018174:	f7ee fe7c 	bl	8006e70 <osSemaphoreWait>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d105      	bne.n	801818a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801817e:	f7ee fd38 	bl	8006bf2 <osKernelSysTick>
 8018182:	4602      	mov	r2, r0
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	e012      	b.n	80181b0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801818a:	f04f 33ff 	mov.w	r3, #4294967295
 801818e:	e00f      	b.n	80181b0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018190:	bf00      	nop
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	f04f 31ff 	mov.w	r1, #4294967295
 801819a:	4618      	mov	r0, r3
 801819c:	f7ee fe68 	bl	8006e70 <osSemaphoreWait>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d1f5      	bne.n	8018192 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80181a6:	f7ee fd24 	bl	8006bf2 <osKernelSysTick>
 80181aa:	4602      	mov	r2, r0
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80181b0:	4618      	mov	r0, r3
 80181b2:	3710      	adds	r7, #16
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b082      	sub	sp, #8
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7ee fea1 	bl	8006f0c <osSemaphoreRelease>
}
 80181ca:	bf00      	nop
 80181cc:	3708      	adds	r7, #8
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}

080181d2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80181d2:	b580      	push	{r7, lr}
 80181d4:	b082      	sub	sp, #8
 80181d6:	af00      	add	r7, sp, #0
 80181d8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4618      	mov	r0, r3
 80181e0:	f7ee feca 	bl	8006f78 <osSemaphoreDelete>
}
 80181e4:	bf00      	nop
 80181e6:	3708      	adds	r7, #8
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}

080181ec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80181ec:	b480      	push	{r7}
 80181ee:	b083      	sub	sp, #12
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d101      	bne.n	8018200 <sys_sem_valid+0x14>
    return 0;
 80181fc:	2300      	movs	r3, #0
 80181fe:	e000      	b.n	8018202 <sys_sem_valid+0x16>
  else
    return 1;
 8018200:	2301      	movs	r3, #1
}
 8018202:	4618      	mov	r0, r3
 8018204:	370c      	adds	r7, #12
 8018206:	46bd      	mov	sp, r7
 8018208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820c:	4770      	bx	lr

0801820e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801820e:	b480      	push	{r7}
 8018210:	b083      	sub	sp, #12
 8018212:	af00      	add	r7, sp, #0
 8018214:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2200      	movs	r2, #0
 801821a:	601a      	str	r2, [r3, #0]
}
 801821c:	bf00      	nop
 801821e:	370c      	adds	r7, #12
 8018220:	46bd      	mov	sp, r7
 8018222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018226:	4770      	bx	lr

08018228 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801822c:	4803      	ldr	r0, [pc, #12]	; (801823c <sys_init+0x14>)
 801822e:	f7ee fd50 	bl	8006cd2 <osMutexCreate>
 8018232:	4603      	mov	r3, r0
 8018234:	4a02      	ldr	r2, [pc, #8]	; (8018240 <sys_init+0x18>)
 8018236:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018238:	bf00      	nop
 801823a:	bd80      	pop	{r7, pc}
 801823c:	0801d62c 	.word	0x0801d62c
 8018240:	2000db70 	.word	0x2000db70

08018244 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018244:	b580      	push	{r7, lr}
 8018246:	b084      	sub	sp, #16
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801824c:	2300      	movs	r3, #0
 801824e:	60bb      	str	r3, [r7, #8]
 8018250:	2300      	movs	r3, #0
 8018252:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018254:	f107 0308 	add.w	r3, r7, #8
 8018258:	4618      	mov	r0, r3
 801825a:	f7ee fd3a 	bl	8006cd2 <osMutexCreate>
 801825e:	4602      	mov	r2, r0
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d102      	bne.n	8018272 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801826c:	f04f 33ff 	mov.w	r3, #4294967295
 8018270:	e000      	b.n	8018274 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018272:	2300      	movs	r3, #0
}
 8018274:	4618      	mov	r0, r3
 8018276:	3710      	adds	r7, #16
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}

0801827c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b082      	sub	sp, #8
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	f04f 31ff 	mov.w	r1, #4294967295
 801828c:	4618      	mov	r0, r3
 801828e:	f7ee fd39 	bl	8006d04 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018292:	bf00      	nop
 8018294:	3708      	adds	r7, #8
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}

0801829a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801829a:	b580      	push	{r7, lr}
 801829c:	b082      	sub	sp, #8
 801829e:	af00      	add	r7, sp, #0
 80182a0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7ee fd7a 	bl	8006da0 <osMutexRelease>
}
 80182ac:	bf00      	nop
 80182ae:	3708      	adds	r7, #8
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}

080182b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b08c      	sub	sp, #48	; 0x30
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	60f8      	str	r0, [r7, #12]
 80182bc:	60b9      	str	r1, [r7, #8]
 80182be:	607a      	str	r2, [r7, #4]
 80182c0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80182c2:	f107 0314 	add.w	r3, r7, #20
 80182c6:	2200      	movs	r2, #0
 80182c8:	601a      	str	r2, [r3, #0]
 80182ca:	605a      	str	r2, [r3, #4]
 80182cc:	609a      	str	r2, [r3, #8]
 80182ce:	60da      	str	r2, [r3, #12]
 80182d0:	611a      	str	r2, [r3, #16]
 80182d2:	615a      	str	r2, [r3, #20]
 80182d4:	619a      	str	r2, [r3, #24]
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	617b      	str	r3, [r7, #20]
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	61bb      	str	r3, [r7, #24]
 80182de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e0:	b21b      	sxth	r3, r3
 80182e2:	83bb      	strh	r3, [r7, #28]
 80182e4:	683b      	ldr	r3, [r7, #0]
 80182e6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80182e8:	f107 0314 	add.w	r3, r7, #20
 80182ec:	6879      	ldr	r1, [r7, #4]
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7ee fc8f 	bl	8006c12 <osThreadCreate>
 80182f4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3730      	adds	r7, #48	; 0x30
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
	...

08018300 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018304:	4b04      	ldr	r3, [pc, #16]	; (8018318 <sys_arch_protect+0x18>)
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	f04f 31ff 	mov.w	r1, #4294967295
 801830c:	4618      	mov	r0, r3
 801830e:	f7ee fcf9 	bl	8006d04 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018312:	2301      	movs	r3, #1
}
 8018314:	4618      	mov	r0, r3
 8018316:	bd80      	pop	{r7, pc}
 8018318:	2000db70 	.word	0x2000db70

0801831c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018324:	4b04      	ldr	r3, [pc, #16]	; (8018338 <sys_arch_unprotect+0x1c>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4618      	mov	r0, r3
 801832a:	f7ee fd39 	bl	8006da0 <osMutexRelease>
}
 801832e:	bf00      	nop
 8018330:	3708      	adds	r7, #8
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
 8018336:	bf00      	nop
 8018338:	2000db70 	.word	0x2000db70

0801833c <std>:
 801833c:	2300      	movs	r3, #0
 801833e:	b510      	push	{r4, lr}
 8018340:	4604      	mov	r4, r0
 8018342:	e9c0 3300 	strd	r3, r3, [r0]
 8018346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801834a:	6083      	str	r3, [r0, #8]
 801834c:	8181      	strh	r1, [r0, #12]
 801834e:	6643      	str	r3, [r0, #100]	; 0x64
 8018350:	81c2      	strh	r2, [r0, #14]
 8018352:	6183      	str	r3, [r0, #24]
 8018354:	4619      	mov	r1, r3
 8018356:	2208      	movs	r2, #8
 8018358:	305c      	adds	r0, #92	; 0x5c
 801835a:	f000 f953 	bl	8018604 <memset>
 801835e:	4b05      	ldr	r3, [pc, #20]	; (8018374 <std+0x38>)
 8018360:	6263      	str	r3, [r4, #36]	; 0x24
 8018362:	4b05      	ldr	r3, [pc, #20]	; (8018378 <std+0x3c>)
 8018364:	62a3      	str	r3, [r4, #40]	; 0x28
 8018366:	4b05      	ldr	r3, [pc, #20]	; (801837c <std+0x40>)
 8018368:	62e3      	str	r3, [r4, #44]	; 0x2c
 801836a:	4b05      	ldr	r3, [pc, #20]	; (8018380 <std+0x44>)
 801836c:	6224      	str	r4, [r4, #32]
 801836e:	6323      	str	r3, [r4, #48]	; 0x30
 8018370:	bd10      	pop	{r4, pc}
 8018372:	bf00      	nop
 8018374:	08018a39 	.word	0x08018a39
 8018378:	08018a5b 	.word	0x08018a5b
 801837c:	08018a93 	.word	0x08018a93
 8018380:	08018ab7 	.word	0x08018ab7

08018384 <_cleanup_r>:
 8018384:	4901      	ldr	r1, [pc, #4]	; (801838c <_cleanup_r+0x8>)
 8018386:	f000 b8af 	b.w	80184e8 <_fwalk_reent>
 801838a:	bf00      	nop
 801838c:	08018dcd 	.word	0x08018dcd

08018390 <__sfmoreglue>:
 8018390:	b570      	push	{r4, r5, r6, lr}
 8018392:	1e4a      	subs	r2, r1, #1
 8018394:	2568      	movs	r5, #104	; 0x68
 8018396:	4355      	muls	r5, r2
 8018398:	460e      	mov	r6, r1
 801839a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801839e:	f000 f989 	bl	80186b4 <_malloc_r>
 80183a2:	4604      	mov	r4, r0
 80183a4:	b140      	cbz	r0, 80183b8 <__sfmoreglue+0x28>
 80183a6:	2100      	movs	r1, #0
 80183a8:	e9c0 1600 	strd	r1, r6, [r0]
 80183ac:	300c      	adds	r0, #12
 80183ae:	60a0      	str	r0, [r4, #8]
 80183b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80183b4:	f000 f926 	bl	8018604 <memset>
 80183b8:	4620      	mov	r0, r4
 80183ba:	bd70      	pop	{r4, r5, r6, pc}

080183bc <__sfp_lock_acquire>:
 80183bc:	4801      	ldr	r0, [pc, #4]	; (80183c4 <__sfp_lock_acquire+0x8>)
 80183be:	f000 b8d8 	b.w	8018572 <__retarget_lock_acquire_recursive>
 80183c2:	bf00      	nop
 80183c4:	2000db7c 	.word	0x2000db7c

080183c8 <__sfp_lock_release>:
 80183c8:	4801      	ldr	r0, [pc, #4]	; (80183d0 <__sfp_lock_release+0x8>)
 80183ca:	f000 b8d3 	b.w	8018574 <__retarget_lock_release_recursive>
 80183ce:	bf00      	nop
 80183d0:	2000db7c 	.word	0x2000db7c

080183d4 <__sinit_lock_acquire>:
 80183d4:	4801      	ldr	r0, [pc, #4]	; (80183dc <__sinit_lock_acquire+0x8>)
 80183d6:	f000 b8cc 	b.w	8018572 <__retarget_lock_acquire_recursive>
 80183da:	bf00      	nop
 80183dc:	2000db77 	.word	0x2000db77

080183e0 <__sinit_lock_release>:
 80183e0:	4801      	ldr	r0, [pc, #4]	; (80183e8 <__sinit_lock_release+0x8>)
 80183e2:	f000 b8c7 	b.w	8018574 <__retarget_lock_release_recursive>
 80183e6:	bf00      	nop
 80183e8:	2000db77 	.word	0x2000db77

080183ec <__sinit>:
 80183ec:	b510      	push	{r4, lr}
 80183ee:	4604      	mov	r4, r0
 80183f0:	f7ff fff0 	bl	80183d4 <__sinit_lock_acquire>
 80183f4:	69a3      	ldr	r3, [r4, #24]
 80183f6:	b11b      	cbz	r3, 8018400 <__sinit+0x14>
 80183f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183fc:	f7ff bff0 	b.w	80183e0 <__sinit_lock_release>
 8018400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018404:	6523      	str	r3, [r4, #80]	; 0x50
 8018406:	4b13      	ldr	r3, [pc, #76]	; (8018454 <__sinit+0x68>)
 8018408:	4a13      	ldr	r2, [pc, #76]	; (8018458 <__sinit+0x6c>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	62a2      	str	r2, [r4, #40]	; 0x28
 801840e:	42a3      	cmp	r3, r4
 8018410:	bf04      	itt	eq
 8018412:	2301      	moveq	r3, #1
 8018414:	61a3      	streq	r3, [r4, #24]
 8018416:	4620      	mov	r0, r4
 8018418:	f000 f820 	bl	801845c <__sfp>
 801841c:	6060      	str	r0, [r4, #4]
 801841e:	4620      	mov	r0, r4
 8018420:	f000 f81c 	bl	801845c <__sfp>
 8018424:	60a0      	str	r0, [r4, #8]
 8018426:	4620      	mov	r0, r4
 8018428:	f000 f818 	bl	801845c <__sfp>
 801842c:	2200      	movs	r2, #0
 801842e:	60e0      	str	r0, [r4, #12]
 8018430:	2104      	movs	r1, #4
 8018432:	6860      	ldr	r0, [r4, #4]
 8018434:	f7ff ff82 	bl	801833c <std>
 8018438:	68a0      	ldr	r0, [r4, #8]
 801843a:	2201      	movs	r2, #1
 801843c:	2109      	movs	r1, #9
 801843e:	f7ff ff7d 	bl	801833c <std>
 8018442:	68e0      	ldr	r0, [r4, #12]
 8018444:	2202      	movs	r2, #2
 8018446:	2112      	movs	r1, #18
 8018448:	f7ff ff78 	bl	801833c <std>
 801844c:	2301      	movs	r3, #1
 801844e:	61a3      	str	r3, [r4, #24]
 8018450:	e7d2      	b.n	80183f8 <__sinit+0xc>
 8018452:	bf00      	nop
 8018454:	0801d694 	.word	0x0801d694
 8018458:	08018385 	.word	0x08018385

0801845c <__sfp>:
 801845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801845e:	4607      	mov	r7, r0
 8018460:	f7ff ffac 	bl	80183bc <__sfp_lock_acquire>
 8018464:	4b1e      	ldr	r3, [pc, #120]	; (80184e0 <__sfp+0x84>)
 8018466:	681e      	ldr	r6, [r3, #0]
 8018468:	69b3      	ldr	r3, [r6, #24]
 801846a:	b913      	cbnz	r3, 8018472 <__sfp+0x16>
 801846c:	4630      	mov	r0, r6
 801846e:	f7ff ffbd 	bl	80183ec <__sinit>
 8018472:	3648      	adds	r6, #72	; 0x48
 8018474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018478:	3b01      	subs	r3, #1
 801847a:	d503      	bpl.n	8018484 <__sfp+0x28>
 801847c:	6833      	ldr	r3, [r6, #0]
 801847e:	b30b      	cbz	r3, 80184c4 <__sfp+0x68>
 8018480:	6836      	ldr	r6, [r6, #0]
 8018482:	e7f7      	b.n	8018474 <__sfp+0x18>
 8018484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018488:	b9d5      	cbnz	r5, 80184c0 <__sfp+0x64>
 801848a:	4b16      	ldr	r3, [pc, #88]	; (80184e4 <__sfp+0x88>)
 801848c:	60e3      	str	r3, [r4, #12]
 801848e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018492:	6665      	str	r5, [r4, #100]	; 0x64
 8018494:	f000 f86c 	bl	8018570 <__retarget_lock_init_recursive>
 8018498:	f7ff ff96 	bl	80183c8 <__sfp_lock_release>
 801849c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80184a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80184a4:	6025      	str	r5, [r4, #0]
 80184a6:	61a5      	str	r5, [r4, #24]
 80184a8:	2208      	movs	r2, #8
 80184aa:	4629      	mov	r1, r5
 80184ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80184b0:	f000 f8a8 	bl	8018604 <memset>
 80184b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80184b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80184bc:	4620      	mov	r0, r4
 80184be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184c0:	3468      	adds	r4, #104	; 0x68
 80184c2:	e7d9      	b.n	8018478 <__sfp+0x1c>
 80184c4:	2104      	movs	r1, #4
 80184c6:	4638      	mov	r0, r7
 80184c8:	f7ff ff62 	bl	8018390 <__sfmoreglue>
 80184cc:	4604      	mov	r4, r0
 80184ce:	6030      	str	r0, [r6, #0]
 80184d0:	2800      	cmp	r0, #0
 80184d2:	d1d5      	bne.n	8018480 <__sfp+0x24>
 80184d4:	f7ff ff78 	bl	80183c8 <__sfp_lock_release>
 80184d8:	230c      	movs	r3, #12
 80184da:	603b      	str	r3, [r7, #0]
 80184dc:	e7ee      	b.n	80184bc <__sfp+0x60>
 80184de:	bf00      	nop
 80184e0:	0801d694 	.word	0x0801d694
 80184e4:	ffff0001 	.word	0xffff0001

080184e8 <_fwalk_reent>:
 80184e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184ec:	4606      	mov	r6, r0
 80184ee:	4688      	mov	r8, r1
 80184f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80184f4:	2700      	movs	r7, #0
 80184f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80184fa:	f1b9 0901 	subs.w	r9, r9, #1
 80184fe:	d505      	bpl.n	801850c <_fwalk_reent+0x24>
 8018500:	6824      	ldr	r4, [r4, #0]
 8018502:	2c00      	cmp	r4, #0
 8018504:	d1f7      	bne.n	80184f6 <_fwalk_reent+0xe>
 8018506:	4638      	mov	r0, r7
 8018508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801850c:	89ab      	ldrh	r3, [r5, #12]
 801850e:	2b01      	cmp	r3, #1
 8018510:	d907      	bls.n	8018522 <_fwalk_reent+0x3a>
 8018512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018516:	3301      	adds	r3, #1
 8018518:	d003      	beq.n	8018522 <_fwalk_reent+0x3a>
 801851a:	4629      	mov	r1, r5
 801851c:	4630      	mov	r0, r6
 801851e:	47c0      	blx	r8
 8018520:	4307      	orrs	r7, r0
 8018522:	3568      	adds	r5, #104	; 0x68
 8018524:	e7e9      	b.n	80184fa <_fwalk_reent+0x12>
	...

08018528 <__libc_init_array>:
 8018528:	b570      	push	{r4, r5, r6, lr}
 801852a:	4d0d      	ldr	r5, [pc, #52]	; (8018560 <__libc_init_array+0x38>)
 801852c:	4c0d      	ldr	r4, [pc, #52]	; (8018564 <__libc_init_array+0x3c>)
 801852e:	1b64      	subs	r4, r4, r5
 8018530:	10a4      	asrs	r4, r4, #2
 8018532:	2600      	movs	r6, #0
 8018534:	42a6      	cmp	r6, r4
 8018536:	d109      	bne.n	801854c <__libc_init_array+0x24>
 8018538:	4d0b      	ldr	r5, [pc, #44]	; (8018568 <__libc_init_array+0x40>)
 801853a:	4c0c      	ldr	r4, [pc, #48]	; (801856c <__libc_init_array+0x44>)
 801853c:	f001 fa0e 	bl	801995c <_init>
 8018540:	1b64      	subs	r4, r4, r5
 8018542:	10a4      	asrs	r4, r4, #2
 8018544:	2600      	movs	r6, #0
 8018546:	42a6      	cmp	r6, r4
 8018548:	d105      	bne.n	8018556 <__libc_init_array+0x2e>
 801854a:	bd70      	pop	{r4, r5, r6, pc}
 801854c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018550:	4798      	blx	r3
 8018552:	3601      	adds	r6, #1
 8018554:	e7ee      	b.n	8018534 <__libc_init_array+0xc>
 8018556:	f855 3b04 	ldr.w	r3, [r5], #4
 801855a:	4798      	blx	r3
 801855c:	3601      	adds	r6, #1
 801855e:	e7f2      	b.n	8018546 <__libc_init_array+0x1e>
 8018560:	0801d788 	.word	0x0801d788
 8018564:	0801d788 	.word	0x0801d788
 8018568:	0801d788 	.word	0x0801d788
 801856c:	0801d78c 	.word	0x0801d78c

08018570 <__retarget_lock_init_recursive>:
 8018570:	4770      	bx	lr

08018572 <__retarget_lock_acquire_recursive>:
 8018572:	4770      	bx	lr

08018574 <__retarget_lock_release_recursive>:
 8018574:	4770      	bx	lr
	...

08018578 <malloc>:
 8018578:	4b02      	ldr	r3, [pc, #8]	; (8018584 <malloc+0xc>)
 801857a:	4601      	mov	r1, r0
 801857c:	6818      	ldr	r0, [r3, #0]
 801857e:	f000 b899 	b.w	80186b4 <_malloc_r>
 8018582:	bf00      	nop
 8018584:	20000020 	.word	0x20000020

08018588 <free>:
 8018588:	4b02      	ldr	r3, [pc, #8]	; (8018594 <free+0xc>)
 801858a:	4601      	mov	r1, r0
 801858c:	6818      	ldr	r0, [r3, #0]
 801858e:	f000 b841 	b.w	8018614 <_free_r>
 8018592:	bf00      	nop
 8018594:	20000020 	.word	0x20000020

08018598 <memcmp>:
 8018598:	b530      	push	{r4, r5, lr}
 801859a:	3901      	subs	r1, #1
 801859c:	2400      	movs	r4, #0
 801859e:	42a2      	cmp	r2, r4
 80185a0:	d101      	bne.n	80185a6 <memcmp+0xe>
 80185a2:	2000      	movs	r0, #0
 80185a4:	e005      	b.n	80185b2 <memcmp+0x1a>
 80185a6:	5d03      	ldrb	r3, [r0, r4]
 80185a8:	3401      	adds	r4, #1
 80185aa:	5d0d      	ldrb	r5, [r1, r4]
 80185ac:	42ab      	cmp	r3, r5
 80185ae:	d0f6      	beq.n	801859e <memcmp+0x6>
 80185b0:	1b58      	subs	r0, r3, r5
 80185b2:	bd30      	pop	{r4, r5, pc}

080185b4 <memcpy>:
 80185b4:	440a      	add	r2, r1
 80185b6:	4291      	cmp	r1, r2
 80185b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80185bc:	d100      	bne.n	80185c0 <memcpy+0xc>
 80185be:	4770      	bx	lr
 80185c0:	b510      	push	{r4, lr}
 80185c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80185ca:	4291      	cmp	r1, r2
 80185cc:	d1f9      	bne.n	80185c2 <memcpy+0xe>
 80185ce:	bd10      	pop	{r4, pc}

080185d0 <memmove>:
 80185d0:	4288      	cmp	r0, r1
 80185d2:	b510      	push	{r4, lr}
 80185d4:	eb01 0402 	add.w	r4, r1, r2
 80185d8:	d902      	bls.n	80185e0 <memmove+0x10>
 80185da:	4284      	cmp	r4, r0
 80185dc:	4623      	mov	r3, r4
 80185de:	d807      	bhi.n	80185f0 <memmove+0x20>
 80185e0:	1e43      	subs	r3, r0, #1
 80185e2:	42a1      	cmp	r1, r4
 80185e4:	d008      	beq.n	80185f8 <memmove+0x28>
 80185e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185ee:	e7f8      	b.n	80185e2 <memmove+0x12>
 80185f0:	4402      	add	r2, r0
 80185f2:	4601      	mov	r1, r0
 80185f4:	428a      	cmp	r2, r1
 80185f6:	d100      	bne.n	80185fa <memmove+0x2a>
 80185f8:	bd10      	pop	{r4, pc}
 80185fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018602:	e7f7      	b.n	80185f4 <memmove+0x24>

08018604 <memset>:
 8018604:	4402      	add	r2, r0
 8018606:	4603      	mov	r3, r0
 8018608:	4293      	cmp	r3, r2
 801860a:	d100      	bne.n	801860e <memset+0xa>
 801860c:	4770      	bx	lr
 801860e:	f803 1b01 	strb.w	r1, [r3], #1
 8018612:	e7f9      	b.n	8018608 <memset+0x4>

08018614 <_free_r>:
 8018614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018616:	2900      	cmp	r1, #0
 8018618:	d048      	beq.n	80186ac <_free_r+0x98>
 801861a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801861e:	9001      	str	r0, [sp, #4]
 8018620:	2b00      	cmp	r3, #0
 8018622:	f1a1 0404 	sub.w	r4, r1, #4
 8018626:	bfb8      	it	lt
 8018628:	18e4      	addlt	r4, r4, r3
 801862a:	f000 fc93 	bl	8018f54 <__malloc_lock>
 801862e:	4a20      	ldr	r2, [pc, #128]	; (80186b0 <_free_r+0x9c>)
 8018630:	9801      	ldr	r0, [sp, #4]
 8018632:	6813      	ldr	r3, [r2, #0]
 8018634:	4615      	mov	r5, r2
 8018636:	b933      	cbnz	r3, 8018646 <_free_r+0x32>
 8018638:	6063      	str	r3, [r4, #4]
 801863a:	6014      	str	r4, [r2, #0]
 801863c:	b003      	add	sp, #12
 801863e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018642:	f000 bc8d 	b.w	8018f60 <__malloc_unlock>
 8018646:	42a3      	cmp	r3, r4
 8018648:	d90b      	bls.n	8018662 <_free_r+0x4e>
 801864a:	6821      	ldr	r1, [r4, #0]
 801864c:	1862      	adds	r2, r4, r1
 801864e:	4293      	cmp	r3, r2
 8018650:	bf04      	itt	eq
 8018652:	681a      	ldreq	r2, [r3, #0]
 8018654:	685b      	ldreq	r3, [r3, #4]
 8018656:	6063      	str	r3, [r4, #4]
 8018658:	bf04      	itt	eq
 801865a:	1852      	addeq	r2, r2, r1
 801865c:	6022      	streq	r2, [r4, #0]
 801865e:	602c      	str	r4, [r5, #0]
 8018660:	e7ec      	b.n	801863c <_free_r+0x28>
 8018662:	461a      	mov	r2, r3
 8018664:	685b      	ldr	r3, [r3, #4]
 8018666:	b10b      	cbz	r3, 801866c <_free_r+0x58>
 8018668:	42a3      	cmp	r3, r4
 801866a:	d9fa      	bls.n	8018662 <_free_r+0x4e>
 801866c:	6811      	ldr	r1, [r2, #0]
 801866e:	1855      	adds	r5, r2, r1
 8018670:	42a5      	cmp	r5, r4
 8018672:	d10b      	bne.n	801868c <_free_r+0x78>
 8018674:	6824      	ldr	r4, [r4, #0]
 8018676:	4421      	add	r1, r4
 8018678:	1854      	adds	r4, r2, r1
 801867a:	42a3      	cmp	r3, r4
 801867c:	6011      	str	r1, [r2, #0]
 801867e:	d1dd      	bne.n	801863c <_free_r+0x28>
 8018680:	681c      	ldr	r4, [r3, #0]
 8018682:	685b      	ldr	r3, [r3, #4]
 8018684:	6053      	str	r3, [r2, #4]
 8018686:	4421      	add	r1, r4
 8018688:	6011      	str	r1, [r2, #0]
 801868a:	e7d7      	b.n	801863c <_free_r+0x28>
 801868c:	d902      	bls.n	8018694 <_free_r+0x80>
 801868e:	230c      	movs	r3, #12
 8018690:	6003      	str	r3, [r0, #0]
 8018692:	e7d3      	b.n	801863c <_free_r+0x28>
 8018694:	6825      	ldr	r5, [r4, #0]
 8018696:	1961      	adds	r1, r4, r5
 8018698:	428b      	cmp	r3, r1
 801869a:	bf04      	itt	eq
 801869c:	6819      	ldreq	r1, [r3, #0]
 801869e:	685b      	ldreq	r3, [r3, #4]
 80186a0:	6063      	str	r3, [r4, #4]
 80186a2:	bf04      	itt	eq
 80186a4:	1949      	addeq	r1, r1, r5
 80186a6:	6021      	streq	r1, [r4, #0]
 80186a8:	6054      	str	r4, [r2, #4]
 80186aa:	e7c7      	b.n	801863c <_free_r+0x28>
 80186ac:	b003      	add	sp, #12
 80186ae:	bd30      	pop	{r4, r5, pc}
 80186b0:	20004488 	.word	0x20004488

080186b4 <_malloc_r>:
 80186b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186b6:	1ccd      	adds	r5, r1, #3
 80186b8:	f025 0503 	bic.w	r5, r5, #3
 80186bc:	3508      	adds	r5, #8
 80186be:	2d0c      	cmp	r5, #12
 80186c0:	bf38      	it	cc
 80186c2:	250c      	movcc	r5, #12
 80186c4:	2d00      	cmp	r5, #0
 80186c6:	4606      	mov	r6, r0
 80186c8:	db01      	blt.n	80186ce <_malloc_r+0x1a>
 80186ca:	42a9      	cmp	r1, r5
 80186cc:	d903      	bls.n	80186d6 <_malloc_r+0x22>
 80186ce:	230c      	movs	r3, #12
 80186d0:	6033      	str	r3, [r6, #0]
 80186d2:	2000      	movs	r0, #0
 80186d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186d6:	f000 fc3d 	bl	8018f54 <__malloc_lock>
 80186da:	4921      	ldr	r1, [pc, #132]	; (8018760 <_malloc_r+0xac>)
 80186dc:	680a      	ldr	r2, [r1, #0]
 80186de:	4614      	mov	r4, r2
 80186e0:	b99c      	cbnz	r4, 801870a <_malloc_r+0x56>
 80186e2:	4f20      	ldr	r7, [pc, #128]	; (8018764 <_malloc_r+0xb0>)
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	b923      	cbnz	r3, 80186f2 <_malloc_r+0x3e>
 80186e8:	4621      	mov	r1, r4
 80186ea:	4630      	mov	r0, r6
 80186ec:	f000 f974 	bl	80189d8 <_sbrk_r>
 80186f0:	6038      	str	r0, [r7, #0]
 80186f2:	4629      	mov	r1, r5
 80186f4:	4630      	mov	r0, r6
 80186f6:	f000 f96f 	bl	80189d8 <_sbrk_r>
 80186fa:	1c43      	adds	r3, r0, #1
 80186fc:	d123      	bne.n	8018746 <_malloc_r+0x92>
 80186fe:	230c      	movs	r3, #12
 8018700:	6033      	str	r3, [r6, #0]
 8018702:	4630      	mov	r0, r6
 8018704:	f000 fc2c 	bl	8018f60 <__malloc_unlock>
 8018708:	e7e3      	b.n	80186d2 <_malloc_r+0x1e>
 801870a:	6823      	ldr	r3, [r4, #0]
 801870c:	1b5b      	subs	r3, r3, r5
 801870e:	d417      	bmi.n	8018740 <_malloc_r+0x8c>
 8018710:	2b0b      	cmp	r3, #11
 8018712:	d903      	bls.n	801871c <_malloc_r+0x68>
 8018714:	6023      	str	r3, [r4, #0]
 8018716:	441c      	add	r4, r3
 8018718:	6025      	str	r5, [r4, #0]
 801871a:	e004      	b.n	8018726 <_malloc_r+0x72>
 801871c:	6863      	ldr	r3, [r4, #4]
 801871e:	42a2      	cmp	r2, r4
 8018720:	bf0c      	ite	eq
 8018722:	600b      	streq	r3, [r1, #0]
 8018724:	6053      	strne	r3, [r2, #4]
 8018726:	4630      	mov	r0, r6
 8018728:	f000 fc1a 	bl	8018f60 <__malloc_unlock>
 801872c:	f104 000b 	add.w	r0, r4, #11
 8018730:	1d23      	adds	r3, r4, #4
 8018732:	f020 0007 	bic.w	r0, r0, #7
 8018736:	1ac2      	subs	r2, r0, r3
 8018738:	d0cc      	beq.n	80186d4 <_malloc_r+0x20>
 801873a:	1a1b      	subs	r3, r3, r0
 801873c:	50a3      	str	r3, [r4, r2]
 801873e:	e7c9      	b.n	80186d4 <_malloc_r+0x20>
 8018740:	4622      	mov	r2, r4
 8018742:	6864      	ldr	r4, [r4, #4]
 8018744:	e7cc      	b.n	80186e0 <_malloc_r+0x2c>
 8018746:	1cc4      	adds	r4, r0, #3
 8018748:	f024 0403 	bic.w	r4, r4, #3
 801874c:	42a0      	cmp	r0, r4
 801874e:	d0e3      	beq.n	8018718 <_malloc_r+0x64>
 8018750:	1a21      	subs	r1, r4, r0
 8018752:	4630      	mov	r0, r6
 8018754:	f000 f940 	bl	80189d8 <_sbrk_r>
 8018758:	3001      	adds	r0, #1
 801875a:	d1dd      	bne.n	8018718 <_malloc_r+0x64>
 801875c:	e7cf      	b.n	80186fe <_malloc_r+0x4a>
 801875e:	bf00      	nop
 8018760:	20004488 	.word	0x20004488
 8018764:	2000448c 	.word	0x2000448c

08018768 <iprintf>:
 8018768:	b40f      	push	{r0, r1, r2, r3}
 801876a:	4b0a      	ldr	r3, [pc, #40]	; (8018794 <iprintf+0x2c>)
 801876c:	b513      	push	{r0, r1, r4, lr}
 801876e:	681c      	ldr	r4, [r3, #0]
 8018770:	b124      	cbz	r4, 801877c <iprintf+0x14>
 8018772:	69a3      	ldr	r3, [r4, #24]
 8018774:	b913      	cbnz	r3, 801877c <iprintf+0x14>
 8018776:	4620      	mov	r0, r4
 8018778:	f7ff fe38 	bl	80183ec <__sinit>
 801877c:	ab05      	add	r3, sp, #20
 801877e:	9a04      	ldr	r2, [sp, #16]
 8018780:	68a1      	ldr	r1, [r4, #8]
 8018782:	9301      	str	r3, [sp, #4]
 8018784:	4620      	mov	r0, r4
 8018786:	f000 fd77 	bl	8019278 <_vfiprintf_r>
 801878a:	b002      	add	sp, #8
 801878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018790:	b004      	add	sp, #16
 8018792:	4770      	bx	lr
 8018794:	20000020 	.word	0x20000020

08018798 <_puts_r>:
 8018798:	b570      	push	{r4, r5, r6, lr}
 801879a:	460e      	mov	r6, r1
 801879c:	4605      	mov	r5, r0
 801879e:	b118      	cbz	r0, 80187a8 <_puts_r+0x10>
 80187a0:	6983      	ldr	r3, [r0, #24]
 80187a2:	b90b      	cbnz	r3, 80187a8 <_puts_r+0x10>
 80187a4:	f7ff fe22 	bl	80183ec <__sinit>
 80187a8:	69ab      	ldr	r3, [r5, #24]
 80187aa:	68ac      	ldr	r4, [r5, #8]
 80187ac:	b913      	cbnz	r3, 80187b4 <_puts_r+0x1c>
 80187ae:	4628      	mov	r0, r5
 80187b0:	f7ff fe1c 	bl	80183ec <__sinit>
 80187b4:	4b2c      	ldr	r3, [pc, #176]	; (8018868 <_puts_r+0xd0>)
 80187b6:	429c      	cmp	r4, r3
 80187b8:	d120      	bne.n	80187fc <_puts_r+0x64>
 80187ba:	686c      	ldr	r4, [r5, #4]
 80187bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80187be:	07db      	lsls	r3, r3, #31
 80187c0:	d405      	bmi.n	80187ce <_puts_r+0x36>
 80187c2:	89a3      	ldrh	r3, [r4, #12]
 80187c4:	0598      	lsls	r0, r3, #22
 80187c6:	d402      	bmi.n	80187ce <_puts_r+0x36>
 80187c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187ca:	f7ff fed2 	bl	8018572 <__retarget_lock_acquire_recursive>
 80187ce:	89a3      	ldrh	r3, [r4, #12]
 80187d0:	0719      	lsls	r1, r3, #28
 80187d2:	d51d      	bpl.n	8018810 <_puts_r+0x78>
 80187d4:	6923      	ldr	r3, [r4, #16]
 80187d6:	b1db      	cbz	r3, 8018810 <_puts_r+0x78>
 80187d8:	3e01      	subs	r6, #1
 80187da:	68a3      	ldr	r3, [r4, #8]
 80187dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80187e0:	3b01      	subs	r3, #1
 80187e2:	60a3      	str	r3, [r4, #8]
 80187e4:	bb39      	cbnz	r1, 8018836 <_puts_r+0x9e>
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	da38      	bge.n	801885c <_puts_r+0xc4>
 80187ea:	4622      	mov	r2, r4
 80187ec:	210a      	movs	r1, #10
 80187ee:	4628      	mov	r0, r5
 80187f0:	f000 f966 	bl	8018ac0 <__swbuf_r>
 80187f4:	3001      	adds	r0, #1
 80187f6:	d011      	beq.n	801881c <_puts_r+0x84>
 80187f8:	250a      	movs	r5, #10
 80187fa:	e011      	b.n	8018820 <_puts_r+0x88>
 80187fc:	4b1b      	ldr	r3, [pc, #108]	; (801886c <_puts_r+0xd4>)
 80187fe:	429c      	cmp	r4, r3
 8018800:	d101      	bne.n	8018806 <_puts_r+0x6e>
 8018802:	68ac      	ldr	r4, [r5, #8]
 8018804:	e7da      	b.n	80187bc <_puts_r+0x24>
 8018806:	4b1a      	ldr	r3, [pc, #104]	; (8018870 <_puts_r+0xd8>)
 8018808:	429c      	cmp	r4, r3
 801880a:	bf08      	it	eq
 801880c:	68ec      	ldreq	r4, [r5, #12]
 801880e:	e7d5      	b.n	80187bc <_puts_r+0x24>
 8018810:	4621      	mov	r1, r4
 8018812:	4628      	mov	r0, r5
 8018814:	f000 f9b8 	bl	8018b88 <__swsetup_r>
 8018818:	2800      	cmp	r0, #0
 801881a:	d0dd      	beq.n	80187d8 <_puts_r+0x40>
 801881c:	f04f 35ff 	mov.w	r5, #4294967295
 8018820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018822:	07da      	lsls	r2, r3, #31
 8018824:	d405      	bmi.n	8018832 <_puts_r+0x9a>
 8018826:	89a3      	ldrh	r3, [r4, #12]
 8018828:	059b      	lsls	r3, r3, #22
 801882a:	d402      	bmi.n	8018832 <_puts_r+0x9a>
 801882c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801882e:	f7ff fea1 	bl	8018574 <__retarget_lock_release_recursive>
 8018832:	4628      	mov	r0, r5
 8018834:	bd70      	pop	{r4, r5, r6, pc}
 8018836:	2b00      	cmp	r3, #0
 8018838:	da04      	bge.n	8018844 <_puts_r+0xac>
 801883a:	69a2      	ldr	r2, [r4, #24]
 801883c:	429a      	cmp	r2, r3
 801883e:	dc06      	bgt.n	801884e <_puts_r+0xb6>
 8018840:	290a      	cmp	r1, #10
 8018842:	d004      	beq.n	801884e <_puts_r+0xb6>
 8018844:	6823      	ldr	r3, [r4, #0]
 8018846:	1c5a      	adds	r2, r3, #1
 8018848:	6022      	str	r2, [r4, #0]
 801884a:	7019      	strb	r1, [r3, #0]
 801884c:	e7c5      	b.n	80187da <_puts_r+0x42>
 801884e:	4622      	mov	r2, r4
 8018850:	4628      	mov	r0, r5
 8018852:	f000 f935 	bl	8018ac0 <__swbuf_r>
 8018856:	3001      	adds	r0, #1
 8018858:	d1bf      	bne.n	80187da <_puts_r+0x42>
 801885a:	e7df      	b.n	801881c <_puts_r+0x84>
 801885c:	6823      	ldr	r3, [r4, #0]
 801885e:	250a      	movs	r5, #10
 8018860:	1c5a      	adds	r2, r3, #1
 8018862:	6022      	str	r2, [r4, #0]
 8018864:	701d      	strb	r5, [r3, #0]
 8018866:	e7db      	b.n	8018820 <_puts_r+0x88>
 8018868:	0801d654 	.word	0x0801d654
 801886c:	0801d674 	.word	0x0801d674
 8018870:	0801d634 	.word	0x0801d634

08018874 <puts>:
 8018874:	4b02      	ldr	r3, [pc, #8]	; (8018880 <puts+0xc>)
 8018876:	4601      	mov	r1, r0
 8018878:	6818      	ldr	r0, [r3, #0]
 801887a:	f7ff bf8d 	b.w	8018798 <_puts_r>
 801887e:	bf00      	nop
 8018880:	20000020 	.word	0x20000020

08018884 <rand>:
 8018884:	4b17      	ldr	r3, [pc, #92]	; (80188e4 <rand+0x60>)
 8018886:	b510      	push	{r4, lr}
 8018888:	681c      	ldr	r4, [r3, #0]
 801888a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801888c:	b9b3      	cbnz	r3, 80188bc <rand+0x38>
 801888e:	2018      	movs	r0, #24
 8018890:	f7ff fe72 	bl	8018578 <malloc>
 8018894:	63a0      	str	r0, [r4, #56]	; 0x38
 8018896:	b928      	cbnz	r0, 80188a4 <rand+0x20>
 8018898:	4602      	mov	r2, r0
 801889a:	4b13      	ldr	r3, [pc, #76]	; (80188e8 <rand+0x64>)
 801889c:	4813      	ldr	r0, [pc, #76]	; (80188ec <rand+0x68>)
 801889e:	214e      	movs	r1, #78	; 0x4e
 80188a0:	f000 f9e0 	bl	8018c64 <__assert_func>
 80188a4:	4a12      	ldr	r2, [pc, #72]	; (80188f0 <rand+0x6c>)
 80188a6:	4b13      	ldr	r3, [pc, #76]	; (80188f4 <rand+0x70>)
 80188a8:	e9c0 2300 	strd	r2, r3, [r0]
 80188ac:	4b12      	ldr	r3, [pc, #72]	; (80188f8 <rand+0x74>)
 80188ae:	6083      	str	r3, [r0, #8]
 80188b0:	230b      	movs	r3, #11
 80188b2:	8183      	strh	r3, [r0, #12]
 80188b4:	2201      	movs	r2, #1
 80188b6:	2300      	movs	r3, #0
 80188b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80188bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80188be:	480f      	ldr	r0, [pc, #60]	; (80188fc <rand+0x78>)
 80188c0:	690a      	ldr	r2, [r1, #16]
 80188c2:	694b      	ldr	r3, [r1, #20]
 80188c4:	4c0e      	ldr	r4, [pc, #56]	; (8018900 <rand+0x7c>)
 80188c6:	4350      	muls	r0, r2
 80188c8:	fb04 0003 	mla	r0, r4, r3, r0
 80188cc:	fba2 3404 	umull	r3, r4, r2, r4
 80188d0:	1c5a      	adds	r2, r3, #1
 80188d2:	4404      	add	r4, r0
 80188d4:	f144 0000 	adc.w	r0, r4, #0
 80188d8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80188dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80188e0:	bd10      	pop	{r4, pc}
 80188e2:	bf00      	nop
 80188e4:	20000020 	.word	0x20000020
 80188e8:	0801d698 	.word	0x0801d698
 80188ec:	0801d6af 	.word	0x0801d6af
 80188f0:	abcd330e 	.word	0xabcd330e
 80188f4:	e66d1234 	.word	0xe66d1234
 80188f8:	0005deec 	.word	0x0005deec
 80188fc:	5851f42d 	.word	0x5851f42d
 8018900:	4c957f2d 	.word	0x4c957f2d

08018904 <cleanup_glue>:
 8018904:	b538      	push	{r3, r4, r5, lr}
 8018906:	460c      	mov	r4, r1
 8018908:	6809      	ldr	r1, [r1, #0]
 801890a:	4605      	mov	r5, r0
 801890c:	b109      	cbz	r1, 8018912 <cleanup_glue+0xe>
 801890e:	f7ff fff9 	bl	8018904 <cleanup_glue>
 8018912:	4621      	mov	r1, r4
 8018914:	4628      	mov	r0, r5
 8018916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801891a:	f7ff be7b 	b.w	8018614 <_free_r>
	...

08018920 <_reclaim_reent>:
 8018920:	4b2c      	ldr	r3, [pc, #176]	; (80189d4 <_reclaim_reent+0xb4>)
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	4283      	cmp	r3, r0
 8018926:	b570      	push	{r4, r5, r6, lr}
 8018928:	4604      	mov	r4, r0
 801892a:	d051      	beq.n	80189d0 <_reclaim_reent+0xb0>
 801892c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801892e:	b143      	cbz	r3, 8018942 <_reclaim_reent+0x22>
 8018930:	68db      	ldr	r3, [r3, #12]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d14a      	bne.n	80189cc <_reclaim_reent+0xac>
 8018936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018938:	6819      	ldr	r1, [r3, #0]
 801893a:	b111      	cbz	r1, 8018942 <_reclaim_reent+0x22>
 801893c:	4620      	mov	r0, r4
 801893e:	f7ff fe69 	bl	8018614 <_free_r>
 8018942:	6961      	ldr	r1, [r4, #20]
 8018944:	b111      	cbz	r1, 801894c <_reclaim_reent+0x2c>
 8018946:	4620      	mov	r0, r4
 8018948:	f7ff fe64 	bl	8018614 <_free_r>
 801894c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801894e:	b111      	cbz	r1, 8018956 <_reclaim_reent+0x36>
 8018950:	4620      	mov	r0, r4
 8018952:	f7ff fe5f 	bl	8018614 <_free_r>
 8018956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018958:	b111      	cbz	r1, 8018960 <_reclaim_reent+0x40>
 801895a:	4620      	mov	r0, r4
 801895c:	f7ff fe5a 	bl	8018614 <_free_r>
 8018960:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018962:	b111      	cbz	r1, 801896a <_reclaim_reent+0x4a>
 8018964:	4620      	mov	r0, r4
 8018966:	f7ff fe55 	bl	8018614 <_free_r>
 801896a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801896c:	b111      	cbz	r1, 8018974 <_reclaim_reent+0x54>
 801896e:	4620      	mov	r0, r4
 8018970:	f7ff fe50 	bl	8018614 <_free_r>
 8018974:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018976:	b111      	cbz	r1, 801897e <_reclaim_reent+0x5e>
 8018978:	4620      	mov	r0, r4
 801897a:	f7ff fe4b 	bl	8018614 <_free_r>
 801897e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018980:	b111      	cbz	r1, 8018988 <_reclaim_reent+0x68>
 8018982:	4620      	mov	r0, r4
 8018984:	f7ff fe46 	bl	8018614 <_free_r>
 8018988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801898a:	b111      	cbz	r1, 8018992 <_reclaim_reent+0x72>
 801898c:	4620      	mov	r0, r4
 801898e:	f7ff fe41 	bl	8018614 <_free_r>
 8018992:	69a3      	ldr	r3, [r4, #24]
 8018994:	b1e3      	cbz	r3, 80189d0 <_reclaim_reent+0xb0>
 8018996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018998:	4620      	mov	r0, r4
 801899a:	4798      	blx	r3
 801899c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801899e:	b1b9      	cbz	r1, 80189d0 <_reclaim_reent+0xb0>
 80189a0:	4620      	mov	r0, r4
 80189a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189a6:	f7ff bfad 	b.w	8018904 <cleanup_glue>
 80189aa:	5949      	ldr	r1, [r1, r5]
 80189ac:	b941      	cbnz	r1, 80189c0 <_reclaim_reent+0xa0>
 80189ae:	3504      	adds	r5, #4
 80189b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80189b2:	2d80      	cmp	r5, #128	; 0x80
 80189b4:	68d9      	ldr	r1, [r3, #12]
 80189b6:	d1f8      	bne.n	80189aa <_reclaim_reent+0x8a>
 80189b8:	4620      	mov	r0, r4
 80189ba:	f7ff fe2b 	bl	8018614 <_free_r>
 80189be:	e7ba      	b.n	8018936 <_reclaim_reent+0x16>
 80189c0:	680e      	ldr	r6, [r1, #0]
 80189c2:	4620      	mov	r0, r4
 80189c4:	f7ff fe26 	bl	8018614 <_free_r>
 80189c8:	4631      	mov	r1, r6
 80189ca:	e7ef      	b.n	80189ac <_reclaim_reent+0x8c>
 80189cc:	2500      	movs	r5, #0
 80189ce:	e7ef      	b.n	80189b0 <_reclaim_reent+0x90>
 80189d0:	bd70      	pop	{r4, r5, r6, pc}
 80189d2:	bf00      	nop
 80189d4:	20000020 	.word	0x20000020

080189d8 <_sbrk_r>:
 80189d8:	b538      	push	{r3, r4, r5, lr}
 80189da:	4d06      	ldr	r5, [pc, #24]	; (80189f4 <_sbrk_r+0x1c>)
 80189dc:	2300      	movs	r3, #0
 80189de:	4604      	mov	r4, r0
 80189e0:	4608      	mov	r0, r1
 80189e2:	602b      	str	r3, [r5, #0]
 80189e4:	f7e9 f858 	bl	8001a98 <_sbrk>
 80189e8:	1c43      	adds	r3, r0, #1
 80189ea:	d102      	bne.n	80189f2 <_sbrk_r+0x1a>
 80189ec:	682b      	ldr	r3, [r5, #0]
 80189ee:	b103      	cbz	r3, 80189f2 <_sbrk_r+0x1a>
 80189f0:	6023      	str	r3, [r4, #0]
 80189f2:	bd38      	pop	{r3, r4, r5, pc}
 80189f4:	2000db6c 	.word	0x2000db6c

080189f8 <siprintf>:
 80189f8:	b40e      	push	{r1, r2, r3}
 80189fa:	b500      	push	{lr}
 80189fc:	b09c      	sub	sp, #112	; 0x70
 80189fe:	ab1d      	add	r3, sp, #116	; 0x74
 8018a00:	9002      	str	r0, [sp, #8]
 8018a02:	9006      	str	r0, [sp, #24]
 8018a04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018a08:	4809      	ldr	r0, [pc, #36]	; (8018a30 <siprintf+0x38>)
 8018a0a:	9107      	str	r1, [sp, #28]
 8018a0c:	9104      	str	r1, [sp, #16]
 8018a0e:	4909      	ldr	r1, [pc, #36]	; (8018a34 <siprintf+0x3c>)
 8018a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a14:	9105      	str	r1, [sp, #20]
 8018a16:	6800      	ldr	r0, [r0, #0]
 8018a18:	9301      	str	r3, [sp, #4]
 8018a1a:	a902      	add	r1, sp, #8
 8018a1c:	f000 fb02 	bl	8019024 <_svfiprintf_r>
 8018a20:	9b02      	ldr	r3, [sp, #8]
 8018a22:	2200      	movs	r2, #0
 8018a24:	701a      	strb	r2, [r3, #0]
 8018a26:	b01c      	add	sp, #112	; 0x70
 8018a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a2c:	b003      	add	sp, #12
 8018a2e:	4770      	bx	lr
 8018a30:	20000020 	.word	0x20000020
 8018a34:	ffff0208 	.word	0xffff0208

08018a38 <__sread>:
 8018a38:	b510      	push	{r4, lr}
 8018a3a:	460c      	mov	r4, r1
 8018a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a40:	f000 fede 	bl	8019800 <_read_r>
 8018a44:	2800      	cmp	r0, #0
 8018a46:	bfab      	itete	ge
 8018a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8018a4c:	181b      	addge	r3, r3, r0
 8018a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018a52:	bfac      	ite	ge
 8018a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8018a56:	81a3      	strhlt	r3, [r4, #12]
 8018a58:	bd10      	pop	{r4, pc}

08018a5a <__swrite>:
 8018a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a5e:	461f      	mov	r7, r3
 8018a60:	898b      	ldrh	r3, [r1, #12]
 8018a62:	05db      	lsls	r3, r3, #23
 8018a64:	4605      	mov	r5, r0
 8018a66:	460c      	mov	r4, r1
 8018a68:	4616      	mov	r6, r2
 8018a6a:	d505      	bpl.n	8018a78 <__swrite+0x1e>
 8018a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a70:	2302      	movs	r3, #2
 8018a72:	2200      	movs	r2, #0
 8018a74:	f000 f9f8 	bl	8018e68 <_lseek_r>
 8018a78:	89a3      	ldrh	r3, [r4, #12]
 8018a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018a82:	81a3      	strh	r3, [r4, #12]
 8018a84:	4632      	mov	r2, r6
 8018a86:	463b      	mov	r3, r7
 8018a88:	4628      	mov	r0, r5
 8018a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a8e:	f000 b869 	b.w	8018b64 <_write_r>

08018a92 <__sseek>:
 8018a92:	b510      	push	{r4, lr}
 8018a94:	460c      	mov	r4, r1
 8018a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a9a:	f000 f9e5 	bl	8018e68 <_lseek_r>
 8018a9e:	1c43      	adds	r3, r0, #1
 8018aa0:	89a3      	ldrh	r3, [r4, #12]
 8018aa2:	bf15      	itete	ne
 8018aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8018aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018aae:	81a3      	strheq	r3, [r4, #12]
 8018ab0:	bf18      	it	ne
 8018ab2:	81a3      	strhne	r3, [r4, #12]
 8018ab4:	bd10      	pop	{r4, pc}

08018ab6 <__sclose>:
 8018ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018aba:	f000 b8f1 	b.w	8018ca0 <_close_r>
	...

08018ac0 <__swbuf_r>:
 8018ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ac2:	460e      	mov	r6, r1
 8018ac4:	4614      	mov	r4, r2
 8018ac6:	4605      	mov	r5, r0
 8018ac8:	b118      	cbz	r0, 8018ad2 <__swbuf_r+0x12>
 8018aca:	6983      	ldr	r3, [r0, #24]
 8018acc:	b90b      	cbnz	r3, 8018ad2 <__swbuf_r+0x12>
 8018ace:	f7ff fc8d 	bl	80183ec <__sinit>
 8018ad2:	4b21      	ldr	r3, [pc, #132]	; (8018b58 <__swbuf_r+0x98>)
 8018ad4:	429c      	cmp	r4, r3
 8018ad6:	d12b      	bne.n	8018b30 <__swbuf_r+0x70>
 8018ad8:	686c      	ldr	r4, [r5, #4]
 8018ada:	69a3      	ldr	r3, [r4, #24]
 8018adc:	60a3      	str	r3, [r4, #8]
 8018ade:	89a3      	ldrh	r3, [r4, #12]
 8018ae0:	071a      	lsls	r2, r3, #28
 8018ae2:	d52f      	bpl.n	8018b44 <__swbuf_r+0x84>
 8018ae4:	6923      	ldr	r3, [r4, #16]
 8018ae6:	b36b      	cbz	r3, 8018b44 <__swbuf_r+0x84>
 8018ae8:	6923      	ldr	r3, [r4, #16]
 8018aea:	6820      	ldr	r0, [r4, #0]
 8018aec:	1ac0      	subs	r0, r0, r3
 8018aee:	6963      	ldr	r3, [r4, #20]
 8018af0:	b2f6      	uxtb	r6, r6
 8018af2:	4283      	cmp	r3, r0
 8018af4:	4637      	mov	r7, r6
 8018af6:	dc04      	bgt.n	8018b02 <__swbuf_r+0x42>
 8018af8:	4621      	mov	r1, r4
 8018afa:	4628      	mov	r0, r5
 8018afc:	f000 f966 	bl	8018dcc <_fflush_r>
 8018b00:	bb30      	cbnz	r0, 8018b50 <__swbuf_r+0x90>
 8018b02:	68a3      	ldr	r3, [r4, #8]
 8018b04:	3b01      	subs	r3, #1
 8018b06:	60a3      	str	r3, [r4, #8]
 8018b08:	6823      	ldr	r3, [r4, #0]
 8018b0a:	1c5a      	adds	r2, r3, #1
 8018b0c:	6022      	str	r2, [r4, #0]
 8018b0e:	701e      	strb	r6, [r3, #0]
 8018b10:	6963      	ldr	r3, [r4, #20]
 8018b12:	3001      	adds	r0, #1
 8018b14:	4283      	cmp	r3, r0
 8018b16:	d004      	beq.n	8018b22 <__swbuf_r+0x62>
 8018b18:	89a3      	ldrh	r3, [r4, #12]
 8018b1a:	07db      	lsls	r3, r3, #31
 8018b1c:	d506      	bpl.n	8018b2c <__swbuf_r+0x6c>
 8018b1e:	2e0a      	cmp	r6, #10
 8018b20:	d104      	bne.n	8018b2c <__swbuf_r+0x6c>
 8018b22:	4621      	mov	r1, r4
 8018b24:	4628      	mov	r0, r5
 8018b26:	f000 f951 	bl	8018dcc <_fflush_r>
 8018b2a:	b988      	cbnz	r0, 8018b50 <__swbuf_r+0x90>
 8018b2c:	4638      	mov	r0, r7
 8018b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b30:	4b0a      	ldr	r3, [pc, #40]	; (8018b5c <__swbuf_r+0x9c>)
 8018b32:	429c      	cmp	r4, r3
 8018b34:	d101      	bne.n	8018b3a <__swbuf_r+0x7a>
 8018b36:	68ac      	ldr	r4, [r5, #8]
 8018b38:	e7cf      	b.n	8018ada <__swbuf_r+0x1a>
 8018b3a:	4b09      	ldr	r3, [pc, #36]	; (8018b60 <__swbuf_r+0xa0>)
 8018b3c:	429c      	cmp	r4, r3
 8018b3e:	bf08      	it	eq
 8018b40:	68ec      	ldreq	r4, [r5, #12]
 8018b42:	e7ca      	b.n	8018ada <__swbuf_r+0x1a>
 8018b44:	4621      	mov	r1, r4
 8018b46:	4628      	mov	r0, r5
 8018b48:	f000 f81e 	bl	8018b88 <__swsetup_r>
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	d0cb      	beq.n	8018ae8 <__swbuf_r+0x28>
 8018b50:	f04f 37ff 	mov.w	r7, #4294967295
 8018b54:	e7ea      	b.n	8018b2c <__swbuf_r+0x6c>
 8018b56:	bf00      	nop
 8018b58:	0801d654 	.word	0x0801d654
 8018b5c:	0801d674 	.word	0x0801d674
 8018b60:	0801d634 	.word	0x0801d634

08018b64 <_write_r>:
 8018b64:	b538      	push	{r3, r4, r5, lr}
 8018b66:	4d07      	ldr	r5, [pc, #28]	; (8018b84 <_write_r+0x20>)
 8018b68:	4604      	mov	r4, r0
 8018b6a:	4608      	mov	r0, r1
 8018b6c:	4611      	mov	r1, r2
 8018b6e:	2200      	movs	r2, #0
 8018b70:	602a      	str	r2, [r5, #0]
 8018b72:	461a      	mov	r2, r3
 8018b74:	f7e8 ff3f 	bl	80019f6 <_write>
 8018b78:	1c43      	adds	r3, r0, #1
 8018b7a:	d102      	bne.n	8018b82 <_write_r+0x1e>
 8018b7c:	682b      	ldr	r3, [r5, #0]
 8018b7e:	b103      	cbz	r3, 8018b82 <_write_r+0x1e>
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	bd38      	pop	{r3, r4, r5, pc}
 8018b84:	2000db6c 	.word	0x2000db6c

08018b88 <__swsetup_r>:
 8018b88:	4b32      	ldr	r3, [pc, #200]	; (8018c54 <__swsetup_r+0xcc>)
 8018b8a:	b570      	push	{r4, r5, r6, lr}
 8018b8c:	681d      	ldr	r5, [r3, #0]
 8018b8e:	4606      	mov	r6, r0
 8018b90:	460c      	mov	r4, r1
 8018b92:	b125      	cbz	r5, 8018b9e <__swsetup_r+0x16>
 8018b94:	69ab      	ldr	r3, [r5, #24]
 8018b96:	b913      	cbnz	r3, 8018b9e <__swsetup_r+0x16>
 8018b98:	4628      	mov	r0, r5
 8018b9a:	f7ff fc27 	bl	80183ec <__sinit>
 8018b9e:	4b2e      	ldr	r3, [pc, #184]	; (8018c58 <__swsetup_r+0xd0>)
 8018ba0:	429c      	cmp	r4, r3
 8018ba2:	d10f      	bne.n	8018bc4 <__swsetup_r+0x3c>
 8018ba4:	686c      	ldr	r4, [r5, #4]
 8018ba6:	89a3      	ldrh	r3, [r4, #12]
 8018ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018bac:	0719      	lsls	r1, r3, #28
 8018bae:	d42c      	bmi.n	8018c0a <__swsetup_r+0x82>
 8018bb0:	06dd      	lsls	r5, r3, #27
 8018bb2:	d411      	bmi.n	8018bd8 <__swsetup_r+0x50>
 8018bb4:	2309      	movs	r3, #9
 8018bb6:	6033      	str	r3, [r6, #0]
 8018bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018bbc:	81a3      	strh	r3, [r4, #12]
 8018bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8018bc2:	e03e      	b.n	8018c42 <__swsetup_r+0xba>
 8018bc4:	4b25      	ldr	r3, [pc, #148]	; (8018c5c <__swsetup_r+0xd4>)
 8018bc6:	429c      	cmp	r4, r3
 8018bc8:	d101      	bne.n	8018bce <__swsetup_r+0x46>
 8018bca:	68ac      	ldr	r4, [r5, #8]
 8018bcc:	e7eb      	b.n	8018ba6 <__swsetup_r+0x1e>
 8018bce:	4b24      	ldr	r3, [pc, #144]	; (8018c60 <__swsetup_r+0xd8>)
 8018bd0:	429c      	cmp	r4, r3
 8018bd2:	bf08      	it	eq
 8018bd4:	68ec      	ldreq	r4, [r5, #12]
 8018bd6:	e7e6      	b.n	8018ba6 <__swsetup_r+0x1e>
 8018bd8:	0758      	lsls	r0, r3, #29
 8018bda:	d512      	bpl.n	8018c02 <__swsetup_r+0x7a>
 8018bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018bde:	b141      	cbz	r1, 8018bf2 <__swsetup_r+0x6a>
 8018be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018be4:	4299      	cmp	r1, r3
 8018be6:	d002      	beq.n	8018bee <__swsetup_r+0x66>
 8018be8:	4630      	mov	r0, r6
 8018bea:	f7ff fd13 	bl	8018614 <_free_r>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8018bf2:	89a3      	ldrh	r3, [r4, #12]
 8018bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018bf8:	81a3      	strh	r3, [r4, #12]
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	6063      	str	r3, [r4, #4]
 8018bfe:	6923      	ldr	r3, [r4, #16]
 8018c00:	6023      	str	r3, [r4, #0]
 8018c02:	89a3      	ldrh	r3, [r4, #12]
 8018c04:	f043 0308 	orr.w	r3, r3, #8
 8018c08:	81a3      	strh	r3, [r4, #12]
 8018c0a:	6923      	ldr	r3, [r4, #16]
 8018c0c:	b94b      	cbnz	r3, 8018c22 <__swsetup_r+0x9a>
 8018c0e:	89a3      	ldrh	r3, [r4, #12]
 8018c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c18:	d003      	beq.n	8018c22 <__swsetup_r+0x9a>
 8018c1a:	4621      	mov	r1, r4
 8018c1c:	4630      	mov	r0, r6
 8018c1e:	f000 f959 	bl	8018ed4 <__smakebuf_r>
 8018c22:	89a0      	ldrh	r0, [r4, #12]
 8018c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c28:	f010 0301 	ands.w	r3, r0, #1
 8018c2c:	d00a      	beq.n	8018c44 <__swsetup_r+0xbc>
 8018c2e:	2300      	movs	r3, #0
 8018c30:	60a3      	str	r3, [r4, #8]
 8018c32:	6963      	ldr	r3, [r4, #20]
 8018c34:	425b      	negs	r3, r3
 8018c36:	61a3      	str	r3, [r4, #24]
 8018c38:	6923      	ldr	r3, [r4, #16]
 8018c3a:	b943      	cbnz	r3, 8018c4e <__swsetup_r+0xc6>
 8018c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018c40:	d1ba      	bne.n	8018bb8 <__swsetup_r+0x30>
 8018c42:	bd70      	pop	{r4, r5, r6, pc}
 8018c44:	0781      	lsls	r1, r0, #30
 8018c46:	bf58      	it	pl
 8018c48:	6963      	ldrpl	r3, [r4, #20]
 8018c4a:	60a3      	str	r3, [r4, #8]
 8018c4c:	e7f4      	b.n	8018c38 <__swsetup_r+0xb0>
 8018c4e:	2000      	movs	r0, #0
 8018c50:	e7f7      	b.n	8018c42 <__swsetup_r+0xba>
 8018c52:	bf00      	nop
 8018c54:	20000020 	.word	0x20000020
 8018c58:	0801d654 	.word	0x0801d654
 8018c5c:	0801d674 	.word	0x0801d674
 8018c60:	0801d634 	.word	0x0801d634

08018c64 <__assert_func>:
 8018c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c66:	4614      	mov	r4, r2
 8018c68:	461a      	mov	r2, r3
 8018c6a:	4b09      	ldr	r3, [pc, #36]	; (8018c90 <__assert_func+0x2c>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	4605      	mov	r5, r0
 8018c70:	68d8      	ldr	r0, [r3, #12]
 8018c72:	b14c      	cbz	r4, 8018c88 <__assert_func+0x24>
 8018c74:	4b07      	ldr	r3, [pc, #28]	; (8018c94 <__assert_func+0x30>)
 8018c76:	9100      	str	r1, [sp, #0]
 8018c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c7c:	4906      	ldr	r1, [pc, #24]	; (8018c98 <__assert_func+0x34>)
 8018c7e:	462b      	mov	r3, r5
 8018c80:	f000 f8e0 	bl	8018e44 <fiprintf>
 8018c84:	f000 fdce 	bl	8019824 <abort>
 8018c88:	4b04      	ldr	r3, [pc, #16]	; (8018c9c <__assert_func+0x38>)
 8018c8a:	461c      	mov	r4, r3
 8018c8c:	e7f3      	b.n	8018c76 <__assert_func+0x12>
 8018c8e:	bf00      	nop
 8018c90:	20000020 	.word	0x20000020
 8018c94:	0801d70e 	.word	0x0801d70e
 8018c98:	0801d71b 	.word	0x0801d71b
 8018c9c:	0801d749 	.word	0x0801d749

08018ca0 <_close_r>:
 8018ca0:	b538      	push	{r3, r4, r5, lr}
 8018ca2:	4d06      	ldr	r5, [pc, #24]	; (8018cbc <_close_r+0x1c>)
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	4608      	mov	r0, r1
 8018caa:	602b      	str	r3, [r5, #0]
 8018cac:	f7e8 febf 	bl	8001a2e <_close>
 8018cb0:	1c43      	adds	r3, r0, #1
 8018cb2:	d102      	bne.n	8018cba <_close_r+0x1a>
 8018cb4:	682b      	ldr	r3, [r5, #0]
 8018cb6:	b103      	cbz	r3, 8018cba <_close_r+0x1a>
 8018cb8:	6023      	str	r3, [r4, #0]
 8018cba:	bd38      	pop	{r3, r4, r5, pc}
 8018cbc:	2000db6c 	.word	0x2000db6c

08018cc0 <__sflush_r>:
 8018cc0:	898a      	ldrh	r2, [r1, #12]
 8018cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc6:	4605      	mov	r5, r0
 8018cc8:	0710      	lsls	r0, r2, #28
 8018cca:	460c      	mov	r4, r1
 8018ccc:	d458      	bmi.n	8018d80 <__sflush_r+0xc0>
 8018cce:	684b      	ldr	r3, [r1, #4]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	dc05      	bgt.n	8018ce0 <__sflush_r+0x20>
 8018cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	dc02      	bgt.n	8018ce0 <__sflush_r+0x20>
 8018cda:	2000      	movs	r0, #0
 8018cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ce2:	2e00      	cmp	r6, #0
 8018ce4:	d0f9      	beq.n	8018cda <__sflush_r+0x1a>
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018cec:	682f      	ldr	r7, [r5, #0]
 8018cee:	602b      	str	r3, [r5, #0]
 8018cf0:	d032      	beq.n	8018d58 <__sflush_r+0x98>
 8018cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018cf4:	89a3      	ldrh	r3, [r4, #12]
 8018cf6:	075a      	lsls	r2, r3, #29
 8018cf8:	d505      	bpl.n	8018d06 <__sflush_r+0x46>
 8018cfa:	6863      	ldr	r3, [r4, #4]
 8018cfc:	1ac0      	subs	r0, r0, r3
 8018cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d00:	b10b      	cbz	r3, 8018d06 <__sflush_r+0x46>
 8018d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d04:	1ac0      	subs	r0, r0, r3
 8018d06:	2300      	movs	r3, #0
 8018d08:	4602      	mov	r2, r0
 8018d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d0c:	6a21      	ldr	r1, [r4, #32]
 8018d0e:	4628      	mov	r0, r5
 8018d10:	47b0      	blx	r6
 8018d12:	1c43      	adds	r3, r0, #1
 8018d14:	89a3      	ldrh	r3, [r4, #12]
 8018d16:	d106      	bne.n	8018d26 <__sflush_r+0x66>
 8018d18:	6829      	ldr	r1, [r5, #0]
 8018d1a:	291d      	cmp	r1, #29
 8018d1c:	d82c      	bhi.n	8018d78 <__sflush_r+0xb8>
 8018d1e:	4a2a      	ldr	r2, [pc, #168]	; (8018dc8 <__sflush_r+0x108>)
 8018d20:	40ca      	lsrs	r2, r1
 8018d22:	07d6      	lsls	r6, r2, #31
 8018d24:	d528      	bpl.n	8018d78 <__sflush_r+0xb8>
 8018d26:	2200      	movs	r2, #0
 8018d28:	6062      	str	r2, [r4, #4]
 8018d2a:	04d9      	lsls	r1, r3, #19
 8018d2c:	6922      	ldr	r2, [r4, #16]
 8018d2e:	6022      	str	r2, [r4, #0]
 8018d30:	d504      	bpl.n	8018d3c <__sflush_r+0x7c>
 8018d32:	1c42      	adds	r2, r0, #1
 8018d34:	d101      	bne.n	8018d3a <__sflush_r+0x7a>
 8018d36:	682b      	ldr	r3, [r5, #0]
 8018d38:	b903      	cbnz	r3, 8018d3c <__sflush_r+0x7c>
 8018d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8018d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d3e:	602f      	str	r7, [r5, #0]
 8018d40:	2900      	cmp	r1, #0
 8018d42:	d0ca      	beq.n	8018cda <__sflush_r+0x1a>
 8018d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d48:	4299      	cmp	r1, r3
 8018d4a:	d002      	beq.n	8018d52 <__sflush_r+0x92>
 8018d4c:	4628      	mov	r0, r5
 8018d4e:	f7ff fc61 	bl	8018614 <_free_r>
 8018d52:	2000      	movs	r0, #0
 8018d54:	6360      	str	r0, [r4, #52]	; 0x34
 8018d56:	e7c1      	b.n	8018cdc <__sflush_r+0x1c>
 8018d58:	6a21      	ldr	r1, [r4, #32]
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	4628      	mov	r0, r5
 8018d5e:	47b0      	blx	r6
 8018d60:	1c41      	adds	r1, r0, #1
 8018d62:	d1c7      	bne.n	8018cf4 <__sflush_r+0x34>
 8018d64:	682b      	ldr	r3, [r5, #0]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d0c4      	beq.n	8018cf4 <__sflush_r+0x34>
 8018d6a:	2b1d      	cmp	r3, #29
 8018d6c:	d001      	beq.n	8018d72 <__sflush_r+0xb2>
 8018d6e:	2b16      	cmp	r3, #22
 8018d70:	d101      	bne.n	8018d76 <__sflush_r+0xb6>
 8018d72:	602f      	str	r7, [r5, #0]
 8018d74:	e7b1      	b.n	8018cda <__sflush_r+0x1a>
 8018d76:	89a3      	ldrh	r3, [r4, #12]
 8018d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d7c:	81a3      	strh	r3, [r4, #12]
 8018d7e:	e7ad      	b.n	8018cdc <__sflush_r+0x1c>
 8018d80:	690f      	ldr	r7, [r1, #16]
 8018d82:	2f00      	cmp	r7, #0
 8018d84:	d0a9      	beq.n	8018cda <__sflush_r+0x1a>
 8018d86:	0793      	lsls	r3, r2, #30
 8018d88:	680e      	ldr	r6, [r1, #0]
 8018d8a:	bf08      	it	eq
 8018d8c:	694b      	ldreq	r3, [r1, #20]
 8018d8e:	600f      	str	r7, [r1, #0]
 8018d90:	bf18      	it	ne
 8018d92:	2300      	movne	r3, #0
 8018d94:	eba6 0807 	sub.w	r8, r6, r7
 8018d98:	608b      	str	r3, [r1, #8]
 8018d9a:	f1b8 0f00 	cmp.w	r8, #0
 8018d9e:	dd9c      	ble.n	8018cda <__sflush_r+0x1a>
 8018da0:	6a21      	ldr	r1, [r4, #32]
 8018da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018da4:	4643      	mov	r3, r8
 8018da6:	463a      	mov	r2, r7
 8018da8:	4628      	mov	r0, r5
 8018daa:	47b0      	blx	r6
 8018dac:	2800      	cmp	r0, #0
 8018dae:	dc06      	bgt.n	8018dbe <__sflush_r+0xfe>
 8018db0:	89a3      	ldrh	r3, [r4, #12]
 8018db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018db6:	81a3      	strh	r3, [r4, #12]
 8018db8:	f04f 30ff 	mov.w	r0, #4294967295
 8018dbc:	e78e      	b.n	8018cdc <__sflush_r+0x1c>
 8018dbe:	4407      	add	r7, r0
 8018dc0:	eba8 0800 	sub.w	r8, r8, r0
 8018dc4:	e7e9      	b.n	8018d9a <__sflush_r+0xda>
 8018dc6:	bf00      	nop
 8018dc8:	20400001 	.word	0x20400001

08018dcc <_fflush_r>:
 8018dcc:	b538      	push	{r3, r4, r5, lr}
 8018dce:	690b      	ldr	r3, [r1, #16]
 8018dd0:	4605      	mov	r5, r0
 8018dd2:	460c      	mov	r4, r1
 8018dd4:	b913      	cbnz	r3, 8018ddc <_fflush_r+0x10>
 8018dd6:	2500      	movs	r5, #0
 8018dd8:	4628      	mov	r0, r5
 8018dda:	bd38      	pop	{r3, r4, r5, pc}
 8018ddc:	b118      	cbz	r0, 8018de6 <_fflush_r+0x1a>
 8018dde:	6983      	ldr	r3, [r0, #24]
 8018de0:	b90b      	cbnz	r3, 8018de6 <_fflush_r+0x1a>
 8018de2:	f7ff fb03 	bl	80183ec <__sinit>
 8018de6:	4b14      	ldr	r3, [pc, #80]	; (8018e38 <_fflush_r+0x6c>)
 8018de8:	429c      	cmp	r4, r3
 8018dea:	d11b      	bne.n	8018e24 <_fflush_r+0x58>
 8018dec:	686c      	ldr	r4, [r5, #4]
 8018dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d0ef      	beq.n	8018dd6 <_fflush_r+0xa>
 8018df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018df8:	07d0      	lsls	r0, r2, #31
 8018dfa:	d404      	bmi.n	8018e06 <_fflush_r+0x3a>
 8018dfc:	0599      	lsls	r1, r3, #22
 8018dfe:	d402      	bmi.n	8018e06 <_fflush_r+0x3a>
 8018e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e02:	f7ff fbb6 	bl	8018572 <__retarget_lock_acquire_recursive>
 8018e06:	4628      	mov	r0, r5
 8018e08:	4621      	mov	r1, r4
 8018e0a:	f7ff ff59 	bl	8018cc0 <__sflush_r>
 8018e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018e10:	07da      	lsls	r2, r3, #31
 8018e12:	4605      	mov	r5, r0
 8018e14:	d4e0      	bmi.n	8018dd8 <_fflush_r+0xc>
 8018e16:	89a3      	ldrh	r3, [r4, #12]
 8018e18:	059b      	lsls	r3, r3, #22
 8018e1a:	d4dd      	bmi.n	8018dd8 <_fflush_r+0xc>
 8018e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018e1e:	f7ff fba9 	bl	8018574 <__retarget_lock_release_recursive>
 8018e22:	e7d9      	b.n	8018dd8 <_fflush_r+0xc>
 8018e24:	4b05      	ldr	r3, [pc, #20]	; (8018e3c <_fflush_r+0x70>)
 8018e26:	429c      	cmp	r4, r3
 8018e28:	d101      	bne.n	8018e2e <_fflush_r+0x62>
 8018e2a:	68ac      	ldr	r4, [r5, #8]
 8018e2c:	e7df      	b.n	8018dee <_fflush_r+0x22>
 8018e2e:	4b04      	ldr	r3, [pc, #16]	; (8018e40 <_fflush_r+0x74>)
 8018e30:	429c      	cmp	r4, r3
 8018e32:	bf08      	it	eq
 8018e34:	68ec      	ldreq	r4, [r5, #12]
 8018e36:	e7da      	b.n	8018dee <_fflush_r+0x22>
 8018e38:	0801d654 	.word	0x0801d654
 8018e3c:	0801d674 	.word	0x0801d674
 8018e40:	0801d634 	.word	0x0801d634

08018e44 <fiprintf>:
 8018e44:	b40e      	push	{r1, r2, r3}
 8018e46:	b503      	push	{r0, r1, lr}
 8018e48:	4601      	mov	r1, r0
 8018e4a:	ab03      	add	r3, sp, #12
 8018e4c:	4805      	ldr	r0, [pc, #20]	; (8018e64 <fiprintf+0x20>)
 8018e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e52:	6800      	ldr	r0, [r0, #0]
 8018e54:	9301      	str	r3, [sp, #4]
 8018e56:	f000 fa0f 	bl	8019278 <_vfiprintf_r>
 8018e5a:	b002      	add	sp, #8
 8018e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e60:	b003      	add	sp, #12
 8018e62:	4770      	bx	lr
 8018e64:	20000020 	.word	0x20000020

08018e68 <_lseek_r>:
 8018e68:	b538      	push	{r3, r4, r5, lr}
 8018e6a:	4d07      	ldr	r5, [pc, #28]	; (8018e88 <_lseek_r+0x20>)
 8018e6c:	4604      	mov	r4, r0
 8018e6e:	4608      	mov	r0, r1
 8018e70:	4611      	mov	r1, r2
 8018e72:	2200      	movs	r2, #0
 8018e74:	602a      	str	r2, [r5, #0]
 8018e76:	461a      	mov	r2, r3
 8018e78:	f7e8 fe00 	bl	8001a7c <_lseek>
 8018e7c:	1c43      	adds	r3, r0, #1
 8018e7e:	d102      	bne.n	8018e86 <_lseek_r+0x1e>
 8018e80:	682b      	ldr	r3, [r5, #0]
 8018e82:	b103      	cbz	r3, 8018e86 <_lseek_r+0x1e>
 8018e84:	6023      	str	r3, [r4, #0]
 8018e86:	bd38      	pop	{r3, r4, r5, pc}
 8018e88:	2000db6c 	.word	0x2000db6c

08018e8c <__swhatbuf_r>:
 8018e8c:	b570      	push	{r4, r5, r6, lr}
 8018e8e:	460e      	mov	r6, r1
 8018e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e94:	2900      	cmp	r1, #0
 8018e96:	b096      	sub	sp, #88	; 0x58
 8018e98:	4614      	mov	r4, r2
 8018e9a:	461d      	mov	r5, r3
 8018e9c:	da07      	bge.n	8018eae <__swhatbuf_r+0x22>
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	602b      	str	r3, [r5, #0]
 8018ea2:	89b3      	ldrh	r3, [r6, #12]
 8018ea4:	061a      	lsls	r2, r3, #24
 8018ea6:	d410      	bmi.n	8018eca <__swhatbuf_r+0x3e>
 8018ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018eac:	e00e      	b.n	8018ecc <__swhatbuf_r+0x40>
 8018eae:	466a      	mov	r2, sp
 8018eb0:	f000 fcc0 	bl	8019834 <_fstat_r>
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	dbf2      	blt.n	8018e9e <__swhatbuf_r+0x12>
 8018eb8:	9a01      	ldr	r2, [sp, #4]
 8018eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018ec2:	425a      	negs	r2, r3
 8018ec4:	415a      	adcs	r2, r3
 8018ec6:	602a      	str	r2, [r5, #0]
 8018ec8:	e7ee      	b.n	8018ea8 <__swhatbuf_r+0x1c>
 8018eca:	2340      	movs	r3, #64	; 0x40
 8018ecc:	2000      	movs	r0, #0
 8018ece:	6023      	str	r3, [r4, #0]
 8018ed0:	b016      	add	sp, #88	; 0x58
 8018ed2:	bd70      	pop	{r4, r5, r6, pc}

08018ed4 <__smakebuf_r>:
 8018ed4:	898b      	ldrh	r3, [r1, #12]
 8018ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ed8:	079d      	lsls	r5, r3, #30
 8018eda:	4606      	mov	r6, r0
 8018edc:	460c      	mov	r4, r1
 8018ede:	d507      	bpl.n	8018ef0 <__smakebuf_r+0x1c>
 8018ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018ee4:	6023      	str	r3, [r4, #0]
 8018ee6:	6123      	str	r3, [r4, #16]
 8018ee8:	2301      	movs	r3, #1
 8018eea:	6163      	str	r3, [r4, #20]
 8018eec:	b002      	add	sp, #8
 8018eee:	bd70      	pop	{r4, r5, r6, pc}
 8018ef0:	ab01      	add	r3, sp, #4
 8018ef2:	466a      	mov	r2, sp
 8018ef4:	f7ff ffca 	bl	8018e8c <__swhatbuf_r>
 8018ef8:	9900      	ldr	r1, [sp, #0]
 8018efa:	4605      	mov	r5, r0
 8018efc:	4630      	mov	r0, r6
 8018efe:	f7ff fbd9 	bl	80186b4 <_malloc_r>
 8018f02:	b948      	cbnz	r0, 8018f18 <__smakebuf_r+0x44>
 8018f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f08:	059a      	lsls	r2, r3, #22
 8018f0a:	d4ef      	bmi.n	8018eec <__smakebuf_r+0x18>
 8018f0c:	f023 0303 	bic.w	r3, r3, #3
 8018f10:	f043 0302 	orr.w	r3, r3, #2
 8018f14:	81a3      	strh	r3, [r4, #12]
 8018f16:	e7e3      	b.n	8018ee0 <__smakebuf_r+0xc>
 8018f18:	4b0d      	ldr	r3, [pc, #52]	; (8018f50 <__smakebuf_r+0x7c>)
 8018f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018f1c:	89a3      	ldrh	r3, [r4, #12]
 8018f1e:	6020      	str	r0, [r4, #0]
 8018f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f24:	81a3      	strh	r3, [r4, #12]
 8018f26:	9b00      	ldr	r3, [sp, #0]
 8018f28:	6163      	str	r3, [r4, #20]
 8018f2a:	9b01      	ldr	r3, [sp, #4]
 8018f2c:	6120      	str	r0, [r4, #16]
 8018f2e:	b15b      	cbz	r3, 8018f48 <__smakebuf_r+0x74>
 8018f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f34:	4630      	mov	r0, r6
 8018f36:	f000 fc8f 	bl	8019858 <_isatty_r>
 8018f3a:	b128      	cbz	r0, 8018f48 <__smakebuf_r+0x74>
 8018f3c:	89a3      	ldrh	r3, [r4, #12]
 8018f3e:	f023 0303 	bic.w	r3, r3, #3
 8018f42:	f043 0301 	orr.w	r3, r3, #1
 8018f46:	81a3      	strh	r3, [r4, #12]
 8018f48:	89a0      	ldrh	r0, [r4, #12]
 8018f4a:	4305      	orrs	r5, r0
 8018f4c:	81a5      	strh	r5, [r4, #12]
 8018f4e:	e7cd      	b.n	8018eec <__smakebuf_r+0x18>
 8018f50:	08018385 	.word	0x08018385

08018f54 <__malloc_lock>:
 8018f54:	4801      	ldr	r0, [pc, #4]	; (8018f5c <__malloc_lock+0x8>)
 8018f56:	f7ff bb0c 	b.w	8018572 <__retarget_lock_acquire_recursive>
 8018f5a:	bf00      	nop
 8018f5c:	2000db78 	.word	0x2000db78

08018f60 <__malloc_unlock>:
 8018f60:	4801      	ldr	r0, [pc, #4]	; (8018f68 <__malloc_unlock+0x8>)
 8018f62:	f7ff bb07 	b.w	8018574 <__retarget_lock_release_recursive>
 8018f66:	bf00      	nop
 8018f68:	2000db78 	.word	0x2000db78

08018f6c <__ssputs_r>:
 8018f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f70:	688e      	ldr	r6, [r1, #8]
 8018f72:	429e      	cmp	r6, r3
 8018f74:	4682      	mov	sl, r0
 8018f76:	460c      	mov	r4, r1
 8018f78:	4690      	mov	r8, r2
 8018f7a:	461f      	mov	r7, r3
 8018f7c:	d838      	bhi.n	8018ff0 <__ssputs_r+0x84>
 8018f7e:	898a      	ldrh	r2, [r1, #12]
 8018f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018f84:	d032      	beq.n	8018fec <__ssputs_r+0x80>
 8018f86:	6825      	ldr	r5, [r4, #0]
 8018f88:	6909      	ldr	r1, [r1, #16]
 8018f8a:	eba5 0901 	sub.w	r9, r5, r1
 8018f8e:	6965      	ldr	r5, [r4, #20]
 8018f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018f98:	3301      	adds	r3, #1
 8018f9a:	444b      	add	r3, r9
 8018f9c:	106d      	asrs	r5, r5, #1
 8018f9e:	429d      	cmp	r5, r3
 8018fa0:	bf38      	it	cc
 8018fa2:	461d      	movcc	r5, r3
 8018fa4:	0553      	lsls	r3, r2, #21
 8018fa6:	d531      	bpl.n	801900c <__ssputs_r+0xa0>
 8018fa8:	4629      	mov	r1, r5
 8018faa:	f7ff fb83 	bl	80186b4 <_malloc_r>
 8018fae:	4606      	mov	r6, r0
 8018fb0:	b950      	cbnz	r0, 8018fc8 <__ssputs_r+0x5c>
 8018fb2:	230c      	movs	r3, #12
 8018fb4:	f8ca 3000 	str.w	r3, [sl]
 8018fb8:	89a3      	ldrh	r3, [r4, #12]
 8018fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fbe:	81a3      	strh	r3, [r4, #12]
 8018fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8018fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fc8:	6921      	ldr	r1, [r4, #16]
 8018fca:	464a      	mov	r2, r9
 8018fcc:	f7ff faf2 	bl	80185b4 <memcpy>
 8018fd0:	89a3      	ldrh	r3, [r4, #12]
 8018fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fda:	81a3      	strh	r3, [r4, #12]
 8018fdc:	6126      	str	r6, [r4, #16]
 8018fde:	6165      	str	r5, [r4, #20]
 8018fe0:	444e      	add	r6, r9
 8018fe2:	eba5 0509 	sub.w	r5, r5, r9
 8018fe6:	6026      	str	r6, [r4, #0]
 8018fe8:	60a5      	str	r5, [r4, #8]
 8018fea:	463e      	mov	r6, r7
 8018fec:	42be      	cmp	r6, r7
 8018fee:	d900      	bls.n	8018ff2 <__ssputs_r+0x86>
 8018ff0:	463e      	mov	r6, r7
 8018ff2:	4632      	mov	r2, r6
 8018ff4:	6820      	ldr	r0, [r4, #0]
 8018ff6:	4641      	mov	r1, r8
 8018ff8:	f7ff faea 	bl	80185d0 <memmove>
 8018ffc:	68a3      	ldr	r3, [r4, #8]
 8018ffe:	6822      	ldr	r2, [r4, #0]
 8019000:	1b9b      	subs	r3, r3, r6
 8019002:	4432      	add	r2, r6
 8019004:	60a3      	str	r3, [r4, #8]
 8019006:	6022      	str	r2, [r4, #0]
 8019008:	2000      	movs	r0, #0
 801900a:	e7db      	b.n	8018fc4 <__ssputs_r+0x58>
 801900c:	462a      	mov	r2, r5
 801900e:	f000 fc33 	bl	8019878 <_realloc_r>
 8019012:	4606      	mov	r6, r0
 8019014:	2800      	cmp	r0, #0
 8019016:	d1e1      	bne.n	8018fdc <__ssputs_r+0x70>
 8019018:	6921      	ldr	r1, [r4, #16]
 801901a:	4650      	mov	r0, sl
 801901c:	f7ff fafa 	bl	8018614 <_free_r>
 8019020:	e7c7      	b.n	8018fb2 <__ssputs_r+0x46>
	...

08019024 <_svfiprintf_r>:
 8019024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019028:	4698      	mov	r8, r3
 801902a:	898b      	ldrh	r3, [r1, #12]
 801902c:	061b      	lsls	r3, r3, #24
 801902e:	b09d      	sub	sp, #116	; 0x74
 8019030:	4607      	mov	r7, r0
 8019032:	460d      	mov	r5, r1
 8019034:	4614      	mov	r4, r2
 8019036:	d50e      	bpl.n	8019056 <_svfiprintf_r+0x32>
 8019038:	690b      	ldr	r3, [r1, #16]
 801903a:	b963      	cbnz	r3, 8019056 <_svfiprintf_r+0x32>
 801903c:	2140      	movs	r1, #64	; 0x40
 801903e:	f7ff fb39 	bl	80186b4 <_malloc_r>
 8019042:	6028      	str	r0, [r5, #0]
 8019044:	6128      	str	r0, [r5, #16]
 8019046:	b920      	cbnz	r0, 8019052 <_svfiprintf_r+0x2e>
 8019048:	230c      	movs	r3, #12
 801904a:	603b      	str	r3, [r7, #0]
 801904c:	f04f 30ff 	mov.w	r0, #4294967295
 8019050:	e0d1      	b.n	80191f6 <_svfiprintf_r+0x1d2>
 8019052:	2340      	movs	r3, #64	; 0x40
 8019054:	616b      	str	r3, [r5, #20]
 8019056:	2300      	movs	r3, #0
 8019058:	9309      	str	r3, [sp, #36]	; 0x24
 801905a:	2320      	movs	r3, #32
 801905c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019060:	f8cd 800c 	str.w	r8, [sp, #12]
 8019064:	2330      	movs	r3, #48	; 0x30
 8019066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019210 <_svfiprintf_r+0x1ec>
 801906a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801906e:	f04f 0901 	mov.w	r9, #1
 8019072:	4623      	mov	r3, r4
 8019074:	469a      	mov	sl, r3
 8019076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801907a:	b10a      	cbz	r2, 8019080 <_svfiprintf_r+0x5c>
 801907c:	2a25      	cmp	r2, #37	; 0x25
 801907e:	d1f9      	bne.n	8019074 <_svfiprintf_r+0x50>
 8019080:	ebba 0b04 	subs.w	fp, sl, r4
 8019084:	d00b      	beq.n	801909e <_svfiprintf_r+0x7a>
 8019086:	465b      	mov	r3, fp
 8019088:	4622      	mov	r2, r4
 801908a:	4629      	mov	r1, r5
 801908c:	4638      	mov	r0, r7
 801908e:	f7ff ff6d 	bl	8018f6c <__ssputs_r>
 8019092:	3001      	adds	r0, #1
 8019094:	f000 80aa 	beq.w	80191ec <_svfiprintf_r+0x1c8>
 8019098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801909a:	445a      	add	r2, fp
 801909c:	9209      	str	r2, [sp, #36]	; 0x24
 801909e:	f89a 3000 	ldrb.w	r3, [sl]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	f000 80a2 	beq.w	80191ec <_svfiprintf_r+0x1c8>
 80190a8:	2300      	movs	r3, #0
 80190aa:	f04f 32ff 	mov.w	r2, #4294967295
 80190ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190b2:	f10a 0a01 	add.w	sl, sl, #1
 80190b6:	9304      	str	r3, [sp, #16]
 80190b8:	9307      	str	r3, [sp, #28]
 80190ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190be:	931a      	str	r3, [sp, #104]	; 0x68
 80190c0:	4654      	mov	r4, sl
 80190c2:	2205      	movs	r2, #5
 80190c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190c8:	4851      	ldr	r0, [pc, #324]	; (8019210 <_svfiprintf_r+0x1ec>)
 80190ca:	f7e7 f8b9 	bl	8000240 <memchr>
 80190ce:	9a04      	ldr	r2, [sp, #16]
 80190d0:	b9d8      	cbnz	r0, 801910a <_svfiprintf_r+0xe6>
 80190d2:	06d0      	lsls	r0, r2, #27
 80190d4:	bf44      	itt	mi
 80190d6:	2320      	movmi	r3, #32
 80190d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190dc:	0711      	lsls	r1, r2, #28
 80190de:	bf44      	itt	mi
 80190e0:	232b      	movmi	r3, #43	; 0x2b
 80190e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190e6:	f89a 3000 	ldrb.w	r3, [sl]
 80190ea:	2b2a      	cmp	r3, #42	; 0x2a
 80190ec:	d015      	beq.n	801911a <_svfiprintf_r+0xf6>
 80190ee:	9a07      	ldr	r2, [sp, #28]
 80190f0:	4654      	mov	r4, sl
 80190f2:	2000      	movs	r0, #0
 80190f4:	f04f 0c0a 	mov.w	ip, #10
 80190f8:	4621      	mov	r1, r4
 80190fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190fe:	3b30      	subs	r3, #48	; 0x30
 8019100:	2b09      	cmp	r3, #9
 8019102:	d94e      	bls.n	80191a2 <_svfiprintf_r+0x17e>
 8019104:	b1b0      	cbz	r0, 8019134 <_svfiprintf_r+0x110>
 8019106:	9207      	str	r2, [sp, #28]
 8019108:	e014      	b.n	8019134 <_svfiprintf_r+0x110>
 801910a:	eba0 0308 	sub.w	r3, r0, r8
 801910e:	fa09 f303 	lsl.w	r3, r9, r3
 8019112:	4313      	orrs	r3, r2
 8019114:	9304      	str	r3, [sp, #16]
 8019116:	46a2      	mov	sl, r4
 8019118:	e7d2      	b.n	80190c0 <_svfiprintf_r+0x9c>
 801911a:	9b03      	ldr	r3, [sp, #12]
 801911c:	1d19      	adds	r1, r3, #4
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	9103      	str	r1, [sp, #12]
 8019122:	2b00      	cmp	r3, #0
 8019124:	bfbb      	ittet	lt
 8019126:	425b      	neglt	r3, r3
 8019128:	f042 0202 	orrlt.w	r2, r2, #2
 801912c:	9307      	strge	r3, [sp, #28]
 801912e:	9307      	strlt	r3, [sp, #28]
 8019130:	bfb8      	it	lt
 8019132:	9204      	strlt	r2, [sp, #16]
 8019134:	7823      	ldrb	r3, [r4, #0]
 8019136:	2b2e      	cmp	r3, #46	; 0x2e
 8019138:	d10c      	bne.n	8019154 <_svfiprintf_r+0x130>
 801913a:	7863      	ldrb	r3, [r4, #1]
 801913c:	2b2a      	cmp	r3, #42	; 0x2a
 801913e:	d135      	bne.n	80191ac <_svfiprintf_r+0x188>
 8019140:	9b03      	ldr	r3, [sp, #12]
 8019142:	1d1a      	adds	r2, r3, #4
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	9203      	str	r2, [sp, #12]
 8019148:	2b00      	cmp	r3, #0
 801914a:	bfb8      	it	lt
 801914c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019150:	3402      	adds	r4, #2
 8019152:	9305      	str	r3, [sp, #20]
 8019154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019220 <_svfiprintf_r+0x1fc>
 8019158:	7821      	ldrb	r1, [r4, #0]
 801915a:	2203      	movs	r2, #3
 801915c:	4650      	mov	r0, sl
 801915e:	f7e7 f86f 	bl	8000240 <memchr>
 8019162:	b140      	cbz	r0, 8019176 <_svfiprintf_r+0x152>
 8019164:	2340      	movs	r3, #64	; 0x40
 8019166:	eba0 000a 	sub.w	r0, r0, sl
 801916a:	fa03 f000 	lsl.w	r0, r3, r0
 801916e:	9b04      	ldr	r3, [sp, #16]
 8019170:	4303      	orrs	r3, r0
 8019172:	3401      	adds	r4, #1
 8019174:	9304      	str	r3, [sp, #16]
 8019176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801917a:	4826      	ldr	r0, [pc, #152]	; (8019214 <_svfiprintf_r+0x1f0>)
 801917c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019180:	2206      	movs	r2, #6
 8019182:	f7e7 f85d 	bl	8000240 <memchr>
 8019186:	2800      	cmp	r0, #0
 8019188:	d038      	beq.n	80191fc <_svfiprintf_r+0x1d8>
 801918a:	4b23      	ldr	r3, [pc, #140]	; (8019218 <_svfiprintf_r+0x1f4>)
 801918c:	bb1b      	cbnz	r3, 80191d6 <_svfiprintf_r+0x1b2>
 801918e:	9b03      	ldr	r3, [sp, #12]
 8019190:	3307      	adds	r3, #7
 8019192:	f023 0307 	bic.w	r3, r3, #7
 8019196:	3308      	adds	r3, #8
 8019198:	9303      	str	r3, [sp, #12]
 801919a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801919c:	4433      	add	r3, r6
 801919e:	9309      	str	r3, [sp, #36]	; 0x24
 80191a0:	e767      	b.n	8019072 <_svfiprintf_r+0x4e>
 80191a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80191a6:	460c      	mov	r4, r1
 80191a8:	2001      	movs	r0, #1
 80191aa:	e7a5      	b.n	80190f8 <_svfiprintf_r+0xd4>
 80191ac:	2300      	movs	r3, #0
 80191ae:	3401      	adds	r4, #1
 80191b0:	9305      	str	r3, [sp, #20]
 80191b2:	4619      	mov	r1, r3
 80191b4:	f04f 0c0a 	mov.w	ip, #10
 80191b8:	4620      	mov	r0, r4
 80191ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191be:	3a30      	subs	r2, #48	; 0x30
 80191c0:	2a09      	cmp	r2, #9
 80191c2:	d903      	bls.n	80191cc <_svfiprintf_r+0x1a8>
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d0c5      	beq.n	8019154 <_svfiprintf_r+0x130>
 80191c8:	9105      	str	r1, [sp, #20]
 80191ca:	e7c3      	b.n	8019154 <_svfiprintf_r+0x130>
 80191cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80191d0:	4604      	mov	r4, r0
 80191d2:	2301      	movs	r3, #1
 80191d4:	e7f0      	b.n	80191b8 <_svfiprintf_r+0x194>
 80191d6:	ab03      	add	r3, sp, #12
 80191d8:	9300      	str	r3, [sp, #0]
 80191da:	462a      	mov	r2, r5
 80191dc:	4b0f      	ldr	r3, [pc, #60]	; (801921c <_svfiprintf_r+0x1f8>)
 80191de:	a904      	add	r1, sp, #16
 80191e0:	4638      	mov	r0, r7
 80191e2:	f3af 8000 	nop.w
 80191e6:	1c42      	adds	r2, r0, #1
 80191e8:	4606      	mov	r6, r0
 80191ea:	d1d6      	bne.n	801919a <_svfiprintf_r+0x176>
 80191ec:	89ab      	ldrh	r3, [r5, #12]
 80191ee:	065b      	lsls	r3, r3, #25
 80191f0:	f53f af2c 	bmi.w	801904c <_svfiprintf_r+0x28>
 80191f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191f6:	b01d      	add	sp, #116	; 0x74
 80191f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191fc:	ab03      	add	r3, sp, #12
 80191fe:	9300      	str	r3, [sp, #0]
 8019200:	462a      	mov	r2, r5
 8019202:	4b06      	ldr	r3, [pc, #24]	; (801921c <_svfiprintf_r+0x1f8>)
 8019204:	a904      	add	r1, sp, #16
 8019206:	4638      	mov	r0, r7
 8019208:	f000 f9d4 	bl	80195b4 <_printf_i>
 801920c:	e7eb      	b.n	80191e6 <_svfiprintf_r+0x1c2>
 801920e:	bf00      	nop
 8019210:	0801d74a 	.word	0x0801d74a
 8019214:	0801d754 	.word	0x0801d754
 8019218:	00000000 	.word	0x00000000
 801921c:	08018f6d 	.word	0x08018f6d
 8019220:	0801d750 	.word	0x0801d750

08019224 <__sfputc_r>:
 8019224:	6893      	ldr	r3, [r2, #8]
 8019226:	3b01      	subs	r3, #1
 8019228:	2b00      	cmp	r3, #0
 801922a:	b410      	push	{r4}
 801922c:	6093      	str	r3, [r2, #8]
 801922e:	da08      	bge.n	8019242 <__sfputc_r+0x1e>
 8019230:	6994      	ldr	r4, [r2, #24]
 8019232:	42a3      	cmp	r3, r4
 8019234:	db01      	blt.n	801923a <__sfputc_r+0x16>
 8019236:	290a      	cmp	r1, #10
 8019238:	d103      	bne.n	8019242 <__sfputc_r+0x1e>
 801923a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801923e:	f7ff bc3f 	b.w	8018ac0 <__swbuf_r>
 8019242:	6813      	ldr	r3, [r2, #0]
 8019244:	1c58      	adds	r0, r3, #1
 8019246:	6010      	str	r0, [r2, #0]
 8019248:	7019      	strb	r1, [r3, #0]
 801924a:	4608      	mov	r0, r1
 801924c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019250:	4770      	bx	lr

08019252 <__sfputs_r>:
 8019252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019254:	4606      	mov	r6, r0
 8019256:	460f      	mov	r7, r1
 8019258:	4614      	mov	r4, r2
 801925a:	18d5      	adds	r5, r2, r3
 801925c:	42ac      	cmp	r4, r5
 801925e:	d101      	bne.n	8019264 <__sfputs_r+0x12>
 8019260:	2000      	movs	r0, #0
 8019262:	e007      	b.n	8019274 <__sfputs_r+0x22>
 8019264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019268:	463a      	mov	r2, r7
 801926a:	4630      	mov	r0, r6
 801926c:	f7ff ffda 	bl	8019224 <__sfputc_r>
 8019270:	1c43      	adds	r3, r0, #1
 8019272:	d1f3      	bne.n	801925c <__sfputs_r+0xa>
 8019274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019278 <_vfiprintf_r>:
 8019278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927c:	460d      	mov	r5, r1
 801927e:	b09d      	sub	sp, #116	; 0x74
 8019280:	4614      	mov	r4, r2
 8019282:	4698      	mov	r8, r3
 8019284:	4606      	mov	r6, r0
 8019286:	b118      	cbz	r0, 8019290 <_vfiprintf_r+0x18>
 8019288:	6983      	ldr	r3, [r0, #24]
 801928a:	b90b      	cbnz	r3, 8019290 <_vfiprintf_r+0x18>
 801928c:	f7ff f8ae 	bl	80183ec <__sinit>
 8019290:	4b89      	ldr	r3, [pc, #548]	; (80194b8 <_vfiprintf_r+0x240>)
 8019292:	429d      	cmp	r5, r3
 8019294:	d11b      	bne.n	80192ce <_vfiprintf_r+0x56>
 8019296:	6875      	ldr	r5, [r6, #4]
 8019298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801929a:	07d9      	lsls	r1, r3, #31
 801929c:	d405      	bmi.n	80192aa <_vfiprintf_r+0x32>
 801929e:	89ab      	ldrh	r3, [r5, #12]
 80192a0:	059a      	lsls	r2, r3, #22
 80192a2:	d402      	bmi.n	80192aa <_vfiprintf_r+0x32>
 80192a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192a6:	f7ff f964 	bl	8018572 <__retarget_lock_acquire_recursive>
 80192aa:	89ab      	ldrh	r3, [r5, #12]
 80192ac:	071b      	lsls	r3, r3, #28
 80192ae:	d501      	bpl.n	80192b4 <_vfiprintf_r+0x3c>
 80192b0:	692b      	ldr	r3, [r5, #16]
 80192b2:	b9eb      	cbnz	r3, 80192f0 <_vfiprintf_r+0x78>
 80192b4:	4629      	mov	r1, r5
 80192b6:	4630      	mov	r0, r6
 80192b8:	f7ff fc66 	bl	8018b88 <__swsetup_r>
 80192bc:	b1c0      	cbz	r0, 80192f0 <_vfiprintf_r+0x78>
 80192be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80192c0:	07dc      	lsls	r4, r3, #31
 80192c2:	d50e      	bpl.n	80192e2 <_vfiprintf_r+0x6a>
 80192c4:	f04f 30ff 	mov.w	r0, #4294967295
 80192c8:	b01d      	add	sp, #116	; 0x74
 80192ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ce:	4b7b      	ldr	r3, [pc, #492]	; (80194bc <_vfiprintf_r+0x244>)
 80192d0:	429d      	cmp	r5, r3
 80192d2:	d101      	bne.n	80192d8 <_vfiprintf_r+0x60>
 80192d4:	68b5      	ldr	r5, [r6, #8]
 80192d6:	e7df      	b.n	8019298 <_vfiprintf_r+0x20>
 80192d8:	4b79      	ldr	r3, [pc, #484]	; (80194c0 <_vfiprintf_r+0x248>)
 80192da:	429d      	cmp	r5, r3
 80192dc:	bf08      	it	eq
 80192de:	68f5      	ldreq	r5, [r6, #12]
 80192e0:	e7da      	b.n	8019298 <_vfiprintf_r+0x20>
 80192e2:	89ab      	ldrh	r3, [r5, #12]
 80192e4:	0598      	lsls	r0, r3, #22
 80192e6:	d4ed      	bmi.n	80192c4 <_vfiprintf_r+0x4c>
 80192e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192ea:	f7ff f943 	bl	8018574 <__retarget_lock_release_recursive>
 80192ee:	e7e9      	b.n	80192c4 <_vfiprintf_r+0x4c>
 80192f0:	2300      	movs	r3, #0
 80192f2:	9309      	str	r3, [sp, #36]	; 0x24
 80192f4:	2320      	movs	r3, #32
 80192f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80192fe:	2330      	movs	r3, #48	; 0x30
 8019300:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80194c4 <_vfiprintf_r+0x24c>
 8019304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019308:	f04f 0901 	mov.w	r9, #1
 801930c:	4623      	mov	r3, r4
 801930e:	469a      	mov	sl, r3
 8019310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019314:	b10a      	cbz	r2, 801931a <_vfiprintf_r+0xa2>
 8019316:	2a25      	cmp	r2, #37	; 0x25
 8019318:	d1f9      	bne.n	801930e <_vfiprintf_r+0x96>
 801931a:	ebba 0b04 	subs.w	fp, sl, r4
 801931e:	d00b      	beq.n	8019338 <_vfiprintf_r+0xc0>
 8019320:	465b      	mov	r3, fp
 8019322:	4622      	mov	r2, r4
 8019324:	4629      	mov	r1, r5
 8019326:	4630      	mov	r0, r6
 8019328:	f7ff ff93 	bl	8019252 <__sfputs_r>
 801932c:	3001      	adds	r0, #1
 801932e:	f000 80aa 	beq.w	8019486 <_vfiprintf_r+0x20e>
 8019332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019334:	445a      	add	r2, fp
 8019336:	9209      	str	r2, [sp, #36]	; 0x24
 8019338:	f89a 3000 	ldrb.w	r3, [sl]
 801933c:	2b00      	cmp	r3, #0
 801933e:	f000 80a2 	beq.w	8019486 <_vfiprintf_r+0x20e>
 8019342:	2300      	movs	r3, #0
 8019344:	f04f 32ff 	mov.w	r2, #4294967295
 8019348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801934c:	f10a 0a01 	add.w	sl, sl, #1
 8019350:	9304      	str	r3, [sp, #16]
 8019352:	9307      	str	r3, [sp, #28]
 8019354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019358:	931a      	str	r3, [sp, #104]	; 0x68
 801935a:	4654      	mov	r4, sl
 801935c:	2205      	movs	r2, #5
 801935e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019362:	4858      	ldr	r0, [pc, #352]	; (80194c4 <_vfiprintf_r+0x24c>)
 8019364:	f7e6 ff6c 	bl	8000240 <memchr>
 8019368:	9a04      	ldr	r2, [sp, #16]
 801936a:	b9d8      	cbnz	r0, 80193a4 <_vfiprintf_r+0x12c>
 801936c:	06d1      	lsls	r1, r2, #27
 801936e:	bf44      	itt	mi
 8019370:	2320      	movmi	r3, #32
 8019372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019376:	0713      	lsls	r3, r2, #28
 8019378:	bf44      	itt	mi
 801937a:	232b      	movmi	r3, #43	; 0x2b
 801937c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019380:	f89a 3000 	ldrb.w	r3, [sl]
 8019384:	2b2a      	cmp	r3, #42	; 0x2a
 8019386:	d015      	beq.n	80193b4 <_vfiprintf_r+0x13c>
 8019388:	9a07      	ldr	r2, [sp, #28]
 801938a:	4654      	mov	r4, sl
 801938c:	2000      	movs	r0, #0
 801938e:	f04f 0c0a 	mov.w	ip, #10
 8019392:	4621      	mov	r1, r4
 8019394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019398:	3b30      	subs	r3, #48	; 0x30
 801939a:	2b09      	cmp	r3, #9
 801939c:	d94e      	bls.n	801943c <_vfiprintf_r+0x1c4>
 801939e:	b1b0      	cbz	r0, 80193ce <_vfiprintf_r+0x156>
 80193a0:	9207      	str	r2, [sp, #28]
 80193a2:	e014      	b.n	80193ce <_vfiprintf_r+0x156>
 80193a4:	eba0 0308 	sub.w	r3, r0, r8
 80193a8:	fa09 f303 	lsl.w	r3, r9, r3
 80193ac:	4313      	orrs	r3, r2
 80193ae:	9304      	str	r3, [sp, #16]
 80193b0:	46a2      	mov	sl, r4
 80193b2:	e7d2      	b.n	801935a <_vfiprintf_r+0xe2>
 80193b4:	9b03      	ldr	r3, [sp, #12]
 80193b6:	1d19      	adds	r1, r3, #4
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	9103      	str	r1, [sp, #12]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	bfbb      	ittet	lt
 80193c0:	425b      	neglt	r3, r3
 80193c2:	f042 0202 	orrlt.w	r2, r2, #2
 80193c6:	9307      	strge	r3, [sp, #28]
 80193c8:	9307      	strlt	r3, [sp, #28]
 80193ca:	bfb8      	it	lt
 80193cc:	9204      	strlt	r2, [sp, #16]
 80193ce:	7823      	ldrb	r3, [r4, #0]
 80193d0:	2b2e      	cmp	r3, #46	; 0x2e
 80193d2:	d10c      	bne.n	80193ee <_vfiprintf_r+0x176>
 80193d4:	7863      	ldrb	r3, [r4, #1]
 80193d6:	2b2a      	cmp	r3, #42	; 0x2a
 80193d8:	d135      	bne.n	8019446 <_vfiprintf_r+0x1ce>
 80193da:	9b03      	ldr	r3, [sp, #12]
 80193dc:	1d1a      	adds	r2, r3, #4
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	9203      	str	r2, [sp, #12]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	bfb8      	it	lt
 80193e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80193ea:	3402      	adds	r4, #2
 80193ec:	9305      	str	r3, [sp, #20]
 80193ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80194d4 <_vfiprintf_r+0x25c>
 80193f2:	7821      	ldrb	r1, [r4, #0]
 80193f4:	2203      	movs	r2, #3
 80193f6:	4650      	mov	r0, sl
 80193f8:	f7e6 ff22 	bl	8000240 <memchr>
 80193fc:	b140      	cbz	r0, 8019410 <_vfiprintf_r+0x198>
 80193fe:	2340      	movs	r3, #64	; 0x40
 8019400:	eba0 000a 	sub.w	r0, r0, sl
 8019404:	fa03 f000 	lsl.w	r0, r3, r0
 8019408:	9b04      	ldr	r3, [sp, #16]
 801940a:	4303      	orrs	r3, r0
 801940c:	3401      	adds	r4, #1
 801940e:	9304      	str	r3, [sp, #16]
 8019410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019414:	482c      	ldr	r0, [pc, #176]	; (80194c8 <_vfiprintf_r+0x250>)
 8019416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801941a:	2206      	movs	r2, #6
 801941c:	f7e6 ff10 	bl	8000240 <memchr>
 8019420:	2800      	cmp	r0, #0
 8019422:	d03f      	beq.n	80194a4 <_vfiprintf_r+0x22c>
 8019424:	4b29      	ldr	r3, [pc, #164]	; (80194cc <_vfiprintf_r+0x254>)
 8019426:	bb1b      	cbnz	r3, 8019470 <_vfiprintf_r+0x1f8>
 8019428:	9b03      	ldr	r3, [sp, #12]
 801942a:	3307      	adds	r3, #7
 801942c:	f023 0307 	bic.w	r3, r3, #7
 8019430:	3308      	adds	r3, #8
 8019432:	9303      	str	r3, [sp, #12]
 8019434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019436:	443b      	add	r3, r7
 8019438:	9309      	str	r3, [sp, #36]	; 0x24
 801943a:	e767      	b.n	801930c <_vfiprintf_r+0x94>
 801943c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019440:	460c      	mov	r4, r1
 8019442:	2001      	movs	r0, #1
 8019444:	e7a5      	b.n	8019392 <_vfiprintf_r+0x11a>
 8019446:	2300      	movs	r3, #0
 8019448:	3401      	adds	r4, #1
 801944a:	9305      	str	r3, [sp, #20]
 801944c:	4619      	mov	r1, r3
 801944e:	f04f 0c0a 	mov.w	ip, #10
 8019452:	4620      	mov	r0, r4
 8019454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019458:	3a30      	subs	r2, #48	; 0x30
 801945a:	2a09      	cmp	r2, #9
 801945c:	d903      	bls.n	8019466 <_vfiprintf_r+0x1ee>
 801945e:	2b00      	cmp	r3, #0
 8019460:	d0c5      	beq.n	80193ee <_vfiprintf_r+0x176>
 8019462:	9105      	str	r1, [sp, #20]
 8019464:	e7c3      	b.n	80193ee <_vfiprintf_r+0x176>
 8019466:	fb0c 2101 	mla	r1, ip, r1, r2
 801946a:	4604      	mov	r4, r0
 801946c:	2301      	movs	r3, #1
 801946e:	e7f0      	b.n	8019452 <_vfiprintf_r+0x1da>
 8019470:	ab03      	add	r3, sp, #12
 8019472:	9300      	str	r3, [sp, #0]
 8019474:	462a      	mov	r2, r5
 8019476:	4b16      	ldr	r3, [pc, #88]	; (80194d0 <_vfiprintf_r+0x258>)
 8019478:	a904      	add	r1, sp, #16
 801947a:	4630      	mov	r0, r6
 801947c:	f3af 8000 	nop.w
 8019480:	4607      	mov	r7, r0
 8019482:	1c78      	adds	r0, r7, #1
 8019484:	d1d6      	bne.n	8019434 <_vfiprintf_r+0x1bc>
 8019486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019488:	07d9      	lsls	r1, r3, #31
 801948a:	d405      	bmi.n	8019498 <_vfiprintf_r+0x220>
 801948c:	89ab      	ldrh	r3, [r5, #12]
 801948e:	059a      	lsls	r2, r3, #22
 8019490:	d402      	bmi.n	8019498 <_vfiprintf_r+0x220>
 8019492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019494:	f7ff f86e 	bl	8018574 <__retarget_lock_release_recursive>
 8019498:	89ab      	ldrh	r3, [r5, #12]
 801949a:	065b      	lsls	r3, r3, #25
 801949c:	f53f af12 	bmi.w	80192c4 <_vfiprintf_r+0x4c>
 80194a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194a2:	e711      	b.n	80192c8 <_vfiprintf_r+0x50>
 80194a4:	ab03      	add	r3, sp, #12
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	462a      	mov	r2, r5
 80194aa:	4b09      	ldr	r3, [pc, #36]	; (80194d0 <_vfiprintf_r+0x258>)
 80194ac:	a904      	add	r1, sp, #16
 80194ae:	4630      	mov	r0, r6
 80194b0:	f000 f880 	bl	80195b4 <_printf_i>
 80194b4:	e7e4      	b.n	8019480 <_vfiprintf_r+0x208>
 80194b6:	bf00      	nop
 80194b8:	0801d654 	.word	0x0801d654
 80194bc:	0801d674 	.word	0x0801d674
 80194c0:	0801d634 	.word	0x0801d634
 80194c4:	0801d74a 	.word	0x0801d74a
 80194c8:	0801d754 	.word	0x0801d754
 80194cc:	00000000 	.word	0x00000000
 80194d0:	08019253 	.word	0x08019253
 80194d4:	0801d750 	.word	0x0801d750

080194d8 <_printf_common>:
 80194d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194dc:	4616      	mov	r6, r2
 80194de:	4699      	mov	r9, r3
 80194e0:	688a      	ldr	r2, [r1, #8]
 80194e2:	690b      	ldr	r3, [r1, #16]
 80194e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80194e8:	4293      	cmp	r3, r2
 80194ea:	bfb8      	it	lt
 80194ec:	4613      	movlt	r3, r2
 80194ee:	6033      	str	r3, [r6, #0]
 80194f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80194f4:	4607      	mov	r7, r0
 80194f6:	460c      	mov	r4, r1
 80194f8:	b10a      	cbz	r2, 80194fe <_printf_common+0x26>
 80194fa:	3301      	adds	r3, #1
 80194fc:	6033      	str	r3, [r6, #0]
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	0699      	lsls	r1, r3, #26
 8019502:	bf42      	ittt	mi
 8019504:	6833      	ldrmi	r3, [r6, #0]
 8019506:	3302      	addmi	r3, #2
 8019508:	6033      	strmi	r3, [r6, #0]
 801950a:	6825      	ldr	r5, [r4, #0]
 801950c:	f015 0506 	ands.w	r5, r5, #6
 8019510:	d106      	bne.n	8019520 <_printf_common+0x48>
 8019512:	f104 0a19 	add.w	sl, r4, #25
 8019516:	68e3      	ldr	r3, [r4, #12]
 8019518:	6832      	ldr	r2, [r6, #0]
 801951a:	1a9b      	subs	r3, r3, r2
 801951c:	42ab      	cmp	r3, r5
 801951e:	dc26      	bgt.n	801956e <_printf_common+0x96>
 8019520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019524:	1e13      	subs	r3, r2, #0
 8019526:	6822      	ldr	r2, [r4, #0]
 8019528:	bf18      	it	ne
 801952a:	2301      	movne	r3, #1
 801952c:	0692      	lsls	r2, r2, #26
 801952e:	d42b      	bmi.n	8019588 <_printf_common+0xb0>
 8019530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019534:	4649      	mov	r1, r9
 8019536:	4638      	mov	r0, r7
 8019538:	47c0      	blx	r8
 801953a:	3001      	adds	r0, #1
 801953c:	d01e      	beq.n	801957c <_printf_common+0xa4>
 801953e:	6823      	ldr	r3, [r4, #0]
 8019540:	68e5      	ldr	r5, [r4, #12]
 8019542:	6832      	ldr	r2, [r6, #0]
 8019544:	f003 0306 	and.w	r3, r3, #6
 8019548:	2b04      	cmp	r3, #4
 801954a:	bf08      	it	eq
 801954c:	1aad      	subeq	r5, r5, r2
 801954e:	68a3      	ldr	r3, [r4, #8]
 8019550:	6922      	ldr	r2, [r4, #16]
 8019552:	bf0c      	ite	eq
 8019554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019558:	2500      	movne	r5, #0
 801955a:	4293      	cmp	r3, r2
 801955c:	bfc4      	itt	gt
 801955e:	1a9b      	subgt	r3, r3, r2
 8019560:	18ed      	addgt	r5, r5, r3
 8019562:	2600      	movs	r6, #0
 8019564:	341a      	adds	r4, #26
 8019566:	42b5      	cmp	r5, r6
 8019568:	d11a      	bne.n	80195a0 <_printf_common+0xc8>
 801956a:	2000      	movs	r0, #0
 801956c:	e008      	b.n	8019580 <_printf_common+0xa8>
 801956e:	2301      	movs	r3, #1
 8019570:	4652      	mov	r2, sl
 8019572:	4649      	mov	r1, r9
 8019574:	4638      	mov	r0, r7
 8019576:	47c0      	blx	r8
 8019578:	3001      	adds	r0, #1
 801957a:	d103      	bne.n	8019584 <_printf_common+0xac>
 801957c:	f04f 30ff 	mov.w	r0, #4294967295
 8019580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019584:	3501      	adds	r5, #1
 8019586:	e7c6      	b.n	8019516 <_printf_common+0x3e>
 8019588:	18e1      	adds	r1, r4, r3
 801958a:	1c5a      	adds	r2, r3, #1
 801958c:	2030      	movs	r0, #48	; 0x30
 801958e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019592:	4422      	add	r2, r4
 8019594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801959c:	3302      	adds	r3, #2
 801959e:	e7c7      	b.n	8019530 <_printf_common+0x58>
 80195a0:	2301      	movs	r3, #1
 80195a2:	4622      	mov	r2, r4
 80195a4:	4649      	mov	r1, r9
 80195a6:	4638      	mov	r0, r7
 80195a8:	47c0      	blx	r8
 80195aa:	3001      	adds	r0, #1
 80195ac:	d0e6      	beq.n	801957c <_printf_common+0xa4>
 80195ae:	3601      	adds	r6, #1
 80195b0:	e7d9      	b.n	8019566 <_printf_common+0x8e>
	...

080195b4 <_printf_i>:
 80195b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80195b8:	460c      	mov	r4, r1
 80195ba:	4691      	mov	r9, r2
 80195bc:	7e27      	ldrb	r7, [r4, #24]
 80195be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80195c0:	2f78      	cmp	r7, #120	; 0x78
 80195c2:	4680      	mov	r8, r0
 80195c4:	469a      	mov	sl, r3
 80195c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80195ca:	d807      	bhi.n	80195dc <_printf_i+0x28>
 80195cc:	2f62      	cmp	r7, #98	; 0x62
 80195ce:	d80a      	bhi.n	80195e6 <_printf_i+0x32>
 80195d0:	2f00      	cmp	r7, #0
 80195d2:	f000 80d8 	beq.w	8019786 <_printf_i+0x1d2>
 80195d6:	2f58      	cmp	r7, #88	; 0x58
 80195d8:	f000 80a3 	beq.w	8019722 <_printf_i+0x16e>
 80195dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80195e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80195e4:	e03a      	b.n	801965c <_printf_i+0xa8>
 80195e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80195ea:	2b15      	cmp	r3, #21
 80195ec:	d8f6      	bhi.n	80195dc <_printf_i+0x28>
 80195ee:	a001      	add	r0, pc, #4	; (adr r0, 80195f4 <_printf_i+0x40>)
 80195f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80195f4:	0801964d 	.word	0x0801964d
 80195f8:	08019661 	.word	0x08019661
 80195fc:	080195dd 	.word	0x080195dd
 8019600:	080195dd 	.word	0x080195dd
 8019604:	080195dd 	.word	0x080195dd
 8019608:	080195dd 	.word	0x080195dd
 801960c:	08019661 	.word	0x08019661
 8019610:	080195dd 	.word	0x080195dd
 8019614:	080195dd 	.word	0x080195dd
 8019618:	080195dd 	.word	0x080195dd
 801961c:	080195dd 	.word	0x080195dd
 8019620:	0801976d 	.word	0x0801976d
 8019624:	08019691 	.word	0x08019691
 8019628:	0801974f 	.word	0x0801974f
 801962c:	080195dd 	.word	0x080195dd
 8019630:	080195dd 	.word	0x080195dd
 8019634:	0801978f 	.word	0x0801978f
 8019638:	080195dd 	.word	0x080195dd
 801963c:	08019691 	.word	0x08019691
 8019640:	080195dd 	.word	0x080195dd
 8019644:	080195dd 	.word	0x080195dd
 8019648:	08019757 	.word	0x08019757
 801964c:	680b      	ldr	r3, [r1, #0]
 801964e:	1d1a      	adds	r2, r3, #4
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	600a      	str	r2, [r1, #0]
 8019654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801965c:	2301      	movs	r3, #1
 801965e:	e0a3      	b.n	80197a8 <_printf_i+0x1f4>
 8019660:	6825      	ldr	r5, [r4, #0]
 8019662:	6808      	ldr	r0, [r1, #0]
 8019664:	062e      	lsls	r6, r5, #24
 8019666:	f100 0304 	add.w	r3, r0, #4
 801966a:	d50a      	bpl.n	8019682 <_printf_i+0xce>
 801966c:	6805      	ldr	r5, [r0, #0]
 801966e:	600b      	str	r3, [r1, #0]
 8019670:	2d00      	cmp	r5, #0
 8019672:	da03      	bge.n	801967c <_printf_i+0xc8>
 8019674:	232d      	movs	r3, #45	; 0x2d
 8019676:	426d      	negs	r5, r5
 8019678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801967c:	485e      	ldr	r0, [pc, #376]	; (80197f8 <_printf_i+0x244>)
 801967e:	230a      	movs	r3, #10
 8019680:	e019      	b.n	80196b6 <_printf_i+0x102>
 8019682:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019686:	6805      	ldr	r5, [r0, #0]
 8019688:	600b      	str	r3, [r1, #0]
 801968a:	bf18      	it	ne
 801968c:	b22d      	sxthne	r5, r5
 801968e:	e7ef      	b.n	8019670 <_printf_i+0xbc>
 8019690:	680b      	ldr	r3, [r1, #0]
 8019692:	6825      	ldr	r5, [r4, #0]
 8019694:	1d18      	adds	r0, r3, #4
 8019696:	6008      	str	r0, [r1, #0]
 8019698:	0628      	lsls	r0, r5, #24
 801969a:	d501      	bpl.n	80196a0 <_printf_i+0xec>
 801969c:	681d      	ldr	r5, [r3, #0]
 801969e:	e002      	b.n	80196a6 <_printf_i+0xf2>
 80196a0:	0669      	lsls	r1, r5, #25
 80196a2:	d5fb      	bpl.n	801969c <_printf_i+0xe8>
 80196a4:	881d      	ldrh	r5, [r3, #0]
 80196a6:	4854      	ldr	r0, [pc, #336]	; (80197f8 <_printf_i+0x244>)
 80196a8:	2f6f      	cmp	r7, #111	; 0x6f
 80196aa:	bf0c      	ite	eq
 80196ac:	2308      	moveq	r3, #8
 80196ae:	230a      	movne	r3, #10
 80196b0:	2100      	movs	r1, #0
 80196b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80196b6:	6866      	ldr	r6, [r4, #4]
 80196b8:	60a6      	str	r6, [r4, #8]
 80196ba:	2e00      	cmp	r6, #0
 80196bc:	bfa2      	ittt	ge
 80196be:	6821      	ldrge	r1, [r4, #0]
 80196c0:	f021 0104 	bicge.w	r1, r1, #4
 80196c4:	6021      	strge	r1, [r4, #0]
 80196c6:	b90d      	cbnz	r5, 80196cc <_printf_i+0x118>
 80196c8:	2e00      	cmp	r6, #0
 80196ca:	d04d      	beq.n	8019768 <_printf_i+0x1b4>
 80196cc:	4616      	mov	r6, r2
 80196ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80196d2:	fb03 5711 	mls	r7, r3, r1, r5
 80196d6:	5dc7      	ldrb	r7, [r0, r7]
 80196d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80196dc:	462f      	mov	r7, r5
 80196de:	42bb      	cmp	r3, r7
 80196e0:	460d      	mov	r5, r1
 80196e2:	d9f4      	bls.n	80196ce <_printf_i+0x11a>
 80196e4:	2b08      	cmp	r3, #8
 80196e6:	d10b      	bne.n	8019700 <_printf_i+0x14c>
 80196e8:	6823      	ldr	r3, [r4, #0]
 80196ea:	07df      	lsls	r7, r3, #31
 80196ec:	d508      	bpl.n	8019700 <_printf_i+0x14c>
 80196ee:	6923      	ldr	r3, [r4, #16]
 80196f0:	6861      	ldr	r1, [r4, #4]
 80196f2:	4299      	cmp	r1, r3
 80196f4:	bfde      	ittt	le
 80196f6:	2330      	movle	r3, #48	; 0x30
 80196f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80196fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019700:	1b92      	subs	r2, r2, r6
 8019702:	6122      	str	r2, [r4, #16]
 8019704:	f8cd a000 	str.w	sl, [sp]
 8019708:	464b      	mov	r3, r9
 801970a:	aa03      	add	r2, sp, #12
 801970c:	4621      	mov	r1, r4
 801970e:	4640      	mov	r0, r8
 8019710:	f7ff fee2 	bl	80194d8 <_printf_common>
 8019714:	3001      	adds	r0, #1
 8019716:	d14c      	bne.n	80197b2 <_printf_i+0x1fe>
 8019718:	f04f 30ff 	mov.w	r0, #4294967295
 801971c:	b004      	add	sp, #16
 801971e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019722:	4835      	ldr	r0, [pc, #212]	; (80197f8 <_printf_i+0x244>)
 8019724:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019728:	6823      	ldr	r3, [r4, #0]
 801972a:	680e      	ldr	r6, [r1, #0]
 801972c:	061f      	lsls	r7, r3, #24
 801972e:	f856 5b04 	ldr.w	r5, [r6], #4
 8019732:	600e      	str	r6, [r1, #0]
 8019734:	d514      	bpl.n	8019760 <_printf_i+0x1ac>
 8019736:	07d9      	lsls	r1, r3, #31
 8019738:	bf44      	itt	mi
 801973a:	f043 0320 	orrmi.w	r3, r3, #32
 801973e:	6023      	strmi	r3, [r4, #0]
 8019740:	b91d      	cbnz	r5, 801974a <_printf_i+0x196>
 8019742:	6823      	ldr	r3, [r4, #0]
 8019744:	f023 0320 	bic.w	r3, r3, #32
 8019748:	6023      	str	r3, [r4, #0]
 801974a:	2310      	movs	r3, #16
 801974c:	e7b0      	b.n	80196b0 <_printf_i+0xfc>
 801974e:	6823      	ldr	r3, [r4, #0]
 8019750:	f043 0320 	orr.w	r3, r3, #32
 8019754:	6023      	str	r3, [r4, #0]
 8019756:	2378      	movs	r3, #120	; 0x78
 8019758:	4828      	ldr	r0, [pc, #160]	; (80197fc <_printf_i+0x248>)
 801975a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801975e:	e7e3      	b.n	8019728 <_printf_i+0x174>
 8019760:	065e      	lsls	r6, r3, #25
 8019762:	bf48      	it	mi
 8019764:	b2ad      	uxthmi	r5, r5
 8019766:	e7e6      	b.n	8019736 <_printf_i+0x182>
 8019768:	4616      	mov	r6, r2
 801976a:	e7bb      	b.n	80196e4 <_printf_i+0x130>
 801976c:	680b      	ldr	r3, [r1, #0]
 801976e:	6826      	ldr	r6, [r4, #0]
 8019770:	6960      	ldr	r0, [r4, #20]
 8019772:	1d1d      	adds	r5, r3, #4
 8019774:	600d      	str	r5, [r1, #0]
 8019776:	0635      	lsls	r5, r6, #24
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	d501      	bpl.n	8019780 <_printf_i+0x1cc>
 801977c:	6018      	str	r0, [r3, #0]
 801977e:	e002      	b.n	8019786 <_printf_i+0x1d2>
 8019780:	0671      	lsls	r1, r6, #25
 8019782:	d5fb      	bpl.n	801977c <_printf_i+0x1c8>
 8019784:	8018      	strh	r0, [r3, #0]
 8019786:	2300      	movs	r3, #0
 8019788:	6123      	str	r3, [r4, #16]
 801978a:	4616      	mov	r6, r2
 801978c:	e7ba      	b.n	8019704 <_printf_i+0x150>
 801978e:	680b      	ldr	r3, [r1, #0]
 8019790:	1d1a      	adds	r2, r3, #4
 8019792:	600a      	str	r2, [r1, #0]
 8019794:	681e      	ldr	r6, [r3, #0]
 8019796:	6862      	ldr	r2, [r4, #4]
 8019798:	2100      	movs	r1, #0
 801979a:	4630      	mov	r0, r6
 801979c:	f7e6 fd50 	bl	8000240 <memchr>
 80197a0:	b108      	cbz	r0, 80197a6 <_printf_i+0x1f2>
 80197a2:	1b80      	subs	r0, r0, r6
 80197a4:	6060      	str	r0, [r4, #4]
 80197a6:	6863      	ldr	r3, [r4, #4]
 80197a8:	6123      	str	r3, [r4, #16]
 80197aa:	2300      	movs	r3, #0
 80197ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80197b0:	e7a8      	b.n	8019704 <_printf_i+0x150>
 80197b2:	6923      	ldr	r3, [r4, #16]
 80197b4:	4632      	mov	r2, r6
 80197b6:	4649      	mov	r1, r9
 80197b8:	4640      	mov	r0, r8
 80197ba:	47d0      	blx	sl
 80197bc:	3001      	adds	r0, #1
 80197be:	d0ab      	beq.n	8019718 <_printf_i+0x164>
 80197c0:	6823      	ldr	r3, [r4, #0]
 80197c2:	079b      	lsls	r3, r3, #30
 80197c4:	d413      	bmi.n	80197ee <_printf_i+0x23a>
 80197c6:	68e0      	ldr	r0, [r4, #12]
 80197c8:	9b03      	ldr	r3, [sp, #12]
 80197ca:	4298      	cmp	r0, r3
 80197cc:	bfb8      	it	lt
 80197ce:	4618      	movlt	r0, r3
 80197d0:	e7a4      	b.n	801971c <_printf_i+0x168>
 80197d2:	2301      	movs	r3, #1
 80197d4:	4632      	mov	r2, r6
 80197d6:	4649      	mov	r1, r9
 80197d8:	4640      	mov	r0, r8
 80197da:	47d0      	blx	sl
 80197dc:	3001      	adds	r0, #1
 80197de:	d09b      	beq.n	8019718 <_printf_i+0x164>
 80197e0:	3501      	adds	r5, #1
 80197e2:	68e3      	ldr	r3, [r4, #12]
 80197e4:	9903      	ldr	r1, [sp, #12]
 80197e6:	1a5b      	subs	r3, r3, r1
 80197e8:	42ab      	cmp	r3, r5
 80197ea:	dcf2      	bgt.n	80197d2 <_printf_i+0x21e>
 80197ec:	e7eb      	b.n	80197c6 <_printf_i+0x212>
 80197ee:	2500      	movs	r5, #0
 80197f0:	f104 0619 	add.w	r6, r4, #25
 80197f4:	e7f5      	b.n	80197e2 <_printf_i+0x22e>
 80197f6:	bf00      	nop
 80197f8:	0801d75b 	.word	0x0801d75b
 80197fc:	0801d76c 	.word	0x0801d76c

08019800 <_read_r>:
 8019800:	b538      	push	{r3, r4, r5, lr}
 8019802:	4d07      	ldr	r5, [pc, #28]	; (8019820 <_read_r+0x20>)
 8019804:	4604      	mov	r4, r0
 8019806:	4608      	mov	r0, r1
 8019808:	4611      	mov	r1, r2
 801980a:	2200      	movs	r2, #0
 801980c:	602a      	str	r2, [r5, #0]
 801980e:	461a      	mov	r2, r3
 8019810:	f7e8 f8d4 	bl	80019bc <_read>
 8019814:	1c43      	adds	r3, r0, #1
 8019816:	d102      	bne.n	801981e <_read_r+0x1e>
 8019818:	682b      	ldr	r3, [r5, #0]
 801981a:	b103      	cbz	r3, 801981e <_read_r+0x1e>
 801981c:	6023      	str	r3, [r4, #0]
 801981e:	bd38      	pop	{r3, r4, r5, pc}
 8019820:	2000db6c 	.word	0x2000db6c

08019824 <abort>:
 8019824:	b508      	push	{r3, lr}
 8019826:	2006      	movs	r0, #6
 8019828:	f000 f874 	bl	8019914 <raise>
 801982c:	2001      	movs	r0, #1
 801982e:	f7e8 f8bb 	bl	80019a8 <_exit>
	...

08019834 <_fstat_r>:
 8019834:	b538      	push	{r3, r4, r5, lr}
 8019836:	4d07      	ldr	r5, [pc, #28]	; (8019854 <_fstat_r+0x20>)
 8019838:	2300      	movs	r3, #0
 801983a:	4604      	mov	r4, r0
 801983c:	4608      	mov	r0, r1
 801983e:	4611      	mov	r1, r2
 8019840:	602b      	str	r3, [r5, #0]
 8019842:	f7e8 f900 	bl	8001a46 <_fstat>
 8019846:	1c43      	adds	r3, r0, #1
 8019848:	d102      	bne.n	8019850 <_fstat_r+0x1c>
 801984a:	682b      	ldr	r3, [r5, #0]
 801984c:	b103      	cbz	r3, 8019850 <_fstat_r+0x1c>
 801984e:	6023      	str	r3, [r4, #0]
 8019850:	bd38      	pop	{r3, r4, r5, pc}
 8019852:	bf00      	nop
 8019854:	2000db6c 	.word	0x2000db6c

08019858 <_isatty_r>:
 8019858:	b538      	push	{r3, r4, r5, lr}
 801985a:	4d06      	ldr	r5, [pc, #24]	; (8019874 <_isatty_r+0x1c>)
 801985c:	2300      	movs	r3, #0
 801985e:	4604      	mov	r4, r0
 8019860:	4608      	mov	r0, r1
 8019862:	602b      	str	r3, [r5, #0]
 8019864:	f7e8 f8ff 	bl	8001a66 <_isatty>
 8019868:	1c43      	adds	r3, r0, #1
 801986a:	d102      	bne.n	8019872 <_isatty_r+0x1a>
 801986c:	682b      	ldr	r3, [r5, #0]
 801986e:	b103      	cbz	r3, 8019872 <_isatty_r+0x1a>
 8019870:	6023      	str	r3, [r4, #0]
 8019872:	bd38      	pop	{r3, r4, r5, pc}
 8019874:	2000db6c 	.word	0x2000db6c

08019878 <_realloc_r>:
 8019878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801987a:	4607      	mov	r7, r0
 801987c:	4614      	mov	r4, r2
 801987e:	460e      	mov	r6, r1
 8019880:	b921      	cbnz	r1, 801988c <_realloc_r+0x14>
 8019882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019886:	4611      	mov	r1, r2
 8019888:	f7fe bf14 	b.w	80186b4 <_malloc_r>
 801988c:	b922      	cbnz	r2, 8019898 <_realloc_r+0x20>
 801988e:	f7fe fec1 	bl	8018614 <_free_r>
 8019892:	4625      	mov	r5, r4
 8019894:	4628      	mov	r0, r5
 8019896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019898:	f000 f858 	bl	801994c <_malloc_usable_size_r>
 801989c:	42a0      	cmp	r0, r4
 801989e:	d20f      	bcs.n	80198c0 <_realloc_r+0x48>
 80198a0:	4621      	mov	r1, r4
 80198a2:	4638      	mov	r0, r7
 80198a4:	f7fe ff06 	bl	80186b4 <_malloc_r>
 80198a8:	4605      	mov	r5, r0
 80198aa:	2800      	cmp	r0, #0
 80198ac:	d0f2      	beq.n	8019894 <_realloc_r+0x1c>
 80198ae:	4631      	mov	r1, r6
 80198b0:	4622      	mov	r2, r4
 80198b2:	f7fe fe7f 	bl	80185b4 <memcpy>
 80198b6:	4631      	mov	r1, r6
 80198b8:	4638      	mov	r0, r7
 80198ba:	f7fe feab 	bl	8018614 <_free_r>
 80198be:	e7e9      	b.n	8019894 <_realloc_r+0x1c>
 80198c0:	4635      	mov	r5, r6
 80198c2:	e7e7      	b.n	8019894 <_realloc_r+0x1c>

080198c4 <_raise_r>:
 80198c4:	291f      	cmp	r1, #31
 80198c6:	b538      	push	{r3, r4, r5, lr}
 80198c8:	4604      	mov	r4, r0
 80198ca:	460d      	mov	r5, r1
 80198cc:	d904      	bls.n	80198d8 <_raise_r+0x14>
 80198ce:	2316      	movs	r3, #22
 80198d0:	6003      	str	r3, [r0, #0]
 80198d2:	f04f 30ff 	mov.w	r0, #4294967295
 80198d6:	bd38      	pop	{r3, r4, r5, pc}
 80198d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80198da:	b112      	cbz	r2, 80198e2 <_raise_r+0x1e>
 80198dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80198e0:	b94b      	cbnz	r3, 80198f6 <_raise_r+0x32>
 80198e2:	4620      	mov	r0, r4
 80198e4:	f000 f830 	bl	8019948 <_getpid_r>
 80198e8:	462a      	mov	r2, r5
 80198ea:	4601      	mov	r1, r0
 80198ec:	4620      	mov	r0, r4
 80198ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198f2:	f000 b817 	b.w	8019924 <_kill_r>
 80198f6:	2b01      	cmp	r3, #1
 80198f8:	d00a      	beq.n	8019910 <_raise_r+0x4c>
 80198fa:	1c59      	adds	r1, r3, #1
 80198fc:	d103      	bne.n	8019906 <_raise_r+0x42>
 80198fe:	2316      	movs	r3, #22
 8019900:	6003      	str	r3, [r0, #0]
 8019902:	2001      	movs	r0, #1
 8019904:	e7e7      	b.n	80198d6 <_raise_r+0x12>
 8019906:	2400      	movs	r4, #0
 8019908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801990c:	4628      	mov	r0, r5
 801990e:	4798      	blx	r3
 8019910:	2000      	movs	r0, #0
 8019912:	e7e0      	b.n	80198d6 <_raise_r+0x12>

08019914 <raise>:
 8019914:	4b02      	ldr	r3, [pc, #8]	; (8019920 <raise+0xc>)
 8019916:	4601      	mov	r1, r0
 8019918:	6818      	ldr	r0, [r3, #0]
 801991a:	f7ff bfd3 	b.w	80198c4 <_raise_r>
 801991e:	bf00      	nop
 8019920:	20000020 	.word	0x20000020

08019924 <_kill_r>:
 8019924:	b538      	push	{r3, r4, r5, lr}
 8019926:	4d07      	ldr	r5, [pc, #28]	; (8019944 <_kill_r+0x20>)
 8019928:	2300      	movs	r3, #0
 801992a:	4604      	mov	r4, r0
 801992c:	4608      	mov	r0, r1
 801992e:	4611      	mov	r1, r2
 8019930:	602b      	str	r3, [r5, #0]
 8019932:	f7e8 f827 	bl	8001984 <_kill>
 8019936:	1c43      	adds	r3, r0, #1
 8019938:	d102      	bne.n	8019940 <_kill_r+0x1c>
 801993a:	682b      	ldr	r3, [r5, #0]
 801993c:	b103      	cbz	r3, 8019940 <_kill_r+0x1c>
 801993e:	6023      	str	r3, [r4, #0]
 8019940:	bd38      	pop	{r3, r4, r5, pc}
 8019942:	bf00      	nop
 8019944:	2000db6c 	.word	0x2000db6c

08019948 <_getpid_r>:
 8019948:	f7e8 b814 	b.w	8001974 <_getpid>

0801994c <_malloc_usable_size_r>:
 801994c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019950:	1f18      	subs	r0, r3, #4
 8019952:	2b00      	cmp	r3, #0
 8019954:	bfbc      	itt	lt
 8019956:	580b      	ldrlt	r3, [r1, r0]
 8019958:	18c0      	addlt	r0, r0, r3
 801995a:	4770      	bx	lr

0801995c <_init>:
 801995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801995e:	bf00      	nop
 8019960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019962:	bc08      	pop	{r3}
 8019964:	469e      	mov	lr, r3
 8019966:	4770      	bx	lr

08019968 <_fini>:
 8019968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801996a:	bf00      	nop
 801996c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801996e:	bc08      	pop	{r3}
 8019970:	469e      	mov	lr, r3
 8019972:	4770      	bx	lr
